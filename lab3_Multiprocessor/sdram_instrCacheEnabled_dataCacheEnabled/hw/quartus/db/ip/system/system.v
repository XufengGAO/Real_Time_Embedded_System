// system.v

// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module system (
		input  wire        clk_clk,                          //                       clk.clk
		inout  wire [7:0]  led_0_output_parport,             //              led_0_output.parport
		inout  wire [7:0]  led_1_output_parport,             //              led_1_output.parport
		output wire [7:0]  pio_0_external_connection_export, // pio_0_external_connection.export
		output wire [7:0]  pio_1_external_connection_export, // pio_1_external_connection.export
		output wire        pll_0_outclk2_clk,                //             pll_0_outclk2.clk
		input  wire        reset_reset_n,                    //                     reset.reset_n
		output wire [12:0] sdram_controller_0_wire_addr,     //   sdram_controller_0_wire.addr
		output wire [1:0]  sdram_controller_0_wire_ba,       //                          .ba
		output wire        sdram_controller_0_wire_cas_n,    //                          .cas_n
		output wire        sdram_controller_0_wire_cke,      //                          .cke
		output wire        sdram_controller_0_wire_cs_n,     //                          .cs_n
		inout  wire [15:0] sdram_controller_0_wire_dq,       //                          .dq
		output wire [1:0]  sdram_controller_0_wire_dqm,      //                          .dqm
		output wire        sdram_controller_0_wire_ras_n,    //                          .ras_n
		output wire        sdram_controller_0_wire_we_n,     //                          .we_n
		inout  wire [7:0]  shared_pio_output_parport         //         shared_pio_output.parport
	);

	wire         pll_0_outclk0_clk;                                            // pll_0:outclk_0 -> [CPU_0:clk, irq_mapper:clk, irq_synchronizer:sender_clk, irq_synchronizer_001:sender_clk, irq_synchronizer_002:sender_clk, mm_interconnect_0:pll_0_outclk0_clk, rst_controller:clk, rst_controller_006:clk, sysid:clock]
	wire         pll_0_outclk1_clk;                                            // pll_0:outclk_1 -> [mm_interconnect_0:pll_0_outclk1_clk, rst_controller_004:clk, sdram_controller:clk]
	wire  [31:0] cpu_0_data_master_readdata;                                   // mm_interconnect_0:CPU_0_data_master_readdata -> CPU_0:d_readdata
	wire         cpu_0_data_master_waitrequest;                                // mm_interconnect_0:CPU_0_data_master_waitrequest -> CPU_0:d_waitrequest
	wire         cpu_0_data_master_debugaccess;                                // CPU_0:debug_mem_slave_debugaccess_to_roms -> mm_interconnect_0:CPU_0_data_master_debugaccess
	wire  [26:0] cpu_0_data_master_address;                                    // CPU_0:d_address -> mm_interconnect_0:CPU_0_data_master_address
	wire   [3:0] cpu_0_data_master_byteenable;                                 // CPU_0:d_byteenable -> mm_interconnect_0:CPU_0_data_master_byteenable
	wire         cpu_0_data_master_read;                                       // CPU_0:d_read -> mm_interconnect_0:CPU_0_data_master_read
	wire         cpu_0_data_master_readdatavalid;                              // mm_interconnect_0:CPU_0_data_master_readdatavalid -> CPU_0:d_readdatavalid
	wire         cpu_0_data_master_write;                                      // CPU_0:d_write -> mm_interconnect_0:CPU_0_data_master_write
	wire  [31:0] cpu_0_data_master_writedata;                                  // CPU_0:d_writedata -> mm_interconnect_0:CPU_0_data_master_writedata
	wire  [31:0] cpu_1_data_master_readdata;                                   // mm_interconnect_0:CPU_1_data_master_readdata -> CPU_1:d_readdata
	wire         cpu_1_data_master_waitrequest;                                // mm_interconnect_0:CPU_1_data_master_waitrequest -> CPU_1:d_waitrequest
	wire         cpu_1_data_master_debugaccess;                                // CPU_1:debug_mem_slave_debugaccess_to_roms -> mm_interconnect_0:CPU_1_data_master_debugaccess
	wire  [26:0] cpu_1_data_master_address;                                    // CPU_1:d_address -> mm_interconnect_0:CPU_1_data_master_address
	wire   [3:0] cpu_1_data_master_byteenable;                                 // CPU_1:d_byteenable -> mm_interconnect_0:CPU_1_data_master_byteenable
	wire         cpu_1_data_master_read;                                       // CPU_1:d_read -> mm_interconnect_0:CPU_1_data_master_read
	wire         cpu_1_data_master_readdatavalid;                              // mm_interconnect_0:CPU_1_data_master_readdatavalid -> CPU_1:d_readdatavalid
	wire         cpu_1_data_master_write;                                      // CPU_1:d_write -> mm_interconnect_0:CPU_1_data_master_write
	wire  [31:0] cpu_1_data_master_writedata;                                  // CPU_1:d_writedata -> mm_interconnect_0:CPU_1_data_master_writedata
	wire  [31:0] cpu_1_instruction_master_readdata;                            // mm_interconnect_0:CPU_1_instruction_master_readdata -> CPU_1:i_readdata
	wire         cpu_1_instruction_master_waitrequest;                         // mm_interconnect_0:CPU_1_instruction_master_waitrequest -> CPU_1:i_waitrequest
	wire  [26:0] cpu_1_instruction_master_address;                             // CPU_1:i_address -> mm_interconnect_0:CPU_1_instruction_master_address
	wire         cpu_1_instruction_master_read;                                // CPU_1:i_read -> mm_interconnect_0:CPU_1_instruction_master_read
	wire         cpu_1_instruction_master_readdatavalid;                       // mm_interconnect_0:CPU_1_instruction_master_readdatavalid -> CPU_1:i_readdatavalid
	wire  [31:0] cpu_0_instruction_master_readdata;                            // mm_interconnect_0:CPU_0_instruction_master_readdata -> CPU_0:i_readdata
	wire         cpu_0_instruction_master_waitrequest;                         // mm_interconnect_0:CPU_0_instruction_master_waitrequest -> CPU_0:i_waitrequest
	wire  [26:0] cpu_0_instruction_master_address;                             // CPU_0:i_address -> mm_interconnect_0:CPU_0_instruction_master_address
	wire         cpu_0_instruction_master_read;                                // CPU_0:i_read -> mm_interconnect_0:CPU_0_instruction_master_read
	wire         cpu_0_instruction_master_readdatavalid;                       // mm_interconnect_0:CPU_0_instruction_master_readdatavalid -> CPU_0:i_readdatavalid
	wire         mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_chipselect;   // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_chipselect -> jtag_uart_0:av_chipselect
	wire  [31:0] mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_readdata;     // jtag_uart_0:av_readdata -> mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_readdata
	wire         mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_waitrequest;  // jtag_uart_0:av_waitrequest -> mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_waitrequest
	wire   [0:0] mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_address;      // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_address -> jtag_uart_0:av_address
	wire         mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_read;         // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_read -> jtag_uart_0:av_read_n
	wire         mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_write;        // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_write -> jtag_uart_0:av_write_n
	wire  [31:0] mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_writedata;    // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_writedata -> jtag_uart_0:av_writedata
	wire  [31:0] mm_interconnect_0_custom_counter_0_avalon_slave_0_readdata;   // Custom_counter_0:ReadData -> mm_interconnect_0:Custom_counter_0_avalon_slave_0_readdata
	wire   [1:0] mm_interconnect_0_custom_counter_0_avalon_slave_0_address;    // mm_interconnect_0:Custom_counter_0_avalon_slave_0_address -> Custom_counter_0:Address
	wire         mm_interconnect_0_custom_counter_0_avalon_slave_0_read;       // mm_interconnect_0:Custom_counter_0_avalon_slave_0_read -> Custom_counter_0:Read
	wire         mm_interconnect_0_custom_counter_0_avalon_slave_0_write;      // mm_interconnect_0:Custom_counter_0_avalon_slave_0_write -> Custom_counter_0:Write
	wire  [31:0] mm_interconnect_0_custom_counter_0_avalon_slave_0_writedata;  // mm_interconnect_0:Custom_counter_0_avalon_slave_0_writedata -> Custom_counter_0:WriteData
	wire   [7:0] mm_interconnect_0_led_0_avalon_slave_0_readdata;              // LED_0:ReadData -> mm_interconnect_0:LED_0_avalon_slave_0_readdata
	wire   [2:0] mm_interconnect_0_led_0_avalon_slave_0_address;               // mm_interconnect_0:LED_0_avalon_slave_0_address -> LED_0:Address
	wire         mm_interconnect_0_led_0_avalon_slave_0_read;                  // mm_interconnect_0:LED_0_avalon_slave_0_read -> LED_0:Read
	wire         mm_interconnect_0_led_0_avalon_slave_0_write;                 // mm_interconnect_0:LED_0_avalon_slave_0_write -> LED_0:Write
	wire   [7:0] mm_interconnect_0_led_0_avalon_slave_0_writedata;             // mm_interconnect_0:LED_0_avalon_slave_0_writedata -> LED_0:WriteData
	wire   [7:0] mm_interconnect_0_shared_pio_avalon_slave_0_readdata;         // shared_PIO:ReadData -> mm_interconnect_0:shared_PIO_avalon_slave_0_readdata
	wire   [2:0] mm_interconnect_0_shared_pio_avalon_slave_0_address;          // mm_interconnect_0:shared_PIO_avalon_slave_0_address -> shared_PIO:Address
	wire         mm_interconnect_0_shared_pio_avalon_slave_0_read;             // mm_interconnect_0:shared_PIO_avalon_slave_0_read -> shared_PIO:Read
	wire         mm_interconnect_0_shared_pio_avalon_slave_0_write;            // mm_interconnect_0:shared_PIO_avalon_slave_0_write -> shared_PIO:Write
	wire   [7:0] mm_interconnect_0_shared_pio_avalon_slave_0_writedata;        // mm_interconnect_0:shared_PIO_avalon_slave_0_writedata -> shared_PIO:WriteData
	wire  [31:0] mm_interconnect_0_shared_mailbox_avmm_msg_sender_readdata;    // shared_mailbox:avmm_snd_readdata -> mm_interconnect_0:shared_mailbox_avmm_msg_sender_readdata
	wire         mm_interconnect_0_shared_mailbox_avmm_msg_sender_waitrequest; // shared_mailbox:avmm_snd_waitrequest -> mm_interconnect_0:shared_mailbox_avmm_msg_sender_waitrequest
	wire   [1:0] mm_interconnect_0_shared_mailbox_avmm_msg_sender_address;     // mm_interconnect_0:shared_mailbox_avmm_msg_sender_address -> shared_mailbox:avmm_snd_address
	wire         mm_interconnect_0_shared_mailbox_avmm_msg_sender_read;        // mm_interconnect_0:shared_mailbox_avmm_msg_sender_read -> shared_mailbox:avmm_snd_read
	wire         mm_interconnect_0_shared_mailbox_avmm_msg_sender_write;       // mm_interconnect_0:shared_mailbox_avmm_msg_sender_write -> shared_mailbox:avmm_snd_write
	wire  [31:0] mm_interconnect_0_shared_mailbox_avmm_msg_sender_writedata;   // mm_interconnect_0:shared_mailbox_avmm_msg_sender_writedata -> shared_mailbox:avmm_snd_writedata
	wire  [31:0] mm_interconnect_0_sysid_control_slave_readdata;               // sysid:readdata -> mm_interconnect_0:sysid_control_slave_readdata
	wire   [0:0] mm_interconnect_0_sysid_control_slave_address;                // mm_interconnect_0:sysid_control_slave_address -> sysid:address
	wire  [31:0] mm_interconnect_0_perc_0_control_slave_readdata;              // PERC_0:readdata -> mm_interconnect_0:PERC_0_control_slave_readdata
	wire   [3:0] mm_interconnect_0_perc_0_control_slave_address;               // mm_interconnect_0:PERC_0_control_slave_address -> PERC_0:address
	wire         mm_interconnect_0_perc_0_control_slave_begintransfer;         // mm_interconnect_0:PERC_0_control_slave_begintransfer -> PERC_0:begintransfer
	wire         mm_interconnect_0_perc_0_control_slave_write;                 // mm_interconnect_0:PERC_0_control_slave_write -> PERC_0:write
	wire  [31:0] mm_interconnect_0_perc_0_control_slave_writedata;             // mm_interconnect_0:PERC_0_control_slave_writedata -> PERC_0:writedata
	wire  [31:0] mm_interconnect_0_cpu_0_debug_mem_slave_readdata;             // CPU_0:debug_mem_slave_readdata -> mm_interconnect_0:CPU_0_debug_mem_slave_readdata
	wire         mm_interconnect_0_cpu_0_debug_mem_slave_waitrequest;          // CPU_0:debug_mem_slave_waitrequest -> mm_interconnect_0:CPU_0_debug_mem_slave_waitrequest
	wire         mm_interconnect_0_cpu_0_debug_mem_slave_debugaccess;          // mm_interconnect_0:CPU_0_debug_mem_slave_debugaccess -> CPU_0:debug_mem_slave_debugaccess
	wire   [8:0] mm_interconnect_0_cpu_0_debug_mem_slave_address;              // mm_interconnect_0:CPU_0_debug_mem_slave_address -> CPU_0:debug_mem_slave_address
	wire         mm_interconnect_0_cpu_0_debug_mem_slave_read;                 // mm_interconnect_0:CPU_0_debug_mem_slave_read -> CPU_0:debug_mem_slave_read
	wire   [3:0] mm_interconnect_0_cpu_0_debug_mem_slave_byteenable;           // mm_interconnect_0:CPU_0_debug_mem_slave_byteenable -> CPU_0:debug_mem_slave_byteenable
	wire         mm_interconnect_0_cpu_0_debug_mem_slave_write;                // mm_interconnect_0:CPU_0_debug_mem_slave_write -> CPU_0:debug_mem_slave_write
	wire  [31:0] mm_interconnect_0_cpu_0_debug_mem_slave_writedata;            // mm_interconnect_0:CPU_0_debug_mem_slave_writedata -> CPU_0:debug_mem_slave_writedata
	wire         mm_interconnect_0_sram_0_s1_chipselect;                       // mm_interconnect_0:SRAM_0_s1_chipselect -> SRAM_0:chipselect
	wire  [31:0] mm_interconnect_0_sram_0_s1_readdata;                         // SRAM_0:readdata -> mm_interconnect_0:SRAM_0_s1_readdata
	wire  [14:0] mm_interconnect_0_sram_0_s1_address;                          // mm_interconnect_0:SRAM_0_s1_address -> SRAM_0:address
	wire   [3:0] mm_interconnect_0_sram_0_s1_byteenable;                       // mm_interconnect_0:SRAM_0_s1_byteenable -> SRAM_0:byteenable
	wire         mm_interconnect_0_sram_0_s1_write;                            // mm_interconnect_0:SRAM_0_s1_write -> SRAM_0:write
	wire  [31:0] mm_interconnect_0_sram_0_s1_writedata;                        // mm_interconnect_0:SRAM_0_s1_writedata -> SRAM_0:writedata
	wire         mm_interconnect_0_sram_0_s1_clken;                            // mm_interconnect_0:SRAM_0_s1_clken -> SRAM_0:clken
	wire         mm_interconnect_0_sdram_controller_s1_chipselect;             // mm_interconnect_0:sdram_controller_s1_chipselect -> sdram_controller:az_cs
	wire  [15:0] mm_interconnect_0_sdram_controller_s1_readdata;               // sdram_controller:za_data -> mm_interconnect_0:sdram_controller_s1_readdata
	wire         mm_interconnect_0_sdram_controller_s1_waitrequest;            // sdram_controller:za_waitrequest -> mm_interconnect_0:sdram_controller_s1_waitrequest
	wire  [24:0] mm_interconnect_0_sdram_controller_s1_address;                // mm_interconnect_0:sdram_controller_s1_address -> sdram_controller:az_addr
	wire         mm_interconnect_0_sdram_controller_s1_read;                   // mm_interconnect_0:sdram_controller_s1_read -> sdram_controller:az_rd_n
	wire   [1:0] mm_interconnect_0_sdram_controller_s1_byteenable;             // mm_interconnect_0:sdram_controller_s1_byteenable -> sdram_controller:az_be_n
	wire         mm_interconnect_0_sdram_controller_s1_readdatavalid;          // sdram_controller:za_valid -> mm_interconnect_0:sdram_controller_s1_readdatavalid
	wire         mm_interconnect_0_sdram_controller_s1_write;                  // mm_interconnect_0:sdram_controller_s1_write -> sdram_controller:az_wr_n
	wire  [15:0] mm_interconnect_0_sdram_controller_s1_writedata;              // mm_interconnect_0:sdram_controller_s1_writedata -> sdram_controller:az_data
	wire         mm_interconnect_0_timer_0_s1_chipselect;                      // mm_interconnect_0:timer_0_s1_chipselect -> timer_0:chipselect
	wire  [15:0] mm_interconnect_0_timer_0_s1_readdata;                        // timer_0:readdata -> mm_interconnect_0:timer_0_s1_readdata
	wire   [2:0] mm_interconnect_0_timer_0_s1_address;                         // mm_interconnect_0:timer_0_s1_address -> timer_0:address
	wire         mm_interconnect_0_timer_0_s1_write;                           // mm_interconnect_0:timer_0_s1_write -> timer_0:write_n
	wire  [15:0] mm_interconnect_0_timer_0_s1_writedata;                       // mm_interconnect_0:timer_0_s1_writedata -> timer_0:writedata
	wire         mm_interconnect_0_shared_mutex_pio_s1_chipselect;             // mm_interconnect_0:shared_mutex_PIO_s1_chipselect -> shared_mutex_PIO:chipselect
	wire  [31:0] mm_interconnect_0_shared_mutex_pio_s1_readdata;               // shared_mutex_PIO:data_to_cpu -> mm_interconnect_0:shared_mutex_PIO_s1_readdata
	wire   [0:0] mm_interconnect_0_shared_mutex_pio_s1_address;                // mm_interconnect_0:shared_mutex_PIO_s1_address -> shared_mutex_PIO:address
	wire         mm_interconnect_0_shared_mutex_pio_s1_read;                   // mm_interconnect_0:shared_mutex_PIO_s1_read -> shared_mutex_PIO:read
	wire         mm_interconnect_0_shared_mutex_pio_s1_write;                  // mm_interconnect_0:shared_mutex_PIO_s1_write -> shared_mutex_PIO:write
	wire  [31:0] mm_interconnect_0_shared_mutex_pio_s1_writedata;              // mm_interconnect_0:shared_mutex_PIO_s1_writedata -> shared_mutex_PIO:data_from_cpu
	wire         mm_interconnect_0_pio_0_s1_chipselect;                        // mm_interconnect_0:pio_0_s1_chipselect -> pio_0:chipselect
	wire  [31:0] mm_interconnect_0_pio_0_s1_readdata;                          // pio_0:readdata -> mm_interconnect_0:pio_0_s1_readdata
	wire   [1:0] mm_interconnect_0_pio_0_s1_address;                           // mm_interconnect_0:pio_0_s1_address -> pio_0:address
	wire         mm_interconnect_0_pio_0_s1_write;                             // mm_interconnect_0:pio_0_s1_write -> pio_0:write_n
	wire  [31:0] mm_interconnect_0_pio_0_s1_writedata;                         // mm_interconnect_0:pio_0_s1_writedata -> pio_0:writedata
	wire         mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_chipselect;   // mm_interconnect_0:jtag_uart_1_avalon_jtag_slave_chipselect -> jtag_uart_1:av_chipselect
	wire  [31:0] mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_readdata;     // jtag_uart_1:av_readdata -> mm_interconnect_0:jtag_uart_1_avalon_jtag_slave_readdata
	wire         mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_waitrequest;  // jtag_uart_1:av_waitrequest -> mm_interconnect_0:jtag_uart_1_avalon_jtag_slave_waitrequest
	wire   [0:0] mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_address;      // mm_interconnect_0:jtag_uart_1_avalon_jtag_slave_address -> jtag_uart_1:av_address
	wire         mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_read;         // mm_interconnect_0:jtag_uart_1_avalon_jtag_slave_read -> jtag_uart_1:av_read_n
	wire         mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_write;        // mm_interconnect_0:jtag_uart_1_avalon_jtag_slave_write -> jtag_uart_1:av_write_n
	wire  [31:0] mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_writedata;    // mm_interconnect_0:jtag_uart_1_avalon_jtag_slave_writedata -> jtag_uart_1:av_writedata
	wire  [31:0] mm_interconnect_0_custom_counter_1_avalon_slave_0_readdata;   // Custom_counter_1:ReadData -> mm_interconnect_0:Custom_counter_1_avalon_slave_0_readdata
	wire   [1:0] mm_interconnect_0_custom_counter_1_avalon_slave_0_address;    // mm_interconnect_0:Custom_counter_1_avalon_slave_0_address -> Custom_counter_1:Address
	wire         mm_interconnect_0_custom_counter_1_avalon_slave_0_read;       // mm_interconnect_0:Custom_counter_1_avalon_slave_0_read -> Custom_counter_1:Read
	wire         mm_interconnect_0_custom_counter_1_avalon_slave_0_write;      // mm_interconnect_0:Custom_counter_1_avalon_slave_0_write -> Custom_counter_1:Write
	wire  [31:0] mm_interconnect_0_custom_counter_1_avalon_slave_0_writedata;  // mm_interconnect_0:Custom_counter_1_avalon_slave_0_writedata -> Custom_counter_1:WriteData
	wire   [7:0] mm_interconnect_0_led_1_avalon_slave_0_readdata;              // LED_1:ReadData -> mm_interconnect_0:LED_1_avalon_slave_0_readdata
	wire   [2:0] mm_interconnect_0_led_1_avalon_slave_0_address;               // mm_interconnect_0:LED_1_avalon_slave_0_address -> LED_1:Address
	wire         mm_interconnect_0_led_1_avalon_slave_0_read;                  // mm_interconnect_0:LED_1_avalon_slave_0_read -> LED_1:Read
	wire         mm_interconnect_0_led_1_avalon_slave_0_write;                 // mm_interconnect_0:LED_1_avalon_slave_0_write -> LED_1:Write
	wire   [7:0] mm_interconnect_0_led_1_avalon_slave_0_writedata;             // mm_interconnect_0:LED_1_avalon_slave_0_writedata -> LED_1:WriteData
	wire  [31:0] mm_interconnect_0_shared_mailbox_avmm_msg_receiver_readdata;  // shared_mailbox:avmm_rcv_readdata -> mm_interconnect_0:shared_mailbox_avmm_msg_receiver_readdata
	wire   [1:0] mm_interconnect_0_shared_mailbox_avmm_msg_receiver_address;   // mm_interconnect_0:shared_mailbox_avmm_msg_receiver_address -> shared_mailbox:avmm_rcv_address
	wire         mm_interconnect_0_shared_mailbox_avmm_msg_receiver_read;      // mm_interconnect_0:shared_mailbox_avmm_msg_receiver_read -> shared_mailbox:avmm_rcv_read
	wire         mm_interconnect_0_shared_mailbox_avmm_msg_receiver_write;     // mm_interconnect_0:shared_mailbox_avmm_msg_receiver_write -> shared_mailbox:avmm_rcv_write
	wire  [31:0] mm_interconnect_0_shared_mailbox_avmm_msg_receiver_writedata; // mm_interconnect_0:shared_mailbox_avmm_msg_receiver_writedata -> shared_mailbox:avmm_rcv_writedata
	wire  [31:0] mm_interconnect_0_perc_1_control_slave_readdata;              // PERC_1:readdata -> mm_interconnect_0:PERC_1_control_slave_readdata
	wire   [3:0] mm_interconnect_0_perc_1_control_slave_address;               // mm_interconnect_0:PERC_1_control_slave_address -> PERC_1:address
	wire         mm_interconnect_0_perc_1_control_slave_begintransfer;         // mm_interconnect_0:PERC_1_control_slave_begintransfer -> PERC_1:begintransfer
	wire         mm_interconnect_0_perc_1_control_slave_write;                 // mm_interconnect_0:PERC_1_control_slave_write -> PERC_1:write
	wire  [31:0] mm_interconnect_0_perc_1_control_slave_writedata;             // mm_interconnect_0:PERC_1_control_slave_writedata -> PERC_1:writedata
	wire  [31:0] mm_interconnect_0_cpu_1_debug_mem_slave_readdata;             // CPU_1:debug_mem_slave_readdata -> mm_interconnect_0:CPU_1_debug_mem_slave_readdata
	wire         mm_interconnect_0_cpu_1_debug_mem_slave_waitrequest;          // CPU_1:debug_mem_slave_waitrequest -> mm_interconnect_0:CPU_1_debug_mem_slave_waitrequest
	wire         mm_interconnect_0_cpu_1_debug_mem_slave_debugaccess;          // mm_interconnect_0:CPU_1_debug_mem_slave_debugaccess -> CPU_1:debug_mem_slave_debugaccess
	wire   [8:0] mm_interconnect_0_cpu_1_debug_mem_slave_address;              // mm_interconnect_0:CPU_1_debug_mem_slave_address -> CPU_1:debug_mem_slave_address
	wire         mm_interconnect_0_cpu_1_debug_mem_slave_read;                 // mm_interconnect_0:CPU_1_debug_mem_slave_read -> CPU_1:debug_mem_slave_read
	wire   [3:0] mm_interconnect_0_cpu_1_debug_mem_slave_byteenable;           // mm_interconnect_0:CPU_1_debug_mem_slave_byteenable -> CPU_1:debug_mem_slave_byteenable
	wire         mm_interconnect_0_cpu_1_debug_mem_slave_write;                // mm_interconnect_0:CPU_1_debug_mem_slave_write -> CPU_1:debug_mem_slave_write
	wire  [31:0] mm_interconnect_0_cpu_1_debug_mem_slave_writedata;            // mm_interconnect_0:CPU_1_debug_mem_slave_writedata -> CPU_1:debug_mem_slave_writedata
	wire         mm_interconnect_0_sram_1_s1_chipselect;                       // mm_interconnect_0:SRAM_1_s1_chipselect -> SRAM_1:chipselect
	wire  [31:0] mm_interconnect_0_sram_1_s1_readdata;                         // SRAM_1:readdata -> mm_interconnect_0:SRAM_1_s1_readdata
	wire  [14:0] mm_interconnect_0_sram_1_s1_address;                          // mm_interconnect_0:SRAM_1_s1_address -> SRAM_1:address
	wire   [3:0] mm_interconnect_0_sram_1_s1_byteenable;                       // mm_interconnect_0:SRAM_1_s1_byteenable -> SRAM_1:byteenable
	wire         mm_interconnect_0_sram_1_s1_write;                            // mm_interconnect_0:SRAM_1_s1_write -> SRAM_1:write
	wire  [31:0] mm_interconnect_0_sram_1_s1_writedata;                        // mm_interconnect_0:SRAM_1_s1_writedata -> SRAM_1:writedata
	wire         mm_interconnect_0_sram_1_s1_clken;                            // mm_interconnect_0:SRAM_1_s1_clken -> SRAM_1:clken
	wire         mm_interconnect_0_timer_1_s1_chipselect;                      // mm_interconnect_0:timer_1_s1_chipselect -> timer_1:chipselect
	wire  [15:0] mm_interconnect_0_timer_1_s1_readdata;                        // timer_1:readdata -> mm_interconnect_0:timer_1_s1_readdata
	wire   [2:0] mm_interconnect_0_timer_1_s1_address;                         // mm_interconnect_0:timer_1_s1_address -> timer_1:address
	wire         mm_interconnect_0_timer_1_s1_write;                           // mm_interconnect_0:timer_1_s1_write -> timer_1:write_n
	wire  [15:0] mm_interconnect_0_timer_1_s1_writedata;                       // mm_interconnect_0:timer_1_s1_writedata -> timer_1:writedata
	wire         mm_interconnect_0_pio_1_s1_chipselect;                        // mm_interconnect_0:pio_1_s1_chipselect -> pio_1:chipselect
	wire  [31:0] mm_interconnect_0_pio_1_s1_readdata;                          // pio_1:readdata -> mm_interconnect_0:pio_1_s1_readdata
	wire   [1:0] mm_interconnect_0_pio_1_s1_address;                           // mm_interconnect_0:pio_1_s1_address -> pio_1:address
	wire         mm_interconnect_0_pio_1_s1_write;                             // mm_interconnect_0:pio_1_s1_write -> pio_1:write_n
	wire  [31:0] mm_interconnect_0_pio_1_s1_writedata;                         // mm_interconnect_0:pio_1_s1_writedata -> pio_1:writedata
	wire  [31:0] cpu_0_irq_irq;                                                // irq_mapper:sender_irq -> CPU_0:irq
	wire         irq_mapper_001_receiver0_irq;                                 // LED_1:irq -> irq_mapper_001:receiver0_irq
	wire         irq_mapper_001_receiver1_irq;                                 // timer_1:irq -> irq_mapper_001:receiver1_irq
	wire         irq_mapper_001_receiver2_irq;                                 // jtag_uart_1:av_irq -> irq_mapper_001:receiver2_irq
	wire  [31:0] cpu_1_irq_irq;                                                // irq_mapper_001:sender_irq -> CPU_1:irq
	wire         irq_mapper_receiver0_irq;                                     // irq_synchronizer:sender_irq -> irq_mapper:receiver0_irq
	wire   [0:0] irq_synchronizer_receiver_irq;                                // LED_0:irq -> irq_synchronizer:receiver_irq
	wire         irq_mapper_receiver1_irq;                                     // irq_synchronizer_001:sender_irq -> irq_mapper:receiver1_irq
	wire   [0:0] irq_synchronizer_001_receiver_irq;                            // timer_0:irq -> irq_synchronizer_001:receiver_irq
	wire         irq_mapper_receiver2_irq;                                     // irq_synchronizer_002:sender_irq -> irq_mapper:receiver2_irq
	wire   [0:0] irq_synchronizer_002_receiver_irq;                            // jtag_uart_0:av_irq -> irq_synchronizer_002:receiver_irq
	wire         rst_controller_reset_out_reset;                               // rst_controller:reset_out -> [CPU_0:reset_n, irq_mapper:reset, irq_synchronizer:sender_reset, irq_synchronizer_001:sender_reset, irq_synchronizer_002:sender_reset, mm_interconnect_0:CPU_0_reset_reset_bridge_in_reset_reset, rst_translator:in_reset]
	wire         rst_controller_reset_out_reset_req;                           // rst_controller:reset_req -> [CPU_0:reset_req, rst_translator:reset_req_in]
	wire         cpu_0_debug_reset_request_reset;                              // CPU_0:debug_reset_request -> [rst_controller:reset_in1, rst_controller_002:reset_in1, rst_controller_003:reset_in1, rst_controller_004:reset_in1, rst_controller_005:reset_in1, rst_controller_006:reset_in1]
	wire         rst_controller_001_reset_out_reset;                           // rst_controller_001:reset_out -> [CPU_1:reset_n, Custom_counter_1:nReset, LED_1:nReset, PERC_1:reset_n, SRAM_1:reset, irq_mapper_001:reset, jtag_uart_1:rst_n, mm_interconnect_0:CPU_1_reset_reset_bridge_in_reset_reset, pio_1:reset_n, rst_translator_001:in_reset, timer_1:reset_n]
	wire         rst_controller_001_reset_out_reset_req;                       // rst_controller_001:reset_req -> [CPU_1:reset_req, SRAM_1:reset_req, rst_translator_001:reset_req_in]
	wire         cpu_1_debug_reset_request_reset;                              // CPU_1:debug_reset_request -> [rst_controller_001:reset_in1, rst_controller_003:reset_in2, rst_controller_004:reset_in2, rst_controller_005:reset_in2, rst_controller_006:reset_in2]
	wire         rst_controller_002_reset_out_reset;                           // rst_controller_002:reset_out -> [Custom_counter_0:nReset, LED_0:nReset, PERC_0:reset_n, SRAM_0:reset, irq_synchronizer:receiver_reset, irq_synchronizer_001:receiver_reset, irq_synchronizer_002:receiver_reset, jtag_uart_0:rst_n, mm_interconnect_0:jtag_uart_0_reset_reset_bridge_in_reset_reset, pio_0:reset_n, rst_translator_002:in_reset, timer_0:reset_n]
	wire         rst_controller_002_reset_out_reset_req;                       // rst_controller_002:reset_req -> [SRAM_0:reset_req, rst_translator_002:reset_req_in]
	wire         rst_controller_003_reset_out_reset;                           // rst_controller_003:reset_out -> pll_0:rst
	wire         rst_controller_004_reset_out_reset;                           // rst_controller_004:reset_out -> [mm_interconnect_0:sdram_controller_reset_reset_bridge_in_reset_reset, sdram_controller:reset_n]
	wire         rst_controller_005_reset_out_reset;                           // rst_controller_005:reset_out -> [mm_interconnect_0:shared_PIO_reset_sink_reset_bridge_in_reset_reset, shared_PIO:nReset, shared_mailbox:rst_n, shared_mutex_PIO:reset_n]
	wire         rst_controller_006_reset_out_reset;                           // rst_controller_006:reset_out -> [mm_interconnect_0:sysid_reset_reset_bridge_in_reset_reset, sysid:reset_n]

	system_CPU_0 cpu_0 (
		.clk                                 (pll_0_outclk0_clk),                                   //                       clk.clk
		.reset_n                             (~rst_controller_reset_out_reset),                     //                     reset.reset_n
		.reset_req                           (rst_controller_reset_out_reset_req),                  //                          .reset_req
		.d_address                           (cpu_0_data_master_address),                           //               data_master.address
		.d_byteenable                        (cpu_0_data_master_byteenable),                        //                          .byteenable
		.d_read                              (cpu_0_data_master_read),                              //                          .read
		.d_readdata                          (cpu_0_data_master_readdata),                          //                          .readdata
		.d_waitrequest                       (cpu_0_data_master_waitrequest),                       //                          .waitrequest
		.d_write                             (cpu_0_data_master_write),                             //                          .write
		.d_writedata                         (cpu_0_data_master_writedata),                         //                          .writedata
		.d_readdatavalid                     (cpu_0_data_master_readdatavalid),                     //                          .readdatavalid
		.debug_mem_slave_debugaccess_to_roms (cpu_0_data_master_debugaccess),                       //                          .debugaccess
		.i_address                           (cpu_0_instruction_master_address),                    //        instruction_master.address
		.i_read                              (cpu_0_instruction_master_read),                       //                          .read
		.i_readdata                          (cpu_0_instruction_master_readdata),                   //                          .readdata
		.i_waitrequest                       (cpu_0_instruction_master_waitrequest),                //                          .waitrequest
		.i_readdatavalid                     (cpu_0_instruction_master_readdatavalid),              //                          .readdatavalid
		.irq                                 (cpu_0_irq_irq),                                       //                       irq.irq
		.debug_reset_request                 (cpu_0_debug_reset_request_reset),                     //       debug_reset_request.reset
		.debug_mem_slave_address             (mm_interconnect_0_cpu_0_debug_mem_slave_address),     //           debug_mem_slave.address
		.debug_mem_slave_byteenable          (mm_interconnect_0_cpu_0_debug_mem_slave_byteenable),  //                          .byteenable
		.debug_mem_slave_debugaccess         (mm_interconnect_0_cpu_0_debug_mem_slave_debugaccess), //                          .debugaccess
		.debug_mem_slave_read                (mm_interconnect_0_cpu_0_debug_mem_slave_read),        //                          .read
		.debug_mem_slave_readdata            (mm_interconnect_0_cpu_0_debug_mem_slave_readdata),    //                          .readdata
		.debug_mem_slave_waitrequest         (mm_interconnect_0_cpu_0_debug_mem_slave_waitrequest), //                          .waitrequest
		.debug_mem_slave_write               (mm_interconnect_0_cpu_0_debug_mem_slave_write),       //                          .write
		.debug_mem_slave_writedata           (mm_interconnect_0_cpu_0_debug_mem_slave_writedata),   //                          .writedata
		.dummy_ci_port                       ()                                                     // custom_instruction_master.readra
	);

	system_CPU_1 cpu_1 (
		.clk                                 (clk_clk),                                             //                       clk.clk
		.reset_n                             (~rst_controller_001_reset_out_reset),                 //                     reset.reset_n
		.reset_req                           (rst_controller_001_reset_out_reset_req),              //                          .reset_req
		.d_address                           (cpu_1_data_master_address),                           //               data_master.address
		.d_byteenable                        (cpu_1_data_master_byteenable),                        //                          .byteenable
		.d_read                              (cpu_1_data_master_read),                              //                          .read
		.d_readdata                          (cpu_1_data_master_readdata),                          //                          .readdata
		.d_waitrequest                       (cpu_1_data_master_waitrequest),                       //                          .waitrequest
		.d_write                             (cpu_1_data_master_write),                             //                          .write
		.d_writedata                         (cpu_1_data_master_writedata),                         //                          .writedata
		.d_readdatavalid                     (cpu_1_data_master_readdatavalid),                     //                          .readdatavalid
		.debug_mem_slave_debugaccess_to_roms (cpu_1_data_master_debugaccess),                       //                          .debugaccess
		.i_address                           (cpu_1_instruction_master_address),                    //        instruction_master.address
		.i_read                              (cpu_1_instruction_master_read),                       //                          .read
		.i_readdata                          (cpu_1_instruction_master_readdata),                   //                          .readdata
		.i_waitrequest                       (cpu_1_instruction_master_waitrequest),                //                          .waitrequest
		.i_readdatavalid                     (cpu_1_instruction_master_readdatavalid),              //                          .readdatavalid
		.irq                                 (cpu_1_irq_irq),                                       //                       irq.irq
		.debug_reset_request                 (cpu_1_debug_reset_request_reset),                     //       debug_reset_request.reset
		.debug_mem_slave_address             (mm_interconnect_0_cpu_1_debug_mem_slave_address),     //           debug_mem_slave.address
		.debug_mem_slave_byteenable          (mm_interconnect_0_cpu_1_debug_mem_slave_byteenable),  //                          .byteenable
		.debug_mem_slave_debugaccess         (mm_interconnect_0_cpu_1_debug_mem_slave_debugaccess), //                          .debugaccess
		.debug_mem_slave_read                (mm_interconnect_0_cpu_1_debug_mem_slave_read),        //                          .read
		.debug_mem_slave_readdata            (mm_interconnect_0_cpu_1_debug_mem_slave_readdata),    //                          .readdata
		.debug_mem_slave_waitrequest         (mm_interconnect_0_cpu_1_debug_mem_slave_waitrequest), //                          .waitrequest
		.debug_mem_slave_write               (mm_interconnect_0_cpu_1_debug_mem_slave_write),       //                          .write
		.debug_mem_slave_writedata           (mm_interconnect_0_cpu_1_debug_mem_slave_writedata),   //                          .writedata
		.dummy_ci_port                       ()                                                     // custom_instruction_master.readra
	);

	Counter #(
		.countWidth (32)
	) custom_counter_0 (
		.Clk       (clk_clk),                                                     //          clock.clk
		.ReadData  (mm_interconnect_0_custom_counter_0_avalon_slave_0_readdata),  // avalon_slave_0.readdata
		.WriteData (mm_interconnect_0_custom_counter_0_avalon_slave_0_writedata), //               .writedata
		.Address   (mm_interconnect_0_custom_counter_0_avalon_slave_0_address),   //               .address
		.Read      (mm_interconnect_0_custom_counter_0_avalon_slave_0_read),      //               .read
		.Write     (mm_interconnect_0_custom_counter_0_avalon_slave_0_write),     //               .write
		.nReset    (~rst_controller_002_reset_out_reset)                          //     reset_sink.reset_n
	);

	Counter #(
		.countWidth (32)
	) custom_counter_1 (
		.Clk       (clk_clk),                                                     //          clock.clk
		.ReadData  (mm_interconnect_0_custom_counter_1_avalon_slave_0_readdata),  // avalon_slave_0.readdata
		.WriteData (mm_interconnect_0_custom_counter_1_avalon_slave_0_writedata), //               .writedata
		.Address   (mm_interconnect_0_custom_counter_1_avalon_slave_0_address),   //               .address
		.Read      (mm_interconnect_0_custom_counter_1_avalon_slave_0_read),      //               .read
		.Write     (mm_interconnect_0_custom_counter_1_avalon_slave_0_write),     //               .write
		.nReset    (~rst_controller_001_reset_out_reset)                          //     reset_sink.reset_n
	);

	ParallelPort led_0 (
		.Clk       (clk_clk),                                          //            clock.clk
		.Address   (mm_interconnect_0_led_0_avalon_slave_0_address),   //   avalon_slave_0.address
		.Read      (mm_interconnect_0_led_0_avalon_slave_0_read),      //                 .read
		.ReadData  (mm_interconnect_0_led_0_avalon_slave_0_readdata),  //                 .readdata
		.Write     (mm_interconnect_0_led_0_avalon_slave_0_write),     //                 .write
		.WriteData (mm_interconnect_0_led_0_avalon_slave_0_writedata), //                 .writedata
		.ParPort   (led_0_output_parport),                             //      conduit_end.parport
		.nReset    (~rst_controller_002_reset_out_reset),              //       reset_sink.reset_n
		.irq       (irq_synchronizer_receiver_irq)                     // interrupt_sender.irq
	);

	ParallelPort led_1 (
		.Clk       (clk_clk),                                          //            clock.clk
		.Address   (mm_interconnect_0_led_1_avalon_slave_0_address),   //   avalon_slave_0.address
		.Read      (mm_interconnect_0_led_1_avalon_slave_0_read),      //                 .read
		.ReadData  (mm_interconnect_0_led_1_avalon_slave_0_readdata),  //                 .readdata
		.Write     (mm_interconnect_0_led_1_avalon_slave_0_write),     //                 .write
		.WriteData (mm_interconnect_0_led_1_avalon_slave_0_writedata), //                 .writedata
		.ParPort   (led_1_output_parport),                             //      conduit_end.parport
		.nReset    (~rst_controller_001_reset_out_reset),              //       reset_sink.reset_n
		.irq       (irq_mapper_001_receiver0_irq)                      // interrupt_sender.irq
	);

	system_PERC_0 perc_0 (
		.clk           (clk_clk),                                              //           clk.clk
		.reset_n       (~rst_controller_002_reset_out_reset),                  //         reset.reset_n
		.address       (mm_interconnect_0_perc_0_control_slave_address),       // control_slave.address
		.begintransfer (mm_interconnect_0_perc_0_control_slave_begintransfer), //              .begintransfer
		.readdata      (mm_interconnect_0_perc_0_control_slave_readdata),      //              .readdata
		.write         (mm_interconnect_0_perc_0_control_slave_write),         //              .write
		.writedata     (mm_interconnect_0_perc_0_control_slave_writedata)      //              .writedata
	);

	system_PERC_0 perc_1 (
		.clk           (clk_clk),                                              //           clk.clk
		.reset_n       (~rst_controller_001_reset_out_reset),                  //         reset.reset_n
		.address       (mm_interconnect_0_perc_1_control_slave_address),       // control_slave.address
		.begintransfer (mm_interconnect_0_perc_1_control_slave_begintransfer), //              .begintransfer
		.readdata      (mm_interconnect_0_perc_1_control_slave_readdata),      //              .readdata
		.write         (mm_interconnect_0_perc_1_control_slave_write),         //              .write
		.writedata     (mm_interconnect_0_perc_1_control_slave_writedata)      //              .writedata
	);

	system_SRAM_0 sram_0 (
		.clk        (clk_clk),                                //   clk1.clk
		.address    (mm_interconnect_0_sram_0_s1_address),    //     s1.address
		.clken      (mm_interconnect_0_sram_0_s1_clken),      //       .clken
		.chipselect (mm_interconnect_0_sram_0_s1_chipselect), //       .chipselect
		.write      (mm_interconnect_0_sram_0_s1_write),      //       .write
		.readdata   (mm_interconnect_0_sram_0_s1_readdata),   //       .readdata
		.writedata  (mm_interconnect_0_sram_0_s1_writedata),  //       .writedata
		.byteenable (mm_interconnect_0_sram_0_s1_byteenable), //       .byteenable
		.reset      (rst_controller_002_reset_out_reset),     // reset1.reset
		.reset_req  (rst_controller_002_reset_out_reset_req), //       .reset_req
		.freeze     (1'b0)                                    // (terminated)
	);

	system_SRAM_1 sram_1 (
		.clk        (clk_clk),                                //   clk1.clk
		.address    (mm_interconnect_0_sram_1_s1_address),    //     s1.address
		.clken      (mm_interconnect_0_sram_1_s1_clken),      //       .clken
		.chipselect (mm_interconnect_0_sram_1_s1_chipselect), //       .chipselect
		.write      (mm_interconnect_0_sram_1_s1_write),      //       .write
		.readdata   (mm_interconnect_0_sram_1_s1_readdata),   //       .readdata
		.writedata  (mm_interconnect_0_sram_1_s1_writedata),  //       .writedata
		.byteenable (mm_interconnect_0_sram_1_s1_byteenable), //       .byteenable
		.reset      (rst_controller_001_reset_out_reset),     // reset1.reset
		.reset_req  (rst_controller_001_reset_out_reset_req), //       .reset_req
		.freeze     (1'b0)                                    // (terminated)
	);

	system_jtag_uart_0 jtag_uart_0 (
		.clk            (clk_clk),                                                     //               clk.clk
		.rst_n          (~rst_controller_002_reset_out_reset),                         //             reset.reset_n
		.av_chipselect  (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_chipselect),  // avalon_jtag_slave.chipselect
		.av_address     (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_address),     //                  .address
		.av_read_n      (~mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_read),       //                  .read_n
		.av_readdata    (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_readdata),    //                  .readdata
		.av_write_n     (~mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_write),      //                  .write_n
		.av_writedata   (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_writedata),   //                  .writedata
		.av_waitrequest (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_waitrequest), //                  .waitrequest
		.av_irq         (irq_synchronizer_002_receiver_irq)                            //               irq.irq
	);

	system_jtag_uart_0 jtag_uart_1 (
		.clk            (clk_clk),                                                     //               clk.clk
		.rst_n          (~rst_controller_001_reset_out_reset),                         //             reset.reset_n
		.av_chipselect  (mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_chipselect),  // avalon_jtag_slave.chipselect
		.av_address     (mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_address),     //                  .address
		.av_read_n      (~mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_read),       //                  .read_n
		.av_readdata    (mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_readdata),    //                  .readdata
		.av_write_n     (~mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_write),      //                  .write_n
		.av_writedata   (mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_writedata),   //                  .writedata
		.av_waitrequest (mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_waitrequest), //                  .waitrequest
		.av_irq         (irq_mapper_001_receiver2_irq)                                 //               irq.irq
	);

	system_pio_0 pio_0 (
		.clk        (clk_clk),                               //                 clk.clk
		.reset_n    (~rst_controller_002_reset_out_reset),   //               reset.reset_n
		.address    (mm_interconnect_0_pio_0_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_pio_0_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_pio_0_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_pio_0_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_pio_0_s1_readdata),   //                    .readdata
		.out_port   (pio_0_external_connection_export)       // external_connection.export
	);

	system_pio_0 pio_1 (
		.clk        (clk_clk),                               //                 clk.clk
		.reset_n    (~rst_controller_001_reset_out_reset),   //               reset.reset_n
		.address    (mm_interconnect_0_pio_1_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_pio_1_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_pio_1_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_pio_1_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_pio_1_s1_readdata),   //                    .readdata
		.out_port   (pio_1_external_connection_export)       // external_connection.export
	);

	system_pll_0 pll_0 (
		.refclk   (clk_clk),                            //  refclk.clk
		.rst      (rst_controller_003_reset_out_reset), //   reset.reset
		.outclk_0 (pll_0_outclk0_clk),                  // outclk0.clk
		.outclk_1 (pll_0_outclk1_clk),                  // outclk1.clk
		.outclk_2 (pll_0_outclk2_clk),                  // outclk2.clk
		.locked   ()                                    // (terminated)
	);

	system_sdram_controller sdram_controller (
		.clk            (pll_0_outclk1_clk),                                   //   clk.clk
		.reset_n        (~rst_controller_004_reset_out_reset),                 // reset.reset_n
		.az_addr        (mm_interconnect_0_sdram_controller_s1_address),       //    s1.address
		.az_be_n        (~mm_interconnect_0_sdram_controller_s1_byteenable),   //      .byteenable_n
		.az_cs          (mm_interconnect_0_sdram_controller_s1_chipselect),    //      .chipselect
		.az_data        (mm_interconnect_0_sdram_controller_s1_writedata),     //      .writedata
		.az_rd_n        (~mm_interconnect_0_sdram_controller_s1_read),         //      .read_n
		.az_wr_n        (~mm_interconnect_0_sdram_controller_s1_write),        //      .write_n
		.za_data        (mm_interconnect_0_sdram_controller_s1_readdata),      //      .readdata
		.za_valid       (mm_interconnect_0_sdram_controller_s1_readdatavalid), //      .readdatavalid
		.za_waitrequest (mm_interconnect_0_sdram_controller_s1_waitrequest),   //      .waitrequest
		.zs_addr        (sdram_controller_0_wire_addr),                        //  wire.export
		.zs_ba          (sdram_controller_0_wire_ba),                          //      .export
		.zs_cas_n       (sdram_controller_0_wire_cas_n),                       //      .export
		.zs_cke         (sdram_controller_0_wire_cke),                         //      .export
		.zs_cs_n        (sdram_controller_0_wire_cs_n),                        //      .export
		.zs_dq          (sdram_controller_0_wire_dq),                          //      .export
		.zs_dqm         (sdram_controller_0_wire_dqm),                         //      .export
		.zs_ras_n       (sdram_controller_0_wire_ras_n),                       //      .export
		.zs_we_n        (sdram_controller_0_wire_we_n)                         //      .export
	);

	ParallelPort shared_pio (
		.Clk       (clk_clk),                                               //            clock.clk
		.Address   (mm_interconnect_0_shared_pio_avalon_slave_0_address),   //   avalon_slave_0.address
		.Read      (mm_interconnect_0_shared_pio_avalon_slave_0_read),      //                 .read
		.ReadData  (mm_interconnect_0_shared_pio_avalon_slave_0_readdata),  //                 .readdata
		.Write     (mm_interconnect_0_shared_pio_avalon_slave_0_write),     //                 .write
		.WriteData (mm_interconnect_0_shared_pio_avalon_slave_0_writedata), //                 .writedata
		.ParPort   (shared_pio_output_parport),                             //      conduit_end.parport
		.nReset    (~rst_controller_005_reset_out_reset),                   //       reset_sink.reset_n
		.irq       ()                                                       // interrupt_sender.irq
	);

	altera_avalon_mailbox #(
		.DWIDTH (32),
		.AWIDTH (2)
	) shared_mailbox (
		.clk                  (clk_clk),                                                      //               clk.clk
		.rst_n                (~rst_controller_005_reset_out_reset),                          //             rst_n.reset_n
		.avmm_snd_address     (mm_interconnect_0_shared_mailbox_avmm_msg_sender_address),     //   avmm_msg_sender.address
		.avmm_snd_writedata   (mm_interconnect_0_shared_mailbox_avmm_msg_sender_writedata),   //                  .writedata
		.avmm_snd_write       (mm_interconnect_0_shared_mailbox_avmm_msg_sender_write),       //                  .write
		.avmm_snd_read        (mm_interconnect_0_shared_mailbox_avmm_msg_sender_read),        //                  .read
		.avmm_snd_readdata    (mm_interconnect_0_shared_mailbox_avmm_msg_sender_readdata),    //                  .readdata
		.avmm_snd_waitrequest (mm_interconnect_0_shared_mailbox_avmm_msg_sender_waitrequest), //                  .waitrequest
		.avmm_rcv_address     (mm_interconnect_0_shared_mailbox_avmm_msg_receiver_address),   // avmm_msg_receiver.address
		.avmm_rcv_read        (mm_interconnect_0_shared_mailbox_avmm_msg_receiver_read),      //                  .read
		.avmm_rcv_writedata   (mm_interconnect_0_shared_mailbox_avmm_msg_receiver_writedata), //                  .writedata
		.avmm_rcv_write       (mm_interconnect_0_shared_mailbox_avmm_msg_receiver_write),     //                  .write
		.avmm_rcv_readdata    (mm_interconnect_0_shared_mailbox_avmm_msg_receiver_readdata),  //                  .readdata
		.irq_space            (),                                                             //       (terminated)
		.irq_msg              ()                                                              //       (terminated)
	);

	system_shared_mutex_PIO shared_mutex_pio (
		.reset_n       (~rst_controller_005_reset_out_reset),              // reset.reset_n
		.clk           (clk_clk),                                          //   clk.clk
		.chipselect    (mm_interconnect_0_shared_mutex_pio_s1_chipselect), //    s1.chipselect
		.data_from_cpu (mm_interconnect_0_shared_mutex_pio_s1_writedata),  //      .writedata
		.read          (mm_interconnect_0_shared_mutex_pio_s1_read),       //      .read
		.write         (mm_interconnect_0_shared_mutex_pio_s1_write),      //      .write
		.data_to_cpu   (mm_interconnect_0_shared_mutex_pio_s1_readdata),   //      .readdata
		.address       (mm_interconnect_0_shared_mutex_pio_s1_address)     //      .address
	);

	system_sysid sysid (
		.clock    (pll_0_outclk0_clk),                              //           clk.clk
		.reset_n  (~rst_controller_006_reset_out_reset),            //         reset.reset_n
		.readdata (mm_interconnect_0_sysid_control_slave_readdata), // control_slave.readdata
		.address  (mm_interconnect_0_sysid_control_slave_address)   //              .address
	);

	system_timer_0 timer_0 (
		.clk        (clk_clk),                                 //   clk.clk
		.reset_n    (~rst_controller_002_reset_out_reset),     // reset.reset_n
		.address    (mm_interconnect_0_timer_0_s1_address),    //    s1.address
		.writedata  (mm_interconnect_0_timer_0_s1_writedata),  //      .writedata
		.readdata   (mm_interconnect_0_timer_0_s1_readdata),   //      .readdata
		.chipselect (mm_interconnect_0_timer_0_s1_chipselect), //      .chipselect
		.write_n    (~mm_interconnect_0_timer_0_s1_write),     //      .write_n
		.irq        (irq_synchronizer_001_receiver_irq)        //   irq.irq
	);

	system_timer_0 timer_1 (
		.clk        (clk_clk),                                 //   clk.clk
		.reset_n    (~rst_controller_001_reset_out_reset),     // reset.reset_n
		.address    (mm_interconnect_0_timer_1_s1_address),    //    s1.address
		.writedata  (mm_interconnect_0_timer_1_s1_writedata),  //      .writedata
		.readdata   (mm_interconnect_0_timer_1_s1_readdata),   //      .readdata
		.chipselect (mm_interconnect_0_timer_1_s1_chipselect), //      .chipselect
		.write_n    (~mm_interconnect_0_timer_1_s1_write),     //      .write_n
		.irq        (irq_mapper_001_receiver1_irq)             //   irq.irq
	);

	system_mm_interconnect_0 mm_interconnect_0 (
		.clk_0_clk_clk                                      (clk_clk),                                                      //                                    clk_0_clk.clk
		.pll_0_outclk0_clk                                  (pll_0_outclk0_clk),                                            //                                pll_0_outclk0.clk
		.pll_0_outclk1_clk                                  (pll_0_outclk1_clk),                                            //                                pll_0_outclk1.clk
		.CPU_0_reset_reset_bridge_in_reset_reset            (rst_controller_reset_out_reset),                               //            CPU_0_reset_reset_bridge_in_reset.reset
		.CPU_1_reset_reset_bridge_in_reset_reset            (rst_controller_001_reset_out_reset),                           //            CPU_1_reset_reset_bridge_in_reset.reset
		.jtag_uart_0_reset_reset_bridge_in_reset_reset      (rst_controller_002_reset_out_reset),                           //      jtag_uart_0_reset_reset_bridge_in_reset.reset
		.sdram_controller_reset_reset_bridge_in_reset_reset (rst_controller_004_reset_out_reset),                           // sdram_controller_reset_reset_bridge_in_reset.reset
		.shared_PIO_reset_sink_reset_bridge_in_reset_reset  (rst_controller_005_reset_out_reset),                           //  shared_PIO_reset_sink_reset_bridge_in_reset.reset
		.sysid_reset_reset_bridge_in_reset_reset            (rst_controller_006_reset_out_reset),                           //            sysid_reset_reset_bridge_in_reset.reset
		.CPU_0_data_master_address                          (cpu_0_data_master_address),                                    //                            CPU_0_data_master.address
		.CPU_0_data_master_waitrequest                      (cpu_0_data_master_waitrequest),                                //                                             .waitrequest
		.CPU_0_data_master_byteenable                       (cpu_0_data_master_byteenable),                                 //                                             .byteenable
		.CPU_0_data_master_read                             (cpu_0_data_master_read),                                       //                                             .read
		.CPU_0_data_master_readdata                         (cpu_0_data_master_readdata),                                   //                                             .readdata
		.CPU_0_data_master_readdatavalid                    (cpu_0_data_master_readdatavalid),                              //                                             .readdatavalid
		.CPU_0_data_master_write                            (cpu_0_data_master_write),                                      //                                             .write
		.CPU_0_data_master_writedata                        (cpu_0_data_master_writedata),                                  //                                             .writedata
		.CPU_0_data_master_debugaccess                      (cpu_0_data_master_debugaccess),                                //                                             .debugaccess
		.CPU_0_instruction_master_address                   (cpu_0_instruction_master_address),                             //                     CPU_0_instruction_master.address
		.CPU_0_instruction_master_waitrequest               (cpu_0_instruction_master_waitrequest),                         //                                             .waitrequest
		.CPU_0_instruction_master_read                      (cpu_0_instruction_master_read),                                //                                             .read
		.CPU_0_instruction_master_readdata                  (cpu_0_instruction_master_readdata),                            //                                             .readdata
		.CPU_0_instruction_master_readdatavalid             (cpu_0_instruction_master_readdatavalid),                       //                                             .readdatavalid
		.CPU_1_data_master_address                          (cpu_1_data_master_address),                                    //                            CPU_1_data_master.address
		.CPU_1_data_master_waitrequest                      (cpu_1_data_master_waitrequest),                                //                                             .waitrequest
		.CPU_1_data_master_byteenable                       (cpu_1_data_master_byteenable),                                 //                                             .byteenable
		.CPU_1_data_master_read                             (cpu_1_data_master_read),                                       //                                             .read
		.CPU_1_data_master_readdata                         (cpu_1_data_master_readdata),                                   //                                             .readdata
		.CPU_1_data_master_readdatavalid                    (cpu_1_data_master_readdatavalid),                              //                                             .readdatavalid
		.CPU_1_data_master_write                            (cpu_1_data_master_write),                                      //                                             .write
		.CPU_1_data_master_writedata                        (cpu_1_data_master_writedata),                                  //                                             .writedata
		.CPU_1_data_master_debugaccess                      (cpu_1_data_master_debugaccess),                                //                                             .debugaccess
		.CPU_1_instruction_master_address                   (cpu_1_instruction_master_address),                             //                     CPU_1_instruction_master.address
		.CPU_1_instruction_master_waitrequest               (cpu_1_instruction_master_waitrequest),                         //                                             .waitrequest
		.CPU_1_instruction_master_read                      (cpu_1_instruction_master_read),                                //                                             .read
		.CPU_1_instruction_master_readdata                  (cpu_1_instruction_master_readdata),                            //                                             .readdata
		.CPU_1_instruction_master_readdatavalid             (cpu_1_instruction_master_readdatavalid),                       //                                             .readdatavalid
		.CPU_0_debug_mem_slave_address                      (mm_interconnect_0_cpu_0_debug_mem_slave_address),              //                        CPU_0_debug_mem_slave.address
		.CPU_0_debug_mem_slave_write                        (mm_interconnect_0_cpu_0_debug_mem_slave_write),                //                                             .write
		.CPU_0_debug_mem_slave_read                         (mm_interconnect_0_cpu_0_debug_mem_slave_read),                 //                                             .read
		.CPU_0_debug_mem_slave_readdata                     (mm_interconnect_0_cpu_0_debug_mem_slave_readdata),             //                                             .readdata
		.CPU_0_debug_mem_slave_writedata                    (mm_interconnect_0_cpu_0_debug_mem_slave_writedata),            //                                             .writedata
		.CPU_0_debug_mem_slave_byteenable                   (mm_interconnect_0_cpu_0_debug_mem_slave_byteenable),           //                                             .byteenable
		.CPU_0_debug_mem_slave_waitrequest                  (mm_interconnect_0_cpu_0_debug_mem_slave_waitrequest),          //                                             .waitrequest
		.CPU_0_debug_mem_slave_debugaccess                  (mm_interconnect_0_cpu_0_debug_mem_slave_debugaccess),          //                                             .debugaccess
		.CPU_1_debug_mem_slave_address                      (mm_interconnect_0_cpu_1_debug_mem_slave_address),              //                        CPU_1_debug_mem_slave.address
		.CPU_1_debug_mem_slave_write                        (mm_interconnect_0_cpu_1_debug_mem_slave_write),                //                                             .write
		.CPU_1_debug_mem_slave_read                         (mm_interconnect_0_cpu_1_debug_mem_slave_read),                 //                                             .read
		.CPU_1_debug_mem_slave_readdata                     (mm_interconnect_0_cpu_1_debug_mem_slave_readdata),             //                                             .readdata
		.CPU_1_debug_mem_slave_writedata                    (mm_interconnect_0_cpu_1_debug_mem_slave_writedata),            //                                             .writedata
		.CPU_1_debug_mem_slave_byteenable                   (mm_interconnect_0_cpu_1_debug_mem_slave_byteenable),           //                                             .byteenable
		.CPU_1_debug_mem_slave_waitrequest                  (mm_interconnect_0_cpu_1_debug_mem_slave_waitrequest),          //                                             .waitrequest
		.CPU_1_debug_mem_slave_debugaccess                  (mm_interconnect_0_cpu_1_debug_mem_slave_debugaccess),          //                                             .debugaccess
		.Custom_counter_0_avalon_slave_0_address            (mm_interconnect_0_custom_counter_0_avalon_slave_0_address),    //              Custom_counter_0_avalon_slave_0.address
		.Custom_counter_0_avalon_slave_0_write              (mm_interconnect_0_custom_counter_0_avalon_slave_0_write),      //                                             .write
		.Custom_counter_0_avalon_slave_0_read               (mm_interconnect_0_custom_counter_0_avalon_slave_0_read),       //                                             .read
		.Custom_counter_0_avalon_slave_0_readdata           (mm_interconnect_0_custom_counter_0_avalon_slave_0_readdata),   //                                             .readdata
		.Custom_counter_0_avalon_slave_0_writedata          (mm_interconnect_0_custom_counter_0_avalon_slave_0_writedata),  //                                             .writedata
		.Custom_counter_1_avalon_slave_0_address            (mm_interconnect_0_custom_counter_1_avalon_slave_0_address),    //              Custom_counter_1_avalon_slave_0.address
		.Custom_counter_1_avalon_slave_0_write              (mm_interconnect_0_custom_counter_1_avalon_slave_0_write),      //                                             .write
		.Custom_counter_1_avalon_slave_0_read               (mm_interconnect_0_custom_counter_1_avalon_slave_0_read),       //                                             .read
		.Custom_counter_1_avalon_slave_0_readdata           (mm_interconnect_0_custom_counter_1_avalon_slave_0_readdata),   //                                             .readdata
		.Custom_counter_1_avalon_slave_0_writedata          (mm_interconnect_0_custom_counter_1_avalon_slave_0_writedata),  //                                             .writedata
		.jtag_uart_0_avalon_jtag_slave_address              (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_address),      //                jtag_uart_0_avalon_jtag_slave.address
		.jtag_uart_0_avalon_jtag_slave_write                (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_write),        //                                             .write
		.jtag_uart_0_avalon_jtag_slave_read                 (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_read),         //                                             .read
		.jtag_uart_0_avalon_jtag_slave_readdata             (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_readdata),     //                                             .readdata
		.jtag_uart_0_avalon_jtag_slave_writedata            (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_writedata),    //                                             .writedata
		.jtag_uart_0_avalon_jtag_slave_waitrequest          (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_waitrequest),  //                                             .waitrequest
		.jtag_uart_0_avalon_jtag_slave_chipselect           (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_chipselect),   //                                             .chipselect
		.jtag_uart_1_avalon_jtag_slave_address              (mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_address),      //                jtag_uart_1_avalon_jtag_slave.address
		.jtag_uart_1_avalon_jtag_slave_write                (mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_write),        //                                             .write
		.jtag_uart_1_avalon_jtag_slave_read                 (mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_read),         //                                             .read
		.jtag_uart_1_avalon_jtag_slave_readdata             (mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_readdata),     //                                             .readdata
		.jtag_uart_1_avalon_jtag_slave_writedata            (mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_writedata),    //                                             .writedata
		.jtag_uart_1_avalon_jtag_slave_waitrequest          (mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_waitrequest),  //                                             .waitrequest
		.jtag_uart_1_avalon_jtag_slave_chipselect           (mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_chipselect),   //                                             .chipselect
		.LED_0_avalon_slave_0_address                       (mm_interconnect_0_led_0_avalon_slave_0_address),               //                         LED_0_avalon_slave_0.address
		.LED_0_avalon_slave_0_write                         (mm_interconnect_0_led_0_avalon_slave_0_write),                 //                                             .write
		.LED_0_avalon_slave_0_read                          (mm_interconnect_0_led_0_avalon_slave_0_read),                  //                                             .read
		.LED_0_avalon_slave_0_readdata                      (mm_interconnect_0_led_0_avalon_slave_0_readdata),              //                                             .readdata
		.LED_0_avalon_slave_0_writedata                     (mm_interconnect_0_led_0_avalon_slave_0_writedata),             //                                             .writedata
		.LED_1_avalon_slave_0_address                       (mm_interconnect_0_led_1_avalon_slave_0_address),               //                         LED_1_avalon_slave_0.address
		.LED_1_avalon_slave_0_write                         (mm_interconnect_0_led_1_avalon_slave_0_write),                 //                                             .write
		.LED_1_avalon_slave_0_read                          (mm_interconnect_0_led_1_avalon_slave_0_read),                  //                                             .read
		.LED_1_avalon_slave_0_readdata                      (mm_interconnect_0_led_1_avalon_slave_0_readdata),              //                                             .readdata
		.LED_1_avalon_slave_0_writedata                     (mm_interconnect_0_led_1_avalon_slave_0_writedata),             //                                             .writedata
		.PERC_0_control_slave_address                       (mm_interconnect_0_perc_0_control_slave_address),               //                         PERC_0_control_slave.address
		.PERC_0_control_slave_write                         (mm_interconnect_0_perc_0_control_slave_write),                 //                                             .write
		.PERC_0_control_slave_readdata                      (mm_interconnect_0_perc_0_control_slave_readdata),              //                                             .readdata
		.PERC_0_control_slave_writedata                     (mm_interconnect_0_perc_0_control_slave_writedata),             //                                             .writedata
		.PERC_0_control_slave_begintransfer                 (mm_interconnect_0_perc_0_control_slave_begintransfer),         //                                             .begintransfer
		.PERC_1_control_slave_address                       (mm_interconnect_0_perc_1_control_slave_address),               //                         PERC_1_control_slave.address
		.PERC_1_control_slave_write                         (mm_interconnect_0_perc_1_control_slave_write),                 //                                             .write
		.PERC_1_control_slave_readdata                      (mm_interconnect_0_perc_1_control_slave_readdata),              //                                             .readdata
		.PERC_1_control_slave_writedata                     (mm_interconnect_0_perc_1_control_slave_writedata),             //                                             .writedata
		.PERC_1_control_slave_begintransfer                 (mm_interconnect_0_perc_1_control_slave_begintransfer),         //                                             .begintransfer
		.pio_0_s1_address                                   (mm_interconnect_0_pio_0_s1_address),                           //                                     pio_0_s1.address
		.pio_0_s1_write                                     (mm_interconnect_0_pio_0_s1_write),                             //                                             .write
		.pio_0_s1_readdata                                  (mm_interconnect_0_pio_0_s1_readdata),                          //                                             .readdata
		.pio_0_s1_writedata                                 (mm_interconnect_0_pio_0_s1_writedata),                         //                                             .writedata
		.pio_0_s1_chipselect                                (mm_interconnect_0_pio_0_s1_chipselect),                        //                                             .chipselect
		.pio_1_s1_address                                   (mm_interconnect_0_pio_1_s1_address),                           //                                     pio_1_s1.address
		.pio_1_s1_write                                     (mm_interconnect_0_pio_1_s1_write),                             //                                             .write
		.pio_1_s1_readdata                                  (mm_interconnect_0_pio_1_s1_readdata),                          //                                             .readdata
		.pio_1_s1_writedata                                 (mm_interconnect_0_pio_1_s1_writedata),                         //                                             .writedata
		.pio_1_s1_chipselect                                (mm_interconnect_0_pio_1_s1_chipselect),                        //                                             .chipselect
		.sdram_controller_s1_address                        (mm_interconnect_0_sdram_controller_s1_address),                //                          sdram_controller_s1.address
		.sdram_controller_s1_write                          (mm_interconnect_0_sdram_controller_s1_write),                  //                                             .write
		.sdram_controller_s1_read                           (mm_interconnect_0_sdram_controller_s1_read),                   //                                             .read
		.sdram_controller_s1_readdata                       (mm_interconnect_0_sdram_controller_s1_readdata),               //                                             .readdata
		.sdram_controller_s1_writedata                      (mm_interconnect_0_sdram_controller_s1_writedata),              //                                             .writedata
		.sdram_controller_s1_byteenable                     (mm_interconnect_0_sdram_controller_s1_byteenable),             //                                             .byteenable
		.sdram_controller_s1_readdatavalid                  (mm_interconnect_0_sdram_controller_s1_readdatavalid),          //                                             .readdatavalid
		.sdram_controller_s1_waitrequest                    (mm_interconnect_0_sdram_controller_s1_waitrequest),            //                                             .waitrequest
		.sdram_controller_s1_chipselect                     (mm_interconnect_0_sdram_controller_s1_chipselect),             //                                             .chipselect
		.shared_mailbox_avmm_msg_receiver_address           (mm_interconnect_0_shared_mailbox_avmm_msg_receiver_address),   //             shared_mailbox_avmm_msg_receiver.address
		.shared_mailbox_avmm_msg_receiver_write             (mm_interconnect_0_shared_mailbox_avmm_msg_receiver_write),     //                                             .write
		.shared_mailbox_avmm_msg_receiver_read              (mm_interconnect_0_shared_mailbox_avmm_msg_receiver_read),      //                                             .read
		.shared_mailbox_avmm_msg_receiver_readdata          (mm_interconnect_0_shared_mailbox_avmm_msg_receiver_readdata),  //                                             .readdata
		.shared_mailbox_avmm_msg_receiver_writedata         (mm_interconnect_0_shared_mailbox_avmm_msg_receiver_writedata), //                                             .writedata
		.shared_mailbox_avmm_msg_sender_address             (mm_interconnect_0_shared_mailbox_avmm_msg_sender_address),     //               shared_mailbox_avmm_msg_sender.address
		.shared_mailbox_avmm_msg_sender_write               (mm_interconnect_0_shared_mailbox_avmm_msg_sender_write),       //                                             .write
		.shared_mailbox_avmm_msg_sender_read                (mm_interconnect_0_shared_mailbox_avmm_msg_sender_read),        //                                             .read
		.shared_mailbox_avmm_msg_sender_readdata            (mm_interconnect_0_shared_mailbox_avmm_msg_sender_readdata),    //                                             .readdata
		.shared_mailbox_avmm_msg_sender_writedata           (mm_interconnect_0_shared_mailbox_avmm_msg_sender_writedata),   //                                             .writedata
		.shared_mailbox_avmm_msg_sender_waitrequest         (mm_interconnect_0_shared_mailbox_avmm_msg_sender_waitrequest), //                                             .waitrequest
		.shared_mutex_PIO_s1_address                        (mm_interconnect_0_shared_mutex_pio_s1_address),                //                          shared_mutex_PIO_s1.address
		.shared_mutex_PIO_s1_write                          (mm_interconnect_0_shared_mutex_pio_s1_write),                  //                                             .write
		.shared_mutex_PIO_s1_read                           (mm_interconnect_0_shared_mutex_pio_s1_read),                   //                                             .read
		.shared_mutex_PIO_s1_readdata                       (mm_interconnect_0_shared_mutex_pio_s1_readdata),               //                                             .readdata
		.shared_mutex_PIO_s1_writedata                      (mm_interconnect_0_shared_mutex_pio_s1_writedata),              //                                             .writedata
		.shared_mutex_PIO_s1_chipselect                     (mm_interconnect_0_shared_mutex_pio_s1_chipselect),             //                                             .chipselect
		.shared_PIO_avalon_slave_0_address                  (mm_interconnect_0_shared_pio_avalon_slave_0_address),          //                    shared_PIO_avalon_slave_0.address
		.shared_PIO_avalon_slave_0_write                    (mm_interconnect_0_shared_pio_avalon_slave_0_write),            //                                             .write
		.shared_PIO_avalon_slave_0_read                     (mm_interconnect_0_shared_pio_avalon_slave_0_read),             //                                             .read
		.shared_PIO_avalon_slave_0_readdata                 (mm_interconnect_0_shared_pio_avalon_slave_0_readdata),         //                                             .readdata
		.shared_PIO_avalon_slave_0_writedata                (mm_interconnect_0_shared_pio_avalon_slave_0_writedata),        //                                             .writedata
		.SRAM_0_s1_address                                  (mm_interconnect_0_sram_0_s1_address),                          //                                    SRAM_0_s1.address
		.SRAM_0_s1_write                                    (mm_interconnect_0_sram_0_s1_write),                            //                                             .write
		.SRAM_0_s1_readdata                                 (mm_interconnect_0_sram_0_s1_readdata),                         //                                             .readdata
		.SRAM_0_s1_writedata                                (mm_interconnect_0_sram_0_s1_writedata),                        //                                             .writedata
		.SRAM_0_s1_byteenable                               (mm_interconnect_0_sram_0_s1_byteenable),                       //                                             .byteenable
		.SRAM_0_s1_chipselect                               (mm_interconnect_0_sram_0_s1_chipselect),                       //                                             .chipselect
		.SRAM_0_s1_clken                                    (mm_interconnect_0_sram_0_s1_clken),                            //                                             .clken
		.SRAM_1_s1_address                                  (mm_interconnect_0_sram_1_s1_address),                          //                                    SRAM_1_s1.address
		.SRAM_1_s1_write                                    (mm_interconnect_0_sram_1_s1_write),                            //                                             .write
		.SRAM_1_s1_readdata                                 (mm_interconnect_0_sram_1_s1_readdata),                         //                                             .readdata
		.SRAM_1_s1_writedata                                (mm_interconnect_0_sram_1_s1_writedata),                        //                                             .writedata
		.SRAM_1_s1_byteenable                               (mm_interconnect_0_sram_1_s1_byteenable),                       //                                             .byteenable
		.SRAM_1_s1_chipselect                               (mm_interconnect_0_sram_1_s1_chipselect),                       //                                             .chipselect
		.SRAM_1_s1_clken                                    (mm_interconnect_0_sram_1_s1_clken),                            //                                             .clken
		.sysid_control_slave_address                        (mm_interconnect_0_sysid_control_slave_address),                //                          sysid_control_slave.address
		.sysid_control_slave_readdata                       (mm_interconnect_0_sysid_control_slave_readdata),               //                                             .readdata
		.timer_0_s1_address                                 (mm_interconnect_0_timer_0_s1_address),                         //                                   timer_0_s1.address
		.timer_0_s1_write                                   (mm_interconnect_0_timer_0_s1_write),                           //                                             .write
		.timer_0_s1_readdata                                (mm_interconnect_0_timer_0_s1_readdata),                        //                                             .readdata
		.timer_0_s1_writedata                               (mm_interconnect_0_timer_0_s1_writedata),                       //                                             .writedata
		.timer_0_s1_chipselect                              (mm_interconnect_0_timer_0_s1_chipselect),                      //                                             .chipselect
		.timer_1_s1_address                                 (mm_interconnect_0_timer_1_s1_address),                         //                                   timer_1_s1.address
		.timer_1_s1_write                                   (mm_interconnect_0_timer_1_s1_write),                           //                                             .write
		.timer_1_s1_readdata                                (mm_interconnect_0_timer_1_s1_readdata),                        //                                             .readdata
		.timer_1_s1_writedata                               (mm_interconnect_0_timer_1_s1_writedata),                       //                                             .writedata
		.timer_1_s1_chipselect                              (mm_interconnect_0_timer_1_s1_chipselect)                       //                                             .chipselect
	);

	system_irq_mapper irq_mapper (
		.clk           (pll_0_outclk0_clk),              //       clk.clk
		.reset         (rst_controller_reset_out_reset), // clk_reset.reset
		.receiver0_irq (irq_mapper_receiver0_irq),       // receiver0.irq
		.receiver1_irq (irq_mapper_receiver1_irq),       // receiver1.irq
		.receiver2_irq (irq_mapper_receiver2_irq),       // receiver2.irq
		.sender_irq    (cpu_0_irq_irq)                   //    sender.irq
	);

	system_irq_mapper_001 irq_mapper_001 (
		.clk           (clk_clk),                            //       clk.clk
		.reset         (rst_controller_001_reset_out_reset), // clk_reset.reset
		.receiver0_irq (irq_mapper_001_receiver0_irq),       // receiver0.irq
		.receiver1_irq (irq_mapper_001_receiver1_irq),       // receiver1.irq
		.receiver2_irq (irq_mapper_001_receiver2_irq),       // receiver2.irq
		.sender_irq    (cpu_1_irq_irq)                       //    sender.irq
	);

	altera_irq_clock_crosser #(
		.IRQ_WIDTH (1)
	) irq_synchronizer (
		.receiver_clk   (clk_clk),                            //       receiver_clk.clk
		.sender_clk     (pll_0_outclk0_clk),                  //         sender_clk.clk
		.receiver_reset (rst_controller_002_reset_out_reset), // receiver_clk_reset.reset
		.sender_reset   (rst_controller_reset_out_reset),     //   sender_clk_reset.reset
		.receiver_irq   (irq_synchronizer_receiver_irq),      //           receiver.irq
		.sender_irq     (irq_mapper_receiver0_irq)            //             sender.irq
	);

	altera_irq_clock_crosser #(
		.IRQ_WIDTH (1)
	) irq_synchronizer_001 (
		.receiver_clk   (clk_clk),                            //       receiver_clk.clk
		.sender_clk     (pll_0_outclk0_clk),                  //         sender_clk.clk
		.receiver_reset (rst_controller_002_reset_out_reset), // receiver_clk_reset.reset
		.sender_reset   (rst_controller_reset_out_reset),     //   sender_clk_reset.reset
		.receiver_irq   (irq_synchronizer_001_receiver_irq),  //           receiver.irq
		.sender_irq     (irq_mapper_receiver1_irq)            //             sender.irq
	);

	altera_irq_clock_crosser #(
		.IRQ_WIDTH (1)
	) irq_synchronizer_002 (
		.receiver_clk   (clk_clk),                            //       receiver_clk.clk
		.sender_clk     (pll_0_outclk0_clk),                  //         sender_clk.clk
		.receiver_reset (rst_controller_002_reset_out_reset), // receiver_clk_reset.reset
		.sender_reset   (rst_controller_reset_out_reset),     //   sender_clk_reset.reset
		.receiver_irq   (irq_synchronizer_002_receiver_irq),  //           receiver.irq
		.sender_irq     (irq_mapper_receiver2_irq)            //             sender.irq
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~reset_reset_n),                     // reset_in0.reset
		.reset_in1      (cpu_0_debug_reset_request_reset),    // reset_in1.reset
		.clk            (pll_0_outclk0_clk),                  //       clk.clk
		.reset_out      (rst_controller_reset_out_reset),     // reset_out.reset
		.reset_req      (rst_controller_reset_out_reset_req), //          .reset_req
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (~reset_reset_n),                         // reset_in0.reset
		.reset_in1      (cpu_1_debug_reset_request_reset),        // reset_in1.reset
		.clk            (clk_clk),                                //       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset),     // reset_out.reset
		.reset_req      (rst_controller_001_reset_out_reset_req), //          .reset_req
		.reset_req_in0  (1'b0),                                   // (terminated)
		.reset_req_in1  (1'b0),                                   // (terminated)
		.reset_in2      (1'b0),                                   // (terminated)
		.reset_req_in2  (1'b0),                                   // (terminated)
		.reset_in3      (1'b0),                                   // (terminated)
		.reset_req_in3  (1'b0),                                   // (terminated)
		.reset_in4      (1'b0),                                   // (terminated)
		.reset_req_in4  (1'b0),                                   // (terminated)
		.reset_in5      (1'b0),                                   // (terminated)
		.reset_req_in5  (1'b0),                                   // (terminated)
		.reset_in6      (1'b0),                                   // (terminated)
		.reset_req_in6  (1'b0),                                   // (terminated)
		.reset_in7      (1'b0),                                   // (terminated)
		.reset_req_in7  (1'b0),                                   // (terminated)
		.reset_in8      (1'b0),                                   // (terminated)
		.reset_req_in8  (1'b0),                                   // (terminated)
		.reset_in9      (1'b0),                                   // (terminated)
		.reset_req_in9  (1'b0),                                   // (terminated)
		.reset_in10     (1'b0),                                   // (terminated)
		.reset_req_in10 (1'b0),                                   // (terminated)
		.reset_in11     (1'b0),                                   // (terminated)
		.reset_req_in11 (1'b0),                                   // (terminated)
		.reset_in12     (1'b0),                                   // (terminated)
		.reset_req_in12 (1'b0),                                   // (terminated)
		.reset_in13     (1'b0),                                   // (terminated)
		.reset_req_in13 (1'b0),                                   // (terminated)
		.reset_in14     (1'b0),                                   // (terminated)
		.reset_req_in14 (1'b0),                                   // (terminated)
		.reset_in15     (1'b0),                                   // (terminated)
		.reset_req_in15 (1'b0)                                    // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_002 (
		.reset_in0      (~reset_reset_n),                         // reset_in0.reset
		.reset_in1      (cpu_0_debug_reset_request_reset),        // reset_in1.reset
		.clk            (clk_clk),                                //       clk.clk
		.reset_out      (rst_controller_002_reset_out_reset),     // reset_out.reset
		.reset_req      (rst_controller_002_reset_out_reset_req), //          .reset_req
		.reset_req_in0  (1'b0),                                   // (terminated)
		.reset_req_in1  (1'b0),                                   // (terminated)
		.reset_in2      (1'b0),                                   // (terminated)
		.reset_req_in2  (1'b0),                                   // (terminated)
		.reset_in3      (1'b0),                                   // (terminated)
		.reset_req_in3  (1'b0),                                   // (terminated)
		.reset_in4      (1'b0),                                   // (terminated)
		.reset_req_in4  (1'b0),                                   // (terminated)
		.reset_in5      (1'b0),                                   // (terminated)
		.reset_req_in5  (1'b0),                                   // (terminated)
		.reset_in6      (1'b0),                                   // (terminated)
		.reset_req_in6  (1'b0),                                   // (terminated)
		.reset_in7      (1'b0),                                   // (terminated)
		.reset_req_in7  (1'b0),                                   // (terminated)
		.reset_in8      (1'b0),                                   // (terminated)
		.reset_req_in8  (1'b0),                                   // (terminated)
		.reset_in9      (1'b0),                                   // (terminated)
		.reset_req_in9  (1'b0),                                   // (terminated)
		.reset_in10     (1'b0),                                   // (terminated)
		.reset_req_in10 (1'b0),                                   // (terminated)
		.reset_in11     (1'b0),                                   // (terminated)
		.reset_req_in11 (1'b0),                                   // (terminated)
		.reset_in12     (1'b0),                                   // (terminated)
		.reset_req_in12 (1'b0),                                   // (terminated)
		.reset_in13     (1'b0),                                   // (terminated)
		.reset_req_in13 (1'b0),                                   // (terminated)
		.reset_in14     (1'b0),                                   // (terminated)
		.reset_req_in14 (1'b0),                                   // (terminated)
		.reset_in15     (1'b0),                                   // (terminated)
		.reset_req_in15 (1'b0)                                    // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (3),
		.OUTPUT_RESET_SYNC_EDGES   ("none"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_003 (
		.reset_in0      (~reset_reset_n),                     // reset_in0.reset
		.reset_in1      (cpu_0_debug_reset_request_reset),    // reset_in1.reset
		.reset_in2      (cpu_1_debug_reset_request_reset),    // reset_in2.reset
		.clk            (),                                   //       clk.clk
		.reset_out      (rst_controller_003_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (3),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_004 (
		.reset_in0      (~reset_reset_n),                     // reset_in0.reset
		.reset_in1      (cpu_0_debug_reset_request_reset),    // reset_in1.reset
		.reset_in2      (cpu_1_debug_reset_request_reset),    // reset_in2.reset
		.clk            (pll_0_outclk1_clk),                  //       clk.clk
		.reset_out      (rst_controller_004_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (3),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_005 (
		.reset_in0      (~reset_reset_n),                     // reset_in0.reset
		.reset_in1      (cpu_0_debug_reset_request_reset),    // reset_in1.reset
		.reset_in2      (cpu_1_debug_reset_request_reset),    // reset_in2.reset
		.clk            (clk_clk),                            //       clk.clk
		.reset_out      (rst_controller_005_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (3),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_006 (
		.reset_in0      (~reset_reset_n),                     // reset_in0.reset
		.reset_in1      (cpu_0_debug_reset_request_reset),    // reset_in1.reset
		.reset_in2      (cpu_1_debug_reset_request_reset),    // reset_in2.reset
		.clk            (pll_0_outclk0_clk),                  //       clk.clk
		.reset_out      (rst_controller_006_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

endmodule
