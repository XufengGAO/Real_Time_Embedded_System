
sub_cpu_0.elf:     file format elf32-littlenios2
sub_cpu_0.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20020244

Program Header:
    LOAD off    0x00001000 vaddr 0x20020000 paddr 0x20020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x20020020 paddr 0x20020020 align 2**12
         filesz 0x00011100 memsz 0x00011100 flags r-x
    LOAD off    0x00012120 vaddr 0x20031120 paddr 0x20032c74 align 2**12
         filesz 0x00001b54 memsz 0x00001b54 flags rw-
    LOAD off    0x000147c8 vaddr 0x200347c8 paddr 0x200347c8 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  20020000  20020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  20020020  20020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010a10  20020244  20020244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004cc  20030c54  20030c54  00011c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b54  20031120  20032c74  00012120  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  200347c8  200347c8  000147c8  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller 00000000  10000000  10000000  00013c74  2**0
                  CONTENTS
  7 .cpu_0_0_SRAM_0 00000000  20034928  20034928  00013c74  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00013c74  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000fd8  00000000  00000000  00013c98  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002792b  00000000  00000000  00014c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000a060  00000000  00000000  0003c59b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c809  00000000  00000000  000465fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000026f0  00000000  00000000  00052e04  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003e17  00000000  00000000  000554f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017f74  00000000  00000000  0005930b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  00071280  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001980  00000000  00000000  000712e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00076502  2**0
                  CONTENTS, READONLY
 19 .cpu          00000014  00000000  00000000  00076505  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00076519  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007651a  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0007651b  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0007651f  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00076523  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000013  00000000  00000000  00076527  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000013  00000000  00000000  0007653a  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000013  00000000  00000000  0007654d  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000006  00000000  00000000  00076560  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000063  00000000  00000000  00076566  2**0
                  CONTENTS, READONLY
 30 .jdi          0000c003  00000000  00000000  000765c9  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000e6cd7  00000000  00000000  000825cc  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
20020000 l    d  .entry	00000000 .entry
20020020 l    d  .exceptions	00000000 .exceptions
20020244 l    d  .text	00000000 .text
20030c54 l    d  .rodata	00000000 .rodata
20031120 l    d  .rwdata	00000000 .rwdata
200347c8 l    d  .bss	00000000 .bss
10000000 l    d  .sdram_controller	00000000 .sdram_controller
20034928 l    d  .cpu_0_0_SRAM_0	00000000 .cpu_0_0_SRAM_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/24833/Desktop/FPGA/lab3_multiprocessor/sdram_instrCacheEnabled_dataCacheEnabled/sw/sub_cpu_0_bsp//obj/HAL/src/crt0.o
2002028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 fgets.c
00000000 l    df *ABS*	00000000 findfp.c
20020984 l     F .text	00000008 __fp_unlock
20020998 l     F .text	0000019c __sinit.part.1
20020b34 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
20031120 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
20021b6c l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
20030e2e l     O .rodata	00000010 zeroes.4404
20024198 l     F .text	000000bc __sbprintf
20030e3e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
2002445c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
2003196c l     O .rwdata	00000020 lc_ctype_charset
2003194c l     O .rwdata	00000020 lc_message_charset
2003198c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
20030e6c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
2002864c l     F .text	000000fc __sprint_r.part.0
20030fa0 l     O .rodata	00000010 blanks.4348
20030f90 l     O .rodata	00000010 zeroes.4349
20029bd8 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
2002d61c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
2002d770 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
2002d79c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
2002d888 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
2002d968 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
2002da54 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
2002dc28 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
20032c54 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
2002dea4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
2002dfd8 l     F .text	00000034 alt_dev_reg
2002e00c l     F .text	0000003c alt_get_errno
2002e048 l     F .text	00000068 alt_avalon_mutex_reg
20031b6c l     O .rwdata	00001060 cpu_0_0_jtag_uart_0
20032bcc l     O .rwdata	00000048 shared_mailbox
20032c14 l     O .rwdata	00000010 shared_mutex_PIO
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
2002e3a0 l     F .text	0000020c altera_avalon_jtag_uart_irq
2002e5ac l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox_simple.c
2002ebe4 l     F .text	00000090 altera_avalon_mailbox_identify
2002ec74 l     F .text	00000078 altera_avalon_mailbox_post
2002ecec l     F .text	00000138 altera_avalon_mailbox_simple_tx_isr
2002ee24 l     F .text	000000a8 altera_avalon_mailbox_simple_rx_isr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
2002f544 l     F .text	0000003c alt_get_errno
2002f580 l     F .text	0000007c alt_mutex_trylock
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
2002f810 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
2002fb88 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
2003008c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
200301cc l     F .text	0000003c alt_get_errno
20030208 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
200347fc g     O .bss	00000004 alt_instruction_exception_handler
20021a80 g     F .text	00000018 putchar
20027c58 g     F .text	00000074 _mprec_log10
2002f2b8 g     F .text	00000150 altera_avalon_mailbox_send
20027d44 g     F .text	0000008c __any_on
2002a114 g     F .text	00000054 _isatty_r
20030e78 g     O .rodata	00000028 __mprec_tinytens
2002db64 g     F .text	0000007c alt_main
20021a98 g     F .text	000000c0 _puts_r
20034828 g     O .bss	00000100 alt_irq
20026a5c g     F .text	00000060 _lseek_r
20032c74 g       *ABS*	00000000 __flash_rwdata_start
2002c148 g     F .text	00000088 .hidden __eqdf2
20034928 g       *ABS*	00000000 __alt_heap_start
20021a3c g     F .text	0000003c printf
2002a168 g     F .text	0000009c _wcrtomb_r
20021e88 g     F .text	0000005c __sseek
20020cd4 g     F .text	00000010 __sinit
20029c94 g     F .text	00000140 __swbuf_r
20026980 g     F .text	0000007c _setlocale_r
20020b3c g     F .text	00000068 __sfmoreglue
2002dc04 g     F .text	00000024 __malloc_unlock
20026c78 g     F .text	0000015c memmove
20020cbc g     F .text	00000018 _cleanup
2002f6b8 g     F .text	00000040 altera_avalon_mutex_trylock
20026dd4 g     F .text	000000a8 _Balloc
2002c1d0 g     F .text	000000dc .hidden __gtdf2
200305c4 g     F .text	00000024 altera_nios2_gen2_irq_init
20020000 g     F .entry	0000001c __reset
2002f74c g     F .text	00000074 altera_avalon_mutex_is_mine
20020020 g       *ABS*	00000000 __flash_exceptions_start
2002a0b8 g     F .text	0000005c _fstat_r
200347d4 g     O .bss	00000004 errno
20021e04 g     F .text	00000008 __seofread
10000000 g       *ABS*	00000000 __alt_mem_sdram_controller
200347e8 g     O .bss	00000004 alt_argv
2003ac24 g       *ABS*	00000000 _gp
2002f408 g     F .text	0000013c altera_avalon_mailbox_retrieve_poll
2002de74 g     F .text	00000030 usleep
20020968 g     F .text	0000001c fgets
200319ec g     O .rwdata	00000180 alt_fd_list
20021a78 g     F .text	00000008 _putchar_r
2002fd28 g     F .text	00000090 alt_find_dev
2002179c g     F .text	00000148 memcpy
2002098c g     F .text	0000000c _cleanup_r
2002d434 g     F .text	000000dc .hidden __floatsidf
20030150 g     F .text	0000007c alt_io_redirect
2002c2ac g     F .text	000000f4 .hidden __ltdf2
20030c54 g       *ABS*	00000000 __DTOR_END__
20021b58 g     F .text	00000014 puts
20030824 g     F .text	0000009c alt_exception_cause_generated_bad_addr
2002eecc g     F .text	00000078 altera_avalon_mailbox_simple_init
200284fc g     F .text	00000074 __fpclassifyd
20027bb4 g     F .text	000000a4 __ratio
20029bbc g     F .text	0000001c __vfiprintf_internal
2002e7a4 g     F .text	0000021c altera_avalon_jtag_uart_read
20021a0c g     F .text	00000030 _printf_r
2002aef8 g     F .text	00000064 .hidden __udivsi3
2002d8c4 g     F .text	000000a4 isatty
20030ec8 g     O .rodata	000000c8 __mprec_tens
2002f240 g     F .text	00000078 altera_avalon_mailbox_status
2002f128 g     F .text	00000118 altera_avalon_mailbox_close
200269fc g     F .text	0000000c __locale_charset
20030794 g     F .text	00000090 alt_icache_flush
200347d0 g     O .bss	00000004 __malloc_top_pad
20032c34 g     O .rwdata	00000004 __mb_cur_max
20026a2c g     F .text	0000000c _localeconv_r
200271e0 g     F .text	0000003c __i2b
200264c4 g     F .text	000004bc __sfvwrite_r
20021d5c g     F .text	00000054 _sbrk_r
20027f38 g     F .text	00000060 _read_r
20032c4c g     O .rwdata	00000004 alt_max_fd
20025ce4 g     F .text	000000f0 _fclose_r
20026060 g     F .text	00000030 fflush
200347cc g     O .bss	00000004 __malloc_max_sbrked_mem
200204bc g     F .text	00000054 tx_cb
20020444 g     F .text	00000078 manip2_2
2002afb4 g     F .text	000008ac .hidden __adddf3
2002795c g     F .text	0000010c __b2d
2002a8c8 g     F .text	00000538 .hidden __umoddi3
2002da90 g     F .text	000000d4 lseek
2002f7c0 g     F .text	00000050 altera_avalon_mutex_first_lock
20032c24 g     O .rwdata	00000004 _global_impure_ptr
20027f98 g     F .text	00000564 _realloc_r
20034928 g       *ABS*	00000000 __bss_end
2002ff9c g     F .text	000000f0 alt_iic_isr_register
200304bc g     F .text	00000108 alt_tick
2002a350 g     F .text	00000578 .hidden __udivdi3
2002a014 g     F .text	00000024 _fputwc_r
20030ea0 g     O .rodata	00000028 __mprec_bigtens
20026fc4 g     F .text	00000104 __s2b
2002d510 g     F .text	000000a8 .hidden __floatunsidf
2002769c g     F .text	00000060 __mcmp
20020290 g     F .text	00000030 manip1
20020cf4 g     F .text	00000018 __fp_lock_all
2002ff50 g     F .text	0000004c alt_ic_irq_enabled
20030420 g     F .text	0000009c alt_alarm_stop
200347f0 g     O .bss	00000004 alt_irq_active
20020510 g     F .text	000001f0 manip3
200200fc g     F .exceptions	000000d4 alt_irq_handler
200319c4 g     O .rwdata	00000028 alt_dev_null
2002f5fc g     F .text	00000054 altera_avalon_mutex_open
2002037c g     F .text	0000006c manip2_1
2002d728 g     F .text	00000048 alt_dcache_flush_all
200270c8 g     F .text	00000068 __hi0bits
2002d3b4 g     F .text	00000080 .hidden __fixdfsi
20032c74 g       *ABS*	00000000 __ram_rwdata_end
20032c44 g     O .rwdata	00000008 alt_dev_list
2002dee0 g     F .text	000000f8 write
20027dd0 g     F .text	000000a0 _putc_r
20032c60 g     O .rwdata	00000008 alt_mutex_list
20031120 g       *ABS*	00000000 __ram_rodata_end
2002d7d8 g     F .text	000000b0 fstat
2002c2ac g     F .text	000000f4 .hidden __ledf2
20027414 g     F .text	00000140 __pow5mult
20028760 g     F .text	0000145c ___vfiprintf_internal_r
200347e0 g     O .bss	00000004 __nlocale_changed
2002af5c g     F .text	00000058 .hidden __umodsi3
20034928 g       *ABS*	00000000 end
2002e2e0 g     F .text	000000c0 altera_avalon_jtag_uart_init
200201d0 g     F .exceptions	00000074 alt_instruction_exception_entry
20030c54 g       *ABS*	00000000 __CTOR_LIST__
2003e000 g       *ABS*	00000000 __alt_stack_pointer
2002f888 g     F .text	0000007c alt_avalon_timer_sc_init
2002d5b8 g     F .text	00000064 .hidden __clzsi2
2002e9c0 g     F .text	00000224 altera_avalon_jtag_uart_write
20020ce4 g     F .text	00000004 __sfp_lock_acquire
200216b8 g     F .text	000000e4 memchr
20021f84 g     F .text	000021f8 ___vfprintf_internal_r
20020320 g     F .text	0000005c Read_Modify_Write
200261b4 g     F .text	00000310 _free_r
20026a08 g     F .text	00000010 __locale_mb_cur_max
20030aa0 g     F .text	00000180 __call_exitprocs
200347dc g     O .bss	00000004 __mlocale_changed
20032c2c g     O .rwdata	00000004 __malloc_sbrk_base
20020244 g     F .text	0000004c _start
200347f4 g     O .bss	00000004 _alt_tick_rate
20027554 g     F .text	00000148 __lshift
200347f8 g     O .bss	00000004 _alt_nticks
2002dc64 g     F .text	000000fc read
2002e0e8 g     F .text	00000094 alt_sys_init
20030988 g     F .text	00000118 __register_exitproc
2002f6f8 g     F .text	00000054 altera_avalon_mutex_unlock
2002721c g     F .text	000001f8 __multiply
2002e64c g     F .text	00000068 altera_avalon_jtag_uart_close
20031120 g       *ABS*	00000000 __ram_rwdata_start
20030c54 g       *ABS*	00000000 __ram_rodata_start
20034800 g     O .bss	00000028 __malloc_current_mallinfo
20027a68 g     F .text	0000014c __d2b
2002e17c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
200306f0 g     F .text	000000a4 alt_get_fd
2002fa30 g     F .text	00000158 alt_busy_sleep
20024408 g     F .text	00000054 _close_r
2003090c g     F .text	0000007c memcmp
2002e23c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
20034928 g       *ABS*	00000000 __alt_stack_base
2002e28c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
200242b4 g     F .text	00000154 __swsetup_r
2002b860 g     F .text	000008e8 .hidden __divdf3
20020ba4 g     F .text	00000118 __sfp
20027ccc g     F .text	00000078 __copybits
20031544 g     O .rwdata	00000408 __malloc_av_
20020cf0 g     F .text	00000004 __sinit_lock_release
2002c3a0 g     F .text	00000718 .hidden __muldf3
20021db0 g     F .text	00000054 __sread
200203e8 g     F .text	0000005c Ex_Read_Modify_Write
200305e8 g     F .text	00000108 alt_find_file
2002fbc4 g     F .text	000000a4 alt_dev_llist_insert
2002dbe0 g     F .text	00000024 __malloc_lock
2002ddc4 g     F .text	000000b0 sbrk
20026004 g     F .text	0000005c _fflush_r
20029dec g     F .text	000000c4 _calloc_r
200347c8 g       *ABS*	00000000 __bss_start
200218e4 g     F .text	00000128 memset
200207f8 g     F .text	0000002c main
200347ec g     O .bss	00000004 alt_envp
200347c8 g     O .bss	00000004 __malloc_max_total_mem
2002e1dc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
20029dd4 g     F .text	00000018 __swbuf
20021ee4 g     F .text	00000008 __sclose
2003e000 g       *ABS*	00000000 __alt_heap_limit
20025dd4 g     F .text	00000014 fclose
2002f674 g     F .text	00000044 altera_avalon_mutex_lock
2002465c g     F .text	00001688 _dtoa_r
20020eac g     F .text	0000080c _malloc_r
2002a2c4 g     F .text	00000030 __ascii_wctomb
20032c50 g     O .rwdata	00000004 alt_errno
20020d24 g     F .text	000000c4 _fwalk
20020824 g     F .text	00000144 _fgets_r
20027e70 g     F .text	000000c8 putc
2002ae00 g     F .text	00000084 .hidden __divsi3
20026090 g     F .text	00000124 _malloc_trim_r
20030c54 g       *ABS*	00000000 __CTOR_END__
20028570 g     F .text	000000dc strcmp
20030c54 g       *ABS*	00000000 __flash_rodata_start
20030c54 g       *ABS*	00000000 __DTOR_LIST__
2002c148 g     F .text	00000088 .hidden __nedf2
2002e0b0 g     F .text	00000038 alt_irq_init
2002dd60 g     F .text	00000064 alt_release_fd
20030fb0 g     O .rodata	00000100 .hidden __clz_tab
200347d8 g     O .bss	00000004 _PathLocale
200308c0 g     F .text	00000014 atexit
20024254 g     F .text	00000060 _write_r
20026a38 g     F .text	00000018 setlocale
20020740 g     F .text	0000006c manip4
20032c28 g     O .rwdata	00000004 _impure_ptr
200347e4 g     O .bss	00000004 alt_argc
20025de8 g     F .text	0000021c __sflush_r
2002fcc8 g     F .text	00000060 _do_dtors
20020000 g       *ABS*	00000000 __alt_mem_cpu_0_0_SRAM_0
20026a24 g     F .text	00000008 __locale_cjk_lang
20021b88 g     F .text	000001d4 __srefill_r
20020020 g       .exceptions	00000000 alt_irq_entry
200278f8 g     F .text	00000064 __ulp
20020d0c g     F .text	00000018 __fp_unlock_all
20032c3c g     O .rwdata	00000008 alt_fs_list
20020020 g       *ABS*	00000000 __ram_exceptions_start
20026a50 g     F .text	0000000c localeconv
2002fdec g     F .text	00000050 alt_ic_isr_register
200202c0 g     F .text	00000060 setUp
20032c74 g       *ABS*	00000000 _edata
20034928 g       *ABS*	00000000 _end
20029eb0 g     F .text	00000164 __fputwc
20020244 g       *ABS*	00000000 __ram_exceptions_end
2002e6b4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
2002fec4 g     F .text	0000008c alt_ic_irq_disable
20032c58 g     O .rwdata	00000008 alt_mailbox_simple_list
20021e0c g     F .text	0000007c __swrite
20032c30 g     O .rwdata	00000004 __malloc_trim_threshold
20026a18 g     F .text	0000000c __locale_msgcharset
200308d4 g     F .text	00000038 exit
20020de8 g     F .text	000000c4 _fwalk_reent
200276fc g     F .text	000001fc __mdiff
2002ae84 g     F .text	00000074 .hidden __modsi3
2003e000 g       *ABS*	00000000 __alt_data_end
20020020 g     F .exceptions	00000000 alt_exception
20020ce8 g     F .text	00000004 __sfp_lock_release
2002ef44 g     F .text	000001e4 altera_avalon_mailbox_open
20030c20 g     F .text	00000034 _exit
2002f904 g     F .text	0000012c alt_alarm_start
20026abc g     F .text	000001bc __smakebuf_r
200207ac g     F .text	0000004c LED_official
20021eec g     F .text	00000098 strlen
200302cc g     F .text	00000154 open
2002c1d0 g     F .text	000000dc .hidden __gedf2
20032c38 g     O .rwdata	00000004 __wctomb
20028748 g     F .text	00000018 __sprint_r
2002fdb8 g     F .text	00000034 alt_icache_flush_all
20032c68 g     O .rwdata	00000004 alt_priority_mask
2002fe3c g     F .text	00000088 alt_ic_irq_enable
2002417c g     F .text	0000001c __vfprintf_internal
2002f650 g     F .text	00000024 altera_avalon_mutex_close
2002a2f4 g     F .text	0000005c _wctomb_r
2002cab8 g     F .text	000008fc .hidden __subdf3
20027130 g     F .text	000000b0 __lo0bits
20032c6c g     O .rwdata	00000008 alt_alarm_list
2002fc68 g     F .text	00000060 _do_ctors
2002a204 g     F .text	000000c0 wcrtomb
2002d658 g     F .text	000000d0 close
20020700 g     F .text	00000040 simple_modify
2002d9d0 g     F .text	00000084 alt_load
2002a038 g     F .text	00000080 fputwc
20020cec g     F .text	00000004 __sinit_lock_acquire
20026ea4 g     F .text	00000120 __multadd
20026e7c g     F .text	00000028 _Bfree



Disassembly of section .entry:

20020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
20020000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
20020004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
20020008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
2002000c:	00bffd16 	blt	zero,r2,20020004 <__alt_data_end+0xfffe2004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
20020010:	004800b4 	movhi	at,8194
    ori r1, r1, %lo(_start)
20020014:	08409114 	ori	at,at,580
    jmp r1
20020018:	0800683a 	jmp	at
2002001c:	00000000 	call	20000000 <__alt_mem_sdram_controller+0x10000000>

Disassembly of section .exceptions:

20020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
20020020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
20020024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
20020028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
2002002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
20020030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
20020034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
20020038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
2002003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
20020040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
20020044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
20020048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
2002004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
20020050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
20020054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
20020058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
2002005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
20020060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
20020064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
20020068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
2002006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
20020070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
20020074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
20020078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
2002007c:	10000326 	beq	r2,zero,2002008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
20020080:	20000226 	beq	r4,zero,2002008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
20020084:	00200fc0 	call	200200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
20020088:	00000706 	br	200200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
2002008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
20020090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
20020094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
20020098:	00201d00 	call	200201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
2002009c:	1000021e 	bne	r2,zero,200200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
200200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
200200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
200200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
200200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
200200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
200200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
200200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
200200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
200200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
200200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
200200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
200200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
200200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
200200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
200200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
200200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
200200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
200200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
200200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
200200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
200200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
200200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
200200f8:	ef80083a 	eret

200200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
200200fc:	defff904 	addi	sp,sp,-28
20020100:	dfc00615 	stw	ra,24(sp)
20020104:	df000515 	stw	fp,20(sp)
20020108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
2002010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
20020110:	0005313a 	rdctl	r2,ipending
20020114:	e0bffe15 	stw	r2,-8(fp)

  return active;
20020118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
2002011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
20020120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
20020124:	00800044 	movi	r2,1
20020128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
2002012c:	e0fffb17 	ldw	r3,-20(fp)
20020130:	e0bffc17 	ldw	r2,-16(fp)
20020134:	1884703a 	and	r2,r3,r2
20020138:	10001426 	beq	r2,zero,2002018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
2002013c:	008800f4 	movhi	r2,8195
20020140:	10920a04 	addi	r2,r2,18472
20020144:	e0fffd17 	ldw	r3,-12(fp)
20020148:	180690fa 	slli	r3,r3,3
2002014c:	10c5883a 	add	r2,r2,r3
20020150:	10c00017 	ldw	r3,0(r2)
20020154:	008800f4 	movhi	r2,8195
20020158:	10920a04 	addi	r2,r2,18472
2002015c:	e13ffd17 	ldw	r4,-12(fp)
20020160:	200890fa 	slli	r4,r4,3
20020164:	1105883a 	add	r2,r2,r4
20020168:	10800104 	addi	r2,r2,4
2002016c:	10800017 	ldw	r2,0(r2)
20020170:	1009883a 	mov	r4,r2
20020174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
20020178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
2002017c:	0005313a 	rdctl	r2,ipending
20020180:	e0bfff15 	stw	r2,-4(fp)

  return active;
20020184:	e0bfff17 	ldw	r2,-4(fp)
20020188:	00000706 	br	200201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
2002018c:	e0bffc17 	ldw	r2,-16(fp)
20020190:	1085883a 	add	r2,r2,r2
20020194:	e0bffc15 	stw	r2,-16(fp)
      i++;
20020198:	e0bffd17 	ldw	r2,-12(fp)
2002019c:	10800044 	addi	r2,r2,1
200201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
200201a4:	003fe106 	br	2002012c <__alt_data_end+0xfffe212c>

    active = alt_irq_pending ();
200201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
200201ac:	e0bffb17 	ldw	r2,-20(fp)
200201b0:	103fdb1e 	bne	r2,zero,20020120 <__alt_data_end+0xfffe2120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
200201b4:	0001883a 	nop
}
200201b8:	0001883a 	nop
200201bc:	e037883a 	mov	sp,fp
200201c0:	dfc00117 	ldw	ra,4(sp)
200201c4:	df000017 	ldw	fp,0(sp)
200201c8:	dec00204 	addi	sp,sp,8
200201cc:	f800283a 	ret

200201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
200201d0:	defffb04 	addi	sp,sp,-20
200201d4:	dfc00415 	stw	ra,16(sp)
200201d8:	df000315 	stw	fp,12(sp)
200201dc:	df000304 	addi	fp,sp,12
200201e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
200201e4:	000531fa 	rdctl	r2,exception
200201e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
200201ec:	e0bffd17 	ldw	r2,-12(fp)
200201f0:	10801f0c 	andi	r2,r2,124
200201f4:	1004d0ba 	srli	r2,r2,2
200201f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
200201fc:	0005333a 	rdctl	r2,badaddr
20020200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
20020204:	d0a6f617 	ldw	r2,-25640(gp)
20020208:	10000726 	beq	r2,zero,20020228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
2002020c:	d0a6f617 	ldw	r2,-25640(gp)
20020210:	e0fffd17 	ldw	r3,-12(fp)
20020214:	e1bffe17 	ldw	r6,-8(fp)
20020218:	e17fff17 	ldw	r5,-4(fp)
2002021c:	1809883a 	mov	r4,r3
20020220:	103ee83a 	callr	r2
20020224:	00000206 	br	20020230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
20020228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
2002022c:	0005883a 	mov	r2,zero
}
20020230:	e037883a 	mov	sp,fp
20020234:	dfc00117 	ldw	ra,4(sp)
20020238:	df000017 	ldw	fp,0(sp)
2002023c:	dec00204 	addi	sp,sp,8
20020240:	f800283a 	ret

Disassembly of section .text:

20020244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
20020244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
20020248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
2002024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
20020250:	00bffd16 	blt	zero,r2,20020248 <__alt_data_end+0xfffe2248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
20020254:	06c800f4 	movhi	sp,8195
    ori sp, sp, %lo(__alt_stack_pointer)
20020258:	def80014 	ori	sp,sp,57344
    movhi gp, %hi(_gp)
2002025c:	068800f4 	movhi	gp,8195
    ori gp, gp, %lo(_gp)
20020260:	d6ab0914 	ori	gp,gp,44068
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
20020264:	008800f4 	movhi	r2,8195
    ori r2, r2, %lo(__bss_start)
20020268:	1091f214 	ori	r2,r2,18376

    movhi r3, %hi(__bss_end)
2002026c:	00c800f4 	movhi	r3,8195
    ori r3, r3, %lo(__bss_end)
20020270:	18d24a14 	ori	r3,r3,18728

    beq r2, r3, 1f
20020274:	10c00326 	beq	r2,r3,20020284 <_start+0x40>

0:
    stw zero, (r2)
20020278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
2002027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
20020280:	10fffd36 	bltu	r2,r3,20020278 <__alt_data_end+0xfffe2278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
20020284:	002d9d00 	call	2002d9d0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
20020288:	002db640 	call	2002db64 <alt_main>

2002028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
2002028c:	003fff06 	br	2002028c <__alt_data_end+0xfffe228c>

20020290 <manip1>:


/*
Manipulation 1: Prints "Hello World from CPU 0"
*/
void manip1(){
20020290:	defffe04 	addi	sp,sp,-8
20020294:	dfc00115 	stw	ra,4(sp)
20020298:	df000015 	stw	fp,0(sp)
2002029c:	d839883a 	mov	fp,sp
  while (1){
    printf("Hello from CPU %d.\n", ALT_CPU_CPU_ID_VALUE);
200202a0:	000b883a 	mov	r5,zero
200202a4:	010800f4 	movhi	r4,8195
200202a8:	21031504 	addi	r4,r4,3156
200202ac:	0021a3c0 	call	20021a3c <printf>
    usleep(3000000);
200202b0:	01000bb4 	movhi	r4,46
200202b4:	2131b004 	addi	r4,r4,-14656
200202b8:	002de740 	call	2002de74 <usleep>
  }
200202bc:	003ff806 	br	200202a0 <__alt_data_end+0xfffe22a0>

200202c0 <setUp>:
}

// Set up IPs
void setUp(){
200202c0:	deffff04 	addi	sp,sp,-4
200202c4:	df000015 	stw	fp,0(sp)
200202c8:	d839883a 	mov	fp,sp
  // reset + start counter
  IOWR_32DIRECT(CPU_0_0_CUSTOM_COUNTER_0_BASE, IRERESET, 0xffffffff);
200202cc:	00ffffc4 	movi	r3,-1
200202d0:	00880134 	movhi	r2,8196
200202d4:	10842404 	addi	r2,r2,4240
200202d8:	10c00035 	stwio	r3,0(r2)
  IOWR_32DIRECT(CPU_0_0_CUSTOM_COUNTER_0_BASE, IRESTART, 0xffffffff);
200202dc:	00ffffc4 	movi	r3,-1
200202e0:	00880134 	movhi	r2,8196
200202e4:	10842504 	addi	r2,r2,4244
200202e8:	10c00035 	stwio	r3,0(r2)

  // set LED_0 and shared PIO as output
  IOWR_8DIRECT(CPU_0_0_LED_0_BASE, IREGDIR, 0xff);
200202ec:	00ffffc4 	movi	r3,-1
200202f0:	00880134 	movhi	r2,8196
200202f4:	10842004 	addi	r2,r2,4224
200202f8:	10c00025 	stbio	r3,0(r2)
  IOWR_8DIRECT(SHARED_PIO_BASE, IREGDIR, 0xff);
200202fc:	00ffffc4 	movi	r3,-1
20020300:	00850034 	movhi	r2,5120
20020304:	10800804 	addi	r2,r2,32
20020308:	10c00025 	stbio	r3,0(r2)
}
2002030c:	0001883a 	nop
20020310:	e037883a 	mov	sp,fp
20020314:	df000017 	ldw	fp,0(sp)
20020318:	dec00104 	addi	sp,sp,4
2002031c:	f800283a 	ret

20020320 <Read_Modify_Write>:

// read_modify_write PIO counter
void Read_Modify_Write(uint32_t base_addr, uint8_t increment){
20020320:	defffc04 	addi	sp,sp,-16
20020324:	df000315 	stw	fp,12(sp)
20020328:	df000304 	addi	fp,sp,12
2002032c:	e13ffe15 	stw	r4,-8(fp)
20020330:	2805883a 	mov	r2,r5
20020334:	e0bfff05 	stb	r2,-4(fp)
  // read PIO
  uint8_t current = IORD_8DIRECT(base_addr, IREGPIN);
20020338:	e0bffe17 	ldw	r2,-8(fp)
2002033c:	10800044 	addi	r2,r2,1
20020340:	10800023 	ldbuio	r2,0(r2)
20020344:	10803fcc 	andi	r2,r2,255
20020348:	e0bffd05 	stb	r2,-12(fp)
  // modify + write
  IOWR_8DIRECT(base_addr, IREGPORT, current+increment);
2002034c:	e0bffe17 	ldw	r2,-8(fp)
20020350:	10800084 	addi	r2,r2,2
20020354:	1009883a 	mov	r4,r2
20020358:	e0fffd03 	ldbu	r3,-12(fp)
2002035c:	e0bfff03 	ldbu	r2,-4(fp)
20020360:	1885883a 	add	r2,r3,r2
20020364:	20800025 	stbio	r2,0(r4)
}
20020368:	0001883a 	nop
2002036c:	e037883a 	mov	sp,fp
20020370:	df000017 	ldw	fp,0(sp)
20020374:	dec00104 	addi	sp,sp,4
20020378:	f800283a 	ret

2002037c <manip2_1>:

/*
Manipulation 2.1: Access PIO connected to LED
*/
void manip2_1(){
2002037c:	defffc04 	addi	sp,sp,-16
20020380:	dfc00315 	stw	ra,12(sp)
20020384:	df000215 	stw	fp,8(sp)
20020388:	df000204 	addi	fp,sp,8
  setUp();
2002038c:	00202c00 	call	200202c0 <setUp>

  // each processor read_modify_write the LED every 50ms
  while(1){
    uint32_t start = IORD_32DIRECT(CPU_0_0_CUSTOM_COUNTER_0_BASE, IRECOUNTER);
20020390:	00880134 	movhi	r2,8196
20020394:	10842704 	addi	r2,r2,4252
20020398:	10800037 	ldwio	r2,0(r2)
2002039c:	e0bffe15 	stw	r2,-8(fp)
    Read_Modify_Write(CPU_0_0_CUSTOMPIO_0_BASE, 1);
200203a0:	01400044 	movi	r5,1
200203a4:	01080134 	movhi	r4,8196
200203a8:	21042804 	addi	r4,r4,4256
200203ac:	00203200 	call	20020320 <Read_Modify_Write>
    uint32_t end = IORD_32DIRECT(CPU_0_0_CUSTOM_COUNTER_0_BASE, IRECOUNTER);
200203b0:	00880134 	movhi	r2,8196
200203b4:	10842704 	addi	r2,r2,4252
200203b8:	10800037 	ldwio	r2,0(r2)
200203bc:	e0bfff15 	stw	r2,-4(fp)
    printf("Access time to LED: %ld cycles\n", end-start);
200203c0:	e0ffff17 	ldw	r3,-4(fp)
200203c4:	e0bffe17 	ldw	r2,-8(fp)
200203c8:	1885c83a 	sub	r2,r3,r2
200203cc:	100b883a 	mov	r5,r2
200203d0:	010800f4 	movhi	r4,8195
200203d4:	21031a04 	addi	r4,r4,3176
200203d8:	0021a3c0 	call	20021a3c <printf>
    usleep(50000);  // 50ms
200203dc:	0130d414 	movui	r4,50000
200203e0:	002de740 	call	2002de74 <usleep>
  }
200203e4:	003fea06 	br	20020390 <__alt_data_end+0xfffe2390>

200203e8 <Ex_Read_Modify_Write>:
}

// exclusive read_modify_write PIO counter
void Ex_Read_Modify_Write(uint32_t base_addr, uint8_t increment, alt_mutex_dev* mutex){
200203e8:	defffb04 	addi	sp,sp,-20
200203ec:	dfc00415 	stw	ra,16(sp)
200203f0:	df000315 	stw	fp,12(sp)
200203f4:	df000304 	addi	fp,sp,12
200203f8:	e13ffd15 	stw	r4,-12(fp)
200203fc:	2805883a 	mov	r2,r5
20020400:	e1bfff15 	stw	r6,-4(fp)
20020404:	e0bffe05 	stb	r2,-8(fp)
  // acquire the mutex, setting the value to one
  altera_avalon_mutex_lock(mutex, 1);
20020408:	01400044 	movi	r5,1
2002040c:	e13fff17 	ldw	r4,-4(fp)
20020410:	002f6740 	call	2002f674 <altera_avalon_mutex_lock>
  //IOWR_8DIRECT(SHARED_PIO_BASE, IREGSET, 0x1);
  // Access a shared resource here.
  Read_Modify_Write(base_addr, increment);
20020414:	e0bffe03 	ldbu	r2,-8(fp)
20020418:	100b883a 	mov	r5,r2
2002041c:	e13ffd17 	ldw	r4,-12(fp)
20020420:	00203200 	call	20020320 <Read_Modify_Write>
  //printf("CPU_0 in Mutex\n");
  //usleep(100000); // 20ms
  // release the lock
  //IOWR_8DIRECT(SHARED_PIO_BASE, IREGCLR, 0x1);
  altera_avalon_mutex_unlock(mutex);
20020424:	e13fff17 	ldw	r4,-4(fp)
20020428:	002f6f80 	call	2002f6f8 <altera_avalon_mutex_unlock>
}
2002042c:	0001883a 	nop
20020430:	e037883a 	mov	sp,fp
20020434:	dfc00117 	ldw	ra,4(sp)
20020438:	df000017 	ldw	fp,0(sp)
2002043c:	dec00204 	addi	sp,sp,8
20020440:	f800283a 	ret

20020444 <manip2_2>:

/*
Manipulation 2.2: Access shared PIO with Hardware Mutex
*/
void manip2_2(){
20020444:	defffb04 	addi	sp,sp,-20
20020448:	dfc00415 	stw	ra,16(sp)
2002044c:	df000315 	stw	fp,12(sp)
20020450:	df000304 	addi	fp,sp,12
  setUp();
20020454:	00202c00 	call	200202c0 <setUp>
  // get the mutex device handle
  alt_mutex_dev* cpu_0_mutex = altera_avalon_mutex_open(SHARED_MUTEX_PIO_NAME);
20020458:	010800f4 	movhi	r4,8195
2002045c:	21032204 	addi	r4,r4,3208
20020460:	002f5fc0 	call	2002f5fc <altera_avalon_mutex_open>
20020464:	e0bffd15 	stw	r2,-12(fp)

  // processor 0 exclusive read_modify_write the LED every 20ms
  while(1){
    uint32_t start = IORD_32DIRECT(CPU_0_0_CUSTOM_COUNTER_0_BASE, IRECOUNTER);
20020468:	00880134 	movhi	r2,8196
2002046c:	10842704 	addi	r2,r2,4252
20020470:	10800037 	ldwio	r2,0(r2)
20020474:	e0bffe15 	stw	r2,-8(fp)
    Ex_Read_Modify_Write(CPU_0_0_CUSTOMPIO_0_BASE, 1, cpu_0_mutex);
20020478:	e1bffd17 	ldw	r6,-12(fp)
2002047c:	01400044 	movi	r5,1
20020480:	01080134 	movhi	r4,8196
20020484:	21042804 	addi	r4,r4,4256
20020488:	00203e80 	call	200203e8 <Ex_Read_Modify_Write>
    uint32_t end = IORD_32DIRECT(CPU_0_0_CUSTOM_COUNTER_0_BASE, IRECOUNTER);
2002048c:	00880134 	movhi	r2,8196
20020490:	10842704 	addi	r2,r2,4252
20020494:	10800037 	ldwio	r2,0(r2)
20020498:	e0bfff15 	stw	r2,-4(fp)
    printf("Exclusive access time from CPU0 to shared PIO: %ld cycles\n", end-start);
2002049c:	e0ffff17 	ldw	r3,-4(fp)
200204a0:	e0bffe17 	ldw	r2,-8(fp)
200204a4:	1885c83a 	sub	r2,r3,r2
200204a8:	100b883a 	mov	r5,r2
200204ac:	010800f4 	movhi	r4,8195
200204b0:	21032804 	addi	r4,r4,3232
200204b4:	0021a3c0 	call	20021a3c <printf>
    //usleep(20000); // 20ms
  }
200204b8:	003feb06 	br	20020468 <__alt_data_end+0xfffe2468>

200204bc <tx_cb>:
/*
Manipulation 3: Hardware Mailbox
*/

// CPU_0 as sender
void tx_cb (void* report, int status){
200204bc:	defffc04 	addi	sp,sp,-16
200204c0:	dfc00315 	stw	ra,12(sp)
200204c4:	df000215 	stw	fp,8(sp)
200204c8:	df000204 	addi	fp,sp,8
200204cc:	e13ffe15 	stw	r4,-8(fp)
200204d0:	e17fff15 	stw	r5,-4(fp)
  if (!status){
200204d4:	e0bfff17 	ldw	r2,-4(fp)
200204d8:	1000041e 	bne	r2,zero,200204ec <tx_cb+0x30>
    printf("Transfer done\n");
200204dc:	010800f4 	movhi	r4,8195
200204e0:	21033704 	addi	r4,r4,3292
200204e4:	0021b580 	call	20021b58 <puts>
  }else {
    printf("error in transfer\n");
  }
}
200204e8:	00000306 	br	200204f8 <tx_cb+0x3c>
// CPU_0 as sender
void tx_cb (void* report, int status){
  if (!status){
    printf("Transfer done\n");
  }else {
    printf("error in transfer\n");
200204ec:	010800f4 	movhi	r4,8195
200204f0:	21033b04 	addi	r4,r4,3308
200204f4:	0021b580 	call	20021b58 <puts>
  }
}
200204f8:	0001883a 	nop
200204fc:	e037883a 	mov	sp,fp
20020500:	dfc00117 	ldw	ra,4(sp)
20020504:	df000017 	ldw	fp,0(sp)
20020508:	dec00204 	addi	sp,sp,8
2002050c:	f800283a 	ret

20020510 <manip3>:

void manip3()
{
20020510:	deffef04 	addi	sp,sp,-68
20020514:	dfc01015 	stw	ra,64(sp)
20020518:	df000f15 	stw	fp,60(sp)
2002051c:	df000f04 	addi	fp,sp,60
  alt_u32 tx_msg[2] = {0x0, 0x0};
20020520:	e03ff615 	stw	zero,-40(fp)
20020524:	e03ff715 	stw	zero,-36(fp)
  char *msg_pt = SDRAM_CONTROLLER_BASE;
20020528:	00840034 	movhi	r2,4096
2002052c:	e0bff315 	stw	r2,-52(fp)
  altera_avalon_mailbox_dev* mailbox_sender;
  mailbox_sender = altera_avalon_mailbox_open(SHARED_MAILBOX_NAME, tx_cb, NULL);
20020530:	000d883a 	mov	r6,zero
20020534:	014800b4 	movhi	r5,8194
20020538:	29412f04 	addi	r5,r5,1212
2002053c:	010800f4 	movhi	r4,8195
20020540:	21034004 	addi	r4,r4,3328
20020544:	002ef440 	call	2002ef44 <altera_avalon_mailbox_open>
20020548:	e0bff415 	stw	r2,-48(fp)
  if(!mailbox_sender){
2002054c:	e0bff417 	ldw	r2,-48(fp)
20020550:	1000031e 	bne	r2,zero,20020560 <manip3+0x50>
	  printf ("FAIL: Unable to open mailbox_simple");
20020554:	010800f4 	movhi	r4,8195
20020558:	21034504 	addi	r4,r4,3348
2002055c:	0021a3c0 	call	20021a3c <printf>
  }

  char message[30];
  printf("\nInput Message: ");
20020560:	010800f4 	movhi	r4,8195
20020564:	21034e04 	addi	r4,r4,3384
20020568:	0021a3c0 	call	20021a3c <printf>
  fgets(message, sizeof(message), stdin);  // read string
2002056c:	d0a00117 	ldw	r2,-32764(gp)
20020570:	10c00117 	ldw	r3,4(r2)
20020574:	e0bff804 	addi	r2,fp,-32
20020578:	180d883a 	mov	r6,r3
2002057c:	01400784 	movi	r5,30
20020580:	1009883a 	mov	r4,r2
20020584:	00209680 	call	20020968 <fgets>
  //puts(message);
  for(int i = 0; i < 30; i++){
20020588:	e03ff115 	stw	zero,-60(fp)
2002058c:	00002006 	br	20020610 <manip3+0x100>
	  if (message[i] == '/'){
20020590:	e0fff804 	addi	r3,fp,-32
20020594:	e0bff117 	ldw	r2,-60(fp)
20020598:	1885883a 	add	r2,r3,r2
2002059c:	10800003 	ldbu	r2,0(r2)
200205a0:	10803fcc 	andi	r2,r2,255
200205a4:	1080201c 	xori	r2,r2,128
200205a8:	10bfe004 	addi	r2,r2,-128
200205ac:	10800bd8 	cmpnei	r2,r2,47
200205b0:	10001b26 	beq	r2,zero,20020620 <manip3+0x110>
		  break;
	  }
	  *(msg_pt+i) = message[i];
200205b4:	e0bff117 	ldw	r2,-60(fp)
200205b8:	e0fff317 	ldw	r3,-52(fp)
200205bc:	1885883a 	add	r2,r3,r2
200205c0:	e13ff804 	addi	r4,fp,-32
200205c4:	e0fff117 	ldw	r3,-60(fp)
200205c8:	20c7883a 	add	r3,r4,r3
200205cc:	18c00003 	ldbu	r3,0(r3)
200205d0:	10c00005 	stb	r3,0(r2)
	  tx_msg[0] = i+1;
200205d4:	e0bff117 	ldw	r2,-60(fp)
200205d8:	10800044 	addi	r2,r2,1
200205dc:	e0bff615 	stw	r2,-40(fp)
	  printf("%c", message[i]);
200205e0:	e0fff804 	addi	r3,fp,-32
200205e4:	e0bff117 	ldw	r2,-60(fp)
200205e8:	1885883a 	add	r2,r3,r2
200205ec:	10800003 	ldbu	r2,0(r2)
200205f0:	10803fcc 	andi	r2,r2,255
200205f4:	1080201c 	xori	r2,r2,128
200205f8:	10bfe004 	addi	r2,r2,-128
200205fc:	1009883a 	mov	r4,r2
20020600:	0021a800 	call	20021a80 <putchar>

  char message[30];
  printf("\nInput Message: ");
  fgets(message, sizeof(message), stdin);  // read string
  //puts(message);
  for(int i = 0; i < 30; i++){
20020604:	e0bff117 	ldw	r2,-60(fp)
20020608:	10800044 	addi	r2,r2,1
2002060c:	e0bff115 	stw	r2,-60(fp)
20020610:	e0bff117 	ldw	r2,-60(fp)
20020614:	10800790 	cmplti	r2,r2,30
20020618:	103fdd1e 	bne	r2,zero,20020590 <__alt_data_end+0xfffe2590>
2002061c:	00000106 	br	20020624 <manip3+0x114>
	  if (message[i] == '/'){
		  break;
20020620:	0001883a 	nop
	  *(msg_pt+i) = message[i];
	  tx_msg[0] = i+1;
	  printf("%c", message[i]);
  }

  tx_msg[1] = (alt_u32) msg_pt;
20020624:	e0bff317 	ldw	r2,-52(fp)
20020628:	e0bff715 	stw	r2,-36(fp)
  alt_dcache_flush_all();
2002062c:	002d7280 	call	2002d728 <alt_dcache_flush_all>
  alt_u32 status = altera_avalon_mailbox_send(mailbox_sender, tx_msg, 0, POLL);
20020630:	e0bff604 	addi	r2,fp,-40
20020634:	01c00044 	movi	r7,1
20020638:	000d883a 	mov	r6,zero
2002063c:	100b883a 	mov	r5,r2
20020640:	e13ff417 	ldw	r4,-48(fp)
20020644:	002f2b80 	call	2002f2b8 <altera_avalon_mailbox_send>
20020648:	e0bff515 	stw	r2,-44(fp)

  if(status){
2002064c:	e0bff517 	ldw	r2,-44(fp)
20020650:	10000426 	beq	r2,zero,20020664 <manip3+0x154>
    printf("error in transfer: \n");
20020654:	010800f4 	movhi	r4,8195
20020658:	21035304 	addi	r4,r4,3404
2002065c:	0021b580 	call	20021b58 <puts>
20020660:	00001f06 	br	200206e0 <manip3+0x1d0>
  }else{
	printf("\nTransfer Start\n");
20020664:	010800f4 	movhi	r4,8195
20020668:	21035804 	addi	r4,r4,3424
2002066c:	0021b580 	call	20021b58 <puts>
    printf("Message Start Address: 0x%x\n", tx_msg[1]);
20020670:	e0bff717 	ldw	r2,-36(fp)
20020674:	100b883a 	mov	r5,r2
20020678:	010800f4 	movhi	r4,8195
2002067c:	21035c04 	addi	r4,r4,3440
20020680:	0021a3c0 	call	20021a3c <printf>
    printf("Transmit Message Content: ");
20020684:	010800f4 	movhi	r4,8195
20020688:	21036404 	addi	r4,r4,3472
2002068c:	0021a3c0 	call	20021a3c <printf>
    for (int i = 0; i<tx_msg[0]; i++){
20020690:	e03ff215 	stw	zero,-56(fp)
20020694:	00000c06 	br	200206c8 <manip3+0x1b8>
    	printf("%c", *(msg_pt+i));
20020698:	e0bff217 	ldw	r2,-56(fp)
2002069c:	e0fff317 	ldw	r3,-52(fp)
200206a0:	1885883a 	add	r2,r3,r2
200206a4:	10800003 	ldbu	r2,0(r2)
200206a8:	10803fcc 	andi	r2,r2,255
200206ac:	1080201c 	xori	r2,r2,128
200206b0:	10bfe004 	addi	r2,r2,-128
200206b4:	1009883a 	mov	r4,r2
200206b8:	0021a800 	call	20021a80 <putchar>
    printf("error in transfer: \n");
  }else{
	printf("\nTransfer Start\n");
    printf("Message Start Address: 0x%x\n", tx_msg[1]);
    printf("Transmit Message Content: ");
    for (int i = 0; i<tx_msg[0]; i++){
200206bc:	e0bff217 	ldw	r2,-56(fp)
200206c0:	10800044 	addi	r2,r2,1
200206c4:	e0bff215 	stw	r2,-56(fp)
200206c8:	e0bff617 	ldw	r2,-40(fp)
200206cc:	e0fff217 	ldw	r3,-56(fp)
200206d0:	18bff136 	bltu	r3,r2,20020698 <__alt_data_end+0xfffe2698>
    	printf("%c", *(msg_pt+i));
    }
    printf("\nTransfer done!\n");
200206d4:	010800f4 	movhi	r4,8195
200206d8:	21036b04 	addi	r4,r4,3500
200206dc:	0021b580 	call	20021b58 <puts>
  }

  altera_avalon_mailbox_close(mailbox_sender);
200206e0:	e13ff417 	ldw	r4,-48(fp)
200206e4:	002f1280 	call	2002f128 <altera_avalon_mailbox_close>
}
200206e8:	0001883a 	nop
200206ec:	e037883a 	mov	sp,fp
200206f0:	dfc00117 	ldw	ra,4(sp)
200206f4:	df000017 	ldw	fp,0(sp)
200206f8:	dec00204 	addi	sp,sp,8
200206fc:	f800283a 	ret

20020700 <simple_modify>:


// simple write of increment/initialize value
void simple_modify(uint32_t base_addr, uint8_t increment){
20020700:	defffd04 	addi	sp,sp,-12
20020704:	df000215 	stw	fp,8(sp)
20020708:	df000204 	addi	fp,sp,8
2002070c:	e13ffe15 	stw	r4,-8(fp)
20020710:	2805883a 	mov	r2,r5
20020714:	e0bfff05 	stb	r2,-4(fp)
  // simple modify + write
  IOWR_8DIRECT(base_addr, IREGPORT_INC, increment);
20020718:	e0bffe17 	ldw	r2,-8(fp)
2002071c:	108001c4 	addi	r2,r2,7
20020720:	1007883a 	mov	r3,r2
20020724:	e0bfff03 	ldbu	r2,-4(fp)
20020728:	18800025 	stbio	r2,0(r3)
}
2002072c:	0001883a 	nop
20020730:	e037883a 	mov	sp,fp
20020734:	df000017 	ldw	fp,0(sp)
20020738:	dec00104 	addi	sp,sp,4
2002073c:	f800283a 	ret

20020740 <manip4>:

/*
Manipulation 4: Hardware Counter
*/
void manip4()
{
20020740:	defffc04 	addi	sp,sp,-16
20020744:	dfc00315 	stw	ra,12(sp)
20020748:	df000215 	stw	fp,8(sp)
2002074c:	df000204 	addi	fp,sp,8
  setUp();
20020750:	00202c00 	call	200202c0 <setUp>
  // processor 0 simple-increment the shared PIO counter
  while(1){
    uint32_t start = IORD_32DIRECT(CPU_0_0_CUSTOM_COUNTER_0_BASE, IRECOUNTER);
20020754:	00880134 	movhi	r2,8196
20020758:	10842704 	addi	r2,r2,4252
2002075c:	10800037 	ldwio	r2,0(r2)
20020760:	e0bffe15 	stw	r2,-8(fp)
    simple_modify(SHARED_PIO_BASE, 1);
20020764:	01400044 	movi	r5,1
20020768:	01050034 	movhi	r4,5120
2002076c:	21000804 	addi	r4,r4,32
20020770:	00207000 	call	20020700 <simple_modify>
    uint32_t end = IORD_32DIRECT(CPU_0_0_CUSTOM_COUNTER_0_BASE, IRECOUNTER);
20020774:	00880134 	movhi	r2,8196
20020778:	10842704 	addi	r2,r2,4252
2002077c:	10800037 	ldwio	r2,0(r2)
20020780:	e0bfff15 	stw	r2,-4(fp)
    printf("Access time to shared PIO: %ld cycles\n", end-start);
20020784:	e0ffff17 	ldw	r3,-4(fp)
20020788:	e0bffe17 	ldw	r2,-8(fp)
2002078c:	1885c83a 	sub	r2,r3,r2
20020790:	100b883a 	mov	r5,r2
20020794:	010800f4 	movhi	r4,8195
20020798:	21036f04 	addi	r4,r4,3516
2002079c:	0021a3c0 	call	20021a3c <printf>
    usleep(20000); // 20ms
200207a0:	01138804 	movi	r4,20000
200207a4:	002de740 	call	2002de74 <usleep>
  }
200207a8:	003fea06 	br	20020754 <__alt_data_end+0xfffe2754>

200207ac <LED_official>:

}


void LED_official()
{
200207ac:	defffe04 	addi	sp,sp,-8
200207b0:	dfc00115 	stw	ra,4(sp)
200207b4:	df000015 	stw	fp,0(sp)
200207b8:	d839883a 	mov	fp,sp
  while (1)
  {
    IOWR_8DIRECT(CPU_0_0_LED_0_BASE, 0x0, 0x1);
200207bc:	00c00044 	movi	r3,1
200207c0:	00880134 	movhi	r2,8196
200207c4:	10842004 	addi	r2,r2,4224
200207c8:	10c00025 	stbio	r3,0(r2)
    usleep(2000000); // 20ms
200207cc:	010007f4 	movhi	r4,31
200207d0:	21212004 	addi	r4,r4,-31616
200207d4:	002de740 	call	2002de74 <usleep>
    IOWR_8DIRECT(CPU_0_0_LED_0_BASE, 0x0, 0x0);
200207d8:	0007883a 	mov	r3,zero
200207dc:	00880134 	movhi	r2,8196
200207e0:	10842004 	addi	r2,r2,4224
200207e4:	10c00025 	stbio	r3,0(r2)
    usleep(2000000); // 20ms
200207e8:	010007f4 	movhi	r4,31
200207ec:	21212004 	addi	r4,r4,-31616
200207f0:	002de740 	call	2002de74 <usleep>
  }
200207f4:	003ff106 	br	200207bc <__alt_data_end+0xfffe27bc>

200207f8 <main>:
}


int main(void)
{
200207f8:	defffe04 	addi	sp,sp,-8
200207fc:	dfc00115 	stw	ra,4(sp)
20020800:	df000015 	stw	fp,0(sp)
20020804:	d839883a 	mov	fp,sp
	//LED_official();
	//manip1();
	//manip2_1();
	//manip2_2();
	//manip3();
	manip4();
20020808:	00207400 	call	20020740 <manip4>
	return 0;
2002080c:	0005883a 	mov	r2,zero
}
20020810:	e037883a 	mov	sp,fp
20020814:	dfc00117 	ldw	ra,4(sp)
20020818:	df000017 	ldw	fp,0(sp)
2002081c:	dec00204 	addi	sp,sp,8
20020820:	f800283a 	ret

20020824 <_fgets_r>:
20020824:	00c00044 	movi	r3,1
20020828:	19804d0e 	bge	r3,r6,20020960 <_fgets_r+0x13c>
2002082c:	defff804 	addi	sp,sp,-32
20020830:	dd000415 	stw	r20,16(sp)
20020834:	dcc00315 	stw	r19,12(sp)
20020838:	dc800215 	stw	r18,8(sp)
2002083c:	dc400115 	stw	r17,4(sp)
20020840:	dfc00715 	stw	ra,28(sp)
20020844:	dd800615 	stw	r22,24(sp)
20020848:	dd400515 	stw	r21,20(sp)
2002084c:	dc000015 	stw	r16,0(sp)
20020850:	2027883a 	mov	r19,r4
20020854:	3823883a 	mov	r17,r7
20020858:	2829883a 	mov	r20,r5
2002085c:	3025883a 	mov	r18,r6
20020860:	20000226 	beq	r4,zero,2002086c <_fgets_r+0x48>
20020864:	20800e17 	ldw	r2,56(r4)
20020868:	10003926 	beq	r2,zero,20020950 <_fgets_r+0x12c>
2002086c:	94bfffc4 	addi	r18,r18,-1
20020870:	a02b883a 	mov	r21,r20
20020874:	00001506 	br	200208cc <_fgets_r+0xa8>
20020878:	01400284 	movi	r5,10
2002087c:	8d800017 	ldw	r22,0(r17)
20020880:	9400012e 	bgeu	r18,r16,20020888 <_fgets_r+0x64>
20020884:	9021883a 	mov	r16,r18
20020888:	800d883a 	mov	r6,r16
2002088c:	b009883a 	mov	r4,r22
20020890:	00216b80 	call	200216b8 <memchr>
20020894:	a809883a 	mov	r4,r21
20020898:	800d883a 	mov	r6,r16
2002089c:	b00b883a 	mov	r5,r22
200208a0:	9425c83a 	sub	r18,r18,r16
200208a4:	10001e1e 	bne	r2,zero,20020920 <_fgets_r+0xfc>
200208a8:	88800117 	ldw	r2,4(r17)
200208ac:	88c00017 	ldw	r3,0(r17)
200208b0:	ac2b883a 	add	r21,r21,r16
200208b4:	1405c83a 	sub	r2,r2,r16
200208b8:	1c21883a 	add	r16,r3,r16
200208bc:	88800115 	stw	r2,4(r17)
200208c0:	8c000015 	stw	r16,0(r17)
200208c4:	002179c0 	call	2002179c <memcpy>
200208c8:	90000926 	beq	r18,zero,200208f0 <_fgets_r+0xcc>
200208cc:	8c000117 	ldw	r16,4(r17)
200208d0:	803fe91e 	bne	r16,zero,20020878 <__alt_data_end+0xfffe2878>
200208d4:	880b883a 	mov	r5,r17
200208d8:	9809883a 	mov	r4,r19
200208dc:	0021b880 	call	20021b88 <__srefill_r>
200208e0:	1000021e 	bne	r2,zero,200208ec <_fgets_r+0xc8>
200208e4:	8c000117 	ldw	r16,4(r17)
200208e8:	003fe306 	br	20020878 <__alt_data_end+0xfffe2878>
200208ec:	ad001a26 	beq	r21,r20,20020958 <_fgets_r+0x134>
200208f0:	a8000005 	stb	zero,0(r21)
200208f4:	a005883a 	mov	r2,r20
200208f8:	dfc00717 	ldw	ra,28(sp)
200208fc:	dd800617 	ldw	r22,24(sp)
20020900:	dd400517 	ldw	r21,20(sp)
20020904:	dd000417 	ldw	r20,16(sp)
20020908:	dcc00317 	ldw	r19,12(sp)
2002090c:	dc800217 	ldw	r18,8(sp)
20020910:	dc400117 	ldw	r17,4(sp)
20020914:	dc000017 	ldw	r16,0(sp)
20020918:	dec00804 	addi	sp,sp,32
2002091c:	f800283a 	ret
20020920:	88c00117 	ldw	r3,4(r17)
20020924:	10800044 	addi	r2,r2,1
20020928:	15a1c83a 	sub	r16,r2,r22
2002092c:	1c07c83a 	sub	r3,r3,r16
20020930:	88c00115 	stw	r3,4(r17)
20020934:	88800015 	stw	r2,0(r17)
20020938:	800d883a 	mov	r6,r16
2002093c:	002179c0 	call	2002179c <memcpy>
20020940:	ac2b883a 	add	r21,r21,r16
20020944:	a8000005 	stb	zero,0(r21)
20020948:	a005883a 	mov	r2,r20
2002094c:	003fea06 	br	200208f8 <__alt_data_end+0xfffe28f8>
20020950:	0020cd40 	call	20020cd4 <__sinit>
20020954:	003fc506 	br	2002086c <__alt_data_end+0xfffe286c>
20020958:	0005883a 	mov	r2,zero
2002095c:	003fe606 	br	200208f8 <__alt_data_end+0xfffe28f8>
20020960:	0005883a 	mov	r2,zero
20020964:	f800283a 	ret

20020968 <fgets>:
20020968:	008800f4 	movhi	r2,8195
2002096c:	108b0a04 	addi	r2,r2,11304
20020970:	300f883a 	mov	r7,r6
20020974:	280d883a 	mov	r6,r5
20020978:	200b883a 	mov	r5,r4
2002097c:	11000017 	ldw	r4,0(r2)
20020980:	00208241 	jmpi	20020824 <_fgets_r>

20020984 <__fp_unlock>:
20020984:	0005883a 	mov	r2,zero
20020988:	f800283a 	ret

2002098c <_cleanup_r>:
2002098c:	014800b4 	movhi	r5,8194
20020990:	29573904 	addi	r5,r5,23780
20020994:	0020de81 	jmpi	20020de8 <_fwalk_reent>

20020998 <__sinit.part.1>:
20020998:	defff704 	addi	sp,sp,-36
2002099c:	00c800b4 	movhi	r3,8194
200209a0:	dfc00815 	stw	ra,32(sp)
200209a4:	ddc00715 	stw	r23,28(sp)
200209a8:	dd800615 	stw	r22,24(sp)
200209ac:	dd400515 	stw	r21,20(sp)
200209b0:	dd000415 	stw	r20,16(sp)
200209b4:	dcc00315 	stw	r19,12(sp)
200209b8:	dc800215 	stw	r18,8(sp)
200209bc:	dc400115 	stw	r17,4(sp)
200209c0:	dc000015 	stw	r16,0(sp)
200209c4:	18c26304 	addi	r3,r3,2444
200209c8:	24000117 	ldw	r16,4(r4)
200209cc:	20c00f15 	stw	r3,60(r4)
200209d0:	2080bb04 	addi	r2,r4,748
200209d4:	00c000c4 	movi	r3,3
200209d8:	20c0b915 	stw	r3,740(r4)
200209dc:	2080ba15 	stw	r2,744(r4)
200209e0:	2000b815 	stw	zero,736(r4)
200209e4:	05c00204 	movi	r23,8
200209e8:	00800104 	movi	r2,4
200209ec:	2025883a 	mov	r18,r4
200209f0:	b80d883a 	mov	r6,r23
200209f4:	81001704 	addi	r4,r16,92
200209f8:	000b883a 	mov	r5,zero
200209fc:	80000015 	stw	zero,0(r16)
20020a00:	80000115 	stw	zero,4(r16)
20020a04:	80000215 	stw	zero,8(r16)
20020a08:	8080030d 	sth	r2,12(r16)
20020a0c:	80001915 	stw	zero,100(r16)
20020a10:	8000038d 	sth	zero,14(r16)
20020a14:	80000415 	stw	zero,16(r16)
20020a18:	80000515 	stw	zero,20(r16)
20020a1c:	80000615 	stw	zero,24(r16)
20020a20:	00218e40 	call	200218e4 <memset>
20020a24:	058800b4 	movhi	r22,8194
20020a28:	94400217 	ldw	r17,8(r18)
20020a2c:	054800b4 	movhi	r21,8194
20020a30:	050800b4 	movhi	r20,8194
20020a34:	04c800b4 	movhi	r19,8194
20020a38:	b5876c04 	addi	r22,r22,7600
20020a3c:	ad478304 	addi	r21,r21,7692
20020a40:	a507a204 	addi	r20,r20,7816
20020a44:	9cc7b904 	addi	r19,r19,7908
20020a48:	85800815 	stw	r22,32(r16)
20020a4c:	85400915 	stw	r21,36(r16)
20020a50:	85000a15 	stw	r20,40(r16)
20020a54:	84c00b15 	stw	r19,44(r16)
20020a58:	84000715 	stw	r16,28(r16)
20020a5c:	00800284 	movi	r2,10
20020a60:	8880030d 	sth	r2,12(r17)
20020a64:	00800044 	movi	r2,1
20020a68:	b80d883a 	mov	r6,r23
20020a6c:	89001704 	addi	r4,r17,92
20020a70:	000b883a 	mov	r5,zero
20020a74:	88000015 	stw	zero,0(r17)
20020a78:	88000115 	stw	zero,4(r17)
20020a7c:	88000215 	stw	zero,8(r17)
20020a80:	88001915 	stw	zero,100(r17)
20020a84:	8880038d 	sth	r2,14(r17)
20020a88:	88000415 	stw	zero,16(r17)
20020a8c:	88000515 	stw	zero,20(r17)
20020a90:	88000615 	stw	zero,24(r17)
20020a94:	00218e40 	call	200218e4 <memset>
20020a98:	94000317 	ldw	r16,12(r18)
20020a9c:	00800484 	movi	r2,18
20020aa0:	8c400715 	stw	r17,28(r17)
20020aa4:	8d800815 	stw	r22,32(r17)
20020aa8:	8d400915 	stw	r21,36(r17)
20020aac:	8d000a15 	stw	r20,40(r17)
20020ab0:	8cc00b15 	stw	r19,44(r17)
20020ab4:	8080030d 	sth	r2,12(r16)
20020ab8:	00800084 	movi	r2,2
20020abc:	80000015 	stw	zero,0(r16)
20020ac0:	80000115 	stw	zero,4(r16)
20020ac4:	80000215 	stw	zero,8(r16)
20020ac8:	80001915 	stw	zero,100(r16)
20020acc:	8080038d 	sth	r2,14(r16)
20020ad0:	80000415 	stw	zero,16(r16)
20020ad4:	80000515 	stw	zero,20(r16)
20020ad8:	80000615 	stw	zero,24(r16)
20020adc:	b80d883a 	mov	r6,r23
20020ae0:	000b883a 	mov	r5,zero
20020ae4:	81001704 	addi	r4,r16,92
20020ae8:	00218e40 	call	200218e4 <memset>
20020aec:	00800044 	movi	r2,1
20020af0:	84000715 	stw	r16,28(r16)
20020af4:	85800815 	stw	r22,32(r16)
20020af8:	85400915 	stw	r21,36(r16)
20020afc:	85000a15 	stw	r20,40(r16)
20020b00:	84c00b15 	stw	r19,44(r16)
20020b04:	90800e15 	stw	r2,56(r18)
20020b08:	dfc00817 	ldw	ra,32(sp)
20020b0c:	ddc00717 	ldw	r23,28(sp)
20020b10:	dd800617 	ldw	r22,24(sp)
20020b14:	dd400517 	ldw	r21,20(sp)
20020b18:	dd000417 	ldw	r20,16(sp)
20020b1c:	dcc00317 	ldw	r19,12(sp)
20020b20:	dc800217 	ldw	r18,8(sp)
20020b24:	dc400117 	ldw	r17,4(sp)
20020b28:	dc000017 	ldw	r16,0(sp)
20020b2c:	dec00904 	addi	sp,sp,36
20020b30:	f800283a 	ret

20020b34 <__fp_lock>:
20020b34:	0005883a 	mov	r2,zero
20020b38:	f800283a 	ret

20020b3c <__sfmoreglue>:
20020b3c:	defffc04 	addi	sp,sp,-16
20020b40:	dc400115 	stw	r17,4(sp)
20020b44:	2c7fffc4 	addi	r17,r5,-1
20020b48:	8c401a24 	muli	r17,r17,104
20020b4c:	dc800215 	stw	r18,8(sp)
20020b50:	2825883a 	mov	r18,r5
20020b54:	89401d04 	addi	r5,r17,116
20020b58:	dc000015 	stw	r16,0(sp)
20020b5c:	dfc00315 	stw	ra,12(sp)
20020b60:	0020eac0 	call	20020eac <_malloc_r>
20020b64:	1021883a 	mov	r16,r2
20020b68:	10000726 	beq	r2,zero,20020b88 <__sfmoreglue+0x4c>
20020b6c:	11000304 	addi	r4,r2,12
20020b70:	10000015 	stw	zero,0(r2)
20020b74:	14800115 	stw	r18,4(r2)
20020b78:	11000215 	stw	r4,8(r2)
20020b7c:	89801a04 	addi	r6,r17,104
20020b80:	000b883a 	mov	r5,zero
20020b84:	00218e40 	call	200218e4 <memset>
20020b88:	8005883a 	mov	r2,r16
20020b8c:	dfc00317 	ldw	ra,12(sp)
20020b90:	dc800217 	ldw	r18,8(sp)
20020b94:	dc400117 	ldw	r17,4(sp)
20020b98:	dc000017 	ldw	r16,0(sp)
20020b9c:	dec00404 	addi	sp,sp,16
20020ba0:	f800283a 	ret

20020ba4 <__sfp>:
20020ba4:	defffb04 	addi	sp,sp,-20
20020ba8:	dc000015 	stw	r16,0(sp)
20020bac:	040800f4 	movhi	r16,8195
20020bb0:	840b0904 	addi	r16,r16,11300
20020bb4:	dcc00315 	stw	r19,12(sp)
20020bb8:	2027883a 	mov	r19,r4
20020bbc:	81000017 	ldw	r4,0(r16)
20020bc0:	dfc00415 	stw	ra,16(sp)
20020bc4:	dc800215 	stw	r18,8(sp)
20020bc8:	20800e17 	ldw	r2,56(r4)
20020bcc:	dc400115 	stw	r17,4(sp)
20020bd0:	1000021e 	bne	r2,zero,20020bdc <__sfp+0x38>
20020bd4:	00209980 	call	20020998 <__sinit.part.1>
20020bd8:	81000017 	ldw	r4,0(r16)
20020bdc:	2480b804 	addi	r18,r4,736
20020be0:	047fffc4 	movi	r17,-1
20020be4:	91000117 	ldw	r4,4(r18)
20020be8:	94000217 	ldw	r16,8(r18)
20020bec:	213fffc4 	addi	r4,r4,-1
20020bf0:	20000a16 	blt	r4,zero,20020c1c <__sfp+0x78>
20020bf4:	8080030f 	ldh	r2,12(r16)
20020bf8:	10000c26 	beq	r2,zero,20020c2c <__sfp+0x88>
20020bfc:	80c01d04 	addi	r3,r16,116
20020c00:	00000206 	br	20020c0c <__sfp+0x68>
20020c04:	18bfe60f 	ldh	r2,-104(r3)
20020c08:	10000826 	beq	r2,zero,20020c2c <__sfp+0x88>
20020c0c:	213fffc4 	addi	r4,r4,-1
20020c10:	1c3ffd04 	addi	r16,r3,-12
20020c14:	18c01a04 	addi	r3,r3,104
20020c18:	247ffa1e 	bne	r4,r17,20020c04 <__alt_data_end+0xfffe2c04>
20020c1c:	90800017 	ldw	r2,0(r18)
20020c20:	10001d26 	beq	r2,zero,20020c98 <__sfp+0xf4>
20020c24:	1025883a 	mov	r18,r2
20020c28:	003fee06 	br	20020be4 <__alt_data_end+0xfffe2be4>
20020c2c:	00bfffc4 	movi	r2,-1
20020c30:	8080038d 	sth	r2,14(r16)
20020c34:	00800044 	movi	r2,1
20020c38:	8080030d 	sth	r2,12(r16)
20020c3c:	80001915 	stw	zero,100(r16)
20020c40:	80000015 	stw	zero,0(r16)
20020c44:	80000215 	stw	zero,8(r16)
20020c48:	80000115 	stw	zero,4(r16)
20020c4c:	80000415 	stw	zero,16(r16)
20020c50:	80000515 	stw	zero,20(r16)
20020c54:	80000615 	stw	zero,24(r16)
20020c58:	01800204 	movi	r6,8
20020c5c:	000b883a 	mov	r5,zero
20020c60:	81001704 	addi	r4,r16,92
20020c64:	00218e40 	call	200218e4 <memset>
20020c68:	8005883a 	mov	r2,r16
20020c6c:	80000c15 	stw	zero,48(r16)
20020c70:	80000d15 	stw	zero,52(r16)
20020c74:	80001115 	stw	zero,68(r16)
20020c78:	80001215 	stw	zero,72(r16)
20020c7c:	dfc00417 	ldw	ra,16(sp)
20020c80:	dcc00317 	ldw	r19,12(sp)
20020c84:	dc800217 	ldw	r18,8(sp)
20020c88:	dc400117 	ldw	r17,4(sp)
20020c8c:	dc000017 	ldw	r16,0(sp)
20020c90:	dec00504 	addi	sp,sp,20
20020c94:	f800283a 	ret
20020c98:	01400104 	movi	r5,4
20020c9c:	9809883a 	mov	r4,r19
20020ca0:	0020b3c0 	call	20020b3c <__sfmoreglue>
20020ca4:	90800015 	stw	r2,0(r18)
20020ca8:	103fde1e 	bne	r2,zero,20020c24 <__alt_data_end+0xfffe2c24>
20020cac:	00800304 	movi	r2,12
20020cb0:	98800015 	stw	r2,0(r19)
20020cb4:	0005883a 	mov	r2,zero
20020cb8:	003ff006 	br	20020c7c <__alt_data_end+0xfffe2c7c>

20020cbc <_cleanup>:
20020cbc:	008800f4 	movhi	r2,8195
20020cc0:	108b0904 	addi	r2,r2,11300
20020cc4:	11000017 	ldw	r4,0(r2)
20020cc8:	014800b4 	movhi	r5,8194
20020ccc:	29573904 	addi	r5,r5,23780
20020cd0:	0020de81 	jmpi	20020de8 <_fwalk_reent>

20020cd4 <__sinit>:
20020cd4:	20800e17 	ldw	r2,56(r4)
20020cd8:	10000126 	beq	r2,zero,20020ce0 <__sinit+0xc>
20020cdc:	f800283a 	ret
20020ce0:	00209981 	jmpi	20020998 <__sinit.part.1>

20020ce4 <__sfp_lock_acquire>:
20020ce4:	f800283a 	ret

20020ce8 <__sfp_lock_release>:
20020ce8:	f800283a 	ret

20020cec <__sinit_lock_acquire>:
20020cec:	f800283a 	ret

20020cf0 <__sinit_lock_release>:
20020cf0:	f800283a 	ret

20020cf4 <__fp_lock_all>:
20020cf4:	008800f4 	movhi	r2,8195
20020cf8:	108b0a04 	addi	r2,r2,11304
20020cfc:	11000017 	ldw	r4,0(r2)
20020d00:	014800b4 	movhi	r5,8194
20020d04:	2942cd04 	addi	r5,r5,2868
20020d08:	0020d241 	jmpi	20020d24 <_fwalk>

20020d0c <__fp_unlock_all>:
20020d0c:	008800f4 	movhi	r2,8195
20020d10:	108b0a04 	addi	r2,r2,11304
20020d14:	11000017 	ldw	r4,0(r2)
20020d18:	014800b4 	movhi	r5,8194
20020d1c:	29426104 	addi	r5,r5,2436
20020d20:	0020d241 	jmpi	20020d24 <_fwalk>

20020d24 <_fwalk>:
20020d24:	defff704 	addi	sp,sp,-36
20020d28:	dd000415 	stw	r20,16(sp)
20020d2c:	dfc00815 	stw	ra,32(sp)
20020d30:	ddc00715 	stw	r23,28(sp)
20020d34:	dd800615 	stw	r22,24(sp)
20020d38:	dd400515 	stw	r21,20(sp)
20020d3c:	dcc00315 	stw	r19,12(sp)
20020d40:	dc800215 	stw	r18,8(sp)
20020d44:	dc400115 	stw	r17,4(sp)
20020d48:	dc000015 	stw	r16,0(sp)
20020d4c:	2500b804 	addi	r20,r4,736
20020d50:	a0002326 	beq	r20,zero,20020de0 <_fwalk+0xbc>
20020d54:	282b883a 	mov	r21,r5
20020d58:	002f883a 	mov	r23,zero
20020d5c:	05800044 	movi	r22,1
20020d60:	04ffffc4 	movi	r19,-1
20020d64:	a4400117 	ldw	r17,4(r20)
20020d68:	a4800217 	ldw	r18,8(r20)
20020d6c:	8c7fffc4 	addi	r17,r17,-1
20020d70:	88000d16 	blt	r17,zero,20020da8 <_fwalk+0x84>
20020d74:	94000304 	addi	r16,r18,12
20020d78:	94800384 	addi	r18,r18,14
20020d7c:	8080000b 	ldhu	r2,0(r16)
20020d80:	8c7fffc4 	addi	r17,r17,-1
20020d84:	813ffd04 	addi	r4,r16,-12
20020d88:	b080042e 	bgeu	r22,r2,20020d9c <_fwalk+0x78>
20020d8c:	9080000f 	ldh	r2,0(r18)
20020d90:	14c00226 	beq	r2,r19,20020d9c <_fwalk+0x78>
20020d94:	a83ee83a 	callr	r21
20020d98:	b8aeb03a 	or	r23,r23,r2
20020d9c:	84001a04 	addi	r16,r16,104
20020da0:	94801a04 	addi	r18,r18,104
20020da4:	8cfff51e 	bne	r17,r19,20020d7c <__alt_data_end+0xfffe2d7c>
20020da8:	a5000017 	ldw	r20,0(r20)
20020dac:	a03fed1e 	bne	r20,zero,20020d64 <__alt_data_end+0xfffe2d64>
20020db0:	b805883a 	mov	r2,r23
20020db4:	dfc00817 	ldw	ra,32(sp)
20020db8:	ddc00717 	ldw	r23,28(sp)
20020dbc:	dd800617 	ldw	r22,24(sp)
20020dc0:	dd400517 	ldw	r21,20(sp)
20020dc4:	dd000417 	ldw	r20,16(sp)
20020dc8:	dcc00317 	ldw	r19,12(sp)
20020dcc:	dc800217 	ldw	r18,8(sp)
20020dd0:	dc400117 	ldw	r17,4(sp)
20020dd4:	dc000017 	ldw	r16,0(sp)
20020dd8:	dec00904 	addi	sp,sp,36
20020ddc:	f800283a 	ret
20020de0:	002f883a 	mov	r23,zero
20020de4:	003ff206 	br	20020db0 <__alt_data_end+0xfffe2db0>

20020de8 <_fwalk_reent>:
20020de8:	defff704 	addi	sp,sp,-36
20020dec:	dd000415 	stw	r20,16(sp)
20020df0:	dfc00815 	stw	ra,32(sp)
20020df4:	ddc00715 	stw	r23,28(sp)
20020df8:	dd800615 	stw	r22,24(sp)
20020dfc:	dd400515 	stw	r21,20(sp)
20020e00:	dcc00315 	stw	r19,12(sp)
20020e04:	dc800215 	stw	r18,8(sp)
20020e08:	dc400115 	stw	r17,4(sp)
20020e0c:	dc000015 	stw	r16,0(sp)
20020e10:	2500b804 	addi	r20,r4,736
20020e14:	a0002326 	beq	r20,zero,20020ea4 <_fwalk_reent+0xbc>
20020e18:	282b883a 	mov	r21,r5
20020e1c:	2027883a 	mov	r19,r4
20020e20:	002f883a 	mov	r23,zero
20020e24:	05800044 	movi	r22,1
20020e28:	04bfffc4 	movi	r18,-1
20020e2c:	a4400117 	ldw	r17,4(r20)
20020e30:	a4000217 	ldw	r16,8(r20)
20020e34:	8c7fffc4 	addi	r17,r17,-1
20020e38:	88000c16 	blt	r17,zero,20020e6c <_fwalk_reent+0x84>
20020e3c:	84000304 	addi	r16,r16,12
20020e40:	8080000b 	ldhu	r2,0(r16)
20020e44:	8c7fffc4 	addi	r17,r17,-1
20020e48:	817ffd04 	addi	r5,r16,-12
20020e4c:	b080052e 	bgeu	r22,r2,20020e64 <_fwalk_reent+0x7c>
20020e50:	8080008f 	ldh	r2,2(r16)
20020e54:	9809883a 	mov	r4,r19
20020e58:	14800226 	beq	r2,r18,20020e64 <_fwalk_reent+0x7c>
20020e5c:	a83ee83a 	callr	r21
20020e60:	b8aeb03a 	or	r23,r23,r2
20020e64:	84001a04 	addi	r16,r16,104
20020e68:	8cbff51e 	bne	r17,r18,20020e40 <__alt_data_end+0xfffe2e40>
20020e6c:	a5000017 	ldw	r20,0(r20)
20020e70:	a03fee1e 	bne	r20,zero,20020e2c <__alt_data_end+0xfffe2e2c>
20020e74:	b805883a 	mov	r2,r23
20020e78:	dfc00817 	ldw	ra,32(sp)
20020e7c:	ddc00717 	ldw	r23,28(sp)
20020e80:	dd800617 	ldw	r22,24(sp)
20020e84:	dd400517 	ldw	r21,20(sp)
20020e88:	dd000417 	ldw	r20,16(sp)
20020e8c:	dcc00317 	ldw	r19,12(sp)
20020e90:	dc800217 	ldw	r18,8(sp)
20020e94:	dc400117 	ldw	r17,4(sp)
20020e98:	dc000017 	ldw	r16,0(sp)
20020e9c:	dec00904 	addi	sp,sp,36
20020ea0:	f800283a 	ret
20020ea4:	002f883a 	mov	r23,zero
20020ea8:	003ff206 	br	20020e74 <__alt_data_end+0xfffe2e74>

20020eac <_malloc_r>:
20020eac:	defff504 	addi	sp,sp,-44
20020eb0:	dc800315 	stw	r18,12(sp)
20020eb4:	dfc00a15 	stw	ra,40(sp)
20020eb8:	df000915 	stw	fp,36(sp)
20020ebc:	ddc00815 	stw	r23,32(sp)
20020ec0:	dd800715 	stw	r22,28(sp)
20020ec4:	dd400615 	stw	r21,24(sp)
20020ec8:	dd000515 	stw	r20,20(sp)
20020ecc:	dcc00415 	stw	r19,16(sp)
20020ed0:	dc400215 	stw	r17,8(sp)
20020ed4:	dc000115 	stw	r16,4(sp)
20020ed8:	288002c4 	addi	r2,r5,11
20020edc:	00c00584 	movi	r3,22
20020ee0:	2025883a 	mov	r18,r4
20020ee4:	18807f2e 	bgeu	r3,r2,200210e4 <_malloc_r+0x238>
20020ee8:	047ffe04 	movi	r17,-8
20020eec:	1462703a 	and	r17,r2,r17
20020ef0:	8800a316 	blt	r17,zero,20021180 <_malloc_r+0x2d4>
20020ef4:	8940a236 	bltu	r17,r5,20021180 <_malloc_r+0x2d4>
20020ef8:	002dbe00 	call	2002dbe0 <__malloc_lock>
20020efc:	00807dc4 	movi	r2,503
20020f00:	1441e92e 	bgeu	r2,r17,200216a8 <_malloc_r+0x7fc>
20020f04:	8804d27a 	srli	r2,r17,9
20020f08:	1000a126 	beq	r2,zero,20021190 <_malloc_r+0x2e4>
20020f0c:	00c00104 	movi	r3,4
20020f10:	18811e36 	bltu	r3,r2,2002138c <_malloc_r+0x4e0>
20020f14:	8804d1ba 	srli	r2,r17,6
20020f18:	12000e44 	addi	r8,r2,57
20020f1c:	11c00e04 	addi	r7,r2,56
20020f20:	4209883a 	add	r4,r8,r8
20020f24:	04c800f4 	movhi	r19,8195
20020f28:	2109883a 	add	r4,r4,r4
20020f2c:	9cc55104 	addi	r19,r19,5444
20020f30:	2109883a 	add	r4,r4,r4
20020f34:	9909883a 	add	r4,r19,r4
20020f38:	24000117 	ldw	r16,4(r4)
20020f3c:	213ffe04 	addi	r4,r4,-8
20020f40:	24009726 	beq	r4,r16,200211a0 <_malloc_r+0x2f4>
20020f44:	80800117 	ldw	r2,4(r16)
20020f48:	01bfff04 	movi	r6,-4
20020f4c:	014003c4 	movi	r5,15
20020f50:	1184703a 	and	r2,r2,r6
20020f54:	1447c83a 	sub	r3,r2,r17
20020f58:	28c00716 	blt	r5,r3,20020f78 <_malloc_r+0xcc>
20020f5c:	1800920e 	bge	r3,zero,200211a8 <_malloc_r+0x2fc>
20020f60:	84000317 	ldw	r16,12(r16)
20020f64:	24008e26 	beq	r4,r16,200211a0 <_malloc_r+0x2f4>
20020f68:	80800117 	ldw	r2,4(r16)
20020f6c:	1184703a 	and	r2,r2,r6
20020f70:	1447c83a 	sub	r3,r2,r17
20020f74:	28fff90e 	bge	r5,r3,20020f5c <__alt_data_end+0xfffe2f5c>
20020f78:	3809883a 	mov	r4,r7
20020f7c:	018800f4 	movhi	r6,8195
20020f80:	9c000417 	ldw	r16,16(r19)
20020f84:	31855104 	addi	r6,r6,5444
20020f88:	32000204 	addi	r8,r6,8
20020f8c:	82013426 	beq	r16,r8,20021460 <_malloc_r+0x5b4>
20020f90:	80c00117 	ldw	r3,4(r16)
20020f94:	00bfff04 	movi	r2,-4
20020f98:	188e703a 	and	r7,r3,r2
20020f9c:	3c45c83a 	sub	r2,r7,r17
20020fa0:	00c003c4 	movi	r3,15
20020fa4:	18811f16 	blt	r3,r2,20021424 <_malloc_r+0x578>
20020fa8:	32000515 	stw	r8,20(r6)
20020fac:	32000415 	stw	r8,16(r6)
20020fb0:	10007f0e 	bge	r2,zero,200211b0 <_malloc_r+0x304>
20020fb4:	00807fc4 	movi	r2,511
20020fb8:	11c0fd36 	bltu	r2,r7,200213b0 <_malloc_r+0x504>
20020fbc:	3806d0fa 	srli	r3,r7,3
20020fc0:	01c00044 	movi	r7,1
20020fc4:	30800117 	ldw	r2,4(r6)
20020fc8:	19400044 	addi	r5,r3,1
20020fcc:	294b883a 	add	r5,r5,r5
20020fd0:	1807d0ba 	srai	r3,r3,2
20020fd4:	294b883a 	add	r5,r5,r5
20020fd8:	294b883a 	add	r5,r5,r5
20020fdc:	298b883a 	add	r5,r5,r6
20020fe0:	38c6983a 	sll	r3,r7,r3
20020fe4:	29c00017 	ldw	r7,0(r5)
20020fe8:	2a7ffe04 	addi	r9,r5,-8
20020fec:	1886b03a 	or	r3,r3,r2
20020ff0:	82400315 	stw	r9,12(r16)
20020ff4:	81c00215 	stw	r7,8(r16)
20020ff8:	30c00115 	stw	r3,4(r6)
20020ffc:	2c000015 	stw	r16,0(r5)
20021000:	3c000315 	stw	r16,12(r7)
20021004:	2005d0ba 	srai	r2,r4,2
20021008:	01400044 	movi	r5,1
2002100c:	288a983a 	sll	r5,r5,r2
20021010:	19406f36 	bltu	r3,r5,200211d0 <_malloc_r+0x324>
20021014:	28c4703a 	and	r2,r5,r3
20021018:	10000a1e 	bne	r2,zero,20021044 <_malloc_r+0x198>
2002101c:	00bfff04 	movi	r2,-4
20021020:	294b883a 	add	r5,r5,r5
20021024:	2088703a 	and	r4,r4,r2
20021028:	28c4703a 	and	r2,r5,r3
2002102c:	21000104 	addi	r4,r4,4
20021030:	1000041e 	bne	r2,zero,20021044 <_malloc_r+0x198>
20021034:	294b883a 	add	r5,r5,r5
20021038:	28c4703a 	and	r2,r5,r3
2002103c:	21000104 	addi	r4,r4,4
20021040:	103ffc26 	beq	r2,zero,20021034 <__alt_data_end+0xfffe3034>
20021044:	02bfff04 	movi	r10,-4
20021048:	024003c4 	movi	r9,15
2002104c:	21800044 	addi	r6,r4,1
20021050:	318d883a 	add	r6,r6,r6
20021054:	318d883a 	add	r6,r6,r6
20021058:	318d883a 	add	r6,r6,r6
2002105c:	998d883a 	add	r6,r19,r6
20021060:	333ffe04 	addi	r12,r6,-8
20021064:	2017883a 	mov	r11,r4
20021068:	31800104 	addi	r6,r6,4
2002106c:	34000017 	ldw	r16,0(r6)
20021070:	31fffd04 	addi	r7,r6,-12
20021074:	81c0041e 	bne	r16,r7,20021088 <_malloc_r+0x1dc>
20021078:	0000fb06 	br	20021468 <_malloc_r+0x5bc>
2002107c:	1801030e 	bge	r3,zero,2002148c <_malloc_r+0x5e0>
20021080:	84000317 	ldw	r16,12(r16)
20021084:	81c0f826 	beq	r16,r7,20021468 <_malloc_r+0x5bc>
20021088:	80800117 	ldw	r2,4(r16)
2002108c:	1284703a 	and	r2,r2,r10
20021090:	1447c83a 	sub	r3,r2,r17
20021094:	48fff90e 	bge	r9,r3,2002107c <__alt_data_end+0xfffe307c>
20021098:	80800317 	ldw	r2,12(r16)
2002109c:	81000217 	ldw	r4,8(r16)
200210a0:	89400054 	ori	r5,r17,1
200210a4:	81400115 	stw	r5,4(r16)
200210a8:	20800315 	stw	r2,12(r4)
200210ac:	11000215 	stw	r4,8(r2)
200210b0:	8463883a 	add	r17,r16,r17
200210b4:	9c400515 	stw	r17,20(r19)
200210b8:	9c400415 	stw	r17,16(r19)
200210bc:	18800054 	ori	r2,r3,1
200210c0:	88800115 	stw	r2,4(r17)
200210c4:	8a000315 	stw	r8,12(r17)
200210c8:	8a000215 	stw	r8,8(r17)
200210cc:	88e3883a 	add	r17,r17,r3
200210d0:	88c00015 	stw	r3,0(r17)
200210d4:	9009883a 	mov	r4,r18
200210d8:	002dc040 	call	2002dc04 <__malloc_unlock>
200210dc:	80800204 	addi	r2,r16,8
200210e0:	00001b06 	br	20021150 <_malloc_r+0x2a4>
200210e4:	04400404 	movi	r17,16
200210e8:	89402536 	bltu	r17,r5,20021180 <_malloc_r+0x2d4>
200210ec:	002dbe00 	call	2002dbe0 <__malloc_lock>
200210f0:	00800184 	movi	r2,6
200210f4:	01000084 	movi	r4,2
200210f8:	04c800f4 	movhi	r19,8195
200210fc:	1085883a 	add	r2,r2,r2
20021100:	9cc55104 	addi	r19,r19,5444
20021104:	1085883a 	add	r2,r2,r2
20021108:	9885883a 	add	r2,r19,r2
2002110c:	14000117 	ldw	r16,4(r2)
20021110:	10fffe04 	addi	r3,r2,-8
20021114:	80c0d926 	beq	r16,r3,2002147c <_malloc_r+0x5d0>
20021118:	80c00117 	ldw	r3,4(r16)
2002111c:	81000317 	ldw	r4,12(r16)
20021120:	00bfff04 	movi	r2,-4
20021124:	1884703a 	and	r2,r3,r2
20021128:	81400217 	ldw	r5,8(r16)
2002112c:	8085883a 	add	r2,r16,r2
20021130:	10c00117 	ldw	r3,4(r2)
20021134:	29000315 	stw	r4,12(r5)
20021138:	21400215 	stw	r5,8(r4)
2002113c:	18c00054 	ori	r3,r3,1
20021140:	10c00115 	stw	r3,4(r2)
20021144:	9009883a 	mov	r4,r18
20021148:	002dc040 	call	2002dc04 <__malloc_unlock>
2002114c:	80800204 	addi	r2,r16,8
20021150:	dfc00a17 	ldw	ra,40(sp)
20021154:	df000917 	ldw	fp,36(sp)
20021158:	ddc00817 	ldw	r23,32(sp)
2002115c:	dd800717 	ldw	r22,28(sp)
20021160:	dd400617 	ldw	r21,24(sp)
20021164:	dd000517 	ldw	r20,20(sp)
20021168:	dcc00417 	ldw	r19,16(sp)
2002116c:	dc800317 	ldw	r18,12(sp)
20021170:	dc400217 	ldw	r17,8(sp)
20021174:	dc000117 	ldw	r16,4(sp)
20021178:	dec00b04 	addi	sp,sp,44
2002117c:	f800283a 	ret
20021180:	00800304 	movi	r2,12
20021184:	90800015 	stw	r2,0(r18)
20021188:	0005883a 	mov	r2,zero
2002118c:	003ff006 	br	20021150 <__alt_data_end+0xfffe3150>
20021190:	01002004 	movi	r4,128
20021194:	02001004 	movi	r8,64
20021198:	01c00fc4 	movi	r7,63
2002119c:	003f6106 	br	20020f24 <__alt_data_end+0xfffe2f24>
200211a0:	4009883a 	mov	r4,r8
200211a4:	003f7506 	br	20020f7c <__alt_data_end+0xfffe2f7c>
200211a8:	81000317 	ldw	r4,12(r16)
200211ac:	003fde06 	br	20021128 <__alt_data_end+0xfffe3128>
200211b0:	81c5883a 	add	r2,r16,r7
200211b4:	11400117 	ldw	r5,4(r2)
200211b8:	9009883a 	mov	r4,r18
200211bc:	29400054 	ori	r5,r5,1
200211c0:	11400115 	stw	r5,4(r2)
200211c4:	002dc040 	call	2002dc04 <__malloc_unlock>
200211c8:	80800204 	addi	r2,r16,8
200211cc:	003fe006 	br	20021150 <__alt_data_end+0xfffe3150>
200211d0:	9c000217 	ldw	r16,8(r19)
200211d4:	00bfff04 	movi	r2,-4
200211d8:	85800117 	ldw	r22,4(r16)
200211dc:	b0ac703a 	and	r22,r22,r2
200211e0:	b4400336 	bltu	r22,r17,200211f0 <_malloc_r+0x344>
200211e4:	b445c83a 	sub	r2,r22,r17
200211e8:	00c003c4 	movi	r3,15
200211ec:	18805d16 	blt	r3,r2,20021364 <_malloc_r+0x4b8>
200211f0:	05c800f4 	movhi	r23,8195
200211f4:	008800f4 	movhi	r2,8195
200211f8:	1091f404 	addi	r2,r2,18384
200211fc:	bdcb0b04 	addi	r23,r23,11308
20021200:	15400017 	ldw	r21,0(r2)
20021204:	b8c00017 	ldw	r3,0(r23)
20021208:	00bfffc4 	movi	r2,-1
2002120c:	858d883a 	add	r6,r16,r22
20021210:	8d6b883a 	add	r21,r17,r21
20021214:	1880ea26 	beq	r3,r2,200215c0 <_malloc_r+0x714>
20021218:	ad4403c4 	addi	r21,r21,4111
2002121c:	00bc0004 	movi	r2,-4096
20021220:	a8aa703a 	and	r21,r21,r2
20021224:	a80b883a 	mov	r5,r21
20021228:	9009883a 	mov	r4,r18
2002122c:	d9800015 	stw	r6,0(sp)
20021230:	0021d5c0 	call	20021d5c <_sbrk_r>
20021234:	1029883a 	mov	r20,r2
20021238:	00bfffc4 	movi	r2,-1
2002123c:	d9800017 	ldw	r6,0(sp)
20021240:	a080e826 	beq	r20,r2,200215e4 <_malloc_r+0x738>
20021244:	a180a636 	bltu	r20,r6,200214e0 <_malloc_r+0x634>
20021248:	070800f4 	movhi	fp,8195
2002124c:	e7120004 	addi	fp,fp,18432
20021250:	e0800017 	ldw	r2,0(fp)
20021254:	a887883a 	add	r3,r21,r2
20021258:	e0c00015 	stw	r3,0(fp)
2002125c:	3500e626 	beq	r6,r20,200215f8 <_malloc_r+0x74c>
20021260:	b9000017 	ldw	r4,0(r23)
20021264:	00bfffc4 	movi	r2,-1
20021268:	2080ee26 	beq	r4,r2,20021624 <_malloc_r+0x778>
2002126c:	a185c83a 	sub	r2,r20,r6
20021270:	10c5883a 	add	r2,r2,r3
20021274:	e0800015 	stw	r2,0(fp)
20021278:	a0c001cc 	andi	r3,r20,7
2002127c:	1800bc26 	beq	r3,zero,20021570 <_malloc_r+0x6c4>
20021280:	a0e9c83a 	sub	r20,r20,r3
20021284:	00840204 	movi	r2,4104
20021288:	a5000204 	addi	r20,r20,8
2002128c:	10c7c83a 	sub	r3,r2,r3
20021290:	a545883a 	add	r2,r20,r21
20021294:	1083ffcc 	andi	r2,r2,4095
20021298:	18abc83a 	sub	r21,r3,r2
2002129c:	a80b883a 	mov	r5,r21
200212a0:	9009883a 	mov	r4,r18
200212a4:	0021d5c0 	call	20021d5c <_sbrk_r>
200212a8:	00ffffc4 	movi	r3,-1
200212ac:	10c0e126 	beq	r2,r3,20021634 <_malloc_r+0x788>
200212b0:	1505c83a 	sub	r2,r2,r20
200212b4:	1545883a 	add	r2,r2,r21
200212b8:	10800054 	ori	r2,r2,1
200212bc:	e0c00017 	ldw	r3,0(fp)
200212c0:	9d000215 	stw	r20,8(r19)
200212c4:	a0800115 	stw	r2,4(r20)
200212c8:	a8c7883a 	add	r3,r21,r3
200212cc:	e0c00015 	stw	r3,0(fp)
200212d0:	84c00e26 	beq	r16,r19,2002130c <_malloc_r+0x460>
200212d4:	018003c4 	movi	r6,15
200212d8:	3580a72e 	bgeu	r6,r22,20021578 <_malloc_r+0x6cc>
200212dc:	81400117 	ldw	r5,4(r16)
200212e0:	013ffe04 	movi	r4,-8
200212e4:	b0bffd04 	addi	r2,r22,-12
200212e8:	1104703a 	and	r2,r2,r4
200212ec:	2900004c 	andi	r4,r5,1
200212f0:	2088b03a 	or	r4,r4,r2
200212f4:	81000115 	stw	r4,4(r16)
200212f8:	01400144 	movi	r5,5
200212fc:	8089883a 	add	r4,r16,r2
20021300:	21400115 	stw	r5,4(r4)
20021304:	21400215 	stw	r5,8(r4)
20021308:	3080cd36 	bltu	r6,r2,20021640 <_malloc_r+0x794>
2002130c:	008800f4 	movhi	r2,8195
20021310:	1091f304 	addi	r2,r2,18380
20021314:	11000017 	ldw	r4,0(r2)
20021318:	20c0012e 	bgeu	r4,r3,20021320 <_malloc_r+0x474>
2002131c:	10c00015 	stw	r3,0(r2)
20021320:	008800f4 	movhi	r2,8195
20021324:	1091f204 	addi	r2,r2,18376
20021328:	11000017 	ldw	r4,0(r2)
2002132c:	9c000217 	ldw	r16,8(r19)
20021330:	20c0012e 	bgeu	r4,r3,20021338 <_malloc_r+0x48c>
20021334:	10c00015 	stw	r3,0(r2)
20021338:	80c00117 	ldw	r3,4(r16)
2002133c:	00bfff04 	movi	r2,-4
20021340:	1886703a 	and	r3,r3,r2
20021344:	1c45c83a 	sub	r2,r3,r17
20021348:	1c400236 	bltu	r3,r17,20021354 <_malloc_r+0x4a8>
2002134c:	00c003c4 	movi	r3,15
20021350:	18800416 	blt	r3,r2,20021364 <_malloc_r+0x4b8>
20021354:	9009883a 	mov	r4,r18
20021358:	002dc040 	call	2002dc04 <__malloc_unlock>
2002135c:	0005883a 	mov	r2,zero
20021360:	003f7b06 	br	20021150 <__alt_data_end+0xfffe3150>
20021364:	88c00054 	ori	r3,r17,1
20021368:	80c00115 	stw	r3,4(r16)
2002136c:	8463883a 	add	r17,r16,r17
20021370:	10800054 	ori	r2,r2,1
20021374:	9c400215 	stw	r17,8(r19)
20021378:	88800115 	stw	r2,4(r17)
2002137c:	9009883a 	mov	r4,r18
20021380:	002dc040 	call	2002dc04 <__malloc_unlock>
20021384:	80800204 	addi	r2,r16,8
20021388:	003f7106 	br	20021150 <__alt_data_end+0xfffe3150>
2002138c:	00c00504 	movi	r3,20
20021390:	18804a2e 	bgeu	r3,r2,200214bc <_malloc_r+0x610>
20021394:	00c01504 	movi	r3,84
20021398:	18806e36 	bltu	r3,r2,20021554 <_malloc_r+0x6a8>
2002139c:	8804d33a 	srli	r2,r17,12
200213a0:	12001bc4 	addi	r8,r2,111
200213a4:	11c01b84 	addi	r7,r2,110
200213a8:	4209883a 	add	r4,r8,r8
200213ac:	003edd06 	br	20020f24 <__alt_data_end+0xfffe2f24>
200213b0:	3804d27a 	srli	r2,r7,9
200213b4:	00c00104 	movi	r3,4
200213b8:	1880442e 	bgeu	r3,r2,200214cc <_malloc_r+0x620>
200213bc:	00c00504 	movi	r3,20
200213c0:	18808136 	bltu	r3,r2,200215c8 <_malloc_r+0x71c>
200213c4:	11401704 	addi	r5,r2,92
200213c8:	10c016c4 	addi	r3,r2,91
200213cc:	294b883a 	add	r5,r5,r5
200213d0:	294b883a 	add	r5,r5,r5
200213d4:	294b883a 	add	r5,r5,r5
200213d8:	994b883a 	add	r5,r19,r5
200213dc:	28800017 	ldw	r2,0(r5)
200213e0:	018800f4 	movhi	r6,8195
200213e4:	297ffe04 	addi	r5,r5,-8
200213e8:	31855104 	addi	r6,r6,5444
200213ec:	28806526 	beq	r5,r2,20021584 <_malloc_r+0x6d8>
200213f0:	01bfff04 	movi	r6,-4
200213f4:	10c00117 	ldw	r3,4(r2)
200213f8:	1986703a 	and	r3,r3,r6
200213fc:	38c0022e 	bgeu	r7,r3,20021408 <_malloc_r+0x55c>
20021400:	10800217 	ldw	r2,8(r2)
20021404:	28bffb1e 	bne	r5,r2,200213f4 <__alt_data_end+0xfffe33f4>
20021408:	11400317 	ldw	r5,12(r2)
2002140c:	98c00117 	ldw	r3,4(r19)
20021410:	81400315 	stw	r5,12(r16)
20021414:	80800215 	stw	r2,8(r16)
20021418:	2c000215 	stw	r16,8(r5)
2002141c:	14000315 	stw	r16,12(r2)
20021420:	003ef806 	br	20021004 <__alt_data_end+0xfffe3004>
20021424:	88c00054 	ori	r3,r17,1
20021428:	80c00115 	stw	r3,4(r16)
2002142c:	8463883a 	add	r17,r16,r17
20021430:	34400515 	stw	r17,20(r6)
20021434:	34400415 	stw	r17,16(r6)
20021438:	10c00054 	ori	r3,r2,1
2002143c:	8a000315 	stw	r8,12(r17)
20021440:	8a000215 	stw	r8,8(r17)
20021444:	88c00115 	stw	r3,4(r17)
20021448:	88a3883a 	add	r17,r17,r2
2002144c:	88800015 	stw	r2,0(r17)
20021450:	9009883a 	mov	r4,r18
20021454:	002dc040 	call	2002dc04 <__malloc_unlock>
20021458:	80800204 	addi	r2,r16,8
2002145c:	003f3c06 	br	20021150 <__alt_data_end+0xfffe3150>
20021460:	30c00117 	ldw	r3,4(r6)
20021464:	003ee706 	br	20021004 <__alt_data_end+0xfffe3004>
20021468:	5ac00044 	addi	r11,r11,1
2002146c:	588000cc 	andi	r2,r11,3
20021470:	31800204 	addi	r6,r6,8
20021474:	103efd1e 	bne	r2,zero,2002106c <__alt_data_end+0xfffe306c>
20021478:	00002406 	br	2002150c <_malloc_r+0x660>
2002147c:	14000317 	ldw	r16,12(r2)
20021480:	143f251e 	bne	r2,r16,20021118 <__alt_data_end+0xfffe3118>
20021484:	21000084 	addi	r4,r4,2
20021488:	003ebc06 	br	20020f7c <__alt_data_end+0xfffe2f7c>
2002148c:	8085883a 	add	r2,r16,r2
20021490:	10c00117 	ldw	r3,4(r2)
20021494:	81000317 	ldw	r4,12(r16)
20021498:	81400217 	ldw	r5,8(r16)
2002149c:	18c00054 	ori	r3,r3,1
200214a0:	10c00115 	stw	r3,4(r2)
200214a4:	29000315 	stw	r4,12(r5)
200214a8:	21400215 	stw	r5,8(r4)
200214ac:	9009883a 	mov	r4,r18
200214b0:	002dc040 	call	2002dc04 <__malloc_unlock>
200214b4:	80800204 	addi	r2,r16,8
200214b8:	003f2506 	br	20021150 <__alt_data_end+0xfffe3150>
200214bc:	12001704 	addi	r8,r2,92
200214c0:	11c016c4 	addi	r7,r2,91
200214c4:	4209883a 	add	r4,r8,r8
200214c8:	003e9606 	br	20020f24 <__alt_data_end+0xfffe2f24>
200214cc:	3804d1ba 	srli	r2,r7,6
200214d0:	11400e44 	addi	r5,r2,57
200214d4:	10c00e04 	addi	r3,r2,56
200214d8:	294b883a 	add	r5,r5,r5
200214dc:	003fbc06 	br	200213d0 <__alt_data_end+0xfffe33d0>
200214e0:	84ff5926 	beq	r16,r19,20021248 <__alt_data_end+0xfffe3248>
200214e4:	008800f4 	movhi	r2,8195
200214e8:	10855104 	addi	r2,r2,5444
200214ec:	14000217 	ldw	r16,8(r2)
200214f0:	00bfff04 	movi	r2,-4
200214f4:	80c00117 	ldw	r3,4(r16)
200214f8:	1886703a 	and	r3,r3,r2
200214fc:	003f9106 	br	20021344 <__alt_data_end+0xfffe3344>
20021500:	60800217 	ldw	r2,8(r12)
20021504:	213fffc4 	addi	r4,r4,-1
20021508:	1300651e 	bne	r2,r12,200216a0 <_malloc_r+0x7f4>
2002150c:	208000cc 	andi	r2,r4,3
20021510:	633ffe04 	addi	r12,r12,-8
20021514:	103ffa1e 	bne	r2,zero,20021500 <__alt_data_end+0xfffe3500>
20021518:	98800117 	ldw	r2,4(r19)
2002151c:	0146303a 	nor	r3,zero,r5
20021520:	1884703a 	and	r2,r3,r2
20021524:	98800115 	stw	r2,4(r19)
20021528:	294b883a 	add	r5,r5,r5
2002152c:	117f2836 	bltu	r2,r5,200211d0 <__alt_data_end+0xfffe31d0>
20021530:	283f2726 	beq	r5,zero,200211d0 <__alt_data_end+0xfffe31d0>
20021534:	2886703a 	and	r3,r5,r2
20021538:	5809883a 	mov	r4,r11
2002153c:	183ec31e 	bne	r3,zero,2002104c <__alt_data_end+0xfffe304c>
20021540:	294b883a 	add	r5,r5,r5
20021544:	2886703a 	and	r3,r5,r2
20021548:	21000104 	addi	r4,r4,4
2002154c:	183ffc26 	beq	r3,zero,20021540 <__alt_data_end+0xfffe3540>
20021550:	003ebe06 	br	2002104c <__alt_data_end+0xfffe304c>
20021554:	00c05504 	movi	r3,340
20021558:	18801236 	bltu	r3,r2,200215a4 <_malloc_r+0x6f8>
2002155c:	8804d3fa 	srli	r2,r17,15
20021560:	12001e04 	addi	r8,r2,120
20021564:	11c01dc4 	addi	r7,r2,119
20021568:	4209883a 	add	r4,r8,r8
2002156c:	003e6d06 	br	20020f24 <__alt_data_end+0xfffe2f24>
20021570:	00c40004 	movi	r3,4096
20021574:	003f4606 	br	20021290 <__alt_data_end+0xfffe3290>
20021578:	00800044 	movi	r2,1
2002157c:	a0800115 	stw	r2,4(r20)
20021580:	003f7406 	br	20021354 <__alt_data_end+0xfffe3354>
20021584:	1805d0ba 	srai	r2,r3,2
20021588:	01c00044 	movi	r7,1
2002158c:	30c00117 	ldw	r3,4(r6)
20021590:	388e983a 	sll	r7,r7,r2
20021594:	2805883a 	mov	r2,r5
20021598:	38c6b03a 	or	r3,r7,r3
2002159c:	30c00115 	stw	r3,4(r6)
200215a0:	003f9b06 	br	20021410 <__alt_data_end+0xfffe3410>
200215a4:	00c15504 	movi	r3,1364
200215a8:	18801a36 	bltu	r3,r2,20021614 <_malloc_r+0x768>
200215ac:	8804d4ba 	srli	r2,r17,18
200215b0:	12001f44 	addi	r8,r2,125
200215b4:	11c01f04 	addi	r7,r2,124
200215b8:	4209883a 	add	r4,r8,r8
200215bc:	003e5906 	br	20020f24 <__alt_data_end+0xfffe2f24>
200215c0:	ad400404 	addi	r21,r21,16
200215c4:	003f1706 	br	20021224 <__alt_data_end+0xfffe3224>
200215c8:	00c01504 	movi	r3,84
200215cc:	18802336 	bltu	r3,r2,2002165c <_malloc_r+0x7b0>
200215d0:	3804d33a 	srli	r2,r7,12
200215d4:	11401bc4 	addi	r5,r2,111
200215d8:	10c01b84 	addi	r3,r2,110
200215dc:	294b883a 	add	r5,r5,r5
200215e0:	003f7b06 	br	200213d0 <__alt_data_end+0xfffe33d0>
200215e4:	9c000217 	ldw	r16,8(r19)
200215e8:	00bfff04 	movi	r2,-4
200215ec:	80c00117 	ldw	r3,4(r16)
200215f0:	1886703a 	and	r3,r3,r2
200215f4:	003f5306 	br	20021344 <__alt_data_end+0xfffe3344>
200215f8:	3083ffcc 	andi	r2,r6,4095
200215fc:	103f181e 	bne	r2,zero,20021260 <__alt_data_end+0xfffe3260>
20021600:	99000217 	ldw	r4,8(r19)
20021604:	b545883a 	add	r2,r22,r21
20021608:	10800054 	ori	r2,r2,1
2002160c:	20800115 	stw	r2,4(r4)
20021610:	003f3e06 	br	2002130c <__alt_data_end+0xfffe330c>
20021614:	01003f84 	movi	r4,254
20021618:	02001fc4 	movi	r8,127
2002161c:	01c01f84 	movi	r7,126
20021620:	003e4006 	br	20020f24 <__alt_data_end+0xfffe2f24>
20021624:	008800f4 	movhi	r2,8195
20021628:	108b0b04 	addi	r2,r2,11308
2002162c:	15000015 	stw	r20,0(r2)
20021630:	003f1106 	br	20021278 <__alt_data_end+0xfffe3278>
20021634:	00800044 	movi	r2,1
20021638:	002b883a 	mov	r21,zero
2002163c:	003f1f06 	br	200212bc <__alt_data_end+0xfffe32bc>
20021640:	81400204 	addi	r5,r16,8
20021644:	9009883a 	mov	r4,r18
20021648:	00261b40 	call	200261b4 <_free_r>
2002164c:	008800f4 	movhi	r2,8195
20021650:	10920004 	addi	r2,r2,18432
20021654:	10c00017 	ldw	r3,0(r2)
20021658:	003f2c06 	br	2002130c <__alt_data_end+0xfffe330c>
2002165c:	00c05504 	movi	r3,340
20021660:	18800536 	bltu	r3,r2,20021678 <_malloc_r+0x7cc>
20021664:	3804d3fa 	srli	r2,r7,15
20021668:	11401e04 	addi	r5,r2,120
2002166c:	10c01dc4 	addi	r3,r2,119
20021670:	294b883a 	add	r5,r5,r5
20021674:	003f5606 	br	200213d0 <__alt_data_end+0xfffe33d0>
20021678:	00c15504 	movi	r3,1364
2002167c:	18800536 	bltu	r3,r2,20021694 <_malloc_r+0x7e8>
20021680:	3804d4ba 	srli	r2,r7,18
20021684:	11401f44 	addi	r5,r2,125
20021688:	10c01f04 	addi	r3,r2,124
2002168c:	294b883a 	add	r5,r5,r5
20021690:	003f4f06 	br	200213d0 <__alt_data_end+0xfffe33d0>
20021694:	01403f84 	movi	r5,254
20021698:	00c01f84 	movi	r3,126
2002169c:	003f4c06 	br	200213d0 <__alt_data_end+0xfffe33d0>
200216a0:	98800117 	ldw	r2,4(r19)
200216a4:	003fa006 	br	20021528 <__alt_data_end+0xfffe3528>
200216a8:	8808d0fa 	srli	r4,r17,3
200216ac:	20800044 	addi	r2,r4,1
200216b0:	1085883a 	add	r2,r2,r2
200216b4:	003e9006 	br	200210f8 <__alt_data_end+0xfffe30f8>

200216b8 <memchr>:
200216b8:	208000cc 	andi	r2,r4,3
200216bc:	280f883a 	mov	r7,r5
200216c0:	10003426 	beq	r2,zero,20021794 <memchr+0xdc>
200216c4:	30bfffc4 	addi	r2,r6,-1
200216c8:	30001a26 	beq	r6,zero,20021734 <memchr+0x7c>
200216cc:	20c00003 	ldbu	r3,0(r4)
200216d0:	29803fcc 	andi	r6,r5,255
200216d4:	30c0051e 	bne	r6,r3,200216ec <memchr+0x34>
200216d8:	00001806 	br	2002173c <memchr+0x84>
200216dc:	10001526 	beq	r2,zero,20021734 <memchr+0x7c>
200216e0:	20c00003 	ldbu	r3,0(r4)
200216e4:	10bfffc4 	addi	r2,r2,-1
200216e8:	30c01426 	beq	r6,r3,2002173c <memchr+0x84>
200216ec:	21000044 	addi	r4,r4,1
200216f0:	20c000cc 	andi	r3,r4,3
200216f4:	183ff91e 	bne	r3,zero,200216dc <__alt_data_end+0xfffe36dc>
200216f8:	020000c4 	movi	r8,3
200216fc:	40801136 	bltu	r8,r2,20021744 <memchr+0x8c>
20021700:	10000c26 	beq	r2,zero,20021734 <memchr+0x7c>
20021704:	20c00003 	ldbu	r3,0(r4)
20021708:	29403fcc 	andi	r5,r5,255
2002170c:	28c00b26 	beq	r5,r3,2002173c <memchr+0x84>
20021710:	20c00044 	addi	r3,r4,1
20021714:	39803fcc 	andi	r6,r7,255
20021718:	2089883a 	add	r4,r4,r2
2002171c:	00000306 	br	2002172c <memchr+0x74>
20021720:	18c00044 	addi	r3,r3,1
20021724:	197fffc3 	ldbu	r5,-1(r3)
20021728:	31400526 	beq	r6,r5,20021740 <memchr+0x88>
2002172c:	1805883a 	mov	r2,r3
20021730:	20fffb1e 	bne	r4,r3,20021720 <__alt_data_end+0xfffe3720>
20021734:	0005883a 	mov	r2,zero
20021738:	f800283a 	ret
2002173c:	2005883a 	mov	r2,r4
20021740:	f800283a 	ret
20021744:	28c03fcc 	andi	r3,r5,255
20021748:	1812923a 	slli	r9,r3,8
2002174c:	02ffbff4 	movhi	r11,65279
20021750:	02a02074 	movhi	r10,32897
20021754:	48d2b03a 	or	r9,r9,r3
20021758:	4806943a 	slli	r3,r9,16
2002175c:	5affbfc4 	addi	r11,r11,-257
20021760:	52a02004 	addi	r10,r10,-32640
20021764:	48d2b03a 	or	r9,r9,r3
20021768:	20c00017 	ldw	r3,0(r4)
2002176c:	48c6f03a 	xor	r3,r9,r3
20021770:	1acd883a 	add	r6,r3,r11
20021774:	00c6303a 	nor	r3,zero,r3
20021778:	30c6703a 	and	r3,r6,r3
2002177c:	1a86703a 	and	r3,r3,r10
20021780:	183fe01e 	bne	r3,zero,20021704 <__alt_data_end+0xfffe3704>
20021784:	10bfff04 	addi	r2,r2,-4
20021788:	21000104 	addi	r4,r4,4
2002178c:	40bff636 	bltu	r8,r2,20021768 <__alt_data_end+0xfffe3768>
20021790:	003fdb06 	br	20021700 <__alt_data_end+0xfffe3700>
20021794:	3005883a 	mov	r2,r6
20021798:	003fd706 	br	200216f8 <__alt_data_end+0xfffe36f8>

2002179c <memcpy>:
2002179c:	defffd04 	addi	sp,sp,-12
200217a0:	dfc00215 	stw	ra,8(sp)
200217a4:	dc400115 	stw	r17,4(sp)
200217a8:	dc000015 	stw	r16,0(sp)
200217ac:	00c003c4 	movi	r3,15
200217b0:	2005883a 	mov	r2,r4
200217b4:	1980452e 	bgeu	r3,r6,200218cc <memcpy+0x130>
200217b8:	2906b03a 	or	r3,r5,r4
200217bc:	18c000cc 	andi	r3,r3,3
200217c0:	1800441e 	bne	r3,zero,200218d4 <memcpy+0x138>
200217c4:	347ffc04 	addi	r17,r6,-16
200217c8:	8822d13a 	srli	r17,r17,4
200217cc:	28c00104 	addi	r3,r5,4
200217d0:	23400104 	addi	r13,r4,4
200217d4:	8820913a 	slli	r16,r17,4
200217d8:	2b000204 	addi	r12,r5,8
200217dc:	22c00204 	addi	r11,r4,8
200217e0:	84000504 	addi	r16,r16,20
200217e4:	2a800304 	addi	r10,r5,12
200217e8:	22400304 	addi	r9,r4,12
200217ec:	2c21883a 	add	r16,r5,r16
200217f0:	2811883a 	mov	r8,r5
200217f4:	200f883a 	mov	r7,r4
200217f8:	41000017 	ldw	r4,0(r8)
200217fc:	1fc00017 	ldw	ra,0(r3)
20021800:	63c00017 	ldw	r15,0(r12)
20021804:	39000015 	stw	r4,0(r7)
20021808:	53800017 	ldw	r14,0(r10)
2002180c:	6fc00015 	stw	ra,0(r13)
20021810:	5bc00015 	stw	r15,0(r11)
20021814:	4b800015 	stw	r14,0(r9)
20021818:	18c00404 	addi	r3,r3,16
2002181c:	39c00404 	addi	r7,r7,16
20021820:	42000404 	addi	r8,r8,16
20021824:	6b400404 	addi	r13,r13,16
20021828:	63000404 	addi	r12,r12,16
2002182c:	5ac00404 	addi	r11,r11,16
20021830:	52800404 	addi	r10,r10,16
20021834:	4a400404 	addi	r9,r9,16
20021838:	1c3fef1e 	bne	r3,r16,200217f8 <__alt_data_end+0xfffe37f8>
2002183c:	89c00044 	addi	r7,r17,1
20021840:	380e913a 	slli	r7,r7,4
20021844:	310003cc 	andi	r4,r6,15
20021848:	02c000c4 	movi	r11,3
2002184c:	11c7883a 	add	r3,r2,r7
20021850:	29cb883a 	add	r5,r5,r7
20021854:	5900212e 	bgeu	r11,r4,200218dc <memcpy+0x140>
20021858:	1813883a 	mov	r9,r3
2002185c:	2811883a 	mov	r8,r5
20021860:	200f883a 	mov	r7,r4
20021864:	42800017 	ldw	r10,0(r8)
20021868:	4a400104 	addi	r9,r9,4
2002186c:	39ffff04 	addi	r7,r7,-4
20021870:	4abfff15 	stw	r10,-4(r9)
20021874:	42000104 	addi	r8,r8,4
20021878:	59fffa36 	bltu	r11,r7,20021864 <__alt_data_end+0xfffe3864>
2002187c:	213fff04 	addi	r4,r4,-4
20021880:	2008d0ba 	srli	r4,r4,2
20021884:	318000cc 	andi	r6,r6,3
20021888:	21000044 	addi	r4,r4,1
2002188c:	2109883a 	add	r4,r4,r4
20021890:	2109883a 	add	r4,r4,r4
20021894:	1907883a 	add	r3,r3,r4
20021898:	290b883a 	add	r5,r5,r4
2002189c:	30000626 	beq	r6,zero,200218b8 <memcpy+0x11c>
200218a0:	198d883a 	add	r6,r3,r6
200218a4:	29c00003 	ldbu	r7,0(r5)
200218a8:	18c00044 	addi	r3,r3,1
200218ac:	29400044 	addi	r5,r5,1
200218b0:	19ffffc5 	stb	r7,-1(r3)
200218b4:	19bffb1e 	bne	r3,r6,200218a4 <__alt_data_end+0xfffe38a4>
200218b8:	dfc00217 	ldw	ra,8(sp)
200218bc:	dc400117 	ldw	r17,4(sp)
200218c0:	dc000017 	ldw	r16,0(sp)
200218c4:	dec00304 	addi	sp,sp,12
200218c8:	f800283a 	ret
200218cc:	2007883a 	mov	r3,r4
200218d0:	003ff206 	br	2002189c <__alt_data_end+0xfffe389c>
200218d4:	2007883a 	mov	r3,r4
200218d8:	003ff106 	br	200218a0 <__alt_data_end+0xfffe38a0>
200218dc:	200d883a 	mov	r6,r4
200218e0:	003fee06 	br	2002189c <__alt_data_end+0xfffe389c>

200218e4 <memset>:
200218e4:	20c000cc 	andi	r3,r4,3
200218e8:	2005883a 	mov	r2,r4
200218ec:	18004426 	beq	r3,zero,20021a00 <memset+0x11c>
200218f0:	31ffffc4 	addi	r7,r6,-1
200218f4:	30004026 	beq	r6,zero,200219f8 <memset+0x114>
200218f8:	2813883a 	mov	r9,r5
200218fc:	200d883a 	mov	r6,r4
20021900:	2007883a 	mov	r3,r4
20021904:	00000406 	br	20021918 <memset+0x34>
20021908:	3a3fffc4 	addi	r8,r7,-1
2002190c:	31800044 	addi	r6,r6,1
20021910:	38003926 	beq	r7,zero,200219f8 <memset+0x114>
20021914:	400f883a 	mov	r7,r8
20021918:	18c00044 	addi	r3,r3,1
2002191c:	32400005 	stb	r9,0(r6)
20021920:	1a0000cc 	andi	r8,r3,3
20021924:	403ff81e 	bne	r8,zero,20021908 <__alt_data_end+0xfffe3908>
20021928:	010000c4 	movi	r4,3
2002192c:	21c02d2e 	bgeu	r4,r7,200219e4 <memset+0x100>
20021930:	29003fcc 	andi	r4,r5,255
20021934:	200c923a 	slli	r6,r4,8
20021938:	3108b03a 	or	r4,r6,r4
2002193c:	200c943a 	slli	r6,r4,16
20021940:	218cb03a 	or	r6,r4,r6
20021944:	010003c4 	movi	r4,15
20021948:	21c0182e 	bgeu	r4,r7,200219ac <memset+0xc8>
2002194c:	3b3ffc04 	addi	r12,r7,-16
20021950:	6018d13a 	srli	r12,r12,4
20021954:	1a000104 	addi	r8,r3,4
20021958:	1ac00204 	addi	r11,r3,8
2002195c:	6008913a 	slli	r4,r12,4
20021960:	1a800304 	addi	r10,r3,12
20021964:	1813883a 	mov	r9,r3
20021968:	21000504 	addi	r4,r4,20
2002196c:	1909883a 	add	r4,r3,r4
20021970:	49800015 	stw	r6,0(r9)
20021974:	41800015 	stw	r6,0(r8)
20021978:	59800015 	stw	r6,0(r11)
2002197c:	51800015 	stw	r6,0(r10)
20021980:	42000404 	addi	r8,r8,16
20021984:	4a400404 	addi	r9,r9,16
20021988:	5ac00404 	addi	r11,r11,16
2002198c:	52800404 	addi	r10,r10,16
20021990:	413ff71e 	bne	r8,r4,20021970 <__alt_data_end+0xfffe3970>
20021994:	63000044 	addi	r12,r12,1
20021998:	6018913a 	slli	r12,r12,4
2002199c:	39c003cc 	andi	r7,r7,15
200219a0:	010000c4 	movi	r4,3
200219a4:	1b07883a 	add	r3,r3,r12
200219a8:	21c00e2e 	bgeu	r4,r7,200219e4 <memset+0x100>
200219ac:	1813883a 	mov	r9,r3
200219b0:	3811883a 	mov	r8,r7
200219b4:	010000c4 	movi	r4,3
200219b8:	49800015 	stw	r6,0(r9)
200219bc:	423fff04 	addi	r8,r8,-4
200219c0:	4a400104 	addi	r9,r9,4
200219c4:	223ffc36 	bltu	r4,r8,200219b8 <__alt_data_end+0xfffe39b8>
200219c8:	393fff04 	addi	r4,r7,-4
200219cc:	2008d0ba 	srli	r4,r4,2
200219d0:	39c000cc 	andi	r7,r7,3
200219d4:	21000044 	addi	r4,r4,1
200219d8:	2109883a 	add	r4,r4,r4
200219dc:	2109883a 	add	r4,r4,r4
200219e0:	1907883a 	add	r3,r3,r4
200219e4:	38000526 	beq	r7,zero,200219fc <memset+0x118>
200219e8:	19cf883a 	add	r7,r3,r7
200219ec:	19400005 	stb	r5,0(r3)
200219f0:	18c00044 	addi	r3,r3,1
200219f4:	38fffd1e 	bne	r7,r3,200219ec <__alt_data_end+0xfffe39ec>
200219f8:	f800283a 	ret
200219fc:	f800283a 	ret
20021a00:	2007883a 	mov	r3,r4
20021a04:	300f883a 	mov	r7,r6
20021a08:	003fc706 	br	20021928 <__alt_data_end+0xfffe3928>

20021a0c <_printf_r>:
20021a0c:	defffd04 	addi	sp,sp,-12
20021a10:	2805883a 	mov	r2,r5
20021a14:	dfc00015 	stw	ra,0(sp)
20021a18:	d9800115 	stw	r6,4(sp)
20021a1c:	d9c00215 	stw	r7,8(sp)
20021a20:	21400217 	ldw	r5,8(r4)
20021a24:	d9c00104 	addi	r7,sp,4
20021a28:	100d883a 	mov	r6,r2
20021a2c:	0021f840 	call	20021f84 <___vfprintf_internal_r>
20021a30:	dfc00017 	ldw	ra,0(sp)
20021a34:	dec00304 	addi	sp,sp,12
20021a38:	f800283a 	ret

20021a3c <printf>:
20021a3c:	defffc04 	addi	sp,sp,-16
20021a40:	dfc00015 	stw	ra,0(sp)
20021a44:	d9400115 	stw	r5,4(sp)
20021a48:	d9800215 	stw	r6,8(sp)
20021a4c:	d9c00315 	stw	r7,12(sp)
20021a50:	008800f4 	movhi	r2,8195
20021a54:	108b0a04 	addi	r2,r2,11304
20021a58:	10800017 	ldw	r2,0(r2)
20021a5c:	200b883a 	mov	r5,r4
20021a60:	d9800104 	addi	r6,sp,4
20021a64:	11000217 	ldw	r4,8(r2)
20021a68:	002417c0 	call	2002417c <__vfprintf_internal>
20021a6c:	dfc00017 	ldw	ra,0(sp)
20021a70:	dec00404 	addi	sp,sp,16
20021a74:	f800283a 	ret

20021a78 <_putchar_r>:
20021a78:	21800217 	ldw	r6,8(r4)
20021a7c:	0027dd01 	jmpi	20027dd0 <_putc_r>

20021a80 <putchar>:
20021a80:	008800f4 	movhi	r2,8195
20021a84:	108b0a04 	addi	r2,r2,11304
20021a88:	200b883a 	mov	r5,r4
20021a8c:	11000017 	ldw	r4,0(r2)
20021a90:	21800217 	ldw	r6,8(r4)
20021a94:	0027dd01 	jmpi	20027dd0 <_putc_r>

20021a98 <_puts_r>:
20021a98:	defff604 	addi	sp,sp,-40
20021a9c:	dc000715 	stw	r16,28(sp)
20021aa0:	2021883a 	mov	r16,r4
20021aa4:	2809883a 	mov	r4,r5
20021aa8:	dc400815 	stw	r17,32(sp)
20021aac:	dfc00915 	stw	ra,36(sp)
20021ab0:	2823883a 	mov	r17,r5
20021ab4:	0021eec0 	call	20021eec <strlen>
20021ab8:	10c00044 	addi	r3,r2,1
20021abc:	d8800115 	stw	r2,4(sp)
20021ac0:	008800f4 	movhi	r2,8195
20021ac4:	10837a04 	addi	r2,r2,3560
20021ac8:	d8800215 	stw	r2,8(sp)
20021acc:	00800044 	movi	r2,1
20021ad0:	d8800315 	stw	r2,12(sp)
20021ad4:	00800084 	movi	r2,2
20021ad8:	dc400015 	stw	r17,0(sp)
20021adc:	d8c00615 	stw	r3,24(sp)
20021ae0:	dec00415 	stw	sp,16(sp)
20021ae4:	d8800515 	stw	r2,20(sp)
20021ae8:	80000226 	beq	r16,zero,20021af4 <_puts_r+0x5c>
20021aec:	80800e17 	ldw	r2,56(r16)
20021af0:	10001426 	beq	r2,zero,20021b44 <_puts_r+0xac>
20021af4:	81400217 	ldw	r5,8(r16)
20021af8:	2880030b 	ldhu	r2,12(r5)
20021afc:	10c8000c 	andi	r3,r2,8192
20021b00:	1800061e 	bne	r3,zero,20021b1c <_puts_r+0x84>
20021b04:	29001917 	ldw	r4,100(r5)
20021b08:	00f7ffc4 	movi	r3,-8193
20021b0c:	10880014 	ori	r2,r2,8192
20021b10:	20c6703a 	and	r3,r4,r3
20021b14:	2880030d 	sth	r2,12(r5)
20021b18:	28c01915 	stw	r3,100(r5)
20021b1c:	d9800404 	addi	r6,sp,16
20021b20:	8009883a 	mov	r4,r16
20021b24:	00264c40 	call	200264c4 <__sfvwrite_r>
20021b28:	1000091e 	bne	r2,zero,20021b50 <_puts_r+0xb8>
20021b2c:	00800284 	movi	r2,10
20021b30:	dfc00917 	ldw	ra,36(sp)
20021b34:	dc400817 	ldw	r17,32(sp)
20021b38:	dc000717 	ldw	r16,28(sp)
20021b3c:	dec00a04 	addi	sp,sp,40
20021b40:	f800283a 	ret
20021b44:	8009883a 	mov	r4,r16
20021b48:	0020cd40 	call	20020cd4 <__sinit>
20021b4c:	003fe906 	br	20021af4 <__alt_data_end+0xfffe3af4>
20021b50:	00bfffc4 	movi	r2,-1
20021b54:	003ff606 	br	20021b30 <__alt_data_end+0xfffe3b30>

20021b58 <puts>:
20021b58:	008800f4 	movhi	r2,8195
20021b5c:	108b0a04 	addi	r2,r2,11304
20021b60:	200b883a 	mov	r5,r4
20021b64:	11000017 	ldw	r4,0(r2)
20021b68:	0021a981 	jmpi	20021a98 <_puts_r>

20021b6c <lflush>:
20021b6c:	2080030b 	ldhu	r2,12(r4)
20021b70:	00c00244 	movi	r3,9
20021b74:	1080024c 	andi	r2,r2,9
20021b78:	10c00226 	beq	r2,r3,20021b84 <lflush+0x18>
20021b7c:	0005883a 	mov	r2,zero
20021b80:	f800283a 	ret
20021b84:	00260601 	jmpi	20026060 <fflush>

20021b88 <__srefill_r>:
20021b88:	defffc04 	addi	sp,sp,-16
20021b8c:	dc400115 	stw	r17,4(sp)
20021b90:	dc000015 	stw	r16,0(sp)
20021b94:	dfc00315 	stw	ra,12(sp)
20021b98:	dc800215 	stw	r18,8(sp)
20021b9c:	2023883a 	mov	r17,r4
20021ba0:	2821883a 	mov	r16,r5
20021ba4:	20000226 	beq	r4,zero,20021bb0 <__srefill_r+0x28>
20021ba8:	20800e17 	ldw	r2,56(r4)
20021bac:	10003c26 	beq	r2,zero,20021ca0 <__srefill_r+0x118>
20021bb0:	80c0030b 	ldhu	r3,12(r16)
20021bb4:	1908000c 	andi	r4,r3,8192
20021bb8:	1805883a 	mov	r2,r3
20021bbc:	2000071e 	bne	r4,zero,20021bdc <__srefill_r+0x54>
20021bc0:	81001917 	ldw	r4,100(r16)
20021bc4:	18880014 	ori	r2,r3,8192
20021bc8:	00f7ffc4 	movi	r3,-8193
20021bcc:	20c8703a 	and	r4,r4,r3
20021bd0:	8080030d 	sth	r2,12(r16)
20021bd4:	1007883a 	mov	r3,r2
20021bd8:	81001915 	stw	r4,100(r16)
20021bdc:	80000115 	stw	zero,4(r16)
20021be0:	1100080c 	andi	r4,r2,32
20021be4:	2000571e 	bne	r4,zero,20021d44 <__srefill_r+0x1bc>
20021be8:	1100010c 	andi	r4,r2,4
20021bec:	20001f26 	beq	r4,zero,20021c6c <__srefill_r+0xe4>
20021bf0:	81400c17 	ldw	r5,48(r16)
20021bf4:	28000826 	beq	r5,zero,20021c18 <__srefill_r+0x90>
20021bf8:	80801004 	addi	r2,r16,64
20021bfc:	28800226 	beq	r5,r2,20021c08 <__srefill_r+0x80>
20021c00:	8809883a 	mov	r4,r17
20021c04:	00261b40 	call	200261b4 <_free_r>
20021c08:	80800f17 	ldw	r2,60(r16)
20021c0c:	80000c15 	stw	zero,48(r16)
20021c10:	80800115 	stw	r2,4(r16)
20021c14:	1000391e 	bne	r2,zero,20021cfc <__srefill_r+0x174>
20021c18:	80800417 	ldw	r2,16(r16)
20021c1c:	10004b26 	beq	r2,zero,20021d4c <__srefill_r+0x1c4>
20021c20:	8480030b 	ldhu	r18,12(r16)
20021c24:	908000cc 	andi	r2,r18,3
20021c28:	10001f1e 	bne	r2,zero,20021ca8 <__srefill_r+0x120>
20021c2c:	81800417 	ldw	r6,16(r16)
20021c30:	80800817 	ldw	r2,32(r16)
20021c34:	81c00517 	ldw	r7,20(r16)
20021c38:	81400717 	ldw	r5,28(r16)
20021c3c:	81800015 	stw	r6,0(r16)
20021c40:	8809883a 	mov	r4,r17
20021c44:	103ee83a 	callr	r2
20021c48:	80800115 	stw	r2,4(r16)
20021c4c:	00800e0e 	bge	zero,r2,20021c88 <__srefill_r+0x100>
20021c50:	0005883a 	mov	r2,zero
20021c54:	dfc00317 	ldw	ra,12(sp)
20021c58:	dc800217 	ldw	r18,8(sp)
20021c5c:	dc400117 	ldw	r17,4(sp)
20021c60:	dc000017 	ldw	r16,0(sp)
20021c64:	dec00404 	addi	sp,sp,16
20021c68:	f800283a 	ret
20021c6c:	1100040c 	andi	r4,r2,16
20021c70:	20003026 	beq	r4,zero,20021d34 <__srefill_r+0x1ac>
20021c74:	1080020c 	andi	r2,r2,8
20021c78:	1000241e 	bne	r2,zero,20021d0c <__srefill_r+0x184>
20021c7c:	18c00114 	ori	r3,r3,4
20021c80:	80c0030d 	sth	r3,12(r16)
20021c84:	003fe406 	br	20021c18 <__alt_data_end+0xfffe3c18>
20021c88:	80c0030b 	ldhu	r3,12(r16)
20021c8c:	1000161e 	bne	r2,zero,20021ce8 <__srefill_r+0x160>
20021c90:	18c00814 	ori	r3,r3,32
20021c94:	00bfffc4 	movi	r2,-1
20021c98:	80c0030d 	sth	r3,12(r16)
20021c9c:	003fed06 	br	20021c54 <__alt_data_end+0xfffe3c54>
20021ca0:	0020cd40 	call	20020cd4 <__sinit>
20021ca4:	003fc206 	br	20021bb0 <__alt_data_end+0xfffe3bb0>
20021ca8:	008800f4 	movhi	r2,8195
20021cac:	108b0904 	addi	r2,r2,11300
20021cb0:	11000017 	ldw	r4,0(r2)
20021cb4:	014800b4 	movhi	r5,8194
20021cb8:	00800044 	movi	r2,1
20021cbc:	2946db04 	addi	r5,r5,7020
20021cc0:	8080030d 	sth	r2,12(r16)
20021cc4:	0020d240 	call	20020d24 <_fwalk>
20021cc8:	00800244 	movi	r2,9
20021ccc:	8480030d 	sth	r18,12(r16)
20021cd0:	9480024c 	andi	r18,r18,9
20021cd4:	90bfd51e 	bne	r18,r2,20021c2c <__alt_data_end+0xfffe3c2c>
20021cd8:	800b883a 	mov	r5,r16
20021cdc:	8809883a 	mov	r4,r17
20021ce0:	0025de80 	call	20025de8 <__sflush_r>
20021ce4:	003fd106 	br	20021c2c <__alt_data_end+0xfffe3c2c>
20021ce8:	18c01014 	ori	r3,r3,64
20021cec:	80000115 	stw	zero,4(r16)
20021cf0:	00bfffc4 	movi	r2,-1
20021cf4:	80c0030d 	sth	r3,12(r16)
20021cf8:	003fd606 	br	20021c54 <__alt_data_end+0xfffe3c54>
20021cfc:	80c00e17 	ldw	r3,56(r16)
20021d00:	0005883a 	mov	r2,zero
20021d04:	80c00015 	stw	r3,0(r16)
20021d08:	003fd206 	br	20021c54 <__alt_data_end+0xfffe3c54>
20021d0c:	800b883a 	mov	r5,r16
20021d10:	8809883a 	mov	r4,r17
20021d14:	00260040 	call	20026004 <_fflush_r>
20021d18:	10000a1e 	bne	r2,zero,20021d44 <__srefill_r+0x1bc>
20021d1c:	8080030b 	ldhu	r2,12(r16)
20021d20:	00fffdc4 	movi	r3,-9
20021d24:	80000215 	stw	zero,8(r16)
20021d28:	1886703a 	and	r3,r3,r2
20021d2c:	80000615 	stw	zero,24(r16)
20021d30:	003fd206 	br	20021c7c <__alt_data_end+0xfffe3c7c>
20021d34:	00800244 	movi	r2,9
20021d38:	88800015 	stw	r2,0(r17)
20021d3c:	18c01014 	ori	r3,r3,64
20021d40:	80c0030d 	sth	r3,12(r16)
20021d44:	00bfffc4 	movi	r2,-1
20021d48:	003fc206 	br	20021c54 <__alt_data_end+0xfffe3c54>
20021d4c:	800b883a 	mov	r5,r16
20021d50:	8809883a 	mov	r4,r17
20021d54:	0026abc0 	call	20026abc <__smakebuf_r>
20021d58:	003fb106 	br	20021c20 <__alt_data_end+0xfffe3c20>

20021d5c <_sbrk_r>:
20021d5c:	defffd04 	addi	sp,sp,-12
20021d60:	dc000015 	stw	r16,0(sp)
20021d64:	040800f4 	movhi	r16,8195
20021d68:	dc400115 	stw	r17,4(sp)
20021d6c:	8411f504 	addi	r16,r16,18388
20021d70:	2023883a 	mov	r17,r4
20021d74:	2809883a 	mov	r4,r5
20021d78:	dfc00215 	stw	ra,8(sp)
20021d7c:	80000015 	stw	zero,0(r16)
20021d80:	002ddc40 	call	2002ddc4 <sbrk>
20021d84:	00ffffc4 	movi	r3,-1
20021d88:	10c00526 	beq	r2,r3,20021da0 <_sbrk_r+0x44>
20021d8c:	dfc00217 	ldw	ra,8(sp)
20021d90:	dc400117 	ldw	r17,4(sp)
20021d94:	dc000017 	ldw	r16,0(sp)
20021d98:	dec00304 	addi	sp,sp,12
20021d9c:	f800283a 	ret
20021da0:	80c00017 	ldw	r3,0(r16)
20021da4:	183ff926 	beq	r3,zero,20021d8c <__alt_data_end+0xfffe3d8c>
20021da8:	88c00015 	stw	r3,0(r17)
20021dac:	003ff706 	br	20021d8c <__alt_data_end+0xfffe3d8c>

20021db0 <__sread>:
20021db0:	defffe04 	addi	sp,sp,-8
20021db4:	dc000015 	stw	r16,0(sp)
20021db8:	2821883a 	mov	r16,r5
20021dbc:	2940038f 	ldh	r5,14(r5)
20021dc0:	dfc00115 	stw	ra,4(sp)
20021dc4:	0027f380 	call	20027f38 <_read_r>
20021dc8:	10000716 	blt	r2,zero,20021de8 <__sread+0x38>
20021dcc:	80c01417 	ldw	r3,80(r16)
20021dd0:	1887883a 	add	r3,r3,r2
20021dd4:	80c01415 	stw	r3,80(r16)
20021dd8:	dfc00117 	ldw	ra,4(sp)
20021ddc:	dc000017 	ldw	r16,0(sp)
20021de0:	dec00204 	addi	sp,sp,8
20021de4:	f800283a 	ret
20021de8:	80c0030b 	ldhu	r3,12(r16)
20021dec:	18fbffcc 	andi	r3,r3,61439
20021df0:	80c0030d 	sth	r3,12(r16)
20021df4:	dfc00117 	ldw	ra,4(sp)
20021df8:	dc000017 	ldw	r16,0(sp)
20021dfc:	dec00204 	addi	sp,sp,8
20021e00:	f800283a 	ret

20021e04 <__seofread>:
20021e04:	0005883a 	mov	r2,zero
20021e08:	f800283a 	ret

20021e0c <__swrite>:
20021e0c:	2880030b 	ldhu	r2,12(r5)
20021e10:	defffb04 	addi	sp,sp,-20
20021e14:	dcc00315 	stw	r19,12(sp)
20021e18:	dc800215 	stw	r18,8(sp)
20021e1c:	dc400115 	stw	r17,4(sp)
20021e20:	dc000015 	stw	r16,0(sp)
20021e24:	dfc00415 	stw	ra,16(sp)
20021e28:	10c0400c 	andi	r3,r2,256
20021e2c:	2821883a 	mov	r16,r5
20021e30:	2023883a 	mov	r17,r4
20021e34:	3025883a 	mov	r18,r6
20021e38:	3827883a 	mov	r19,r7
20021e3c:	18000526 	beq	r3,zero,20021e54 <__swrite+0x48>
20021e40:	2940038f 	ldh	r5,14(r5)
20021e44:	01c00084 	movi	r7,2
20021e48:	000d883a 	mov	r6,zero
20021e4c:	0026a5c0 	call	20026a5c <_lseek_r>
20021e50:	8080030b 	ldhu	r2,12(r16)
20021e54:	8140038f 	ldh	r5,14(r16)
20021e58:	10bbffcc 	andi	r2,r2,61439
20021e5c:	980f883a 	mov	r7,r19
20021e60:	900d883a 	mov	r6,r18
20021e64:	8809883a 	mov	r4,r17
20021e68:	8080030d 	sth	r2,12(r16)
20021e6c:	dfc00417 	ldw	ra,16(sp)
20021e70:	dcc00317 	ldw	r19,12(sp)
20021e74:	dc800217 	ldw	r18,8(sp)
20021e78:	dc400117 	ldw	r17,4(sp)
20021e7c:	dc000017 	ldw	r16,0(sp)
20021e80:	dec00504 	addi	sp,sp,20
20021e84:	00242541 	jmpi	20024254 <_write_r>

20021e88 <__sseek>:
20021e88:	defffe04 	addi	sp,sp,-8
20021e8c:	dc000015 	stw	r16,0(sp)
20021e90:	2821883a 	mov	r16,r5
20021e94:	2940038f 	ldh	r5,14(r5)
20021e98:	dfc00115 	stw	ra,4(sp)
20021e9c:	0026a5c0 	call	20026a5c <_lseek_r>
20021ea0:	00ffffc4 	movi	r3,-1
20021ea4:	10c00826 	beq	r2,r3,20021ec8 <__sseek+0x40>
20021ea8:	80c0030b 	ldhu	r3,12(r16)
20021eac:	80801415 	stw	r2,80(r16)
20021eb0:	18c40014 	ori	r3,r3,4096
20021eb4:	80c0030d 	sth	r3,12(r16)
20021eb8:	dfc00117 	ldw	ra,4(sp)
20021ebc:	dc000017 	ldw	r16,0(sp)
20021ec0:	dec00204 	addi	sp,sp,8
20021ec4:	f800283a 	ret
20021ec8:	80c0030b 	ldhu	r3,12(r16)
20021ecc:	18fbffcc 	andi	r3,r3,61439
20021ed0:	80c0030d 	sth	r3,12(r16)
20021ed4:	dfc00117 	ldw	ra,4(sp)
20021ed8:	dc000017 	ldw	r16,0(sp)
20021edc:	dec00204 	addi	sp,sp,8
20021ee0:	f800283a 	ret

20021ee4 <__sclose>:
20021ee4:	2940038f 	ldh	r5,14(r5)
20021ee8:	00244081 	jmpi	20024408 <_close_r>

20021eec <strlen>:
20021eec:	208000cc 	andi	r2,r4,3
20021ef0:	10002026 	beq	r2,zero,20021f74 <strlen+0x88>
20021ef4:	20800007 	ldb	r2,0(r4)
20021ef8:	10002026 	beq	r2,zero,20021f7c <strlen+0x90>
20021efc:	2005883a 	mov	r2,r4
20021f00:	00000206 	br	20021f0c <strlen+0x20>
20021f04:	10c00007 	ldb	r3,0(r2)
20021f08:	18001826 	beq	r3,zero,20021f6c <strlen+0x80>
20021f0c:	10800044 	addi	r2,r2,1
20021f10:	10c000cc 	andi	r3,r2,3
20021f14:	183ffb1e 	bne	r3,zero,20021f04 <__alt_data_end+0xfffe3f04>
20021f18:	10c00017 	ldw	r3,0(r2)
20021f1c:	01ffbff4 	movhi	r7,65279
20021f20:	39ffbfc4 	addi	r7,r7,-257
20021f24:	00ca303a 	nor	r5,zero,r3
20021f28:	01a02074 	movhi	r6,32897
20021f2c:	19c7883a 	add	r3,r3,r7
20021f30:	31a02004 	addi	r6,r6,-32640
20021f34:	1946703a 	and	r3,r3,r5
20021f38:	1986703a 	and	r3,r3,r6
20021f3c:	1800091e 	bne	r3,zero,20021f64 <strlen+0x78>
20021f40:	10800104 	addi	r2,r2,4
20021f44:	10c00017 	ldw	r3,0(r2)
20021f48:	19cb883a 	add	r5,r3,r7
20021f4c:	00c6303a 	nor	r3,zero,r3
20021f50:	28c6703a 	and	r3,r5,r3
20021f54:	1986703a 	and	r3,r3,r6
20021f58:	183ff926 	beq	r3,zero,20021f40 <__alt_data_end+0xfffe3f40>
20021f5c:	00000106 	br	20021f64 <strlen+0x78>
20021f60:	10800044 	addi	r2,r2,1
20021f64:	10c00007 	ldb	r3,0(r2)
20021f68:	183ffd1e 	bne	r3,zero,20021f60 <__alt_data_end+0xfffe3f60>
20021f6c:	1105c83a 	sub	r2,r2,r4
20021f70:	f800283a 	ret
20021f74:	2005883a 	mov	r2,r4
20021f78:	003fe706 	br	20021f18 <__alt_data_end+0xfffe3f18>
20021f7c:	0005883a 	mov	r2,zero
20021f80:	f800283a 	ret

20021f84 <___vfprintf_internal_r>:
20021f84:	deffb804 	addi	sp,sp,-288
20021f88:	dfc04715 	stw	ra,284(sp)
20021f8c:	ddc04515 	stw	r23,276(sp)
20021f90:	dd404315 	stw	r21,268(sp)
20021f94:	d9002c15 	stw	r4,176(sp)
20021f98:	282f883a 	mov	r23,r5
20021f9c:	302b883a 	mov	r21,r6
20021fa0:	d9c02d15 	stw	r7,180(sp)
20021fa4:	df004615 	stw	fp,280(sp)
20021fa8:	dd804415 	stw	r22,272(sp)
20021fac:	dd004215 	stw	r20,264(sp)
20021fb0:	dcc04115 	stw	r19,260(sp)
20021fb4:	dc804015 	stw	r18,256(sp)
20021fb8:	dc403f15 	stw	r17,252(sp)
20021fbc:	dc003e15 	stw	r16,248(sp)
20021fc0:	0026a2c0 	call	20026a2c <_localeconv_r>
20021fc4:	10800017 	ldw	r2,0(r2)
20021fc8:	1009883a 	mov	r4,r2
20021fcc:	d8803415 	stw	r2,208(sp)
20021fd0:	0021eec0 	call	20021eec <strlen>
20021fd4:	d8803715 	stw	r2,220(sp)
20021fd8:	d8802c17 	ldw	r2,176(sp)
20021fdc:	10000226 	beq	r2,zero,20021fe8 <___vfprintf_internal_r+0x64>
20021fe0:	10800e17 	ldw	r2,56(r2)
20021fe4:	1000f926 	beq	r2,zero,200223cc <___vfprintf_internal_r+0x448>
20021fe8:	b880030b 	ldhu	r2,12(r23)
20021fec:	10c8000c 	andi	r3,r2,8192
20021ff0:	1800061e 	bne	r3,zero,2002200c <___vfprintf_internal_r+0x88>
20021ff4:	b9001917 	ldw	r4,100(r23)
20021ff8:	00f7ffc4 	movi	r3,-8193
20021ffc:	10880014 	ori	r2,r2,8192
20022000:	20c6703a 	and	r3,r4,r3
20022004:	b880030d 	sth	r2,12(r23)
20022008:	b8c01915 	stw	r3,100(r23)
2002200c:	10c0020c 	andi	r3,r2,8
20022010:	1800c126 	beq	r3,zero,20022318 <___vfprintf_internal_r+0x394>
20022014:	b8c00417 	ldw	r3,16(r23)
20022018:	1800bf26 	beq	r3,zero,20022318 <___vfprintf_internal_r+0x394>
2002201c:	1080068c 	andi	r2,r2,26
20022020:	00c00284 	movi	r3,10
20022024:	10c0c426 	beq	r2,r3,20022338 <___vfprintf_internal_r+0x3b4>
20022028:	d8c00404 	addi	r3,sp,16
2002202c:	050800f4 	movhi	r20,8195
20022030:	d9001e04 	addi	r4,sp,120
20022034:	a5038b84 	addi	r20,r20,3630
20022038:	d8c01e15 	stw	r3,120(sp)
2002203c:	d8002015 	stw	zero,128(sp)
20022040:	d8001f15 	stw	zero,124(sp)
20022044:	d8003315 	stw	zero,204(sp)
20022048:	d8003615 	stw	zero,216(sp)
2002204c:	d8003815 	stw	zero,224(sp)
20022050:	1811883a 	mov	r8,r3
20022054:	d8003915 	stw	zero,228(sp)
20022058:	d8003a15 	stw	zero,232(sp)
2002205c:	d8002f15 	stw	zero,188(sp)
20022060:	d9002815 	stw	r4,160(sp)
20022064:	a8800007 	ldb	r2,0(r21)
20022068:	10027b26 	beq	r2,zero,20022a58 <___vfprintf_internal_r+0xad4>
2002206c:	00c00944 	movi	r3,37
20022070:	a821883a 	mov	r16,r21
20022074:	10c0021e 	bne	r2,r3,20022080 <___vfprintf_internal_r+0xfc>
20022078:	00001406 	br	200220cc <___vfprintf_internal_r+0x148>
2002207c:	10c00326 	beq	r2,r3,2002208c <___vfprintf_internal_r+0x108>
20022080:	84000044 	addi	r16,r16,1
20022084:	80800007 	ldb	r2,0(r16)
20022088:	103ffc1e 	bne	r2,zero,2002207c <__alt_data_end+0xfffe407c>
2002208c:	8563c83a 	sub	r17,r16,r21
20022090:	88000e26 	beq	r17,zero,200220cc <___vfprintf_internal_r+0x148>
20022094:	d8c02017 	ldw	r3,128(sp)
20022098:	d8801f17 	ldw	r2,124(sp)
2002209c:	45400015 	stw	r21,0(r8)
200220a0:	1c47883a 	add	r3,r3,r17
200220a4:	10800044 	addi	r2,r2,1
200220a8:	d8c02015 	stw	r3,128(sp)
200220ac:	44400115 	stw	r17,4(r8)
200220b0:	d8801f15 	stw	r2,124(sp)
200220b4:	00c001c4 	movi	r3,7
200220b8:	1880a716 	blt	r3,r2,20022358 <___vfprintf_internal_r+0x3d4>
200220bc:	42000204 	addi	r8,r8,8
200220c0:	d9402f17 	ldw	r5,188(sp)
200220c4:	2c4b883a 	add	r5,r5,r17
200220c8:	d9402f15 	stw	r5,188(sp)
200220cc:	80800007 	ldb	r2,0(r16)
200220d0:	1000a826 	beq	r2,zero,20022374 <___vfprintf_internal_r+0x3f0>
200220d4:	84400047 	ldb	r17,1(r16)
200220d8:	00bfffc4 	movi	r2,-1
200220dc:	85400044 	addi	r21,r16,1
200220e0:	d8002785 	stb	zero,158(sp)
200220e4:	0007883a 	mov	r3,zero
200220e8:	000f883a 	mov	r7,zero
200220ec:	d8802915 	stw	r2,164(sp)
200220f0:	d8003115 	stw	zero,196(sp)
200220f4:	0025883a 	mov	r18,zero
200220f8:	01401604 	movi	r5,88
200220fc:	01800244 	movi	r6,9
20022100:	02800a84 	movi	r10,42
20022104:	02401b04 	movi	r9,108
20022108:	ad400044 	addi	r21,r21,1
2002210c:	88bff804 	addi	r2,r17,-32
20022110:	28830436 	bltu	r5,r2,20022d24 <___vfprintf_internal_r+0xda0>
20022114:	100490ba 	slli	r2,r2,2
20022118:	010800b4 	movhi	r4,8194
2002211c:	21084b04 	addi	r4,r4,8492
20022120:	1105883a 	add	r2,r2,r4
20022124:	10800017 	ldw	r2,0(r2)
20022128:	1000683a 	jmp	r2
2002212c:	20022c44 	addi	zero,r4,2225
20022130:	20022d24 	muli	zero,r4,2228
20022134:	20022d24 	muli	zero,r4,2228
20022138:	20022c64 	muli	zero,r4,2225
2002213c:	20022d24 	muli	zero,r4,2228
20022140:	20022d24 	muli	zero,r4,2228
20022144:	20022d24 	muli	zero,r4,2228
20022148:	20022d24 	muli	zero,r4,2228
2002214c:	20022d24 	muli	zero,r4,2228
20022150:	20022d24 	muli	zero,r4,2228
20022154:	200223d8 	cmpnei	zero,r4,2191
20022158:	20022b80 	call	220022b8 <__alt_data_end+0x1fc42b8>
2002215c:	20022d24 	muli	zero,r4,2228
20022160:	200222a0 	cmpeqi	zero,r4,2186
20022164:	20022400 	call	22002240 <__alt_data_end+0x1fc4240>
20022168:	20022d24 	muli	zero,r4,2228
2002216c:	20022440 	call	22002244 <__alt_data_end+0x1fc4244>
20022170:	2002244c 	andi	zero,r4,2193
20022174:	2002244c 	andi	zero,r4,2193
20022178:	2002244c 	andi	zero,r4,2193
2002217c:	2002244c 	andi	zero,r4,2193
20022180:	2002244c 	andi	zero,r4,2193
20022184:	2002244c 	andi	zero,r4,2193
20022188:	2002244c 	andi	zero,r4,2193
2002218c:	2002244c 	andi	zero,r4,2193
20022190:	2002244c 	andi	zero,r4,2193
20022194:	20022d24 	muli	zero,r4,2228
20022198:	20022d24 	muli	zero,r4,2228
2002219c:	20022d24 	muli	zero,r4,2228
200221a0:	20022d24 	muli	zero,r4,2228
200221a4:	20022d24 	muli	zero,r4,2228
200221a8:	20022d24 	muli	zero,r4,2228
200221ac:	20022d24 	muli	zero,r4,2228
200221b0:	20022d24 	muli	zero,r4,2228
200221b4:	20022d24 	muli	zero,r4,2228
200221b8:	20022d24 	muli	zero,r4,2228
200221bc:	20022480 	call	22002248 <__alt_data_end+0x1fc4248>
200221c0:	2002253c 	xorhi	zero,r4,2196
200221c4:	20022d24 	muli	zero,r4,2228
200221c8:	2002253c 	xorhi	zero,r4,2196
200221cc:	20022d24 	muli	zero,r4,2228
200221d0:	20022d24 	muli	zero,r4,2228
200221d4:	20022d24 	muli	zero,r4,2228
200221d8:	20022d24 	muli	zero,r4,2228
200221dc:	200225dc 	xori	zero,r4,2199
200221e0:	20022d24 	muli	zero,r4,2228
200221e4:	20022d24 	muli	zero,r4,2228
200221e8:	200225e8 	cmpgeui	zero,r4,2199
200221ec:	20022d24 	muli	zero,r4,2228
200221f0:	20022d24 	muli	zero,r4,2228
200221f4:	20022d24 	muli	zero,r4,2228
200221f8:	20022d24 	muli	zero,r4,2228
200221fc:	20022d24 	muli	zero,r4,2228
20022200:	20022a60 	cmpeqi	zero,r4,2217
20022204:	20022d24 	muli	zero,r4,2228
20022208:	20022d24 	muli	zero,r4,2228
2002220c:	20022ac0 	call	220022ac <__alt_data_end+0x1fc42ac>
20022210:	20022d24 	muli	zero,r4,2228
20022214:	20022d24 	muli	zero,r4,2228
20022218:	20022d24 	muli	zero,r4,2228
2002221c:	20022d24 	muli	zero,r4,2228
20022220:	20022d24 	muli	zero,r4,2228
20022224:	20022d24 	muli	zero,r4,2228
20022228:	20022d24 	muli	zero,r4,2228
2002222c:	20022d24 	muli	zero,r4,2228
20022230:	20022d24 	muli	zero,r4,2228
20022234:	20022d24 	muli	zero,r4,2228
20022238:	20022cd0 	cmplti	zero,r4,2227
2002223c:	20022c70 	cmpltui	zero,r4,2225
20022240:	2002253c 	xorhi	zero,r4,2196
20022244:	2002253c 	xorhi	zero,r4,2196
20022248:	2002253c 	xorhi	zero,r4,2196
2002224c:	20022c80 	call	220022c8 <__alt_data_end+0x1fc42c8>
20022250:	20022c70 	cmpltui	zero,r4,2225
20022254:	20022d24 	muli	zero,r4,2228
20022258:	20022d24 	muli	zero,r4,2228
2002225c:	20022c8c 	andi	zero,r4,2226
20022260:	20022d24 	muli	zero,r4,2228
20022264:	20022c9c 	xori	zero,r4,2226
20022268:	20022b70 	cmpltui	zero,r4,2221
2002226c:	200222ac 	andhi	zero,r4,2186
20022270:	20022b90 	cmplti	zero,r4,2222
20022274:	20022d24 	muli	zero,r4,2228
20022278:	20022b9c 	xori	zero,r4,2222
2002227c:	20022d24 	muli	zero,r4,2228
20022280:	20022bf8 	rdprs	zero,r4,2223
20022284:	20022d24 	muli	zero,r4,2228
20022288:	20022d24 	muli	zero,r4,2228
2002228c:	20022c08 	cmpgei	zero,r4,2224
20022290:	d9003117 	ldw	r4,196(sp)
20022294:	d8802d15 	stw	r2,180(sp)
20022298:	0109c83a 	sub	r4,zero,r4
2002229c:	d9003115 	stw	r4,196(sp)
200222a0:	94800114 	ori	r18,r18,4
200222a4:	ac400007 	ldb	r17,0(r21)
200222a8:	003f9706 	br	20022108 <__alt_data_end+0xfffe4108>
200222ac:	00800c04 	movi	r2,48
200222b0:	d9002d17 	ldw	r4,180(sp)
200222b4:	d9402917 	ldw	r5,164(sp)
200222b8:	d8802705 	stb	r2,156(sp)
200222bc:	00801e04 	movi	r2,120
200222c0:	d8802745 	stb	r2,157(sp)
200222c4:	d8002785 	stb	zero,158(sp)
200222c8:	20c00104 	addi	r3,r4,4
200222cc:	24c00017 	ldw	r19,0(r4)
200222d0:	002d883a 	mov	r22,zero
200222d4:	90800094 	ori	r2,r18,2
200222d8:	28029a16 	blt	r5,zero,20022d44 <___vfprintf_internal_r+0xdc0>
200222dc:	00bfdfc4 	movi	r2,-129
200222e0:	90a4703a 	and	r18,r18,r2
200222e4:	d8c02d15 	stw	r3,180(sp)
200222e8:	94800094 	ori	r18,r18,2
200222ec:	9802871e 	bne	r19,zero,20022d0c <___vfprintf_internal_r+0xd88>
200222f0:	008800f4 	movhi	r2,8195
200222f4:	10838404 	addi	r2,r2,3600
200222f8:	d8803915 	stw	r2,228(sp)
200222fc:	04401e04 	movi	r17,120
20022300:	d8802917 	ldw	r2,164(sp)
20022304:	0039883a 	mov	fp,zero
20022308:	1001e926 	beq	r2,zero,20022ab0 <___vfprintf_internal_r+0xb2c>
2002230c:	0027883a 	mov	r19,zero
20022310:	002d883a 	mov	r22,zero
20022314:	00020506 	br	20022b2c <___vfprintf_internal_r+0xba8>
20022318:	d9002c17 	ldw	r4,176(sp)
2002231c:	b80b883a 	mov	r5,r23
20022320:	00242b40 	call	200242b4 <__swsetup_r>
20022324:	1005ac1e 	bne	r2,zero,200239d8 <___vfprintf_internal_r+0x1a54>
20022328:	b880030b 	ldhu	r2,12(r23)
2002232c:	00c00284 	movi	r3,10
20022330:	1080068c 	andi	r2,r2,26
20022334:	10ff3c1e 	bne	r2,r3,20022028 <__alt_data_end+0xfffe4028>
20022338:	b880038f 	ldh	r2,14(r23)
2002233c:	103f3a16 	blt	r2,zero,20022028 <__alt_data_end+0xfffe4028>
20022340:	d9c02d17 	ldw	r7,180(sp)
20022344:	d9002c17 	ldw	r4,176(sp)
20022348:	a80d883a 	mov	r6,r21
2002234c:	b80b883a 	mov	r5,r23
20022350:	00241980 	call	20024198 <__sbprintf>
20022354:	00001106 	br	2002239c <___vfprintf_internal_r+0x418>
20022358:	d9002c17 	ldw	r4,176(sp)
2002235c:	d9801e04 	addi	r6,sp,120
20022360:	b80b883a 	mov	r5,r23
20022364:	00287480 	call	20028748 <__sprint_r>
20022368:	1000081e 	bne	r2,zero,2002238c <___vfprintf_internal_r+0x408>
2002236c:	da000404 	addi	r8,sp,16
20022370:	003f5306 	br	200220c0 <__alt_data_end+0xfffe40c0>
20022374:	d8802017 	ldw	r2,128(sp)
20022378:	10000426 	beq	r2,zero,2002238c <___vfprintf_internal_r+0x408>
2002237c:	d9002c17 	ldw	r4,176(sp)
20022380:	d9801e04 	addi	r6,sp,120
20022384:	b80b883a 	mov	r5,r23
20022388:	00287480 	call	20028748 <__sprint_r>
2002238c:	b880030b 	ldhu	r2,12(r23)
20022390:	1080100c 	andi	r2,r2,64
20022394:	1005901e 	bne	r2,zero,200239d8 <___vfprintf_internal_r+0x1a54>
20022398:	d8802f17 	ldw	r2,188(sp)
2002239c:	dfc04717 	ldw	ra,284(sp)
200223a0:	df004617 	ldw	fp,280(sp)
200223a4:	ddc04517 	ldw	r23,276(sp)
200223a8:	dd804417 	ldw	r22,272(sp)
200223ac:	dd404317 	ldw	r21,268(sp)
200223b0:	dd004217 	ldw	r20,264(sp)
200223b4:	dcc04117 	ldw	r19,260(sp)
200223b8:	dc804017 	ldw	r18,256(sp)
200223bc:	dc403f17 	ldw	r17,252(sp)
200223c0:	dc003e17 	ldw	r16,248(sp)
200223c4:	dec04804 	addi	sp,sp,288
200223c8:	f800283a 	ret
200223cc:	d9002c17 	ldw	r4,176(sp)
200223d0:	0020cd40 	call	20020cd4 <__sinit>
200223d4:	003f0406 	br	20021fe8 <__alt_data_end+0xfffe3fe8>
200223d8:	d8802d17 	ldw	r2,180(sp)
200223dc:	d9002d17 	ldw	r4,180(sp)
200223e0:	10800017 	ldw	r2,0(r2)
200223e4:	d8803115 	stw	r2,196(sp)
200223e8:	20800104 	addi	r2,r4,4
200223ec:	d9003117 	ldw	r4,196(sp)
200223f0:	203fa716 	blt	r4,zero,20022290 <__alt_data_end+0xfffe4290>
200223f4:	d8802d15 	stw	r2,180(sp)
200223f8:	ac400007 	ldb	r17,0(r21)
200223fc:	003f4206 	br	20022108 <__alt_data_end+0xfffe4108>
20022400:	ac400007 	ldb	r17,0(r21)
20022404:	aac00044 	addi	r11,r21,1
20022408:	8a872826 	beq	r17,r10,200240ac <___vfprintf_internal_r+0x2128>
2002240c:	88bff404 	addi	r2,r17,-48
20022410:	0009883a 	mov	r4,zero
20022414:	30867d36 	bltu	r6,r2,20023e0c <___vfprintf_internal_r+0x1e88>
20022418:	5c400007 	ldb	r17,0(r11)
2002241c:	210002a4 	muli	r4,r4,10
20022420:	5d400044 	addi	r21,r11,1
20022424:	a817883a 	mov	r11,r21
20022428:	2089883a 	add	r4,r4,r2
2002242c:	88bff404 	addi	r2,r17,-48
20022430:	30bff92e 	bgeu	r6,r2,20022418 <__alt_data_end+0xfffe4418>
20022434:	2005c916 	blt	r4,zero,20023b5c <___vfprintf_internal_r+0x1bd8>
20022438:	d9002915 	stw	r4,164(sp)
2002243c:	003f3306 	br	2002210c <__alt_data_end+0xfffe410c>
20022440:	94802014 	ori	r18,r18,128
20022444:	ac400007 	ldb	r17,0(r21)
20022448:	003f2f06 	br	20022108 <__alt_data_end+0xfffe4108>
2002244c:	a809883a 	mov	r4,r21
20022450:	d8003115 	stw	zero,196(sp)
20022454:	88bff404 	addi	r2,r17,-48
20022458:	0017883a 	mov	r11,zero
2002245c:	24400007 	ldb	r17,0(r4)
20022460:	5ac002a4 	muli	r11,r11,10
20022464:	ad400044 	addi	r21,r21,1
20022468:	a809883a 	mov	r4,r21
2002246c:	12d7883a 	add	r11,r2,r11
20022470:	88bff404 	addi	r2,r17,-48
20022474:	30bff92e 	bgeu	r6,r2,2002245c <__alt_data_end+0xfffe445c>
20022478:	dac03115 	stw	r11,196(sp)
2002247c:	003f2306 	br	2002210c <__alt_data_end+0xfffe410c>
20022480:	18c03fcc 	andi	r3,r3,255
20022484:	18072b1e 	bne	r3,zero,20024134 <___vfprintf_internal_r+0x21b0>
20022488:	94800414 	ori	r18,r18,16
2002248c:	9080080c 	andi	r2,r18,32
20022490:	10037b26 	beq	r2,zero,20023280 <___vfprintf_internal_r+0x12fc>
20022494:	d9402d17 	ldw	r5,180(sp)
20022498:	28800117 	ldw	r2,4(r5)
2002249c:	2cc00017 	ldw	r19,0(r5)
200224a0:	29400204 	addi	r5,r5,8
200224a4:	d9402d15 	stw	r5,180(sp)
200224a8:	102d883a 	mov	r22,r2
200224ac:	10044b16 	blt	r2,zero,200235dc <___vfprintf_internal_r+0x1658>
200224b0:	d9402917 	ldw	r5,164(sp)
200224b4:	df002783 	ldbu	fp,158(sp)
200224b8:	2803bc16 	blt	r5,zero,200233ac <___vfprintf_internal_r+0x1428>
200224bc:	00ffdfc4 	movi	r3,-129
200224c0:	9d84b03a 	or	r2,r19,r22
200224c4:	90e4703a 	and	r18,r18,r3
200224c8:	10017726 	beq	r2,zero,20022aa8 <___vfprintf_internal_r+0xb24>
200224cc:	b0038326 	beq	r22,zero,200232dc <___vfprintf_internal_r+0x1358>
200224d0:	dc402a15 	stw	r17,168(sp)
200224d4:	dc001e04 	addi	r16,sp,120
200224d8:	b023883a 	mov	r17,r22
200224dc:	402d883a 	mov	r22,r8
200224e0:	9809883a 	mov	r4,r19
200224e4:	880b883a 	mov	r5,r17
200224e8:	01800284 	movi	r6,10
200224ec:	000f883a 	mov	r7,zero
200224f0:	002a8c80 	call	2002a8c8 <__umoddi3>
200224f4:	10800c04 	addi	r2,r2,48
200224f8:	843fffc4 	addi	r16,r16,-1
200224fc:	9809883a 	mov	r4,r19
20022500:	880b883a 	mov	r5,r17
20022504:	80800005 	stb	r2,0(r16)
20022508:	01800284 	movi	r6,10
2002250c:	000f883a 	mov	r7,zero
20022510:	002a3500 	call	2002a350 <__udivdi3>
20022514:	1027883a 	mov	r19,r2
20022518:	10c4b03a 	or	r2,r2,r3
2002251c:	1823883a 	mov	r17,r3
20022520:	103fef1e 	bne	r2,zero,200224e0 <__alt_data_end+0xfffe44e0>
20022524:	d8c02817 	ldw	r3,160(sp)
20022528:	dc402a17 	ldw	r17,168(sp)
2002252c:	b011883a 	mov	r8,r22
20022530:	1c07c83a 	sub	r3,r3,r16
20022534:	d8c02e15 	stw	r3,184(sp)
20022538:	00005906 	br	200226a0 <___vfprintf_internal_r+0x71c>
2002253c:	18c03fcc 	andi	r3,r3,255
20022540:	1806fa1e 	bne	r3,zero,2002412c <___vfprintf_internal_r+0x21a8>
20022544:	9080020c 	andi	r2,r18,8
20022548:	10048a26 	beq	r2,zero,20023774 <___vfprintf_internal_r+0x17f0>
2002254c:	d8c02d17 	ldw	r3,180(sp)
20022550:	d9002d17 	ldw	r4,180(sp)
20022554:	d9402d17 	ldw	r5,180(sp)
20022558:	18c00017 	ldw	r3,0(r3)
2002255c:	21000117 	ldw	r4,4(r4)
20022560:	29400204 	addi	r5,r5,8
20022564:	d8c03615 	stw	r3,216(sp)
20022568:	d9003815 	stw	r4,224(sp)
2002256c:	d9402d15 	stw	r5,180(sp)
20022570:	d9003617 	ldw	r4,216(sp)
20022574:	d9403817 	ldw	r5,224(sp)
20022578:	da003d15 	stw	r8,244(sp)
2002257c:	04000044 	movi	r16,1
20022580:	00284fc0 	call	200284fc <__fpclassifyd>
20022584:	da003d17 	ldw	r8,244(sp)
20022588:	14041f1e 	bne	r2,r16,20023608 <___vfprintf_internal_r+0x1684>
2002258c:	d9003617 	ldw	r4,216(sp)
20022590:	d9403817 	ldw	r5,224(sp)
20022594:	000d883a 	mov	r6,zero
20022598:	000f883a 	mov	r7,zero
2002259c:	002c2ac0 	call	2002c2ac <__ledf2>
200225a0:	da003d17 	ldw	r8,244(sp)
200225a4:	1005be16 	blt	r2,zero,20023ca0 <___vfprintf_internal_r+0x1d1c>
200225a8:	df002783 	ldbu	fp,158(sp)
200225ac:	008011c4 	movi	r2,71
200225b0:	1445330e 	bge	r2,r17,20023a80 <___vfprintf_internal_r+0x1afc>
200225b4:	040800f4 	movhi	r16,8195
200225b8:	84037c04 	addi	r16,r16,3568
200225bc:	00c000c4 	movi	r3,3
200225c0:	00bfdfc4 	movi	r2,-129
200225c4:	d8c02a15 	stw	r3,168(sp)
200225c8:	90a4703a 	and	r18,r18,r2
200225cc:	d8c02e15 	stw	r3,184(sp)
200225d0:	d8002915 	stw	zero,164(sp)
200225d4:	d8003215 	stw	zero,200(sp)
200225d8:	00003706 	br	200226b8 <___vfprintf_internal_r+0x734>
200225dc:	94800214 	ori	r18,r18,8
200225e0:	ac400007 	ldb	r17,0(r21)
200225e4:	003ec806 	br	20022108 <__alt_data_end+0xfffe4108>
200225e8:	18c03fcc 	andi	r3,r3,255
200225ec:	1806db1e 	bne	r3,zero,2002415c <___vfprintf_internal_r+0x21d8>
200225f0:	94800414 	ori	r18,r18,16
200225f4:	9080080c 	andi	r2,r18,32
200225f8:	1002d826 	beq	r2,zero,2002315c <___vfprintf_internal_r+0x11d8>
200225fc:	d9402d17 	ldw	r5,180(sp)
20022600:	d8c02917 	ldw	r3,164(sp)
20022604:	d8002785 	stb	zero,158(sp)
20022608:	28800204 	addi	r2,r5,8
2002260c:	2cc00017 	ldw	r19,0(r5)
20022610:	2d800117 	ldw	r22,4(r5)
20022614:	18048f16 	blt	r3,zero,20023854 <___vfprintf_internal_r+0x18d0>
20022618:	013fdfc4 	movi	r4,-129
2002261c:	9d86b03a 	or	r3,r19,r22
20022620:	d8802d15 	stw	r2,180(sp)
20022624:	9124703a 	and	r18,r18,r4
20022628:	1802d91e 	bne	r3,zero,20023190 <___vfprintf_internal_r+0x120c>
2002262c:	d8c02917 	ldw	r3,164(sp)
20022630:	0039883a 	mov	fp,zero
20022634:	1805c326 	beq	r3,zero,20023d44 <___vfprintf_internal_r+0x1dc0>
20022638:	0027883a 	mov	r19,zero
2002263c:	002d883a 	mov	r22,zero
20022640:	dc001e04 	addi	r16,sp,120
20022644:	9806d0fa 	srli	r3,r19,3
20022648:	b008977a 	slli	r4,r22,29
2002264c:	b02cd0fa 	srli	r22,r22,3
20022650:	9cc001cc 	andi	r19,r19,7
20022654:	98800c04 	addi	r2,r19,48
20022658:	843fffc4 	addi	r16,r16,-1
2002265c:	20e6b03a 	or	r19,r4,r3
20022660:	80800005 	stb	r2,0(r16)
20022664:	9d86b03a 	or	r3,r19,r22
20022668:	183ff61e 	bne	r3,zero,20022644 <__alt_data_end+0xfffe4644>
2002266c:	90c0004c 	andi	r3,r18,1
20022670:	18013b26 	beq	r3,zero,20022b60 <___vfprintf_internal_r+0xbdc>
20022674:	10803fcc 	andi	r2,r2,255
20022678:	1080201c 	xori	r2,r2,128
2002267c:	10bfe004 	addi	r2,r2,-128
20022680:	00c00c04 	movi	r3,48
20022684:	10c13626 	beq	r2,r3,20022b60 <___vfprintf_internal_r+0xbdc>
20022688:	80ffffc5 	stb	r3,-1(r16)
2002268c:	d8c02817 	ldw	r3,160(sp)
20022690:	80bfffc4 	addi	r2,r16,-1
20022694:	1021883a 	mov	r16,r2
20022698:	1887c83a 	sub	r3,r3,r2
2002269c:	d8c02e15 	stw	r3,184(sp)
200226a0:	d8802e17 	ldw	r2,184(sp)
200226a4:	d9002917 	ldw	r4,164(sp)
200226a8:	1100010e 	bge	r2,r4,200226b0 <___vfprintf_internal_r+0x72c>
200226ac:	2005883a 	mov	r2,r4
200226b0:	d8802a15 	stw	r2,168(sp)
200226b4:	d8003215 	stw	zero,200(sp)
200226b8:	e7003fcc 	andi	fp,fp,255
200226bc:	e700201c 	xori	fp,fp,128
200226c0:	e73fe004 	addi	fp,fp,-128
200226c4:	e0000326 	beq	fp,zero,200226d4 <___vfprintf_internal_r+0x750>
200226c8:	d8c02a17 	ldw	r3,168(sp)
200226cc:	18c00044 	addi	r3,r3,1
200226d0:	d8c02a15 	stw	r3,168(sp)
200226d4:	90c0008c 	andi	r3,r18,2
200226d8:	d8c02b15 	stw	r3,172(sp)
200226dc:	18000326 	beq	r3,zero,200226ec <___vfprintf_internal_r+0x768>
200226e0:	d8c02a17 	ldw	r3,168(sp)
200226e4:	18c00084 	addi	r3,r3,2
200226e8:	d8c02a15 	stw	r3,168(sp)
200226ec:	90c0210c 	andi	r3,r18,132
200226f0:	d8c03015 	stw	r3,192(sp)
200226f4:	1801a31e 	bne	r3,zero,20022d84 <___vfprintf_internal_r+0xe00>
200226f8:	d9003117 	ldw	r4,196(sp)
200226fc:	d8c02a17 	ldw	r3,168(sp)
20022700:	20e7c83a 	sub	r19,r4,r3
20022704:	04c19f0e 	bge	zero,r19,20022d84 <___vfprintf_internal_r+0xe00>
20022708:	02400404 	movi	r9,16
2002270c:	d8c02017 	ldw	r3,128(sp)
20022710:	d8801f17 	ldw	r2,124(sp)
20022714:	4cc50d0e 	bge	r9,r19,20023b4c <___vfprintf_internal_r+0x1bc8>
20022718:	014800f4 	movhi	r5,8195
2002271c:	29438f84 	addi	r5,r5,3646
20022720:	dc403b15 	stw	r17,236(sp)
20022724:	d9403515 	stw	r5,212(sp)
20022728:	9823883a 	mov	r17,r19
2002272c:	482d883a 	mov	r22,r9
20022730:	9027883a 	mov	r19,r18
20022734:	070001c4 	movi	fp,7
20022738:	8025883a 	mov	r18,r16
2002273c:	dc002c17 	ldw	r16,176(sp)
20022740:	00000306 	br	20022750 <___vfprintf_internal_r+0x7cc>
20022744:	8c7ffc04 	addi	r17,r17,-16
20022748:	42000204 	addi	r8,r8,8
2002274c:	b440130e 	bge	r22,r17,2002279c <___vfprintf_internal_r+0x818>
20022750:	010800f4 	movhi	r4,8195
20022754:	18c00404 	addi	r3,r3,16
20022758:	10800044 	addi	r2,r2,1
2002275c:	21038f84 	addi	r4,r4,3646
20022760:	41000015 	stw	r4,0(r8)
20022764:	45800115 	stw	r22,4(r8)
20022768:	d8c02015 	stw	r3,128(sp)
2002276c:	d8801f15 	stw	r2,124(sp)
20022770:	e0bff40e 	bge	fp,r2,20022744 <__alt_data_end+0xfffe4744>
20022774:	d9801e04 	addi	r6,sp,120
20022778:	b80b883a 	mov	r5,r23
2002277c:	8009883a 	mov	r4,r16
20022780:	00287480 	call	20028748 <__sprint_r>
20022784:	103f011e 	bne	r2,zero,2002238c <__alt_data_end+0xfffe438c>
20022788:	8c7ffc04 	addi	r17,r17,-16
2002278c:	d8c02017 	ldw	r3,128(sp)
20022790:	d8801f17 	ldw	r2,124(sp)
20022794:	da000404 	addi	r8,sp,16
20022798:	b47fed16 	blt	r22,r17,20022750 <__alt_data_end+0xfffe4750>
2002279c:	9021883a 	mov	r16,r18
200227a0:	9825883a 	mov	r18,r19
200227a4:	8827883a 	mov	r19,r17
200227a8:	dc403b17 	ldw	r17,236(sp)
200227ac:	d9403517 	ldw	r5,212(sp)
200227b0:	98c7883a 	add	r3,r19,r3
200227b4:	10800044 	addi	r2,r2,1
200227b8:	41400015 	stw	r5,0(r8)
200227bc:	44c00115 	stw	r19,4(r8)
200227c0:	d8c02015 	stw	r3,128(sp)
200227c4:	d8801f15 	stw	r2,124(sp)
200227c8:	010001c4 	movi	r4,7
200227cc:	2082a316 	blt	r4,r2,2002325c <___vfprintf_internal_r+0x12d8>
200227d0:	df002787 	ldb	fp,158(sp)
200227d4:	42000204 	addi	r8,r8,8
200227d8:	e0000c26 	beq	fp,zero,2002280c <___vfprintf_internal_r+0x888>
200227dc:	d8801f17 	ldw	r2,124(sp)
200227e0:	d9002784 	addi	r4,sp,158
200227e4:	18c00044 	addi	r3,r3,1
200227e8:	10800044 	addi	r2,r2,1
200227ec:	41000015 	stw	r4,0(r8)
200227f0:	01000044 	movi	r4,1
200227f4:	41000115 	stw	r4,4(r8)
200227f8:	d8c02015 	stw	r3,128(sp)
200227fc:	d8801f15 	stw	r2,124(sp)
20022800:	010001c4 	movi	r4,7
20022804:	20823c16 	blt	r4,r2,200230f8 <___vfprintf_internal_r+0x1174>
20022808:	42000204 	addi	r8,r8,8
2002280c:	d8802b17 	ldw	r2,172(sp)
20022810:	10000c26 	beq	r2,zero,20022844 <___vfprintf_internal_r+0x8c0>
20022814:	d8801f17 	ldw	r2,124(sp)
20022818:	d9002704 	addi	r4,sp,156
2002281c:	18c00084 	addi	r3,r3,2
20022820:	10800044 	addi	r2,r2,1
20022824:	41000015 	stw	r4,0(r8)
20022828:	01000084 	movi	r4,2
2002282c:	41000115 	stw	r4,4(r8)
20022830:	d8c02015 	stw	r3,128(sp)
20022834:	d8801f15 	stw	r2,124(sp)
20022838:	010001c4 	movi	r4,7
2002283c:	20823616 	blt	r4,r2,20023118 <___vfprintf_internal_r+0x1194>
20022840:	42000204 	addi	r8,r8,8
20022844:	d9003017 	ldw	r4,192(sp)
20022848:	00802004 	movi	r2,128
2002284c:	20819926 	beq	r4,r2,20022eb4 <___vfprintf_internal_r+0xf30>
20022850:	d9402917 	ldw	r5,164(sp)
20022854:	d8802e17 	ldw	r2,184(sp)
20022858:	28adc83a 	sub	r22,r5,r2
2002285c:	0580310e 	bge	zero,r22,20022924 <___vfprintf_internal_r+0x9a0>
20022860:	07000404 	movi	fp,16
20022864:	d8801f17 	ldw	r2,124(sp)
20022868:	e584140e 	bge	fp,r22,200238bc <___vfprintf_internal_r+0x1938>
2002286c:	014800f4 	movhi	r5,8195
20022870:	29438b84 	addi	r5,r5,3630
20022874:	dc402915 	stw	r17,164(sp)
20022878:	d9402b15 	stw	r5,172(sp)
2002287c:	b023883a 	mov	r17,r22
20022880:	04c001c4 	movi	r19,7
20022884:	a82d883a 	mov	r22,r21
20022888:	902b883a 	mov	r21,r18
2002288c:	8025883a 	mov	r18,r16
20022890:	dc002c17 	ldw	r16,176(sp)
20022894:	00000306 	br	200228a4 <___vfprintf_internal_r+0x920>
20022898:	8c7ffc04 	addi	r17,r17,-16
2002289c:	42000204 	addi	r8,r8,8
200228a0:	e440110e 	bge	fp,r17,200228e8 <___vfprintf_internal_r+0x964>
200228a4:	18c00404 	addi	r3,r3,16
200228a8:	10800044 	addi	r2,r2,1
200228ac:	45000015 	stw	r20,0(r8)
200228b0:	47000115 	stw	fp,4(r8)
200228b4:	d8c02015 	stw	r3,128(sp)
200228b8:	d8801f15 	stw	r2,124(sp)
200228bc:	98bff60e 	bge	r19,r2,20022898 <__alt_data_end+0xfffe4898>
200228c0:	d9801e04 	addi	r6,sp,120
200228c4:	b80b883a 	mov	r5,r23
200228c8:	8009883a 	mov	r4,r16
200228cc:	00287480 	call	20028748 <__sprint_r>
200228d0:	103eae1e 	bne	r2,zero,2002238c <__alt_data_end+0xfffe438c>
200228d4:	8c7ffc04 	addi	r17,r17,-16
200228d8:	d8c02017 	ldw	r3,128(sp)
200228dc:	d8801f17 	ldw	r2,124(sp)
200228e0:	da000404 	addi	r8,sp,16
200228e4:	e47fef16 	blt	fp,r17,200228a4 <__alt_data_end+0xfffe48a4>
200228e8:	9021883a 	mov	r16,r18
200228ec:	a825883a 	mov	r18,r21
200228f0:	b02b883a 	mov	r21,r22
200228f4:	882d883a 	mov	r22,r17
200228f8:	dc402917 	ldw	r17,164(sp)
200228fc:	d9002b17 	ldw	r4,172(sp)
20022900:	1d87883a 	add	r3,r3,r22
20022904:	10800044 	addi	r2,r2,1
20022908:	41000015 	stw	r4,0(r8)
2002290c:	45800115 	stw	r22,4(r8)
20022910:	d8c02015 	stw	r3,128(sp)
20022914:	d8801f15 	stw	r2,124(sp)
20022918:	010001c4 	movi	r4,7
2002291c:	2081ee16 	blt	r4,r2,200230d8 <___vfprintf_internal_r+0x1154>
20022920:	42000204 	addi	r8,r8,8
20022924:	9080400c 	andi	r2,r18,256
20022928:	1001181e 	bne	r2,zero,20022d8c <___vfprintf_internal_r+0xe08>
2002292c:	d9402e17 	ldw	r5,184(sp)
20022930:	d8801f17 	ldw	r2,124(sp)
20022934:	44000015 	stw	r16,0(r8)
20022938:	1947883a 	add	r3,r3,r5
2002293c:	10800044 	addi	r2,r2,1
20022940:	41400115 	stw	r5,4(r8)
20022944:	d8c02015 	stw	r3,128(sp)
20022948:	d8801f15 	stw	r2,124(sp)
2002294c:	010001c4 	movi	r4,7
20022950:	2081d316 	blt	r4,r2,200230a0 <___vfprintf_internal_r+0x111c>
20022954:	42000204 	addi	r8,r8,8
20022958:	9480010c 	andi	r18,r18,4
2002295c:	90003226 	beq	r18,zero,20022a28 <___vfprintf_internal_r+0xaa4>
20022960:	d9403117 	ldw	r5,196(sp)
20022964:	d8802a17 	ldw	r2,168(sp)
20022968:	28a1c83a 	sub	r16,r5,r2
2002296c:	04002e0e 	bge	zero,r16,20022a28 <___vfprintf_internal_r+0xaa4>
20022970:	04400404 	movi	r17,16
20022974:	d8801f17 	ldw	r2,124(sp)
20022978:	8c04a20e 	bge	r17,r16,20023c04 <___vfprintf_internal_r+0x1c80>
2002297c:	014800f4 	movhi	r5,8195
20022980:	29438f84 	addi	r5,r5,3646
20022984:	d9403515 	stw	r5,212(sp)
20022988:	048001c4 	movi	r18,7
2002298c:	dcc02c17 	ldw	r19,176(sp)
20022990:	00000306 	br	200229a0 <___vfprintf_internal_r+0xa1c>
20022994:	843ffc04 	addi	r16,r16,-16
20022998:	42000204 	addi	r8,r8,8
2002299c:	8c00130e 	bge	r17,r16,200229ec <___vfprintf_internal_r+0xa68>
200229a0:	010800f4 	movhi	r4,8195
200229a4:	18c00404 	addi	r3,r3,16
200229a8:	10800044 	addi	r2,r2,1
200229ac:	21038f84 	addi	r4,r4,3646
200229b0:	41000015 	stw	r4,0(r8)
200229b4:	44400115 	stw	r17,4(r8)
200229b8:	d8c02015 	stw	r3,128(sp)
200229bc:	d8801f15 	stw	r2,124(sp)
200229c0:	90bff40e 	bge	r18,r2,20022994 <__alt_data_end+0xfffe4994>
200229c4:	d9801e04 	addi	r6,sp,120
200229c8:	b80b883a 	mov	r5,r23
200229cc:	9809883a 	mov	r4,r19
200229d0:	00287480 	call	20028748 <__sprint_r>
200229d4:	103e6d1e 	bne	r2,zero,2002238c <__alt_data_end+0xfffe438c>
200229d8:	843ffc04 	addi	r16,r16,-16
200229dc:	d8c02017 	ldw	r3,128(sp)
200229e0:	d8801f17 	ldw	r2,124(sp)
200229e4:	da000404 	addi	r8,sp,16
200229e8:	8c3fed16 	blt	r17,r16,200229a0 <__alt_data_end+0xfffe49a0>
200229ec:	d9403517 	ldw	r5,212(sp)
200229f0:	1c07883a 	add	r3,r3,r16
200229f4:	10800044 	addi	r2,r2,1
200229f8:	41400015 	stw	r5,0(r8)
200229fc:	44000115 	stw	r16,4(r8)
20022a00:	d8c02015 	stw	r3,128(sp)
20022a04:	d8801f15 	stw	r2,124(sp)
20022a08:	010001c4 	movi	r4,7
20022a0c:	2080060e 	bge	r4,r2,20022a28 <___vfprintf_internal_r+0xaa4>
20022a10:	d9002c17 	ldw	r4,176(sp)
20022a14:	d9801e04 	addi	r6,sp,120
20022a18:	b80b883a 	mov	r5,r23
20022a1c:	00287480 	call	20028748 <__sprint_r>
20022a20:	103e5a1e 	bne	r2,zero,2002238c <__alt_data_end+0xfffe438c>
20022a24:	d8c02017 	ldw	r3,128(sp)
20022a28:	d8803117 	ldw	r2,196(sp)
20022a2c:	d9002a17 	ldw	r4,168(sp)
20022a30:	1100010e 	bge	r2,r4,20022a38 <___vfprintf_internal_r+0xab4>
20022a34:	2005883a 	mov	r2,r4
20022a38:	d9402f17 	ldw	r5,188(sp)
20022a3c:	288b883a 	add	r5,r5,r2
20022a40:	d9402f15 	stw	r5,188(sp)
20022a44:	18019e1e 	bne	r3,zero,200230c0 <___vfprintf_internal_r+0x113c>
20022a48:	a8800007 	ldb	r2,0(r21)
20022a4c:	d8001f15 	stw	zero,124(sp)
20022a50:	da000404 	addi	r8,sp,16
20022a54:	103d851e 	bne	r2,zero,2002206c <__alt_data_end+0xfffe406c>
20022a58:	a821883a 	mov	r16,r21
20022a5c:	003d9b06 	br	200220cc <__alt_data_end+0xfffe40cc>
20022a60:	18c03fcc 	andi	r3,r3,255
20022a64:	1805c11e 	bne	r3,zero,2002416c <___vfprintf_internal_r+0x21e8>
20022a68:	94800414 	ori	r18,r18,16
20022a6c:	9080080c 	andi	r2,r18,32
20022a70:	10020c26 	beq	r2,zero,200232a4 <___vfprintf_internal_r+0x1320>
20022a74:	d8802d17 	ldw	r2,180(sp)
20022a78:	d9002917 	ldw	r4,164(sp)
20022a7c:	d8002785 	stb	zero,158(sp)
20022a80:	10c00204 	addi	r3,r2,8
20022a84:	14c00017 	ldw	r19,0(r2)
20022a88:	15800117 	ldw	r22,4(r2)
20022a8c:	20040f16 	blt	r4,zero,20023acc <___vfprintf_internal_r+0x1b48>
20022a90:	013fdfc4 	movi	r4,-129
20022a94:	9d84b03a 	or	r2,r19,r22
20022a98:	d8c02d15 	stw	r3,180(sp)
20022a9c:	9124703a 	and	r18,r18,r4
20022aa0:	0039883a 	mov	fp,zero
20022aa4:	103e891e 	bne	r2,zero,200224cc <__alt_data_end+0xfffe44cc>
20022aa8:	d9002917 	ldw	r4,164(sp)
20022aac:	2002c11e 	bne	r4,zero,200235b4 <___vfprintf_internal_r+0x1630>
20022ab0:	d8002915 	stw	zero,164(sp)
20022ab4:	d8002e15 	stw	zero,184(sp)
20022ab8:	dc001e04 	addi	r16,sp,120
20022abc:	003ef806 	br	200226a0 <__alt_data_end+0xfffe46a0>
20022ac0:	18c03fcc 	andi	r3,r3,255
20022ac4:	18059d1e 	bne	r3,zero,2002413c <___vfprintf_internal_r+0x21b8>
20022ac8:	014800f4 	movhi	r5,8195
20022acc:	29437f04 	addi	r5,r5,3580
20022ad0:	d9403915 	stw	r5,228(sp)
20022ad4:	9080080c 	andi	r2,r18,32
20022ad8:	10005226 	beq	r2,zero,20022c24 <___vfprintf_internal_r+0xca0>
20022adc:	d8802d17 	ldw	r2,180(sp)
20022ae0:	14c00017 	ldw	r19,0(r2)
20022ae4:	15800117 	ldw	r22,4(r2)
20022ae8:	10800204 	addi	r2,r2,8
20022aec:	d8802d15 	stw	r2,180(sp)
20022af0:	9080004c 	andi	r2,r18,1
20022af4:	10019026 	beq	r2,zero,20023138 <___vfprintf_internal_r+0x11b4>
20022af8:	9d84b03a 	or	r2,r19,r22
20022afc:	10036926 	beq	r2,zero,200238a4 <___vfprintf_internal_r+0x1920>
20022b00:	d8c02917 	ldw	r3,164(sp)
20022b04:	00800c04 	movi	r2,48
20022b08:	d8802705 	stb	r2,156(sp)
20022b0c:	dc402745 	stb	r17,157(sp)
20022b10:	d8002785 	stb	zero,158(sp)
20022b14:	90800094 	ori	r2,r18,2
20022b18:	18045d16 	blt	r3,zero,20023c90 <___vfprintf_internal_r+0x1d0c>
20022b1c:	00bfdfc4 	movi	r2,-129
20022b20:	90a4703a 	and	r18,r18,r2
20022b24:	94800094 	ori	r18,r18,2
20022b28:	0039883a 	mov	fp,zero
20022b2c:	d9003917 	ldw	r4,228(sp)
20022b30:	dc001e04 	addi	r16,sp,120
20022b34:	988003cc 	andi	r2,r19,15
20022b38:	b006973a 	slli	r3,r22,28
20022b3c:	2085883a 	add	r2,r4,r2
20022b40:	9826d13a 	srli	r19,r19,4
20022b44:	10800003 	ldbu	r2,0(r2)
20022b48:	b02cd13a 	srli	r22,r22,4
20022b4c:	843fffc4 	addi	r16,r16,-1
20022b50:	1ce6b03a 	or	r19,r3,r19
20022b54:	80800005 	stb	r2,0(r16)
20022b58:	9d84b03a 	or	r2,r19,r22
20022b5c:	103ff51e 	bne	r2,zero,20022b34 <__alt_data_end+0xfffe4b34>
20022b60:	d8c02817 	ldw	r3,160(sp)
20022b64:	1c07c83a 	sub	r3,r3,r16
20022b68:	d8c02e15 	stw	r3,184(sp)
20022b6c:	003ecc06 	br	200226a0 <__alt_data_end+0xfffe46a0>
20022b70:	18c03fcc 	andi	r3,r3,255
20022b74:	183e9f26 	beq	r3,zero,200225f4 <__alt_data_end+0xfffe45f4>
20022b78:	d9c02785 	stb	r7,158(sp)
20022b7c:	003e9d06 	br	200225f4 <__alt_data_end+0xfffe45f4>
20022b80:	00c00044 	movi	r3,1
20022b84:	01c00ac4 	movi	r7,43
20022b88:	ac400007 	ldb	r17,0(r21)
20022b8c:	003d5e06 	br	20022108 <__alt_data_end+0xfffe4108>
20022b90:	94800814 	ori	r18,r18,32
20022b94:	ac400007 	ldb	r17,0(r21)
20022b98:	003d5b06 	br	20022108 <__alt_data_end+0xfffe4108>
20022b9c:	d8c02d17 	ldw	r3,180(sp)
20022ba0:	d8002785 	stb	zero,158(sp)
20022ba4:	1c000017 	ldw	r16,0(r3)
20022ba8:	1cc00104 	addi	r19,r3,4
20022bac:	80041926 	beq	r16,zero,20023c14 <___vfprintf_internal_r+0x1c90>
20022bb0:	d9002917 	ldw	r4,164(sp)
20022bb4:	2003d016 	blt	r4,zero,20023af8 <___vfprintf_internal_r+0x1b74>
20022bb8:	200d883a 	mov	r6,r4
20022bbc:	000b883a 	mov	r5,zero
20022bc0:	8009883a 	mov	r4,r16
20022bc4:	da003d15 	stw	r8,244(sp)
20022bc8:	00216b80 	call	200216b8 <memchr>
20022bcc:	da003d17 	ldw	r8,244(sp)
20022bd0:	10045426 	beq	r2,zero,20023d24 <___vfprintf_internal_r+0x1da0>
20022bd4:	1405c83a 	sub	r2,r2,r16
20022bd8:	d8802e15 	stw	r2,184(sp)
20022bdc:	1003cc16 	blt	r2,zero,20023b10 <___vfprintf_internal_r+0x1b8c>
20022be0:	df002783 	ldbu	fp,158(sp)
20022be4:	d8802a15 	stw	r2,168(sp)
20022be8:	dcc02d15 	stw	r19,180(sp)
20022bec:	d8002915 	stw	zero,164(sp)
20022bf0:	d8003215 	stw	zero,200(sp)
20022bf4:	003eb006 	br	200226b8 <__alt_data_end+0xfffe46b8>
20022bf8:	18c03fcc 	andi	r3,r3,255
20022bfc:	183f9b26 	beq	r3,zero,20022a6c <__alt_data_end+0xfffe4a6c>
20022c00:	d9c02785 	stb	r7,158(sp)
20022c04:	003f9906 	br	20022a6c <__alt_data_end+0xfffe4a6c>
20022c08:	18c03fcc 	andi	r3,r3,255
20022c0c:	1805551e 	bne	r3,zero,20024164 <___vfprintf_internal_r+0x21e0>
20022c10:	014800f4 	movhi	r5,8195
20022c14:	29438404 	addi	r5,r5,3600
20022c18:	d9403915 	stw	r5,228(sp)
20022c1c:	9080080c 	andi	r2,r18,32
20022c20:	103fae1e 	bne	r2,zero,20022adc <__alt_data_end+0xfffe4adc>
20022c24:	9080040c 	andi	r2,r18,16
20022c28:	1002de26 	beq	r2,zero,200237a4 <___vfprintf_internal_r+0x1820>
20022c2c:	d8c02d17 	ldw	r3,180(sp)
20022c30:	002d883a 	mov	r22,zero
20022c34:	1cc00017 	ldw	r19,0(r3)
20022c38:	18c00104 	addi	r3,r3,4
20022c3c:	d8c02d15 	stw	r3,180(sp)
20022c40:	003fab06 	br	20022af0 <__alt_data_end+0xfffe4af0>
20022c44:	38803fcc 	andi	r2,r7,255
20022c48:	1080201c 	xori	r2,r2,128
20022c4c:	10bfe004 	addi	r2,r2,-128
20022c50:	1002d21e 	bne	r2,zero,2002379c <___vfprintf_internal_r+0x1818>
20022c54:	00c00044 	movi	r3,1
20022c58:	01c00804 	movi	r7,32
20022c5c:	ac400007 	ldb	r17,0(r21)
20022c60:	003d2906 	br	20022108 <__alt_data_end+0xfffe4108>
20022c64:	94800054 	ori	r18,r18,1
20022c68:	ac400007 	ldb	r17,0(r21)
20022c6c:	003d2606 	br	20022108 <__alt_data_end+0xfffe4108>
20022c70:	18c03fcc 	andi	r3,r3,255
20022c74:	183e0526 	beq	r3,zero,2002248c <__alt_data_end+0xfffe448c>
20022c78:	d9c02785 	stb	r7,158(sp)
20022c7c:	003e0306 	br	2002248c <__alt_data_end+0xfffe448c>
20022c80:	94801014 	ori	r18,r18,64
20022c84:	ac400007 	ldb	r17,0(r21)
20022c88:	003d1f06 	br	20022108 <__alt_data_end+0xfffe4108>
20022c8c:	ac400007 	ldb	r17,0(r21)
20022c90:	8a438726 	beq	r17,r9,20023ab0 <___vfprintf_internal_r+0x1b2c>
20022c94:	94800414 	ori	r18,r18,16
20022c98:	003d1b06 	br	20022108 <__alt_data_end+0xfffe4108>
20022c9c:	18c03fcc 	andi	r3,r3,255
20022ca0:	1805341e 	bne	r3,zero,20024174 <___vfprintf_internal_r+0x21f0>
20022ca4:	9080080c 	andi	r2,r18,32
20022ca8:	1002cd26 	beq	r2,zero,200237e0 <___vfprintf_internal_r+0x185c>
20022cac:	d9402d17 	ldw	r5,180(sp)
20022cb0:	d9002f17 	ldw	r4,188(sp)
20022cb4:	28800017 	ldw	r2,0(r5)
20022cb8:	2007d7fa 	srai	r3,r4,31
20022cbc:	29400104 	addi	r5,r5,4
20022cc0:	d9402d15 	stw	r5,180(sp)
20022cc4:	11000015 	stw	r4,0(r2)
20022cc8:	10c00115 	stw	r3,4(r2)
20022ccc:	003ce506 	br	20022064 <__alt_data_end+0xfffe4064>
20022cd0:	d8c02d17 	ldw	r3,180(sp)
20022cd4:	d9002d17 	ldw	r4,180(sp)
20022cd8:	d8002785 	stb	zero,158(sp)
20022cdc:	18800017 	ldw	r2,0(r3)
20022ce0:	21000104 	addi	r4,r4,4
20022ce4:	00c00044 	movi	r3,1
20022ce8:	d8c02a15 	stw	r3,168(sp)
20022cec:	d8801405 	stb	r2,80(sp)
20022cf0:	d9002d15 	stw	r4,180(sp)
20022cf4:	d8c02e15 	stw	r3,184(sp)
20022cf8:	d8002915 	stw	zero,164(sp)
20022cfc:	d8003215 	stw	zero,200(sp)
20022d00:	dc001404 	addi	r16,sp,80
20022d04:	0039883a 	mov	fp,zero
20022d08:	003e7206 	br	200226d4 <__alt_data_end+0xfffe46d4>
20022d0c:	010800f4 	movhi	r4,8195
20022d10:	21038404 	addi	r4,r4,3600
20022d14:	0039883a 	mov	fp,zero
20022d18:	d9003915 	stw	r4,228(sp)
20022d1c:	04401e04 	movi	r17,120
20022d20:	003f8206 	br	20022b2c <__alt_data_end+0xfffe4b2c>
20022d24:	18c03fcc 	andi	r3,r3,255
20022d28:	1805061e 	bne	r3,zero,20024144 <___vfprintf_internal_r+0x21c0>
20022d2c:	883d9126 	beq	r17,zero,20022374 <__alt_data_end+0xfffe4374>
20022d30:	00c00044 	movi	r3,1
20022d34:	d8c02a15 	stw	r3,168(sp)
20022d38:	dc401405 	stb	r17,80(sp)
20022d3c:	d8002785 	stb	zero,158(sp)
20022d40:	003fec06 	br	20022cf4 <__alt_data_end+0xfffe4cf4>
20022d44:	014800f4 	movhi	r5,8195
20022d48:	29438404 	addi	r5,r5,3600
20022d4c:	d9403915 	stw	r5,228(sp)
20022d50:	d8c02d15 	stw	r3,180(sp)
20022d54:	1025883a 	mov	r18,r2
20022d58:	04401e04 	movi	r17,120
20022d5c:	9d84b03a 	or	r2,r19,r22
20022d60:	1000fc1e 	bne	r2,zero,20023154 <___vfprintf_internal_r+0x11d0>
20022d64:	0039883a 	mov	fp,zero
20022d68:	00800084 	movi	r2,2
20022d6c:	10803fcc 	andi	r2,r2,255
20022d70:	00c00044 	movi	r3,1
20022d74:	10c20f26 	beq	r2,r3,200235b4 <___vfprintf_internal_r+0x1630>
20022d78:	00c00084 	movi	r3,2
20022d7c:	10fd6326 	beq	r2,r3,2002230c <__alt_data_end+0xfffe430c>
20022d80:	003e2d06 	br	20022638 <__alt_data_end+0xfffe4638>
20022d84:	d8c02017 	ldw	r3,128(sp)
20022d88:	003e9306 	br	200227d8 <__alt_data_end+0xfffe47d8>
20022d8c:	00801944 	movi	r2,101
20022d90:	14407e0e 	bge	r2,r17,20022f8c <___vfprintf_internal_r+0x1008>
20022d94:	d9003617 	ldw	r4,216(sp)
20022d98:	d9403817 	ldw	r5,224(sp)
20022d9c:	000d883a 	mov	r6,zero
20022da0:	000f883a 	mov	r7,zero
20022da4:	d8c03c15 	stw	r3,240(sp)
20022da8:	da003d15 	stw	r8,244(sp)
20022dac:	002c1480 	call	2002c148 <__eqdf2>
20022db0:	d8c03c17 	ldw	r3,240(sp)
20022db4:	da003d17 	ldw	r8,244(sp)
20022db8:	1000f71e 	bne	r2,zero,20023198 <___vfprintf_internal_r+0x1214>
20022dbc:	d8801f17 	ldw	r2,124(sp)
20022dc0:	010800f4 	movhi	r4,8195
20022dc4:	21038b04 	addi	r4,r4,3628
20022dc8:	18c00044 	addi	r3,r3,1
20022dcc:	10800044 	addi	r2,r2,1
20022dd0:	41000015 	stw	r4,0(r8)
20022dd4:	01000044 	movi	r4,1
20022dd8:	41000115 	stw	r4,4(r8)
20022ddc:	d8c02015 	stw	r3,128(sp)
20022de0:	d8801f15 	stw	r2,124(sp)
20022de4:	010001c4 	movi	r4,7
20022de8:	2082b816 	blt	r4,r2,200238cc <___vfprintf_internal_r+0x1948>
20022dec:	42000204 	addi	r8,r8,8
20022df0:	d8802617 	ldw	r2,152(sp)
20022df4:	d9403317 	ldw	r5,204(sp)
20022df8:	11400216 	blt	r2,r5,20022e04 <___vfprintf_internal_r+0xe80>
20022dfc:	9080004c 	andi	r2,r18,1
20022e00:	103ed526 	beq	r2,zero,20022958 <__alt_data_end+0xfffe4958>
20022e04:	d8803717 	ldw	r2,220(sp)
20022e08:	d9003417 	ldw	r4,208(sp)
20022e0c:	d9403717 	ldw	r5,220(sp)
20022e10:	1887883a 	add	r3,r3,r2
20022e14:	d8801f17 	ldw	r2,124(sp)
20022e18:	41000015 	stw	r4,0(r8)
20022e1c:	41400115 	stw	r5,4(r8)
20022e20:	10800044 	addi	r2,r2,1
20022e24:	d8c02015 	stw	r3,128(sp)
20022e28:	d8801f15 	stw	r2,124(sp)
20022e2c:	010001c4 	movi	r4,7
20022e30:	20832916 	blt	r4,r2,20023ad8 <___vfprintf_internal_r+0x1b54>
20022e34:	42000204 	addi	r8,r8,8
20022e38:	d8803317 	ldw	r2,204(sp)
20022e3c:	143fffc4 	addi	r16,r2,-1
20022e40:	043ec50e 	bge	zero,r16,20022958 <__alt_data_end+0xfffe4958>
20022e44:	04400404 	movi	r17,16
20022e48:	d8801f17 	ldw	r2,124(sp)
20022e4c:	8c00880e 	bge	r17,r16,20023070 <___vfprintf_internal_r+0x10ec>
20022e50:	014800f4 	movhi	r5,8195
20022e54:	29438b84 	addi	r5,r5,3630
20022e58:	d9402b15 	stw	r5,172(sp)
20022e5c:	058001c4 	movi	r22,7
20022e60:	dcc02c17 	ldw	r19,176(sp)
20022e64:	00000306 	br	20022e74 <___vfprintf_internal_r+0xef0>
20022e68:	42000204 	addi	r8,r8,8
20022e6c:	843ffc04 	addi	r16,r16,-16
20022e70:	8c00820e 	bge	r17,r16,2002307c <___vfprintf_internal_r+0x10f8>
20022e74:	18c00404 	addi	r3,r3,16
20022e78:	10800044 	addi	r2,r2,1
20022e7c:	45000015 	stw	r20,0(r8)
20022e80:	44400115 	stw	r17,4(r8)
20022e84:	d8c02015 	stw	r3,128(sp)
20022e88:	d8801f15 	stw	r2,124(sp)
20022e8c:	b0bff60e 	bge	r22,r2,20022e68 <__alt_data_end+0xfffe4e68>
20022e90:	d9801e04 	addi	r6,sp,120
20022e94:	b80b883a 	mov	r5,r23
20022e98:	9809883a 	mov	r4,r19
20022e9c:	00287480 	call	20028748 <__sprint_r>
20022ea0:	103d3a1e 	bne	r2,zero,2002238c <__alt_data_end+0xfffe438c>
20022ea4:	d8c02017 	ldw	r3,128(sp)
20022ea8:	d8801f17 	ldw	r2,124(sp)
20022eac:	da000404 	addi	r8,sp,16
20022eb0:	003fee06 	br	20022e6c <__alt_data_end+0xfffe4e6c>
20022eb4:	d9403117 	ldw	r5,196(sp)
20022eb8:	d8802a17 	ldw	r2,168(sp)
20022ebc:	28adc83a 	sub	r22,r5,r2
20022ec0:	05be630e 	bge	zero,r22,20022850 <__alt_data_end+0xfffe4850>
20022ec4:	07000404 	movi	fp,16
20022ec8:	d8801f17 	ldw	r2,124(sp)
20022ecc:	e5838f0e 	bge	fp,r22,20023d0c <___vfprintf_internal_r+0x1d88>
20022ed0:	014800f4 	movhi	r5,8195
20022ed4:	29438b84 	addi	r5,r5,3630
20022ed8:	dc403015 	stw	r17,192(sp)
20022edc:	d9402b15 	stw	r5,172(sp)
20022ee0:	b023883a 	mov	r17,r22
20022ee4:	04c001c4 	movi	r19,7
20022ee8:	a82d883a 	mov	r22,r21
20022eec:	902b883a 	mov	r21,r18
20022ef0:	8025883a 	mov	r18,r16
20022ef4:	dc002c17 	ldw	r16,176(sp)
20022ef8:	00000306 	br	20022f08 <___vfprintf_internal_r+0xf84>
20022efc:	8c7ffc04 	addi	r17,r17,-16
20022f00:	42000204 	addi	r8,r8,8
20022f04:	e440110e 	bge	fp,r17,20022f4c <___vfprintf_internal_r+0xfc8>
20022f08:	18c00404 	addi	r3,r3,16
20022f0c:	10800044 	addi	r2,r2,1
20022f10:	45000015 	stw	r20,0(r8)
20022f14:	47000115 	stw	fp,4(r8)
20022f18:	d8c02015 	stw	r3,128(sp)
20022f1c:	d8801f15 	stw	r2,124(sp)
20022f20:	98bff60e 	bge	r19,r2,20022efc <__alt_data_end+0xfffe4efc>
20022f24:	d9801e04 	addi	r6,sp,120
20022f28:	b80b883a 	mov	r5,r23
20022f2c:	8009883a 	mov	r4,r16
20022f30:	00287480 	call	20028748 <__sprint_r>
20022f34:	103d151e 	bne	r2,zero,2002238c <__alt_data_end+0xfffe438c>
20022f38:	8c7ffc04 	addi	r17,r17,-16
20022f3c:	d8c02017 	ldw	r3,128(sp)
20022f40:	d8801f17 	ldw	r2,124(sp)
20022f44:	da000404 	addi	r8,sp,16
20022f48:	e47fef16 	blt	fp,r17,20022f08 <__alt_data_end+0xfffe4f08>
20022f4c:	9021883a 	mov	r16,r18
20022f50:	a825883a 	mov	r18,r21
20022f54:	b02b883a 	mov	r21,r22
20022f58:	882d883a 	mov	r22,r17
20022f5c:	dc403017 	ldw	r17,192(sp)
20022f60:	d9002b17 	ldw	r4,172(sp)
20022f64:	1d87883a 	add	r3,r3,r22
20022f68:	10800044 	addi	r2,r2,1
20022f6c:	41000015 	stw	r4,0(r8)
20022f70:	45800115 	stw	r22,4(r8)
20022f74:	d8c02015 	stw	r3,128(sp)
20022f78:	d8801f15 	stw	r2,124(sp)
20022f7c:	010001c4 	movi	r4,7
20022f80:	20818e16 	blt	r4,r2,200235bc <___vfprintf_internal_r+0x1638>
20022f84:	42000204 	addi	r8,r8,8
20022f88:	003e3106 	br	20022850 <__alt_data_end+0xfffe4850>
20022f8c:	d9403317 	ldw	r5,204(sp)
20022f90:	00800044 	movi	r2,1
20022f94:	18c00044 	addi	r3,r3,1
20022f98:	1141530e 	bge	r2,r5,200234e8 <___vfprintf_internal_r+0x1564>
20022f9c:	dc401f17 	ldw	r17,124(sp)
20022fa0:	00800044 	movi	r2,1
20022fa4:	40800115 	stw	r2,4(r8)
20022fa8:	8c400044 	addi	r17,r17,1
20022fac:	44000015 	stw	r16,0(r8)
20022fb0:	d8c02015 	stw	r3,128(sp)
20022fb4:	dc401f15 	stw	r17,124(sp)
20022fb8:	008001c4 	movi	r2,7
20022fbc:	14416b16 	blt	r2,r17,2002356c <___vfprintf_internal_r+0x15e8>
20022fc0:	42000204 	addi	r8,r8,8
20022fc4:	d8803717 	ldw	r2,220(sp)
20022fc8:	d9003417 	ldw	r4,208(sp)
20022fcc:	8c400044 	addi	r17,r17,1
20022fd0:	10c7883a 	add	r3,r2,r3
20022fd4:	40800115 	stw	r2,4(r8)
20022fd8:	41000015 	stw	r4,0(r8)
20022fdc:	d8c02015 	stw	r3,128(sp)
20022fe0:	dc401f15 	stw	r17,124(sp)
20022fe4:	008001c4 	movi	r2,7
20022fe8:	14416916 	blt	r2,r17,20023590 <___vfprintf_internal_r+0x160c>
20022fec:	45800204 	addi	r22,r8,8
20022ff0:	d9003617 	ldw	r4,216(sp)
20022ff4:	d9403817 	ldw	r5,224(sp)
20022ff8:	000d883a 	mov	r6,zero
20022ffc:	000f883a 	mov	r7,zero
20023000:	d8c03c15 	stw	r3,240(sp)
20023004:	002c1480 	call	2002c148 <__eqdf2>
20023008:	d8c03c17 	ldw	r3,240(sp)
2002300c:	1000bc26 	beq	r2,zero,20023300 <___vfprintf_internal_r+0x137c>
20023010:	d9403317 	ldw	r5,204(sp)
20023014:	84000044 	addi	r16,r16,1
20023018:	8c400044 	addi	r17,r17,1
2002301c:	28bfffc4 	addi	r2,r5,-1
20023020:	1887883a 	add	r3,r3,r2
20023024:	b0800115 	stw	r2,4(r22)
20023028:	b4000015 	stw	r16,0(r22)
2002302c:	d8c02015 	stw	r3,128(sp)
20023030:	dc401f15 	stw	r17,124(sp)
20023034:	008001c4 	movi	r2,7
20023038:	14414316 	blt	r2,r17,20023548 <___vfprintf_internal_r+0x15c4>
2002303c:	b5800204 	addi	r22,r22,8
20023040:	d9003a17 	ldw	r4,232(sp)
20023044:	df0022c4 	addi	fp,sp,139
20023048:	8c400044 	addi	r17,r17,1
2002304c:	20c7883a 	add	r3,r4,r3
20023050:	b7000015 	stw	fp,0(r22)
20023054:	b1000115 	stw	r4,4(r22)
20023058:	d8c02015 	stw	r3,128(sp)
2002305c:	dc401f15 	stw	r17,124(sp)
20023060:	008001c4 	movi	r2,7
20023064:	14400e16 	blt	r2,r17,200230a0 <___vfprintf_internal_r+0x111c>
20023068:	b2000204 	addi	r8,r22,8
2002306c:	003e3a06 	br	20022958 <__alt_data_end+0xfffe4958>
20023070:	010800f4 	movhi	r4,8195
20023074:	21038b84 	addi	r4,r4,3630
20023078:	d9002b15 	stw	r4,172(sp)
2002307c:	d9002b17 	ldw	r4,172(sp)
20023080:	1c07883a 	add	r3,r3,r16
20023084:	44000115 	stw	r16,4(r8)
20023088:	41000015 	stw	r4,0(r8)
2002308c:	10800044 	addi	r2,r2,1
20023090:	d8c02015 	stw	r3,128(sp)
20023094:	d8801f15 	stw	r2,124(sp)
20023098:	010001c4 	movi	r4,7
2002309c:	20be2d0e 	bge	r4,r2,20022954 <__alt_data_end+0xfffe4954>
200230a0:	d9002c17 	ldw	r4,176(sp)
200230a4:	d9801e04 	addi	r6,sp,120
200230a8:	b80b883a 	mov	r5,r23
200230ac:	00287480 	call	20028748 <__sprint_r>
200230b0:	103cb61e 	bne	r2,zero,2002238c <__alt_data_end+0xfffe438c>
200230b4:	d8c02017 	ldw	r3,128(sp)
200230b8:	da000404 	addi	r8,sp,16
200230bc:	003e2606 	br	20022958 <__alt_data_end+0xfffe4958>
200230c0:	d9002c17 	ldw	r4,176(sp)
200230c4:	d9801e04 	addi	r6,sp,120
200230c8:	b80b883a 	mov	r5,r23
200230cc:	00287480 	call	20028748 <__sprint_r>
200230d0:	103e5d26 	beq	r2,zero,20022a48 <__alt_data_end+0xfffe4a48>
200230d4:	003cad06 	br	2002238c <__alt_data_end+0xfffe438c>
200230d8:	d9002c17 	ldw	r4,176(sp)
200230dc:	d9801e04 	addi	r6,sp,120
200230e0:	b80b883a 	mov	r5,r23
200230e4:	00287480 	call	20028748 <__sprint_r>
200230e8:	103ca81e 	bne	r2,zero,2002238c <__alt_data_end+0xfffe438c>
200230ec:	d8c02017 	ldw	r3,128(sp)
200230f0:	da000404 	addi	r8,sp,16
200230f4:	003e0b06 	br	20022924 <__alt_data_end+0xfffe4924>
200230f8:	d9002c17 	ldw	r4,176(sp)
200230fc:	d9801e04 	addi	r6,sp,120
20023100:	b80b883a 	mov	r5,r23
20023104:	00287480 	call	20028748 <__sprint_r>
20023108:	103ca01e 	bne	r2,zero,2002238c <__alt_data_end+0xfffe438c>
2002310c:	d8c02017 	ldw	r3,128(sp)
20023110:	da000404 	addi	r8,sp,16
20023114:	003dbd06 	br	2002280c <__alt_data_end+0xfffe480c>
20023118:	d9002c17 	ldw	r4,176(sp)
2002311c:	d9801e04 	addi	r6,sp,120
20023120:	b80b883a 	mov	r5,r23
20023124:	00287480 	call	20028748 <__sprint_r>
20023128:	103c981e 	bne	r2,zero,2002238c <__alt_data_end+0xfffe438c>
2002312c:	d8c02017 	ldw	r3,128(sp)
20023130:	da000404 	addi	r8,sp,16
20023134:	003dc306 	br	20022844 <__alt_data_end+0xfffe4844>
20023138:	d8802917 	ldw	r2,164(sp)
2002313c:	d8002785 	stb	zero,158(sp)
20023140:	103f0616 	blt	r2,zero,20022d5c <__alt_data_end+0xfffe4d5c>
20023144:	00ffdfc4 	movi	r3,-129
20023148:	9d84b03a 	or	r2,r19,r22
2002314c:	90e4703a 	and	r18,r18,r3
20023150:	103c6b26 	beq	r2,zero,20022300 <__alt_data_end+0xfffe4300>
20023154:	0039883a 	mov	fp,zero
20023158:	003e7406 	br	20022b2c <__alt_data_end+0xfffe4b2c>
2002315c:	9080040c 	andi	r2,r18,16
20023160:	1001b326 	beq	r2,zero,20023830 <___vfprintf_internal_r+0x18ac>
20023164:	d9002d17 	ldw	r4,180(sp)
20023168:	d9402917 	ldw	r5,164(sp)
2002316c:	d8002785 	stb	zero,158(sp)
20023170:	20800104 	addi	r2,r4,4
20023174:	24c00017 	ldw	r19,0(r4)
20023178:	002d883a 	mov	r22,zero
2002317c:	2801b516 	blt	r5,zero,20023854 <___vfprintf_internal_r+0x18d0>
20023180:	00ffdfc4 	movi	r3,-129
20023184:	d8802d15 	stw	r2,180(sp)
20023188:	90e4703a 	and	r18,r18,r3
2002318c:	983d2726 	beq	r19,zero,2002262c <__alt_data_end+0xfffe462c>
20023190:	0039883a 	mov	fp,zero
20023194:	003d2a06 	br	20022640 <__alt_data_end+0xfffe4640>
20023198:	dc402617 	ldw	r17,152(sp)
2002319c:	0441d30e 	bge	zero,r17,200238ec <___vfprintf_internal_r+0x1968>
200231a0:	dc403217 	ldw	r17,200(sp)
200231a4:	d8803317 	ldw	r2,204(sp)
200231a8:	1440010e 	bge	r2,r17,200231b0 <___vfprintf_internal_r+0x122c>
200231ac:	1023883a 	mov	r17,r2
200231b0:	04400a0e 	bge	zero,r17,200231dc <___vfprintf_internal_r+0x1258>
200231b4:	d8801f17 	ldw	r2,124(sp)
200231b8:	1c47883a 	add	r3,r3,r17
200231bc:	44000015 	stw	r16,0(r8)
200231c0:	10800044 	addi	r2,r2,1
200231c4:	44400115 	stw	r17,4(r8)
200231c8:	d8c02015 	stw	r3,128(sp)
200231cc:	d8801f15 	stw	r2,124(sp)
200231d0:	010001c4 	movi	r4,7
200231d4:	20826516 	blt	r4,r2,20023b6c <___vfprintf_internal_r+0x1be8>
200231d8:	42000204 	addi	r8,r8,8
200231dc:	88026116 	blt	r17,zero,20023b64 <___vfprintf_internal_r+0x1be0>
200231e0:	d9003217 	ldw	r4,200(sp)
200231e4:	2463c83a 	sub	r17,r4,r17
200231e8:	04407b0e 	bge	zero,r17,200233d8 <___vfprintf_internal_r+0x1454>
200231ec:	05800404 	movi	r22,16
200231f0:	d8801f17 	ldw	r2,124(sp)
200231f4:	b4419d0e 	bge	r22,r17,2002386c <___vfprintf_internal_r+0x18e8>
200231f8:	010800f4 	movhi	r4,8195
200231fc:	21038b84 	addi	r4,r4,3630
20023200:	d9002b15 	stw	r4,172(sp)
20023204:	070001c4 	movi	fp,7
20023208:	dcc02c17 	ldw	r19,176(sp)
2002320c:	00000306 	br	2002321c <___vfprintf_internal_r+0x1298>
20023210:	42000204 	addi	r8,r8,8
20023214:	8c7ffc04 	addi	r17,r17,-16
20023218:	b441970e 	bge	r22,r17,20023878 <___vfprintf_internal_r+0x18f4>
2002321c:	18c00404 	addi	r3,r3,16
20023220:	10800044 	addi	r2,r2,1
20023224:	45000015 	stw	r20,0(r8)
20023228:	45800115 	stw	r22,4(r8)
2002322c:	d8c02015 	stw	r3,128(sp)
20023230:	d8801f15 	stw	r2,124(sp)
20023234:	e0bff60e 	bge	fp,r2,20023210 <__alt_data_end+0xfffe5210>
20023238:	d9801e04 	addi	r6,sp,120
2002323c:	b80b883a 	mov	r5,r23
20023240:	9809883a 	mov	r4,r19
20023244:	00287480 	call	20028748 <__sprint_r>
20023248:	103c501e 	bne	r2,zero,2002238c <__alt_data_end+0xfffe438c>
2002324c:	d8c02017 	ldw	r3,128(sp)
20023250:	d8801f17 	ldw	r2,124(sp)
20023254:	da000404 	addi	r8,sp,16
20023258:	003fee06 	br	20023214 <__alt_data_end+0xfffe5214>
2002325c:	d9002c17 	ldw	r4,176(sp)
20023260:	d9801e04 	addi	r6,sp,120
20023264:	b80b883a 	mov	r5,r23
20023268:	00287480 	call	20028748 <__sprint_r>
2002326c:	103c471e 	bne	r2,zero,2002238c <__alt_data_end+0xfffe438c>
20023270:	d8c02017 	ldw	r3,128(sp)
20023274:	df002787 	ldb	fp,158(sp)
20023278:	da000404 	addi	r8,sp,16
2002327c:	003d5606 	br	200227d8 <__alt_data_end+0xfffe47d8>
20023280:	9080040c 	andi	r2,r18,16
20023284:	10016126 	beq	r2,zero,2002380c <___vfprintf_internal_r+0x1888>
20023288:	d8802d17 	ldw	r2,180(sp)
2002328c:	14c00017 	ldw	r19,0(r2)
20023290:	10800104 	addi	r2,r2,4
20023294:	d8802d15 	stw	r2,180(sp)
20023298:	982dd7fa 	srai	r22,r19,31
2002329c:	b005883a 	mov	r2,r22
200232a0:	003c8206 	br	200224ac <__alt_data_end+0xfffe44ac>
200232a4:	9080040c 	andi	r2,r18,16
200232a8:	10003526 	beq	r2,zero,20023380 <___vfprintf_internal_r+0x13fc>
200232ac:	d9402d17 	ldw	r5,180(sp)
200232b0:	d8c02917 	ldw	r3,164(sp)
200232b4:	d8002785 	stb	zero,158(sp)
200232b8:	28800104 	addi	r2,r5,4
200232bc:	2cc00017 	ldw	r19,0(r5)
200232c0:	002d883a 	mov	r22,zero
200232c4:	18003716 	blt	r3,zero,200233a4 <___vfprintf_internal_r+0x1420>
200232c8:	00ffdfc4 	movi	r3,-129
200232cc:	d8802d15 	stw	r2,180(sp)
200232d0:	90e4703a 	and	r18,r18,r3
200232d4:	0039883a 	mov	fp,zero
200232d8:	983df326 	beq	r19,zero,20022aa8 <__alt_data_end+0xfffe4aa8>
200232dc:	00800244 	movi	r2,9
200232e0:	14fc7b36 	bltu	r2,r19,200224d0 <__alt_data_end+0xfffe44d0>
200232e4:	d8c02817 	ldw	r3,160(sp)
200232e8:	dc001dc4 	addi	r16,sp,119
200232ec:	9cc00c04 	addi	r19,r19,48
200232f0:	1c07c83a 	sub	r3,r3,r16
200232f4:	dcc01dc5 	stb	r19,119(sp)
200232f8:	d8c02e15 	stw	r3,184(sp)
200232fc:	003ce806 	br	200226a0 <__alt_data_end+0xfffe46a0>
20023300:	d8803317 	ldw	r2,204(sp)
20023304:	143fffc4 	addi	r16,r2,-1
20023308:	043f4d0e 	bge	zero,r16,20023040 <__alt_data_end+0xfffe5040>
2002330c:	07000404 	movi	fp,16
20023310:	e400810e 	bge	fp,r16,20023518 <___vfprintf_internal_r+0x1594>
20023314:	014800f4 	movhi	r5,8195
20023318:	29438b84 	addi	r5,r5,3630
2002331c:	d9402b15 	stw	r5,172(sp)
20023320:	01c001c4 	movi	r7,7
20023324:	dcc02c17 	ldw	r19,176(sp)
20023328:	00000306 	br	20023338 <___vfprintf_internal_r+0x13b4>
2002332c:	b5800204 	addi	r22,r22,8
20023330:	843ffc04 	addi	r16,r16,-16
20023334:	e4007b0e 	bge	fp,r16,20023524 <___vfprintf_internal_r+0x15a0>
20023338:	18c00404 	addi	r3,r3,16
2002333c:	8c400044 	addi	r17,r17,1
20023340:	b5000015 	stw	r20,0(r22)
20023344:	b7000115 	stw	fp,4(r22)
20023348:	d8c02015 	stw	r3,128(sp)
2002334c:	dc401f15 	stw	r17,124(sp)
20023350:	3c7ff60e 	bge	r7,r17,2002332c <__alt_data_end+0xfffe532c>
20023354:	d9801e04 	addi	r6,sp,120
20023358:	b80b883a 	mov	r5,r23
2002335c:	9809883a 	mov	r4,r19
20023360:	d9c03c15 	stw	r7,240(sp)
20023364:	00287480 	call	20028748 <__sprint_r>
20023368:	d9c03c17 	ldw	r7,240(sp)
2002336c:	103c071e 	bne	r2,zero,2002238c <__alt_data_end+0xfffe438c>
20023370:	d8c02017 	ldw	r3,128(sp)
20023374:	dc401f17 	ldw	r17,124(sp)
20023378:	dd800404 	addi	r22,sp,16
2002337c:	003fec06 	br	20023330 <__alt_data_end+0xfffe5330>
20023380:	9080100c 	andi	r2,r18,64
20023384:	d8002785 	stb	zero,158(sp)
20023388:	10010e26 	beq	r2,zero,200237c4 <___vfprintf_internal_r+0x1840>
2002338c:	d9002d17 	ldw	r4,180(sp)
20023390:	d9402917 	ldw	r5,164(sp)
20023394:	002d883a 	mov	r22,zero
20023398:	20800104 	addi	r2,r4,4
2002339c:	24c0000b 	ldhu	r19,0(r4)
200233a0:	283fc90e 	bge	r5,zero,200232c8 <__alt_data_end+0xfffe52c8>
200233a4:	d8802d15 	stw	r2,180(sp)
200233a8:	0039883a 	mov	fp,zero
200233ac:	9d84b03a 	or	r2,r19,r22
200233b0:	103c461e 	bne	r2,zero,200224cc <__alt_data_end+0xfffe44cc>
200233b4:	00800044 	movi	r2,1
200233b8:	003e6c06 	br	20022d6c <__alt_data_end+0xfffe4d6c>
200233bc:	d9002c17 	ldw	r4,176(sp)
200233c0:	d9801e04 	addi	r6,sp,120
200233c4:	b80b883a 	mov	r5,r23
200233c8:	00287480 	call	20028748 <__sprint_r>
200233cc:	103bef1e 	bne	r2,zero,2002238c <__alt_data_end+0xfffe438c>
200233d0:	d8c02017 	ldw	r3,128(sp)
200233d4:	da000404 	addi	r8,sp,16
200233d8:	d9003217 	ldw	r4,200(sp)
200233dc:	d8802617 	ldw	r2,152(sp)
200233e0:	d9403317 	ldw	r5,204(sp)
200233e4:	8123883a 	add	r17,r16,r4
200233e8:	11400216 	blt	r2,r5,200233f4 <___vfprintf_internal_r+0x1470>
200233ec:	9100004c 	andi	r4,r18,1
200233f0:	20000d26 	beq	r4,zero,20023428 <___vfprintf_internal_r+0x14a4>
200233f4:	d9003717 	ldw	r4,220(sp)
200233f8:	d9403417 	ldw	r5,208(sp)
200233fc:	1907883a 	add	r3,r3,r4
20023400:	d9001f17 	ldw	r4,124(sp)
20023404:	41400015 	stw	r5,0(r8)
20023408:	d9403717 	ldw	r5,220(sp)
2002340c:	21000044 	addi	r4,r4,1
20023410:	d8c02015 	stw	r3,128(sp)
20023414:	41400115 	stw	r5,4(r8)
20023418:	d9001f15 	stw	r4,124(sp)
2002341c:	014001c4 	movi	r5,7
20023420:	2901e816 	blt	r5,r4,20023bc4 <___vfprintf_internal_r+0x1c40>
20023424:	42000204 	addi	r8,r8,8
20023428:	d9003317 	ldw	r4,204(sp)
2002342c:	8121883a 	add	r16,r16,r4
20023430:	2085c83a 	sub	r2,r4,r2
20023434:	8461c83a 	sub	r16,r16,r17
20023438:	1400010e 	bge	r2,r16,20023440 <___vfprintf_internal_r+0x14bc>
2002343c:	1021883a 	mov	r16,r2
20023440:	04000a0e 	bge	zero,r16,2002346c <___vfprintf_internal_r+0x14e8>
20023444:	d9001f17 	ldw	r4,124(sp)
20023448:	1c07883a 	add	r3,r3,r16
2002344c:	44400015 	stw	r17,0(r8)
20023450:	21000044 	addi	r4,r4,1
20023454:	44000115 	stw	r16,4(r8)
20023458:	d8c02015 	stw	r3,128(sp)
2002345c:	d9001f15 	stw	r4,124(sp)
20023460:	014001c4 	movi	r5,7
20023464:	2901fb16 	blt	r5,r4,20023c54 <___vfprintf_internal_r+0x1cd0>
20023468:	42000204 	addi	r8,r8,8
2002346c:	8001f716 	blt	r16,zero,20023c4c <___vfprintf_internal_r+0x1cc8>
20023470:	1421c83a 	sub	r16,r2,r16
20023474:	043d380e 	bge	zero,r16,20022958 <__alt_data_end+0xfffe4958>
20023478:	04400404 	movi	r17,16
2002347c:	d8801f17 	ldw	r2,124(sp)
20023480:	8c3efb0e 	bge	r17,r16,20023070 <__alt_data_end+0xfffe5070>
20023484:	014800f4 	movhi	r5,8195
20023488:	29438b84 	addi	r5,r5,3630
2002348c:	d9402b15 	stw	r5,172(sp)
20023490:	058001c4 	movi	r22,7
20023494:	dcc02c17 	ldw	r19,176(sp)
20023498:	00000306 	br	200234a8 <___vfprintf_internal_r+0x1524>
2002349c:	42000204 	addi	r8,r8,8
200234a0:	843ffc04 	addi	r16,r16,-16
200234a4:	8c3ef50e 	bge	r17,r16,2002307c <__alt_data_end+0xfffe507c>
200234a8:	18c00404 	addi	r3,r3,16
200234ac:	10800044 	addi	r2,r2,1
200234b0:	45000015 	stw	r20,0(r8)
200234b4:	44400115 	stw	r17,4(r8)
200234b8:	d8c02015 	stw	r3,128(sp)
200234bc:	d8801f15 	stw	r2,124(sp)
200234c0:	b0bff60e 	bge	r22,r2,2002349c <__alt_data_end+0xfffe549c>
200234c4:	d9801e04 	addi	r6,sp,120
200234c8:	b80b883a 	mov	r5,r23
200234cc:	9809883a 	mov	r4,r19
200234d0:	00287480 	call	20028748 <__sprint_r>
200234d4:	103bad1e 	bne	r2,zero,2002238c <__alt_data_end+0xfffe438c>
200234d8:	d8c02017 	ldw	r3,128(sp)
200234dc:	d8801f17 	ldw	r2,124(sp)
200234e0:	da000404 	addi	r8,sp,16
200234e4:	003fee06 	br	200234a0 <__alt_data_end+0xfffe54a0>
200234e8:	9088703a 	and	r4,r18,r2
200234ec:	203eab1e 	bne	r4,zero,20022f9c <__alt_data_end+0xfffe4f9c>
200234f0:	dc401f17 	ldw	r17,124(sp)
200234f4:	40800115 	stw	r2,4(r8)
200234f8:	44000015 	stw	r16,0(r8)
200234fc:	8c400044 	addi	r17,r17,1
20023500:	d8c02015 	stw	r3,128(sp)
20023504:	dc401f15 	stw	r17,124(sp)
20023508:	008001c4 	movi	r2,7
2002350c:	14400e16 	blt	r2,r17,20023548 <___vfprintf_internal_r+0x15c4>
20023510:	45800204 	addi	r22,r8,8
20023514:	003eca06 	br	20023040 <__alt_data_end+0xfffe5040>
20023518:	010800f4 	movhi	r4,8195
2002351c:	21038b84 	addi	r4,r4,3630
20023520:	d9002b15 	stw	r4,172(sp)
20023524:	d8802b17 	ldw	r2,172(sp)
20023528:	1c07883a 	add	r3,r3,r16
2002352c:	8c400044 	addi	r17,r17,1
20023530:	b0800015 	stw	r2,0(r22)
20023534:	b4000115 	stw	r16,4(r22)
20023538:	d8c02015 	stw	r3,128(sp)
2002353c:	dc401f15 	stw	r17,124(sp)
20023540:	008001c4 	movi	r2,7
20023544:	147ebd0e 	bge	r2,r17,2002303c <__alt_data_end+0xfffe503c>
20023548:	d9002c17 	ldw	r4,176(sp)
2002354c:	d9801e04 	addi	r6,sp,120
20023550:	b80b883a 	mov	r5,r23
20023554:	00287480 	call	20028748 <__sprint_r>
20023558:	103b8c1e 	bne	r2,zero,2002238c <__alt_data_end+0xfffe438c>
2002355c:	d8c02017 	ldw	r3,128(sp)
20023560:	dc401f17 	ldw	r17,124(sp)
20023564:	dd800404 	addi	r22,sp,16
20023568:	003eb506 	br	20023040 <__alt_data_end+0xfffe5040>
2002356c:	d9002c17 	ldw	r4,176(sp)
20023570:	d9801e04 	addi	r6,sp,120
20023574:	b80b883a 	mov	r5,r23
20023578:	00287480 	call	20028748 <__sprint_r>
2002357c:	103b831e 	bne	r2,zero,2002238c <__alt_data_end+0xfffe438c>
20023580:	d8c02017 	ldw	r3,128(sp)
20023584:	dc401f17 	ldw	r17,124(sp)
20023588:	da000404 	addi	r8,sp,16
2002358c:	003e8d06 	br	20022fc4 <__alt_data_end+0xfffe4fc4>
20023590:	d9002c17 	ldw	r4,176(sp)
20023594:	d9801e04 	addi	r6,sp,120
20023598:	b80b883a 	mov	r5,r23
2002359c:	00287480 	call	20028748 <__sprint_r>
200235a0:	103b7a1e 	bne	r2,zero,2002238c <__alt_data_end+0xfffe438c>
200235a4:	d8c02017 	ldw	r3,128(sp)
200235a8:	dc401f17 	ldw	r17,124(sp)
200235ac:	dd800404 	addi	r22,sp,16
200235b0:	003e8f06 	br	20022ff0 <__alt_data_end+0xfffe4ff0>
200235b4:	0027883a 	mov	r19,zero
200235b8:	003f4a06 	br	200232e4 <__alt_data_end+0xfffe52e4>
200235bc:	d9002c17 	ldw	r4,176(sp)
200235c0:	d9801e04 	addi	r6,sp,120
200235c4:	b80b883a 	mov	r5,r23
200235c8:	00287480 	call	20028748 <__sprint_r>
200235cc:	103b6f1e 	bne	r2,zero,2002238c <__alt_data_end+0xfffe438c>
200235d0:	d8c02017 	ldw	r3,128(sp)
200235d4:	da000404 	addi	r8,sp,16
200235d8:	003c9d06 	br	20022850 <__alt_data_end+0xfffe4850>
200235dc:	04e7c83a 	sub	r19,zero,r19
200235e0:	9804c03a 	cmpne	r2,r19,zero
200235e4:	05adc83a 	sub	r22,zero,r22
200235e8:	b0adc83a 	sub	r22,r22,r2
200235ec:	d8802917 	ldw	r2,164(sp)
200235f0:	07000b44 	movi	fp,45
200235f4:	df002785 	stb	fp,158(sp)
200235f8:	10017b16 	blt	r2,zero,20023be8 <___vfprintf_internal_r+0x1c64>
200235fc:	00bfdfc4 	movi	r2,-129
20023600:	90a4703a 	and	r18,r18,r2
20023604:	003bb106 	br	200224cc <__alt_data_end+0xfffe44cc>
20023608:	d9003617 	ldw	r4,216(sp)
2002360c:	d9403817 	ldw	r5,224(sp)
20023610:	da003d15 	stw	r8,244(sp)
20023614:	00284fc0 	call	200284fc <__fpclassifyd>
20023618:	da003d17 	ldw	r8,244(sp)
2002361c:	1000f026 	beq	r2,zero,200239e0 <___vfprintf_internal_r+0x1a5c>
20023620:	d9002917 	ldw	r4,164(sp)
20023624:	05bff7c4 	movi	r22,-33
20023628:	00bfffc4 	movi	r2,-1
2002362c:	8dac703a 	and	r22,r17,r22
20023630:	20820026 	beq	r4,r2,20023e34 <___vfprintf_internal_r+0x1eb0>
20023634:	008011c4 	movi	r2,71
20023638:	b081f726 	beq	r22,r2,20023e18 <___vfprintf_internal_r+0x1e94>
2002363c:	d9003817 	ldw	r4,224(sp)
20023640:	90c04014 	ori	r3,r18,256
20023644:	d8c02b15 	stw	r3,172(sp)
20023648:	20021516 	blt	r4,zero,20023ea0 <___vfprintf_internal_r+0x1f1c>
2002364c:	dcc03817 	ldw	r19,224(sp)
20023650:	d8002a05 	stb	zero,168(sp)
20023654:	00801984 	movi	r2,102
20023658:	8881f926 	beq	r17,r2,20023e40 <___vfprintf_internal_r+0x1ebc>
2002365c:	00801184 	movi	r2,70
20023660:	88821c26 	beq	r17,r2,20023ed4 <___vfprintf_internal_r+0x1f50>
20023664:	00801144 	movi	r2,69
20023668:	b081ef26 	beq	r22,r2,20023e28 <___vfprintf_internal_r+0x1ea4>
2002366c:	d8c02917 	ldw	r3,164(sp)
20023670:	d8802104 	addi	r2,sp,132
20023674:	d8800315 	stw	r2,12(sp)
20023678:	d9403617 	ldw	r5,216(sp)
2002367c:	d8802504 	addi	r2,sp,148
20023680:	d9002c17 	ldw	r4,176(sp)
20023684:	d8800215 	stw	r2,8(sp)
20023688:	d8802604 	addi	r2,sp,152
2002368c:	d8c00015 	stw	r3,0(sp)
20023690:	d8800115 	stw	r2,4(sp)
20023694:	01c00084 	movi	r7,2
20023698:	980d883a 	mov	r6,r19
2002369c:	d8c03c15 	stw	r3,240(sp)
200236a0:	da003d15 	stw	r8,244(sp)
200236a4:	002465c0 	call	2002465c <_dtoa_r>
200236a8:	1021883a 	mov	r16,r2
200236ac:	008019c4 	movi	r2,103
200236b0:	d8c03c17 	ldw	r3,240(sp)
200236b4:	da003d17 	ldw	r8,244(sp)
200236b8:	88817126 	beq	r17,r2,20023c80 <___vfprintf_internal_r+0x1cfc>
200236bc:	008011c4 	movi	r2,71
200236c0:	88829226 	beq	r17,r2,2002410c <___vfprintf_internal_r+0x2188>
200236c4:	80f9883a 	add	fp,r16,r3
200236c8:	d9003617 	ldw	r4,216(sp)
200236cc:	000d883a 	mov	r6,zero
200236d0:	000f883a 	mov	r7,zero
200236d4:	980b883a 	mov	r5,r19
200236d8:	da003d15 	stw	r8,244(sp)
200236dc:	002c1480 	call	2002c148 <__eqdf2>
200236e0:	da003d17 	ldw	r8,244(sp)
200236e4:	10018d26 	beq	r2,zero,20023d1c <___vfprintf_internal_r+0x1d98>
200236e8:	d8802117 	ldw	r2,132(sp)
200236ec:	1700062e 	bgeu	r2,fp,20023708 <___vfprintf_internal_r+0x1784>
200236f0:	01000c04 	movi	r4,48
200236f4:	10c00044 	addi	r3,r2,1
200236f8:	d8c02115 	stw	r3,132(sp)
200236fc:	11000005 	stb	r4,0(r2)
20023700:	d8802117 	ldw	r2,132(sp)
20023704:	173ffb36 	bltu	r2,fp,200236f4 <__alt_data_end+0xfffe56f4>
20023708:	1405c83a 	sub	r2,r2,r16
2002370c:	d8803315 	stw	r2,204(sp)
20023710:	008011c4 	movi	r2,71
20023714:	b0817626 	beq	r22,r2,20023cf0 <___vfprintf_internal_r+0x1d6c>
20023718:	00801944 	movi	r2,101
2002371c:	1442810e 	bge	r2,r17,20024124 <___vfprintf_internal_r+0x21a0>
20023720:	d8c02617 	ldw	r3,152(sp)
20023724:	00801984 	movi	r2,102
20023728:	d8c03215 	stw	r3,200(sp)
2002372c:	8881fe26 	beq	r17,r2,20023f28 <___vfprintf_internal_r+0x1fa4>
20023730:	d8c03217 	ldw	r3,200(sp)
20023734:	d9003317 	ldw	r4,204(sp)
20023738:	1901dd16 	blt	r3,r4,20023eb0 <___vfprintf_internal_r+0x1f2c>
2002373c:	9480004c 	andi	r18,r18,1
20023740:	90022b1e 	bne	r18,zero,20023ff0 <___vfprintf_internal_r+0x206c>
20023744:	1805883a 	mov	r2,r3
20023748:	18028016 	blt	r3,zero,2002414c <___vfprintf_internal_r+0x21c8>
2002374c:	d8c03217 	ldw	r3,200(sp)
20023750:	044019c4 	movi	r17,103
20023754:	d8c02e15 	stw	r3,184(sp)
20023758:	df002a07 	ldb	fp,168(sp)
2002375c:	e001531e 	bne	fp,zero,20023cac <___vfprintf_internal_r+0x1d28>
20023760:	df002783 	ldbu	fp,158(sp)
20023764:	d8802a15 	stw	r2,168(sp)
20023768:	dc802b17 	ldw	r18,172(sp)
2002376c:	d8002915 	stw	zero,164(sp)
20023770:	003bd106 	br	200226b8 <__alt_data_end+0xfffe46b8>
20023774:	d8802d17 	ldw	r2,180(sp)
20023778:	d8c02d17 	ldw	r3,180(sp)
2002377c:	d9002d17 	ldw	r4,180(sp)
20023780:	10800017 	ldw	r2,0(r2)
20023784:	18c00117 	ldw	r3,4(r3)
20023788:	21000204 	addi	r4,r4,8
2002378c:	d8803615 	stw	r2,216(sp)
20023790:	d8c03815 	stw	r3,224(sp)
20023794:	d9002d15 	stw	r4,180(sp)
20023798:	003b7506 	br	20022570 <__alt_data_end+0xfffe4570>
2002379c:	ac400007 	ldb	r17,0(r21)
200237a0:	003a5906 	br	20022108 <__alt_data_end+0xfffe4108>
200237a4:	9080100c 	andi	r2,r18,64
200237a8:	1000a826 	beq	r2,zero,20023a4c <___vfprintf_internal_r+0x1ac8>
200237ac:	d9002d17 	ldw	r4,180(sp)
200237b0:	002d883a 	mov	r22,zero
200237b4:	24c0000b 	ldhu	r19,0(r4)
200237b8:	21000104 	addi	r4,r4,4
200237bc:	d9002d15 	stw	r4,180(sp)
200237c0:	003ccb06 	br	20022af0 <__alt_data_end+0xfffe4af0>
200237c4:	d8c02d17 	ldw	r3,180(sp)
200237c8:	d9002917 	ldw	r4,164(sp)
200237cc:	002d883a 	mov	r22,zero
200237d0:	18800104 	addi	r2,r3,4
200237d4:	1cc00017 	ldw	r19,0(r3)
200237d8:	203ebb0e 	bge	r4,zero,200232c8 <__alt_data_end+0xfffe52c8>
200237dc:	003ef106 	br	200233a4 <__alt_data_end+0xfffe53a4>
200237e0:	9080040c 	andi	r2,r18,16
200237e4:	1000921e 	bne	r2,zero,20023a30 <___vfprintf_internal_r+0x1aac>
200237e8:	9480100c 	andi	r18,r18,64
200237ec:	90013926 	beq	r18,zero,20023cd4 <___vfprintf_internal_r+0x1d50>
200237f0:	d9002d17 	ldw	r4,180(sp)
200237f4:	d9402f17 	ldw	r5,188(sp)
200237f8:	20800017 	ldw	r2,0(r4)
200237fc:	21000104 	addi	r4,r4,4
20023800:	d9002d15 	stw	r4,180(sp)
20023804:	1140000d 	sth	r5,0(r2)
20023808:	003a1606 	br	20022064 <__alt_data_end+0xfffe4064>
2002380c:	9080100c 	andi	r2,r18,64
20023810:	10008026 	beq	r2,zero,20023a14 <___vfprintf_internal_r+0x1a90>
20023814:	d8c02d17 	ldw	r3,180(sp)
20023818:	1cc0000f 	ldh	r19,0(r3)
2002381c:	18c00104 	addi	r3,r3,4
20023820:	d8c02d15 	stw	r3,180(sp)
20023824:	982dd7fa 	srai	r22,r19,31
20023828:	b005883a 	mov	r2,r22
2002382c:	003b1f06 	br	200224ac <__alt_data_end+0xfffe44ac>
20023830:	9080100c 	andi	r2,r18,64
20023834:	d8002785 	stb	zero,158(sp)
20023838:	10008a1e 	bne	r2,zero,20023a64 <___vfprintf_internal_r+0x1ae0>
2002383c:	d9402d17 	ldw	r5,180(sp)
20023840:	d8c02917 	ldw	r3,164(sp)
20023844:	002d883a 	mov	r22,zero
20023848:	28800104 	addi	r2,r5,4
2002384c:	2cc00017 	ldw	r19,0(r5)
20023850:	183e4b0e 	bge	r3,zero,20023180 <__alt_data_end+0xfffe5180>
20023854:	9d86b03a 	or	r3,r19,r22
20023858:	d8802d15 	stw	r2,180(sp)
2002385c:	183e4c1e 	bne	r3,zero,20023190 <__alt_data_end+0xfffe5190>
20023860:	0039883a 	mov	fp,zero
20023864:	0005883a 	mov	r2,zero
20023868:	003d4006 	br	20022d6c <__alt_data_end+0xfffe4d6c>
2002386c:	014800f4 	movhi	r5,8195
20023870:	29438b84 	addi	r5,r5,3630
20023874:	d9402b15 	stw	r5,172(sp)
20023878:	d9402b17 	ldw	r5,172(sp)
2002387c:	1c47883a 	add	r3,r3,r17
20023880:	10800044 	addi	r2,r2,1
20023884:	41400015 	stw	r5,0(r8)
20023888:	44400115 	stw	r17,4(r8)
2002388c:	d8c02015 	stw	r3,128(sp)
20023890:	d8801f15 	stw	r2,124(sp)
20023894:	010001c4 	movi	r4,7
20023898:	20bec816 	blt	r4,r2,200233bc <__alt_data_end+0xfffe53bc>
2002389c:	42000204 	addi	r8,r8,8
200238a0:	003ecd06 	br	200233d8 <__alt_data_end+0xfffe53d8>
200238a4:	d9002917 	ldw	r4,164(sp)
200238a8:	d8002785 	stb	zero,158(sp)
200238ac:	203d2d16 	blt	r4,zero,20022d64 <__alt_data_end+0xfffe4d64>
200238b0:	00bfdfc4 	movi	r2,-129
200238b4:	90a4703a 	and	r18,r18,r2
200238b8:	003a9106 	br	20022300 <__alt_data_end+0xfffe4300>
200238bc:	010800f4 	movhi	r4,8195
200238c0:	21038b84 	addi	r4,r4,3630
200238c4:	d9002b15 	stw	r4,172(sp)
200238c8:	003c0c06 	br	200228fc <__alt_data_end+0xfffe48fc>
200238cc:	d9002c17 	ldw	r4,176(sp)
200238d0:	d9801e04 	addi	r6,sp,120
200238d4:	b80b883a 	mov	r5,r23
200238d8:	00287480 	call	20028748 <__sprint_r>
200238dc:	103aab1e 	bne	r2,zero,2002238c <__alt_data_end+0xfffe438c>
200238e0:	d8c02017 	ldw	r3,128(sp)
200238e4:	da000404 	addi	r8,sp,16
200238e8:	003d4106 	br	20022df0 <__alt_data_end+0xfffe4df0>
200238ec:	d8801f17 	ldw	r2,124(sp)
200238f0:	014800f4 	movhi	r5,8195
200238f4:	01000044 	movi	r4,1
200238f8:	18c00044 	addi	r3,r3,1
200238fc:	10800044 	addi	r2,r2,1
20023900:	29438b04 	addi	r5,r5,3628
20023904:	41000115 	stw	r4,4(r8)
20023908:	41400015 	stw	r5,0(r8)
2002390c:	d8c02015 	stw	r3,128(sp)
20023910:	d8801f15 	stw	r2,124(sp)
20023914:	010001c4 	movi	r4,7
20023918:	20805c16 	blt	r4,r2,20023a8c <___vfprintf_internal_r+0x1b08>
2002391c:	42000204 	addi	r8,r8,8
20023920:	8800041e 	bne	r17,zero,20023934 <___vfprintf_internal_r+0x19b0>
20023924:	d8803317 	ldw	r2,204(sp)
20023928:	1000021e 	bne	r2,zero,20023934 <___vfprintf_internal_r+0x19b0>
2002392c:	9080004c 	andi	r2,r18,1
20023930:	103c0926 	beq	r2,zero,20022958 <__alt_data_end+0xfffe4958>
20023934:	d9003717 	ldw	r4,220(sp)
20023938:	d8801f17 	ldw	r2,124(sp)
2002393c:	d9403417 	ldw	r5,208(sp)
20023940:	20c7883a 	add	r3,r4,r3
20023944:	10800044 	addi	r2,r2,1
20023948:	41000115 	stw	r4,4(r8)
2002394c:	41400015 	stw	r5,0(r8)
20023950:	d8c02015 	stw	r3,128(sp)
20023954:	d8801f15 	stw	r2,124(sp)
20023958:	010001c4 	movi	r4,7
2002395c:	20812116 	blt	r4,r2,20023de4 <___vfprintf_internal_r+0x1e60>
20023960:	42000204 	addi	r8,r8,8
20023964:	0463c83a 	sub	r17,zero,r17
20023968:	0440730e 	bge	zero,r17,20023b38 <___vfprintf_internal_r+0x1bb4>
2002396c:	05800404 	movi	r22,16
20023970:	b440860e 	bge	r22,r17,20023b8c <___vfprintf_internal_r+0x1c08>
20023974:	014800f4 	movhi	r5,8195
20023978:	29438b84 	addi	r5,r5,3630
2002397c:	d9402b15 	stw	r5,172(sp)
20023980:	070001c4 	movi	fp,7
20023984:	dcc02c17 	ldw	r19,176(sp)
20023988:	00000306 	br	20023998 <___vfprintf_internal_r+0x1a14>
2002398c:	42000204 	addi	r8,r8,8
20023990:	8c7ffc04 	addi	r17,r17,-16
20023994:	b440800e 	bge	r22,r17,20023b98 <___vfprintf_internal_r+0x1c14>
20023998:	18c00404 	addi	r3,r3,16
2002399c:	10800044 	addi	r2,r2,1
200239a0:	45000015 	stw	r20,0(r8)
200239a4:	45800115 	stw	r22,4(r8)
200239a8:	d8c02015 	stw	r3,128(sp)
200239ac:	d8801f15 	stw	r2,124(sp)
200239b0:	e0bff60e 	bge	fp,r2,2002398c <__alt_data_end+0xfffe598c>
200239b4:	d9801e04 	addi	r6,sp,120
200239b8:	b80b883a 	mov	r5,r23
200239bc:	9809883a 	mov	r4,r19
200239c0:	00287480 	call	20028748 <__sprint_r>
200239c4:	103a711e 	bne	r2,zero,2002238c <__alt_data_end+0xfffe438c>
200239c8:	d8c02017 	ldw	r3,128(sp)
200239cc:	d8801f17 	ldw	r2,124(sp)
200239d0:	da000404 	addi	r8,sp,16
200239d4:	003fee06 	br	20023990 <__alt_data_end+0xfffe5990>
200239d8:	00bfffc4 	movi	r2,-1
200239dc:	003a6f06 	br	2002239c <__alt_data_end+0xfffe439c>
200239e0:	008011c4 	movi	r2,71
200239e4:	1440b816 	blt	r2,r17,20023cc8 <___vfprintf_internal_r+0x1d44>
200239e8:	040800f4 	movhi	r16,8195
200239ec:	84037d04 	addi	r16,r16,3572
200239f0:	00c000c4 	movi	r3,3
200239f4:	00bfdfc4 	movi	r2,-129
200239f8:	d8c02a15 	stw	r3,168(sp)
200239fc:	90a4703a 	and	r18,r18,r2
20023a00:	df002783 	ldbu	fp,158(sp)
20023a04:	d8c02e15 	stw	r3,184(sp)
20023a08:	d8002915 	stw	zero,164(sp)
20023a0c:	d8003215 	stw	zero,200(sp)
20023a10:	003b2906 	br	200226b8 <__alt_data_end+0xfffe46b8>
20023a14:	d9002d17 	ldw	r4,180(sp)
20023a18:	24c00017 	ldw	r19,0(r4)
20023a1c:	21000104 	addi	r4,r4,4
20023a20:	d9002d15 	stw	r4,180(sp)
20023a24:	982dd7fa 	srai	r22,r19,31
20023a28:	b005883a 	mov	r2,r22
20023a2c:	003a9f06 	br	200224ac <__alt_data_end+0xfffe44ac>
20023a30:	d9402d17 	ldw	r5,180(sp)
20023a34:	d8c02f17 	ldw	r3,188(sp)
20023a38:	28800017 	ldw	r2,0(r5)
20023a3c:	29400104 	addi	r5,r5,4
20023a40:	d9402d15 	stw	r5,180(sp)
20023a44:	10c00015 	stw	r3,0(r2)
20023a48:	00398606 	br	20022064 <__alt_data_end+0xfffe4064>
20023a4c:	d9402d17 	ldw	r5,180(sp)
20023a50:	002d883a 	mov	r22,zero
20023a54:	2cc00017 	ldw	r19,0(r5)
20023a58:	29400104 	addi	r5,r5,4
20023a5c:	d9402d15 	stw	r5,180(sp)
20023a60:	003c2306 	br	20022af0 <__alt_data_end+0xfffe4af0>
20023a64:	d8c02d17 	ldw	r3,180(sp)
20023a68:	d9002917 	ldw	r4,164(sp)
20023a6c:	002d883a 	mov	r22,zero
20023a70:	18800104 	addi	r2,r3,4
20023a74:	1cc0000b 	ldhu	r19,0(r3)
20023a78:	203dc10e 	bge	r4,zero,20023180 <__alt_data_end+0xfffe5180>
20023a7c:	003f7506 	br	20023854 <__alt_data_end+0xfffe5854>
20023a80:	040800f4 	movhi	r16,8195
20023a84:	84037b04 	addi	r16,r16,3564
20023a88:	003acc06 	br	200225bc <__alt_data_end+0xfffe45bc>
20023a8c:	d9002c17 	ldw	r4,176(sp)
20023a90:	d9801e04 	addi	r6,sp,120
20023a94:	b80b883a 	mov	r5,r23
20023a98:	00287480 	call	20028748 <__sprint_r>
20023a9c:	103a3b1e 	bne	r2,zero,2002238c <__alt_data_end+0xfffe438c>
20023aa0:	dc402617 	ldw	r17,152(sp)
20023aa4:	d8c02017 	ldw	r3,128(sp)
20023aa8:	da000404 	addi	r8,sp,16
20023aac:	003f9c06 	br	20023920 <__alt_data_end+0xfffe5920>
20023ab0:	ac400043 	ldbu	r17,1(r21)
20023ab4:	94800814 	ori	r18,r18,32
20023ab8:	ad400044 	addi	r21,r21,1
20023abc:	8c403fcc 	andi	r17,r17,255
20023ac0:	8c40201c 	xori	r17,r17,128
20023ac4:	8c7fe004 	addi	r17,r17,-128
20023ac8:	00398f06 	br	20022108 <__alt_data_end+0xfffe4108>
20023acc:	d8c02d15 	stw	r3,180(sp)
20023ad0:	0039883a 	mov	fp,zero
20023ad4:	003e3506 	br	200233ac <__alt_data_end+0xfffe53ac>
20023ad8:	d9002c17 	ldw	r4,176(sp)
20023adc:	d9801e04 	addi	r6,sp,120
20023ae0:	b80b883a 	mov	r5,r23
20023ae4:	00287480 	call	20028748 <__sprint_r>
20023ae8:	103a281e 	bne	r2,zero,2002238c <__alt_data_end+0xfffe438c>
20023aec:	d8c02017 	ldw	r3,128(sp)
20023af0:	da000404 	addi	r8,sp,16
20023af4:	003cd006 	br	20022e38 <__alt_data_end+0xfffe4e38>
20023af8:	8009883a 	mov	r4,r16
20023afc:	da003d15 	stw	r8,244(sp)
20023b00:	0021eec0 	call	20021eec <strlen>
20023b04:	d8802e15 	stw	r2,184(sp)
20023b08:	da003d17 	ldw	r8,244(sp)
20023b0c:	103c340e 	bge	r2,zero,20022be0 <__alt_data_end+0xfffe4be0>
20023b10:	0005883a 	mov	r2,zero
20023b14:	003c3206 	br	20022be0 <__alt_data_end+0xfffe4be0>
20023b18:	d9002c17 	ldw	r4,176(sp)
20023b1c:	d9801e04 	addi	r6,sp,120
20023b20:	b80b883a 	mov	r5,r23
20023b24:	00287480 	call	20028748 <__sprint_r>
20023b28:	103a181e 	bne	r2,zero,2002238c <__alt_data_end+0xfffe438c>
20023b2c:	d8c02017 	ldw	r3,128(sp)
20023b30:	d8801f17 	ldw	r2,124(sp)
20023b34:	da000404 	addi	r8,sp,16
20023b38:	d9403317 	ldw	r5,204(sp)
20023b3c:	10800044 	addi	r2,r2,1
20023b40:	44000015 	stw	r16,0(r8)
20023b44:	28c7883a 	add	r3,r5,r3
20023b48:	003b7d06 	br	20022940 <__alt_data_end+0xfffe4940>
20023b4c:	010800f4 	movhi	r4,8195
20023b50:	21038f84 	addi	r4,r4,3646
20023b54:	d9003515 	stw	r4,212(sp)
20023b58:	003b1406 	br	200227ac <__alt_data_end+0xfffe47ac>
20023b5c:	013fffc4 	movi	r4,-1
20023b60:	003a3506 	br	20022438 <__alt_data_end+0xfffe4438>
20023b64:	0023883a 	mov	r17,zero
20023b68:	003d9d06 	br	200231e0 <__alt_data_end+0xfffe51e0>
20023b6c:	d9002c17 	ldw	r4,176(sp)
20023b70:	d9801e04 	addi	r6,sp,120
20023b74:	b80b883a 	mov	r5,r23
20023b78:	00287480 	call	20028748 <__sprint_r>
20023b7c:	103a031e 	bne	r2,zero,2002238c <__alt_data_end+0xfffe438c>
20023b80:	d8c02017 	ldw	r3,128(sp)
20023b84:	da000404 	addi	r8,sp,16
20023b88:	003d9406 	br	200231dc <__alt_data_end+0xfffe51dc>
20023b8c:	010800f4 	movhi	r4,8195
20023b90:	21038b84 	addi	r4,r4,3630
20023b94:	d9002b15 	stw	r4,172(sp)
20023b98:	d9002b17 	ldw	r4,172(sp)
20023b9c:	1c47883a 	add	r3,r3,r17
20023ba0:	10800044 	addi	r2,r2,1
20023ba4:	41000015 	stw	r4,0(r8)
20023ba8:	44400115 	stw	r17,4(r8)
20023bac:	d8c02015 	stw	r3,128(sp)
20023bb0:	d8801f15 	stw	r2,124(sp)
20023bb4:	010001c4 	movi	r4,7
20023bb8:	20bfd716 	blt	r4,r2,20023b18 <__alt_data_end+0xfffe5b18>
20023bbc:	42000204 	addi	r8,r8,8
20023bc0:	003fdd06 	br	20023b38 <__alt_data_end+0xfffe5b38>
20023bc4:	d9002c17 	ldw	r4,176(sp)
20023bc8:	d9801e04 	addi	r6,sp,120
20023bcc:	b80b883a 	mov	r5,r23
20023bd0:	00287480 	call	20028748 <__sprint_r>
20023bd4:	1039ed1e 	bne	r2,zero,2002238c <__alt_data_end+0xfffe438c>
20023bd8:	d8802617 	ldw	r2,152(sp)
20023bdc:	d8c02017 	ldw	r3,128(sp)
20023be0:	da000404 	addi	r8,sp,16
20023be4:	003e1006 	br	20023428 <__alt_data_end+0xfffe5428>
20023be8:	00800044 	movi	r2,1
20023bec:	10803fcc 	andi	r2,r2,255
20023bf0:	00c00044 	movi	r3,1
20023bf4:	10fa3526 	beq	r2,r3,200224cc <__alt_data_end+0xfffe44cc>
20023bf8:	00c00084 	movi	r3,2
20023bfc:	10fbcb26 	beq	r2,r3,20022b2c <__alt_data_end+0xfffe4b2c>
20023c00:	003a8f06 	br	20022640 <__alt_data_end+0xfffe4640>
20023c04:	010800f4 	movhi	r4,8195
20023c08:	21038f84 	addi	r4,r4,3646
20023c0c:	d9003515 	stw	r4,212(sp)
20023c10:	003b7606 	br	200229ec <__alt_data_end+0xfffe49ec>
20023c14:	d8802917 	ldw	r2,164(sp)
20023c18:	00c00184 	movi	r3,6
20023c1c:	1880012e 	bgeu	r3,r2,20023c24 <___vfprintf_internal_r+0x1ca0>
20023c20:	1805883a 	mov	r2,r3
20023c24:	d8802e15 	stw	r2,184(sp)
20023c28:	1000ef16 	blt	r2,zero,20023fe8 <___vfprintf_internal_r+0x2064>
20023c2c:	040800f4 	movhi	r16,8195
20023c30:	d8802a15 	stw	r2,168(sp)
20023c34:	dcc02d15 	stw	r19,180(sp)
20023c38:	d8002915 	stw	zero,164(sp)
20023c3c:	d8003215 	stw	zero,200(sp)
20023c40:	84038904 	addi	r16,r16,3620
20023c44:	0039883a 	mov	fp,zero
20023c48:	003aa206 	br	200226d4 <__alt_data_end+0xfffe46d4>
20023c4c:	0021883a 	mov	r16,zero
20023c50:	003e0706 	br	20023470 <__alt_data_end+0xfffe5470>
20023c54:	d9002c17 	ldw	r4,176(sp)
20023c58:	d9801e04 	addi	r6,sp,120
20023c5c:	b80b883a 	mov	r5,r23
20023c60:	00287480 	call	20028748 <__sprint_r>
20023c64:	1039c91e 	bne	r2,zero,2002238c <__alt_data_end+0xfffe438c>
20023c68:	d8802617 	ldw	r2,152(sp)
20023c6c:	d9403317 	ldw	r5,204(sp)
20023c70:	d8c02017 	ldw	r3,128(sp)
20023c74:	da000404 	addi	r8,sp,16
20023c78:	2885c83a 	sub	r2,r5,r2
20023c7c:	003dfb06 	br	2002346c <__alt_data_end+0xfffe546c>
20023c80:	9080004c 	andi	r2,r18,1
20023c84:	103e8f1e 	bne	r2,zero,200236c4 <__alt_data_end+0xfffe56c4>
20023c88:	d8802117 	ldw	r2,132(sp)
20023c8c:	003e9e06 	br	20023708 <__alt_data_end+0xfffe5708>
20023c90:	1025883a 	mov	r18,r2
20023c94:	0039883a 	mov	fp,zero
20023c98:	00800084 	movi	r2,2
20023c9c:	003fd306 	br	20023bec <__alt_data_end+0xfffe5bec>
20023ca0:	07000b44 	movi	fp,45
20023ca4:	df002785 	stb	fp,158(sp)
20023ca8:	003a4006 	br	200225ac <__alt_data_end+0xfffe45ac>
20023cac:	00c00b44 	movi	r3,45
20023cb0:	d8c02785 	stb	r3,158(sp)
20023cb4:	d8802a15 	stw	r2,168(sp)
20023cb8:	dc802b17 	ldw	r18,172(sp)
20023cbc:	d8002915 	stw	zero,164(sp)
20023cc0:	07000b44 	movi	fp,45
20023cc4:	003a8006 	br	200226c8 <__alt_data_end+0xfffe46c8>
20023cc8:	040800f4 	movhi	r16,8195
20023ccc:	84037e04 	addi	r16,r16,3576
20023cd0:	003f4706 	br	200239f0 <__alt_data_end+0xfffe59f0>
20023cd4:	d8c02d17 	ldw	r3,180(sp)
20023cd8:	d9002f17 	ldw	r4,188(sp)
20023cdc:	18800017 	ldw	r2,0(r3)
20023ce0:	18c00104 	addi	r3,r3,4
20023ce4:	d8c02d15 	stw	r3,180(sp)
20023ce8:	11000015 	stw	r4,0(r2)
20023cec:	0038dd06 	br	20022064 <__alt_data_end+0xfffe4064>
20023cf0:	dd802617 	ldw	r22,152(sp)
20023cf4:	00bfff44 	movi	r2,-3
20023cf8:	b0801c16 	blt	r22,r2,20023d6c <___vfprintf_internal_r+0x1de8>
20023cfc:	d9402917 	ldw	r5,164(sp)
20023d00:	2d801a16 	blt	r5,r22,20023d6c <___vfprintf_internal_r+0x1de8>
20023d04:	dd803215 	stw	r22,200(sp)
20023d08:	003e8906 	br	20023730 <__alt_data_end+0xfffe5730>
20023d0c:	010800f4 	movhi	r4,8195
20023d10:	21038b84 	addi	r4,r4,3630
20023d14:	d9002b15 	stw	r4,172(sp)
20023d18:	003c9106 	br	20022f60 <__alt_data_end+0xfffe4f60>
20023d1c:	e005883a 	mov	r2,fp
20023d20:	003e7906 	br	20023708 <__alt_data_end+0xfffe5708>
20023d24:	d9402917 	ldw	r5,164(sp)
20023d28:	df002783 	ldbu	fp,158(sp)
20023d2c:	dcc02d15 	stw	r19,180(sp)
20023d30:	d9402a15 	stw	r5,168(sp)
20023d34:	d9402e15 	stw	r5,184(sp)
20023d38:	d8002915 	stw	zero,164(sp)
20023d3c:	d8003215 	stw	zero,200(sp)
20023d40:	003a5d06 	br	200226b8 <__alt_data_end+0xfffe46b8>
20023d44:	9080004c 	andi	r2,r18,1
20023d48:	0039883a 	mov	fp,zero
20023d4c:	10000426 	beq	r2,zero,20023d60 <___vfprintf_internal_r+0x1ddc>
20023d50:	00800c04 	movi	r2,48
20023d54:	dc001dc4 	addi	r16,sp,119
20023d58:	d8801dc5 	stb	r2,119(sp)
20023d5c:	003b8006 	br	20022b60 <__alt_data_end+0xfffe4b60>
20023d60:	d8002e15 	stw	zero,184(sp)
20023d64:	dc001e04 	addi	r16,sp,120
20023d68:	003a4d06 	br	200226a0 <__alt_data_end+0xfffe46a0>
20023d6c:	8c7fff84 	addi	r17,r17,-2
20023d70:	b5bfffc4 	addi	r22,r22,-1
20023d74:	dd802615 	stw	r22,152(sp)
20023d78:	dc4022c5 	stb	r17,139(sp)
20023d7c:	b000bf16 	blt	r22,zero,2002407c <___vfprintf_internal_r+0x20f8>
20023d80:	00800ac4 	movi	r2,43
20023d84:	d8802305 	stb	r2,140(sp)
20023d88:	00800244 	movi	r2,9
20023d8c:	15807016 	blt	r2,r22,20023f50 <___vfprintf_internal_r+0x1fcc>
20023d90:	00800c04 	movi	r2,48
20023d94:	b5800c04 	addi	r22,r22,48
20023d98:	d8802345 	stb	r2,141(sp)
20023d9c:	dd802385 	stb	r22,142(sp)
20023da0:	d88023c4 	addi	r2,sp,143
20023da4:	df0022c4 	addi	fp,sp,139
20023da8:	d8c03317 	ldw	r3,204(sp)
20023dac:	1739c83a 	sub	fp,r2,fp
20023db0:	d9003317 	ldw	r4,204(sp)
20023db4:	e0c7883a 	add	r3,fp,r3
20023db8:	df003a15 	stw	fp,232(sp)
20023dbc:	d8c02e15 	stw	r3,184(sp)
20023dc0:	00800044 	movi	r2,1
20023dc4:	1100b30e 	bge	r2,r4,20024094 <___vfprintf_internal_r+0x2110>
20023dc8:	d8c02e17 	ldw	r3,184(sp)
20023dcc:	18c00044 	addi	r3,r3,1
20023dd0:	d8c02e15 	stw	r3,184(sp)
20023dd4:	1805883a 	mov	r2,r3
20023dd8:	1800ac16 	blt	r3,zero,2002408c <___vfprintf_internal_r+0x2108>
20023ddc:	d8003215 	stw	zero,200(sp)
20023de0:	003e5d06 	br	20023758 <__alt_data_end+0xfffe5758>
20023de4:	d9002c17 	ldw	r4,176(sp)
20023de8:	d9801e04 	addi	r6,sp,120
20023dec:	b80b883a 	mov	r5,r23
20023df0:	00287480 	call	20028748 <__sprint_r>
20023df4:	1039651e 	bne	r2,zero,2002238c <__alt_data_end+0xfffe438c>
20023df8:	dc402617 	ldw	r17,152(sp)
20023dfc:	d8c02017 	ldw	r3,128(sp)
20023e00:	d8801f17 	ldw	r2,124(sp)
20023e04:	da000404 	addi	r8,sp,16
20023e08:	003ed606 	br	20023964 <__alt_data_end+0xfffe5964>
20023e0c:	582b883a 	mov	r21,r11
20023e10:	d8002915 	stw	zero,164(sp)
20023e14:	0038bd06 	br	2002210c <__alt_data_end+0xfffe410c>
20023e18:	d8802917 	ldw	r2,164(sp)
20023e1c:	103e071e 	bne	r2,zero,2002363c <__alt_data_end+0xfffe563c>
20023e20:	dc002915 	stw	r16,164(sp)
20023e24:	003e0506 	br	2002363c <__alt_data_end+0xfffe563c>
20023e28:	d9002917 	ldw	r4,164(sp)
20023e2c:	20c00044 	addi	r3,r4,1
20023e30:	003e0f06 	br	20023670 <__alt_data_end+0xfffe5670>
20023e34:	01400184 	movi	r5,6
20023e38:	d9402915 	stw	r5,164(sp)
20023e3c:	003dff06 	br	2002363c <__alt_data_end+0xfffe563c>
20023e40:	d8802104 	addi	r2,sp,132
20023e44:	d8800315 	stw	r2,12(sp)
20023e48:	d8802504 	addi	r2,sp,148
20023e4c:	d8800215 	stw	r2,8(sp)
20023e50:	d8802604 	addi	r2,sp,152
20023e54:	d8800115 	stw	r2,4(sp)
20023e58:	d8802917 	ldw	r2,164(sp)
20023e5c:	d9403617 	ldw	r5,216(sp)
20023e60:	d9002c17 	ldw	r4,176(sp)
20023e64:	d8800015 	stw	r2,0(sp)
20023e68:	01c000c4 	movi	r7,3
20023e6c:	980d883a 	mov	r6,r19
20023e70:	da003d15 	stw	r8,244(sp)
20023e74:	002465c0 	call	2002465c <_dtoa_r>
20023e78:	d8c02917 	ldw	r3,164(sp)
20023e7c:	da003d17 	ldw	r8,244(sp)
20023e80:	1021883a 	mov	r16,r2
20023e84:	10f9883a 	add	fp,r2,r3
20023e88:	81000007 	ldb	r4,0(r16)
20023e8c:	00800c04 	movi	r2,48
20023e90:	20805e26 	beq	r4,r2,2002400c <___vfprintf_internal_r+0x2088>
20023e94:	d8c02617 	ldw	r3,152(sp)
20023e98:	e0f9883a 	add	fp,fp,r3
20023e9c:	003e0a06 	br	200236c8 <__alt_data_end+0xfffe56c8>
20023ea0:	00c00b44 	movi	r3,45
20023ea4:	24e0003c 	xorhi	r19,r4,32768
20023ea8:	d8c02a05 	stb	r3,168(sp)
20023eac:	003de906 	br	20023654 <__alt_data_end+0xfffe5654>
20023eb0:	d8c03217 	ldw	r3,200(sp)
20023eb4:	00c07a0e 	bge	zero,r3,200240a0 <___vfprintf_internal_r+0x211c>
20023eb8:	00800044 	movi	r2,1
20023ebc:	d9003317 	ldw	r4,204(sp)
20023ec0:	1105883a 	add	r2,r2,r4
20023ec4:	d8802e15 	stw	r2,184(sp)
20023ec8:	10004e16 	blt	r2,zero,20024004 <___vfprintf_internal_r+0x2080>
20023ecc:	044019c4 	movi	r17,103
20023ed0:	003e2106 	br	20023758 <__alt_data_end+0xfffe5758>
20023ed4:	d9002917 	ldw	r4,164(sp)
20023ed8:	d8802104 	addi	r2,sp,132
20023edc:	d8800315 	stw	r2,12(sp)
20023ee0:	d9000015 	stw	r4,0(sp)
20023ee4:	d8802504 	addi	r2,sp,148
20023ee8:	d9403617 	ldw	r5,216(sp)
20023eec:	d9002c17 	ldw	r4,176(sp)
20023ef0:	d8800215 	stw	r2,8(sp)
20023ef4:	d8802604 	addi	r2,sp,152
20023ef8:	d8800115 	stw	r2,4(sp)
20023efc:	01c000c4 	movi	r7,3
20023f00:	980d883a 	mov	r6,r19
20023f04:	da003d15 	stw	r8,244(sp)
20023f08:	002465c0 	call	2002465c <_dtoa_r>
20023f0c:	d8c02917 	ldw	r3,164(sp)
20023f10:	da003d17 	ldw	r8,244(sp)
20023f14:	1021883a 	mov	r16,r2
20023f18:	00801184 	movi	r2,70
20023f1c:	80f9883a 	add	fp,r16,r3
20023f20:	88bfd926 	beq	r17,r2,20023e88 <__alt_data_end+0xfffe5e88>
20023f24:	003de806 	br	200236c8 <__alt_data_end+0xfffe56c8>
20023f28:	d9002917 	ldw	r4,164(sp)
20023f2c:	00c04d0e 	bge	zero,r3,20024064 <___vfprintf_internal_r+0x20e0>
20023f30:	2000441e 	bne	r4,zero,20024044 <___vfprintf_internal_r+0x20c0>
20023f34:	9480004c 	andi	r18,r18,1
20023f38:	9000421e 	bne	r18,zero,20024044 <___vfprintf_internal_r+0x20c0>
20023f3c:	1805883a 	mov	r2,r3
20023f40:	18007016 	blt	r3,zero,20024104 <___vfprintf_internal_r+0x2180>
20023f44:	d8c03217 	ldw	r3,200(sp)
20023f48:	d8c02e15 	stw	r3,184(sp)
20023f4c:	003e0206 	br	20023758 <__alt_data_end+0xfffe5758>
20023f50:	df0022c4 	addi	fp,sp,139
20023f54:	dc002915 	stw	r16,164(sp)
20023f58:	4027883a 	mov	r19,r8
20023f5c:	e021883a 	mov	r16,fp
20023f60:	b009883a 	mov	r4,r22
20023f64:	01400284 	movi	r5,10
20023f68:	002ae840 	call	2002ae84 <__modsi3>
20023f6c:	10800c04 	addi	r2,r2,48
20023f70:	843fffc4 	addi	r16,r16,-1
20023f74:	b009883a 	mov	r4,r22
20023f78:	01400284 	movi	r5,10
20023f7c:	80800005 	stb	r2,0(r16)
20023f80:	002ae000 	call	2002ae00 <__divsi3>
20023f84:	102d883a 	mov	r22,r2
20023f88:	00800244 	movi	r2,9
20023f8c:	15bff416 	blt	r2,r22,20023f60 <__alt_data_end+0xfffe5f60>
20023f90:	9811883a 	mov	r8,r19
20023f94:	b0800c04 	addi	r2,r22,48
20023f98:	8027883a 	mov	r19,r16
20023f9c:	997fffc4 	addi	r5,r19,-1
20023fa0:	98bfffc5 	stb	r2,-1(r19)
20023fa4:	dc002917 	ldw	r16,164(sp)
20023fa8:	2f006a2e 	bgeu	r5,fp,20024154 <___vfprintf_internal_r+0x21d0>
20023fac:	d9c02384 	addi	r7,sp,142
20023fb0:	3ccfc83a 	sub	r7,r7,r19
20023fb4:	d9002344 	addi	r4,sp,141
20023fb8:	e1cf883a 	add	r7,fp,r7
20023fbc:	00000106 	br	20023fc4 <___vfprintf_internal_r+0x2040>
20023fc0:	28800003 	ldbu	r2,0(r5)
20023fc4:	20800005 	stb	r2,0(r4)
20023fc8:	21000044 	addi	r4,r4,1
20023fcc:	29400044 	addi	r5,r5,1
20023fd0:	393ffb1e 	bne	r7,r4,20023fc0 <__alt_data_end+0xfffe5fc0>
20023fd4:	d8802304 	addi	r2,sp,140
20023fd8:	14c5c83a 	sub	r2,r2,r19
20023fdc:	d8c02344 	addi	r3,sp,141
20023fe0:	1885883a 	add	r2,r3,r2
20023fe4:	003f7006 	br	20023da8 <__alt_data_end+0xfffe5da8>
20023fe8:	0005883a 	mov	r2,zero
20023fec:	003f0f06 	br	20023c2c <__alt_data_end+0xfffe5c2c>
20023ff0:	d8c03217 	ldw	r3,200(sp)
20023ff4:	18c00044 	addi	r3,r3,1
20023ff8:	d8c02e15 	stw	r3,184(sp)
20023ffc:	1805883a 	mov	r2,r3
20024000:	183fb20e 	bge	r3,zero,20023ecc <__alt_data_end+0xfffe5ecc>
20024004:	0005883a 	mov	r2,zero
20024008:	003fb006 	br	20023ecc <__alt_data_end+0xfffe5ecc>
2002400c:	d9003617 	ldw	r4,216(sp)
20024010:	000d883a 	mov	r6,zero
20024014:	000f883a 	mov	r7,zero
20024018:	980b883a 	mov	r5,r19
2002401c:	d8c03c15 	stw	r3,240(sp)
20024020:	da003d15 	stw	r8,244(sp)
20024024:	002c1480 	call	2002c148 <__eqdf2>
20024028:	d8c03c17 	ldw	r3,240(sp)
2002402c:	da003d17 	ldw	r8,244(sp)
20024030:	103f9826 	beq	r2,zero,20023e94 <__alt_data_end+0xfffe5e94>
20024034:	00800044 	movi	r2,1
20024038:	10c7c83a 	sub	r3,r2,r3
2002403c:	d8c02615 	stw	r3,152(sp)
20024040:	003f9506 	br	20023e98 <__alt_data_end+0xfffe5e98>
20024044:	d9002917 	ldw	r4,164(sp)
20024048:	d8c03217 	ldw	r3,200(sp)
2002404c:	20800044 	addi	r2,r4,1
20024050:	1885883a 	add	r2,r3,r2
20024054:	d8802e15 	stw	r2,184(sp)
20024058:	103dbf0e 	bge	r2,zero,20023758 <__alt_data_end+0xfffe5758>
2002405c:	0005883a 	mov	r2,zero
20024060:	003dbd06 	br	20023758 <__alt_data_end+0xfffe5758>
20024064:	2000211e 	bne	r4,zero,200240ec <___vfprintf_internal_r+0x2168>
20024068:	9480004c 	andi	r18,r18,1
2002406c:	90001f1e 	bne	r18,zero,200240ec <___vfprintf_internal_r+0x2168>
20024070:	00800044 	movi	r2,1
20024074:	d8802e15 	stw	r2,184(sp)
20024078:	003db706 	br	20023758 <__alt_data_end+0xfffe5758>
2002407c:	00800b44 	movi	r2,45
20024080:	05adc83a 	sub	r22,zero,r22
20024084:	d8802305 	stb	r2,140(sp)
20024088:	003f3f06 	br	20023d88 <__alt_data_end+0xfffe5d88>
2002408c:	0005883a 	mov	r2,zero
20024090:	003f5206 	br	20023ddc <__alt_data_end+0xfffe5ddc>
20024094:	90a4703a 	and	r18,r18,r2
20024098:	903f4e26 	beq	r18,zero,20023dd4 <__alt_data_end+0xfffe5dd4>
2002409c:	003f4a06 	br	20023dc8 <__alt_data_end+0xfffe5dc8>
200240a0:	00800084 	movi	r2,2
200240a4:	10c5c83a 	sub	r2,r2,r3
200240a8:	003f8406 	br	20023ebc <__alt_data_end+0xfffe5ebc>
200240ac:	d8802d17 	ldw	r2,180(sp)
200240b0:	d9002d17 	ldw	r4,180(sp)
200240b4:	ac400043 	ldbu	r17,1(r21)
200240b8:	10800017 	ldw	r2,0(r2)
200240bc:	582b883a 	mov	r21,r11
200240c0:	d8802915 	stw	r2,164(sp)
200240c4:	20800104 	addi	r2,r4,4
200240c8:	d9002917 	ldw	r4,164(sp)
200240cc:	d8802d15 	stw	r2,180(sp)
200240d0:	203e7a0e 	bge	r4,zero,20023abc <__alt_data_end+0xfffe5abc>
200240d4:	8c403fcc 	andi	r17,r17,255
200240d8:	00bfffc4 	movi	r2,-1
200240dc:	8c40201c 	xori	r17,r17,128
200240e0:	d8802915 	stw	r2,164(sp)
200240e4:	8c7fe004 	addi	r17,r17,-128
200240e8:	00380706 	br	20022108 <__alt_data_end+0xfffe4108>
200240ec:	d8c02917 	ldw	r3,164(sp)
200240f0:	18c00084 	addi	r3,r3,2
200240f4:	d8c02e15 	stw	r3,184(sp)
200240f8:	1805883a 	mov	r2,r3
200240fc:	183d960e 	bge	r3,zero,20023758 <__alt_data_end+0xfffe5758>
20024100:	003fd606 	br	2002405c <__alt_data_end+0xfffe605c>
20024104:	0005883a 	mov	r2,zero
20024108:	003f8e06 	br	20023f44 <__alt_data_end+0xfffe5f44>
2002410c:	9080004c 	andi	r2,r18,1
20024110:	103f811e 	bne	r2,zero,20023f18 <__alt_data_end+0xfffe5f18>
20024114:	d8802117 	ldw	r2,132(sp)
20024118:	1405c83a 	sub	r2,r2,r16
2002411c:	d8803315 	stw	r2,204(sp)
20024120:	b47ef326 	beq	r22,r17,20023cf0 <__alt_data_end+0xfffe5cf0>
20024124:	dd802617 	ldw	r22,152(sp)
20024128:	003f1106 	br	20023d70 <__alt_data_end+0xfffe5d70>
2002412c:	d9c02785 	stb	r7,158(sp)
20024130:	00390406 	br	20022544 <__alt_data_end+0xfffe4544>
20024134:	d9c02785 	stb	r7,158(sp)
20024138:	0038d306 	br	20022488 <__alt_data_end+0xfffe4488>
2002413c:	d9c02785 	stb	r7,158(sp)
20024140:	003a6106 	br	20022ac8 <__alt_data_end+0xfffe4ac8>
20024144:	d9c02785 	stb	r7,158(sp)
20024148:	003af806 	br	20022d2c <__alt_data_end+0xfffe4d2c>
2002414c:	0005883a 	mov	r2,zero
20024150:	003d7e06 	br	2002374c <__alt_data_end+0xfffe574c>
20024154:	d8802344 	addi	r2,sp,141
20024158:	003f1306 	br	20023da8 <__alt_data_end+0xfffe5da8>
2002415c:	d9c02785 	stb	r7,158(sp)
20024160:	00392306 	br	200225f0 <__alt_data_end+0xfffe45f0>
20024164:	d9c02785 	stb	r7,158(sp)
20024168:	003aa906 	br	20022c10 <__alt_data_end+0xfffe4c10>
2002416c:	d9c02785 	stb	r7,158(sp)
20024170:	003a3d06 	br	20022a68 <__alt_data_end+0xfffe4a68>
20024174:	d9c02785 	stb	r7,158(sp)
20024178:	003aca06 	br	20022ca4 <__alt_data_end+0xfffe4ca4>

2002417c <__vfprintf_internal>:
2002417c:	008800f4 	movhi	r2,8195
20024180:	108b0a04 	addi	r2,r2,11304
20024184:	300f883a 	mov	r7,r6
20024188:	280d883a 	mov	r6,r5
2002418c:	200b883a 	mov	r5,r4
20024190:	11000017 	ldw	r4,0(r2)
20024194:	0021f841 	jmpi	20021f84 <___vfprintf_internal_r>

20024198 <__sbprintf>:
20024198:	2880030b 	ldhu	r2,12(r5)
2002419c:	2ac01917 	ldw	r11,100(r5)
200241a0:	2a80038b 	ldhu	r10,14(r5)
200241a4:	2a400717 	ldw	r9,28(r5)
200241a8:	2a000917 	ldw	r8,36(r5)
200241ac:	defee204 	addi	sp,sp,-1144
200241b0:	00c10004 	movi	r3,1024
200241b4:	dc011a15 	stw	r16,1128(sp)
200241b8:	10bfff4c 	andi	r2,r2,65533
200241bc:	2821883a 	mov	r16,r5
200241c0:	d8cb883a 	add	r5,sp,r3
200241c4:	dc811c15 	stw	r18,1136(sp)
200241c8:	dc411b15 	stw	r17,1132(sp)
200241cc:	dfc11d15 	stw	ra,1140(sp)
200241d0:	2025883a 	mov	r18,r4
200241d4:	d881030d 	sth	r2,1036(sp)
200241d8:	dac11915 	stw	r11,1124(sp)
200241dc:	da81038d 	sth	r10,1038(sp)
200241e0:	da410715 	stw	r9,1052(sp)
200241e4:	da010915 	stw	r8,1060(sp)
200241e8:	dec10015 	stw	sp,1024(sp)
200241ec:	dec10415 	stw	sp,1040(sp)
200241f0:	d8c10215 	stw	r3,1032(sp)
200241f4:	d8c10515 	stw	r3,1044(sp)
200241f8:	d8010615 	stw	zero,1048(sp)
200241fc:	0021f840 	call	20021f84 <___vfprintf_internal_r>
20024200:	1023883a 	mov	r17,r2
20024204:	10000416 	blt	r2,zero,20024218 <__sbprintf+0x80>
20024208:	d9410004 	addi	r5,sp,1024
2002420c:	9009883a 	mov	r4,r18
20024210:	00260040 	call	20026004 <_fflush_r>
20024214:	10000d1e 	bne	r2,zero,2002424c <__sbprintf+0xb4>
20024218:	d881030b 	ldhu	r2,1036(sp)
2002421c:	1080100c 	andi	r2,r2,64
20024220:	10000326 	beq	r2,zero,20024230 <__sbprintf+0x98>
20024224:	8080030b 	ldhu	r2,12(r16)
20024228:	10801014 	ori	r2,r2,64
2002422c:	8080030d 	sth	r2,12(r16)
20024230:	8805883a 	mov	r2,r17
20024234:	dfc11d17 	ldw	ra,1140(sp)
20024238:	dc811c17 	ldw	r18,1136(sp)
2002423c:	dc411b17 	ldw	r17,1132(sp)
20024240:	dc011a17 	ldw	r16,1128(sp)
20024244:	dec11e04 	addi	sp,sp,1144
20024248:	f800283a 	ret
2002424c:	047fffc4 	movi	r17,-1
20024250:	003ff106 	br	20024218 <__alt_data_end+0xfffe6218>

20024254 <_write_r>:
20024254:	defffd04 	addi	sp,sp,-12
20024258:	2805883a 	mov	r2,r5
2002425c:	dc000015 	stw	r16,0(sp)
20024260:	040800f4 	movhi	r16,8195
20024264:	dc400115 	stw	r17,4(sp)
20024268:	300b883a 	mov	r5,r6
2002426c:	8411f504 	addi	r16,r16,18388
20024270:	2023883a 	mov	r17,r4
20024274:	380d883a 	mov	r6,r7
20024278:	1009883a 	mov	r4,r2
2002427c:	dfc00215 	stw	ra,8(sp)
20024280:	80000015 	stw	zero,0(r16)
20024284:	002dee00 	call	2002dee0 <write>
20024288:	00ffffc4 	movi	r3,-1
2002428c:	10c00526 	beq	r2,r3,200242a4 <_write_r+0x50>
20024290:	dfc00217 	ldw	ra,8(sp)
20024294:	dc400117 	ldw	r17,4(sp)
20024298:	dc000017 	ldw	r16,0(sp)
2002429c:	dec00304 	addi	sp,sp,12
200242a0:	f800283a 	ret
200242a4:	80c00017 	ldw	r3,0(r16)
200242a8:	183ff926 	beq	r3,zero,20024290 <__alt_data_end+0xfffe6290>
200242ac:	88c00015 	stw	r3,0(r17)
200242b0:	003ff706 	br	20024290 <__alt_data_end+0xfffe6290>

200242b4 <__swsetup_r>:
200242b4:	008800f4 	movhi	r2,8195
200242b8:	defffd04 	addi	sp,sp,-12
200242bc:	108b0a04 	addi	r2,r2,11304
200242c0:	dc400115 	stw	r17,4(sp)
200242c4:	2023883a 	mov	r17,r4
200242c8:	11000017 	ldw	r4,0(r2)
200242cc:	dc000015 	stw	r16,0(sp)
200242d0:	dfc00215 	stw	ra,8(sp)
200242d4:	2821883a 	mov	r16,r5
200242d8:	20000226 	beq	r4,zero,200242e4 <__swsetup_r+0x30>
200242dc:	20800e17 	ldw	r2,56(r4)
200242e0:	10003126 	beq	r2,zero,200243a8 <__swsetup_r+0xf4>
200242e4:	8080030b 	ldhu	r2,12(r16)
200242e8:	10c0020c 	andi	r3,r2,8
200242ec:	1009883a 	mov	r4,r2
200242f0:	18000f26 	beq	r3,zero,20024330 <__swsetup_r+0x7c>
200242f4:	80c00417 	ldw	r3,16(r16)
200242f8:	18001526 	beq	r3,zero,20024350 <__swsetup_r+0x9c>
200242fc:	1100004c 	andi	r4,r2,1
20024300:	20001c1e 	bne	r4,zero,20024374 <__swsetup_r+0xc0>
20024304:	1080008c 	andi	r2,r2,2
20024308:	1000291e 	bne	r2,zero,200243b0 <__swsetup_r+0xfc>
2002430c:	80800517 	ldw	r2,20(r16)
20024310:	80800215 	stw	r2,8(r16)
20024314:	18001c26 	beq	r3,zero,20024388 <__swsetup_r+0xd4>
20024318:	0005883a 	mov	r2,zero
2002431c:	dfc00217 	ldw	ra,8(sp)
20024320:	dc400117 	ldw	r17,4(sp)
20024324:	dc000017 	ldw	r16,0(sp)
20024328:	dec00304 	addi	sp,sp,12
2002432c:	f800283a 	ret
20024330:	2080040c 	andi	r2,r4,16
20024334:	10002e26 	beq	r2,zero,200243f0 <__swsetup_r+0x13c>
20024338:	2080010c 	andi	r2,r4,4
2002433c:	10001e1e 	bne	r2,zero,200243b8 <__swsetup_r+0x104>
20024340:	80c00417 	ldw	r3,16(r16)
20024344:	20800214 	ori	r2,r4,8
20024348:	8080030d 	sth	r2,12(r16)
2002434c:	183feb1e 	bne	r3,zero,200242fc <__alt_data_end+0xfffe62fc>
20024350:	1100a00c 	andi	r4,r2,640
20024354:	01408004 	movi	r5,512
20024358:	217fe826 	beq	r4,r5,200242fc <__alt_data_end+0xfffe62fc>
2002435c:	800b883a 	mov	r5,r16
20024360:	8809883a 	mov	r4,r17
20024364:	0026abc0 	call	20026abc <__smakebuf_r>
20024368:	8080030b 	ldhu	r2,12(r16)
2002436c:	80c00417 	ldw	r3,16(r16)
20024370:	003fe206 	br	200242fc <__alt_data_end+0xfffe62fc>
20024374:	80800517 	ldw	r2,20(r16)
20024378:	80000215 	stw	zero,8(r16)
2002437c:	0085c83a 	sub	r2,zero,r2
20024380:	80800615 	stw	r2,24(r16)
20024384:	183fe41e 	bne	r3,zero,20024318 <__alt_data_end+0xfffe6318>
20024388:	80c0030b 	ldhu	r3,12(r16)
2002438c:	0005883a 	mov	r2,zero
20024390:	1900200c 	andi	r4,r3,128
20024394:	203fe126 	beq	r4,zero,2002431c <__alt_data_end+0xfffe631c>
20024398:	18c01014 	ori	r3,r3,64
2002439c:	80c0030d 	sth	r3,12(r16)
200243a0:	00bfffc4 	movi	r2,-1
200243a4:	003fdd06 	br	2002431c <__alt_data_end+0xfffe631c>
200243a8:	0020cd40 	call	20020cd4 <__sinit>
200243ac:	003fcd06 	br	200242e4 <__alt_data_end+0xfffe62e4>
200243b0:	0005883a 	mov	r2,zero
200243b4:	003fd606 	br	20024310 <__alt_data_end+0xfffe6310>
200243b8:	81400c17 	ldw	r5,48(r16)
200243bc:	28000626 	beq	r5,zero,200243d8 <__swsetup_r+0x124>
200243c0:	80801004 	addi	r2,r16,64
200243c4:	28800326 	beq	r5,r2,200243d4 <__swsetup_r+0x120>
200243c8:	8809883a 	mov	r4,r17
200243cc:	00261b40 	call	200261b4 <_free_r>
200243d0:	8100030b 	ldhu	r4,12(r16)
200243d4:	80000c15 	stw	zero,48(r16)
200243d8:	80c00417 	ldw	r3,16(r16)
200243dc:	00bff6c4 	movi	r2,-37
200243e0:	1108703a 	and	r4,r2,r4
200243e4:	80000115 	stw	zero,4(r16)
200243e8:	80c00015 	stw	r3,0(r16)
200243ec:	003fd506 	br	20024344 <__alt_data_end+0xfffe6344>
200243f0:	00800244 	movi	r2,9
200243f4:	88800015 	stw	r2,0(r17)
200243f8:	20801014 	ori	r2,r4,64
200243fc:	8080030d 	sth	r2,12(r16)
20024400:	00bfffc4 	movi	r2,-1
20024404:	003fc506 	br	2002431c <__alt_data_end+0xfffe631c>

20024408 <_close_r>:
20024408:	defffd04 	addi	sp,sp,-12
2002440c:	dc000015 	stw	r16,0(sp)
20024410:	040800f4 	movhi	r16,8195
20024414:	dc400115 	stw	r17,4(sp)
20024418:	8411f504 	addi	r16,r16,18388
2002441c:	2023883a 	mov	r17,r4
20024420:	2809883a 	mov	r4,r5
20024424:	dfc00215 	stw	ra,8(sp)
20024428:	80000015 	stw	zero,0(r16)
2002442c:	002d6580 	call	2002d658 <close>
20024430:	00ffffc4 	movi	r3,-1
20024434:	10c00526 	beq	r2,r3,2002444c <_close_r+0x44>
20024438:	dfc00217 	ldw	ra,8(sp)
2002443c:	dc400117 	ldw	r17,4(sp)
20024440:	dc000017 	ldw	r16,0(sp)
20024444:	dec00304 	addi	sp,sp,12
20024448:	f800283a 	ret
2002444c:	80c00017 	ldw	r3,0(r16)
20024450:	183ff926 	beq	r3,zero,20024438 <__alt_data_end+0xfffe6438>
20024454:	88c00015 	stw	r3,0(r17)
20024458:	003ff706 	br	20024438 <__alt_data_end+0xfffe6438>

2002445c <quorem>:
2002445c:	defff704 	addi	sp,sp,-36
20024460:	dc800215 	stw	r18,8(sp)
20024464:	20800417 	ldw	r2,16(r4)
20024468:	2c800417 	ldw	r18,16(r5)
2002446c:	dfc00815 	stw	ra,32(sp)
20024470:	ddc00715 	stw	r23,28(sp)
20024474:	dd800615 	stw	r22,24(sp)
20024478:	dd400515 	stw	r21,20(sp)
2002447c:	dd000415 	stw	r20,16(sp)
20024480:	dcc00315 	stw	r19,12(sp)
20024484:	dc400115 	stw	r17,4(sp)
20024488:	dc000015 	stw	r16,0(sp)
2002448c:	14807116 	blt	r2,r18,20024654 <quorem+0x1f8>
20024490:	94bfffc4 	addi	r18,r18,-1
20024494:	94ad883a 	add	r22,r18,r18
20024498:	b5ad883a 	add	r22,r22,r22
2002449c:	2c400504 	addi	r17,r5,20
200244a0:	8da9883a 	add	r20,r17,r22
200244a4:	25400504 	addi	r21,r4,20
200244a8:	282f883a 	mov	r23,r5
200244ac:	adad883a 	add	r22,r21,r22
200244b0:	a1400017 	ldw	r5,0(r20)
200244b4:	2021883a 	mov	r16,r4
200244b8:	b1000017 	ldw	r4,0(r22)
200244bc:	29400044 	addi	r5,r5,1
200244c0:	002aef80 	call	2002aef8 <__udivsi3>
200244c4:	1027883a 	mov	r19,r2
200244c8:	10002c26 	beq	r2,zero,2002457c <quorem+0x120>
200244cc:	a813883a 	mov	r9,r21
200244d0:	880b883a 	mov	r5,r17
200244d4:	0009883a 	mov	r4,zero
200244d8:	000d883a 	mov	r6,zero
200244dc:	2a000017 	ldw	r8,0(r5)
200244e0:	49c00017 	ldw	r7,0(r9)
200244e4:	29400104 	addi	r5,r5,4
200244e8:	40bfffcc 	andi	r2,r8,65535
200244ec:	14c5383a 	mul	r2,r2,r19
200244f0:	4010d43a 	srli	r8,r8,16
200244f4:	38ffffcc 	andi	r3,r7,65535
200244f8:	1105883a 	add	r2,r2,r4
200244fc:	1008d43a 	srli	r4,r2,16
20024500:	44d1383a 	mul	r8,r8,r19
20024504:	198d883a 	add	r6,r3,r6
20024508:	10ffffcc 	andi	r3,r2,65535
2002450c:	30c7c83a 	sub	r3,r6,r3
20024510:	380ed43a 	srli	r7,r7,16
20024514:	4105883a 	add	r2,r8,r4
20024518:	180dd43a 	srai	r6,r3,16
2002451c:	113fffcc 	andi	r4,r2,65535
20024520:	390fc83a 	sub	r7,r7,r4
20024524:	398d883a 	add	r6,r7,r6
20024528:	300e943a 	slli	r7,r6,16
2002452c:	18ffffcc 	andi	r3,r3,65535
20024530:	1008d43a 	srli	r4,r2,16
20024534:	38ceb03a 	or	r7,r7,r3
20024538:	49c00015 	stw	r7,0(r9)
2002453c:	300dd43a 	srai	r6,r6,16
20024540:	4a400104 	addi	r9,r9,4
20024544:	a17fe52e 	bgeu	r20,r5,200244dc <__alt_data_end+0xfffe64dc>
20024548:	b0800017 	ldw	r2,0(r22)
2002454c:	10000b1e 	bne	r2,zero,2002457c <quorem+0x120>
20024550:	b0bfff04 	addi	r2,r22,-4
20024554:	a880082e 	bgeu	r21,r2,20024578 <quorem+0x11c>
20024558:	b0ffff17 	ldw	r3,-4(r22)
2002455c:	18000326 	beq	r3,zero,2002456c <quorem+0x110>
20024560:	00000506 	br	20024578 <quorem+0x11c>
20024564:	10c00017 	ldw	r3,0(r2)
20024568:	1800031e 	bne	r3,zero,20024578 <quorem+0x11c>
2002456c:	10bfff04 	addi	r2,r2,-4
20024570:	94bfffc4 	addi	r18,r18,-1
20024574:	a8bffb36 	bltu	r21,r2,20024564 <__alt_data_end+0xfffe6564>
20024578:	84800415 	stw	r18,16(r16)
2002457c:	b80b883a 	mov	r5,r23
20024580:	8009883a 	mov	r4,r16
20024584:	002769c0 	call	2002769c <__mcmp>
20024588:	10002616 	blt	r2,zero,20024624 <quorem+0x1c8>
2002458c:	9cc00044 	addi	r19,r19,1
20024590:	a805883a 	mov	r2,r21
20024594:	000b883a 	mov	r5,zero
20024598:	11000017 	ldw	r4,0(r2)
2002459c:	89800017 	ldw	r6,0(r17)
200245a0:	10800104 	addi	r2,r2,4
200245a4:	20ffffcc 	andi	r3,r4,65535
200245a8:	194b883a 	add	r5,r3,r5
200245ac:	30ffffcc 	andi	r3,r6,65535
200245b0:	28c7c83a 	sub	r3,r5,r3
200245b4:	300cd43a 	srli	r6,r6,16
200245b8:	2008d43a 	srli	r4,r4,16
200245bc:	180bd43a 	srai	r5,r3,16
200245c0:	18ffffcc 	andi	r3,r3,65535
200245c4:	2189c83a 	sub	r4,r4,r6
200245c8:	2149883a 	add	r4,r4,r5
200245cc:	200c943a 	slli	r6,r4,16
200245d0:	8c400104 	addi	r17,r17,4
200245d4:	200bd43a 	srai	r5,r4,16
200245d8:	30c6b03a 	or	r3,r6,r3
200245dc:	10ffff15 	stw	r3,-4(r2)
200245e0:	a47fed2e 	bgeu	r20,r17,20024598 <__alt_data_end+0xfffe6598>
200245e4:	9485883a 	add	r2,r18,r18
200245e8:	1085883a 	add	r2,r2,r2
200245ec:	a887883a 	add	r3,r21,r2
200245f0:	18800017 	ldw	r2,0(r3)
200245f4:	10000b1e 	bne	r2,zero,20024624 <quorem+0x1c8>
200245f8:	18bfff04 	addi	r2,r3,-4
200245fc:	a880082e 	bgeu	r21,r2,20024620 <quorem+0x1c4>
20024600:	18ffff17 	ldw	r3,-4(r3)
20024604:	18000326 	beq	r3,zero,20024614 <quorem+0x1b8>
20024608:	00000506 	br	20024620 <quorem+0x1c4>
2002460c:	10c00017 	ldw	r3,0(r2)
20024610:	1800031e 	bne	r3,zero,20024620 <quorem+0x1c4>
20024614:	10bfff04 	addi	r2,r2,-4
20024618:	94bfffc4 	addi	r18,r18,-1
2002461c:	a8bffb36 	bltu	r21,r2,2002460c <__alt_data_end+0xfffe660c>
20024620:	84800415 	stw	r18,16(r16)
20024624:	9805883a 	mov	r2,r19
20024628:	dfc00817 	ldw	ra,32(sp)
2002462c:	ddc00717 	ldw	r23,28(sp)
20024630:	dd800617 	ldw	r22,24(sp)
20024634:	dd400517 	ldw	r21,20(sp)
20024638:	dd000417 	ldw	r20,16(sp)
2002463c:	dcc00317 	ldw	r19,12(sp)
20024640:	dc800217 	ldw	r18,8(sp)
20024644:	dc400117 	ldw	r17,4(sp)
20024648:	dc000017 	ldw	r16,0(sp)
2002464c:	dec00904 	addi	sp,sp,36
20024650:	f800283a 	ret
20024654:	0005883a 	mov	r2,zero
20024658:	003ff306 	br	20024628 <__alt_data_end+0xfffe6628>

2002465c <_dtoa_r>:
2002465c:	20801017 	ldw	r2,64(r4)
20024660:	deffde04 	addi	sp,sp,-136
20024664:	df002015 	stw	fp,128(sp)
20024668:	dcc01b15 	stw	r19,108(sp)
2002466c:	dc801a15 	stw	r18,104(sp)
20024670:	dc401915 	stw	r17,100(sp)
20024674:	dc001815 	stw	r16,96(sp)
20024678:	dfc02115 	stw	ra,132(sp)
2002467c:	ddc01f15 	stw	r23,124(sp)
20024680:	dd801e15 	stw	r22,120(sp)
20024684:	dd401d15 	stw	r21,116(sp)
20024688:	dd001c15 	stw	r20,112(sp)
2002468c:	d9c00315 	stw	r7,12(sp)
20024690:	2039883a 	mov	fp,r4
20024694:	3023883a 	mov	r17,r6
20024698:	2825883a 	mov	r18,r5
2002469c:	dc002417 	ldw	r16,144(sp)
200246a0:	3027883a 	mov	r19,r6
200246a4:	10000826 	beq	r2,zero,200246c8 <_dtoa_r+0x6c>
200246a8:	21801117 	ldw	r6,68(r4)
200246ac:	00c00044 	movi	r3,1
200246b0:	100b883a 	mov	r5,r2
200246b4:	1986983a 	sll	r3,r3,r6
200246b8:	11800115 	stw	r6,4(r2)
200246bc:	10c00215 	stw	r3,8(r2)
200246c0:	0026e7c0 	call	20026e7c <_Bfree>
200246c4:	e0001015 	stw	zero,64(fp)
200246c8:	88002e16 	blt	r17,zero,20024784 <_dtoa_r+0x128>
200246cc:	80000015 	stw	zero,0(r16)
200246d0:	889ffc2c 	andhi	r2,r17,32752
200246d4:	00dffc34 	movhi	r3,32752
200246d8:	10c01c26 	beq	r2,r3,2002474c <_dtoa_r+0xf0>
200246dc:	000d883a 	mov	r6,zero
200246e0:	000f883a 	mov	r7,zero
200246e4:	9009883a 	mov	r4,r18
200246e8:	980b883a 	mov	r5,r19
200246ec:	002c1480 	call	2002c148 <__eqdf2>
200246f0:	10002b1e 	bne	r2,zero,200247a0 <_dtoa_r+0x144>
200246f4:	d9c02317 	ldw	r7,140(sp)
200246f8:	00800044 	movi	r2,1
200246fc:	38800015 	stw	r2,0(r7)
20024700:	d8802517 	ldw	r2,148(sp)
20024704:	10019e26 	beq	r2,zero,20024d80 <_dtoa_r+0x724>
20024708:	d8c02517 	ldw	r3,148(sp)
2002470c:	008800f4 	movhi	r2,8195
20024710:	10838b44 	addi	r2,r2,3629
20024714:	18800015 	stw	r2,0(r3)
20024718:	10bfffc4 	addi	r2,r2,-1
2002471c:	dfc02117 	ldw	ra,132(sp)
20024720:	df002017 	ldw	fp,128(sp)
20024724:	ddc01f17 	ldw	r23,124(sp)
20024728:	dd801e17 	ldw	r22,120(sp)
2002472c:	dd401d17 	ldw	r21,116(sp)
20024730:	dd001c17 	ldw	r20,112(sp)
20024734:	dcc01b17 	ldw	r19,108(sp)
20024738:	dc801a17 	ldw	r18,104(sp)
2002473c:	dc401917 	ldw	r17,100(sp)
20024740:	dc001817 	ldw	r16,96(sp)
20024744:	dec02204 	addi	sp,sp,136
20024748:	f800283a 	ret
2002474c:	d8c02317 	ldw	r3,140(sp)
20024750:	0089c3c4 	movi	r2,9999
20024754:	18800015 	stw	r2,0(r3)
20024758:	90017726 	beq	r18,zero,20024d38 <_dtoa_r+0x6dc>
2002475c:	008800f4 	movhi	r2,8195
20024760:	10839704 	addi	r2,r2,3676
20024764:	d9002517 	ldw	r4,148(sp)
20024768:	203fec26 	beq	r4,zero,2002471c <__alt_data_end+0xfffe671c>
2002476c:	10c000c7 	ldb	r3,3(r2)
20024770:	1801781e 	bne	r3,zero,20024d54 <_dtoa_r+0x6f8>
20024774:	10c000c4 	addi	r3,r2,3
20024778:	d9802517 	ldw	r6,148(sp)
2002477c:	30c00015 	stw	r3,0(r6)
20024780:	003fe606 	br	2002471c <__alt_data_end+0xfffe671c>
20024784:	04e00034 	movhi	r19,32768
20024788:	9cffffc4 	addi	r19,r19,-1
2002478c:	00800044 	movi	r2,1
20024790:	8ce6703a 	and	r19,r17,r19
20024794:	80800015 	stw	r2,0(r16)
20024798:	9823883a 	mov	r17,r19
2002479c:	003fcc06 	br	200246d0 <__alt_data_end+0xfffe66d0>
200247a0:	d8800204 	addi	r2,sp,8
200247a4:	d8800015 	stw	r2,0(sp)
200247a8:	d9c00104 	addi	r7,sp,4
200247ac:	900b883a 	mov	r5,r18
200247b0:	980d883a 	mov	r6,r19
200247b4:	e009883a 	mov	r4,fp
200247b8:	8820d53a 	srli	r16,r17,20
200247bc:	0027a680 	call	20027a68 <__d2b>
200247c0:	d8800915 	stw	r2,36(sp)
200247c4:	8001651e 	bne	r16,zero,20024d5c <_dtoa_r+0x700>
200247c8:	dd800217 	ldw	r22,8(sp)
200247cc:	dc000117 	ldw	r16,4(sp)
200247d0:	00800804 	movi	r2,32
200247d4:	b421883a 	add	r16,r22,r16
200247d8:	80c10c84 	addi	r3,r16,1074
200247dc:	10c2d10e 	bge	r2,r3,20025324 <_dtoa_r+0xcc8>
200247e0:	00801004 	movi	r2,64
200247e4:	81010484 	addi	r4,r16,1042
200247e8:	10c7c83a 	sub	r3,r2,r3
200247ec:	9108d83a 	srl	r4,r18,r4
200247f0:	88e2983a 	sll	r17,r17,r3
200247f4:	2448b03a 	or	r4,r4,r17
200247f8:	002d5100 	call	2002d510 <__floatunsidf>
200247fc:	017f8434 	movhi	r5,65040
20024800:	01800044 	movi	r6,1
20024804:	1009883a 	mov	r4,r2
20024808:	194b883a 	add	r5,r3,r5
2002480c:	843fffc4 	addi	r16,r16,-1
20024810:	d9801115 	stw	r6,68(sp)
20024814:	000d883a 	mov	r6,zero
20024818:	01cffe34 	movhi	r7,16376
2002481c:	002cab80 	call	2002cab8 <__subdf3>
20024820:	0198dbf4 	movhi	r6,25455
20024824:	01cff4f4 	movhi	r7,16339
20024828:	3190d844 	addi	r6,r6,17249
2002482c:	39e1e9c4 	addi	r7,r7,-30809
20024830:	1009883a 	mov	r4,r2
20024834:	180b883a 	mov	r5,r3
20024838:	002c3a00 	call	2002c3a0 <__muldf3>
2002483c:	01a2d874 	movhi	r6,35681
20024840:	01cff1f4 	movhi	r7,16327
20024844:	31b22cc4 	addi	r6,r6,-14157
20024848:	39e28a04 	addi	r7,r7,-30168
2002484c:	180b883a 	mov	r5,r3
20024850:	1009883a 	mov	r4,r2
20024854:	002afb40 	call	2002afb4 <__adddf3>
20024858:	8009883a 	mov	r4,r16
2002485c:	1029883a 	mov	r20,r2
20024860:	1823883a 	mov	r17,r3
20024864:	002d4340 	call	2002d434 <__floatsidf>
20024868:	019427f4 	movhi	r6,20639
2002486c:	01cff4f4 	movhi	r7,16339
20024870:	319e7ec4 	addi	r6,r6,31227
20024874:	39d104c4 	addi	r7,r7,17427
20024878:	1009883a 	mov	r4,r2
2002487c:	180b883a 	mov	r5,r3
20024880:	002c3a00 	call	2002c3a0 <__muldf3>
20024884:	100d883a 	mov	r6,r2
20024888:	180f883a 	mov	r7,r3
2002488c:	a009883a 	mov	r4,r20
20024890:	880b883a 	mov	r5,r17
20024894:	002afb40 	call	2002afb4 <__adddf3>
20024898:	1009883a 	mov	r4,r2
2002489c:	180b883a 	mov	r5,r3
200248a0:	1029883a 	mov	r20,r2
200248a4:	1823883a 	mov	r17,r3
200248a8:	002d3b40 	call	2002d3b4 <__fixdfsi>
200248ac:	000d883a 	mov	r6,zero
200248b0:	000f883a 	mov	r7,zero
200248b4:	a009883a 	mov	r4,r20
200248b8:	880b883a 	mov	r5,r17
200248bc:	d8800515 	stw	r2,20(sp)
200248c0:	002c2ac0 	call	2002c2ac <__ledf2>
200248c4:	10028716 	blt	r2,zero,200252e4 <_dtoa_r+0xc88>
200248c8:	d8c00517 	ldw	r3,20(sp)
200248cc:	00800584 	movi	r2,22
200248d0:	10c27536 	bltu	r2,r3,200252a8 <_dtoa_r+0xc4c>
200248d4:	180490fa 	slli	r2,r3,3
200248d8:	00c800f4 	movhi	r3,8195
200248dc:	18c3b204 	addi	r3,r3,3784
200248e0:	1885883a 	add	r2,r3,r2
200248e4:	11000017 	ldw	r4,0(r2)
200248e8:	11400117 	ldw	r5,4(r2)
200248ec:	900d883a 	mov	r6,r18
200248f0:	980f883a 	mov	r7,r19
200248f4:	002c1d00 	call	2002c1d0 <__gedf2>
200248f8:	00828d0e 	bge	zero,r2,20025330 <_dtoa_r+0xcd4>
200248fc:	d9000517 	ldw	r4,20(sp)
20024900:	d8000e15 	stw	zero,56(sp)
20024904:	213fffc4 	addi	r4,r4,-1
20024908:	d9000515 	stw	r4,20(sp)
2002490c:	b42dc83a 	sub	r22,r22,r16
20024910:	b5bfffc4 	addi	r22,r22,-1
20024914:	b0026f16 	blt	r22,zero,200252d4 <_dtoa_r+0xc78>
20024918:	d8000815 	stw	zero,32(sp)
2002491c:	d9c00517 	ldw	r7,20(sp)
20024920:	38026416 	blt	r7,zero,200252b4 <_dtoa_r+0xc58>
20024924:	b1ed883a 	add	r22,r22,r7
20024928:	d9c00d15 	stw	r7,52(sp)
2002492c:	d8000a15 	stw	zero,40(sp)
20024930:	d9800317 	ldw	r6,12(sp)
20024934:	00800244 	movi	r2,9
20024938:	11811436 	bltu	r2,r6,20024d8c <_dtoa_r+0x730>
2002493c:	00800144 	movi	r2,5
20024940:	1184e10e 	bge	r2,r6,20025cc8 <_dtoa_r+0x166c>
20024944:	31bfff04 	addi	r6,r6,-4
20024948:	d9800315 	stw	r6,12(sp)
2002494c:	0023883a 	mov	r17,zero
20024950:	d9800317 	ldw	r6,12(sp)
20024954:	008000c4 	movi	r2,3
20024958:	30836726 	beq	r6,r2,200256f8 <_dtoa_r+0x109c>
2002495c:	1183410e 	bge	r2,r6,20025664 <_dtoa_r+0x1008>
20024960:	d9c00317 	ldw	r7,12(sp)
20024964:	00800104 	movi	r2,4
20024968:	38827c26 	beq	r7,r2,2002535c <_dtoa_r+0xd00>
2002496c:	00800144 	movi	r2,5
20024970:	3884c41e 	bne	r7,r2,20025c84 <_dtoa_r+0x1628>
20024974:	00800044 	movi	r2,1
20024978:	d8800b15 	stw	r2,44(sp)
2002497c:	d8c00517 	ldw	r3,20(sp)
20024980:	d9002217 	ldw	r4,136(sp)
20024984:	1907883a 	add	r3,r3,r4
20024988:	19800044 	addi	r6,r3,1
2002498c:	d8c00c15 	stw	r3,48(sp)
20024990:	d9800615 	stw	r6,24(sp)
20024994:	0183a40e 	bge	zero,r6,20025828 <_dtoa_r+0x11cc>
20024998:	d9800617 	ldw	r6,24(sp)
2002499c:	3021883a 	mov	r16,r6
200249a0:	e0001115 	stw	zero,68(fp)
200249a4:	008005c4 	movi	r2,23
200249a8:	1184c92e 	bgeu	r2,r6,20025cd0 <_dtoa_r+0x1674>
200249ac:	00c00044 	movi	r3,1
200249b0:	00800104 	movi	r2,4
200249b4:	1085883a 	add	r2,r2,r2
200249b8:	11000504 	addi	r4,r2,20
200249bc:	180b883a 	mov	r5,r3
200249c0:	18c00044 	addi	r3,r3,1
200249c4:	313ffb2e 	bgeu	r6,r4,200249b4 <__alt_data_end+0xfffe69b4>
200249c8:	e1401115 	stw	r5,68(fp)
200249cc:	e009883a 	mov	r4,fp
200249d0:	0026dd40 	call	20026dd4 <_Balloc>
200249d4:	d8800715 	stw	r2,28(sp)
200249d8:	e0801015 	stw	r2,64(fp)
200249dc:	00800384 	movi	r2,14
200249e0:	1400f736 	bltu	r2,r16,20024dc0 <_dtoa_r+0x764>
200249e4:	8800f626 	beq	r17,zero,20024dc0 <_dtoa_r+0x764>
200249e8:	d9c00517 	ldw	r7,20(sp)
200249ec:	01c39a0e 	bge	zero,r7,20025858 <_dtoa_r+0x11fc>
200249f0:	388003cc 	andi	r2,r7,15
200249f4:	100490fa 	slli	r2,r2,3
200249f8:	382bd13a 	srai	r21,r7,4
200249fc:	00c800f4 	movhi	r3,8195
20024a00:	18c3b204 	addi	r3,r3,3784
20024a04:	1885883a 	add	r2,r3,r2
20024a08:	a8c0040c 	andi	r3,r21,16
20024a0c:	12400017 	ldw	r9,0(r2)
20024a10:	12000117 	ldw	r8,4(r2)
20024a14:	18037926 	beq	r3,zero,200257fc <_dtoa_r+0x11a0>
20024a18:	008800f4 	movhi	r2,8195
20024a1c:	1083a804 	addi	r2,r2,3744
20024a20:	11800817 	ldw	r6,32(r2)
20024a24:	11c00917 	ldw	r7,36(r2)
20024a28:	9009883a 	mov	r4,r18
20024a2c:	980b883a 	mov	r5,r19
20024a30:	da001715 	stw	r8,92(sp)
20024a34:	da401615 	stw	r9,88(sp)
20024a38:	002b8600 	call	2002b860 <__divdf3>
20024a3c:	da001717 	ldw	r8,92(sp)
20024a40:	da401617 	ldw	r9,88(sp)
20024a44:	ad4003cc 	andi	r21,r21,15
20024a48:	040000c4 	movi	r16,3
20024a4c:	1023883a 	mov	r17,r2
20024a50:	1829883a 	mov	r20,r3
20024a54:	a8001126 	beq	r21,zero,20024a9c <_dtoa_r+0x440>
20024a58:	05c800f4 	movhi	r23,8195
20024a5c:	bdc3a804 	addi	r23,r23,3744
20024a60:	4805883a 	mov	r2,r9
20024a64:	4007883a 	mov	r3,r8
20024a68:	a980004c 	andi	r6,r21,1
20024a6c:	1009883a 	mov	r4,r2
20024a70:	a82bd07a 	srai	r21,r21,1
20024a74:	180b883a 	mov	r5,r3
20024a78:	30000426 	beq	r6,zero,20024a8c <_dtoa_r+0x430>
20024a7c:	b9800017 	ldw	r6,0(r23)
20024a80:	b9c00117 	ldw	r7,4(r23)
20024a84:	84000044 	addi	r16,r16,1
20024a88:	002c3a00 	call	2002c3a0 <__muldf3>
20024a8c:	bdc00204 	addi	r23,r23,8
20024a90:	a83ff51e 	bne	r21,zero,20024a68 <__alt_data_end+0xfffe6a68>
20024a94:	1013883a 	mov	r9,r2
20024a98:	1811883a 	mov	r8,r3
20024a9c:	480d883a 	mov	r6,r9
20024aa0:	400f883a 	mov	r7,r8
20024aa4:	8809883a 	mov	r4,r17
20024aa8:	a00b883a 	mov	r5,r20
20024aac:	002b8600 	call	2002b860 <__divdf3>
20024ab0:	d8800f15 	stw	r2,60(sp)
20024ab4:	d8c01015 	stw	r3,64(sp)
20024ab8:	d8c00e17 	ldw	r3,56(sp)
20024abc:	18000626 	beq	r3,zero,20024ad8 <_dtoa_r+0x47c>
20024ac0:	d9000f17 	ldw	r4,60(sp)
20024ac4:	d9401017 	ldw	r5,64(sp)
20024ac8:	000d883a 	mov	r6,zero
20024acc:	01cffc34 	movhi	r7,16368
20024ad0:	002c2ac0 	call	2002c2ac <__ledf2>
20024ad4:	10040b16 	blt	r2,zero,20025b04 <_dtoa_r+0x14a8>
20024ad8:	8009883a 	mov	r4,r16
20024adc:	002d4340 	call	2002d434 <__floatsidf>
20024ae0:	d9800f17 	ldw	r6,60(sp)
20024ae4:	d9c01017 	ldw	r7,64(sp)
20024ae8:	1009883a 	mov	r4,r2
20024aec:	180b883a 	mov	r5,r3
20024af0:	002c3a00 	call	2002c3a0 <__muldf3>
20024af4:	000d883a 	mov	r6,zero
20024af8:	01d00734 	movhi	r7,16412
20024afc:	1009883a 	mov	r4,r2
20024b00:	180b883a 	mov	r5,r3
20024b04:	002afb40 	call	2002afb4 <__adddf3>
20024b08:	1021883a 	mov	r16,r2
20024b0c:	d8800617 	ldw	r2,24(sp)
20024b10:	047f3034 	movhi	r17,64704
20024b14:	1c63883a 	add	r17,r3,r17
20024b18:	10031826 	beq	r2,zero,2002577c <_dtoa_r+0x1120>
20024b1c:	d8c00517 	ldw	r3,20(sp)
20024b20:	db000617 	ldw	r12,24(sp)
20024b24:	d8c01315 	stw	r3,76(sp)
20024b28:	d9000b17 	ldw	r4,44(sp)
20024b2c:	20038f26 	beq	r4,zero,2002596c <_dtoa_r+0x1310>
20024b30:	60bfffc4 	addi	r2,r12,-1
20024b34:	100490fa 	slli	r2,r2,3
20024b38:	00c800f4 	movhi	r3,8195
20024b3c:	18c3b204 	addi	r3,r3,3784
20024b40:	1885883a 	add	r2,r3,r2
20024b44:	11800017 	ldw	r6,0(r2)
20024b48:	11c00117 	ldw	r7,4(r2)
20024b4c:	d8800717 	ldw	r2,28(sp)
20024b50:	0009883a 	mov	r4,zero
20024b54:	014ff834 	movhi	r5,16352
20024b58:	db001615 	stw	r12,88(sp)
20024b5c:	15c00044 	addi	r23,r2,1
20024b60:	002b8600 	call	2002b860 <__divdf3>
20024b64:	800d883a 	mov	r6,r16
20024b68:	880f883a 	mov	r7,r17
20024b6c:	1009883a 	mov	r4,r2
20024b70:	180b883a 	mov	r5,r3
20024b74:	002cab80 	call	2002cab8 <__subdf3>
20024b78:	d9401017 	ldw	r5,64(sp)
20024b7c:	d9000f17 	ldw	r4,60(sp)
20024b80:	102b883a 	mov	r21,r2
20024b84:	d8c01215 	stw	r3,72(sp)
20024b88:	002d3b40 	call	2002d3b4 <__fixdfsi>
20024b8c:	1009883a 	mov	r4,r2
20024b90:	1029883a 	mov	r20,r2
20024b94:	002d4340 	call	2002d434 <__floatsidf>
20024b98:	d9000f17 	ldw	r4,60(sp)
20024b9c:	d9401017 	ldw	r5,64(sp)
20024ba0:	100d883a 	mov	r6,r2
20024ba4:	180f883a 	mov	r7,r3
20024ba8:	002cab80 	call	2002cab8 <__subdf3>
20024bac:	1823883a 	mov	r17,r3
20024bb0:	d8c00717 	ldw	r3,28(sp)
20024bb4:	d9401217 	ldw	r5,72(sp)
20024bb8:	a2000c04 	addi	r8,r20,48
20024bbc:	1021883a 	mov	r16,r2
20024bc0:	1a000005 	stb	r8,0(r3)
20024bc4:	800d883a 	mov	r6,r16
20024bc8:	880f883a 	mov	r7,r17
20024bcc:	a809883a 	mov	r4,r21
20024bd0:	4029883a 	mov	r20,r8
20024bd4:	002c1d00 	call	2002c1d0 <__gedf2>
20024bd8:	00841d16 	blt	zero,r2,20025c50 <_dtoa_r+0x15f4>
20024bdc:	800d883a 	mov	r6,r16
20024be0:	880f883a 	mov	r7,r17
20024be4:	0009883a 	mov	r4,zero
20024be8:	014ffc34 	movhi	r5,16368
20024bec:	002cab80 	call	2002cab8 <__subdf3>
20024bf0:	d9401217 	ldw	r5,72(sp)
20024bf4:	100d883a 	mov	r6,r2
20024bf8:	180f883a 	mov	r7,r3
20024bfc:	a809883a 	mov	r4,r21
20024c00:	002c1d00 	call	2002c1d0 <__gedf2>
20024c04:	db001617 	ldw	r12,88(sp)
20024c08:	00840e16 	blt	zero,r2,20025c44 <_dtoa_r+0x15e8>
20024c0c:	00800044 	movi	r2,1
20024c10:	13006b0e 	bge	r2,r12,20024dc0 <_dtoa_r+0x764>
20024c14:	d9000717 	ldw	r4,28(sp)
20024c18:	dd800f15 	stw	r22,60(sp)
20024c1c:	dcc01015 	stw	r19,64(sp)
20024c20:	2319883a 	add	r12,r4,r12
20024c24:	dcc01217 	ldw	r19,72(sp)
20024c28:	602d883a 	mov	r22,r12
20024c2c:	dc801215 	stw	r18,72(sp)
20024c30:	b825883a 	mov	r18,r23
20024c34:	00000906 	br	20024c5c <_dtoa_r+0x600>
20024c38:	002cab80 	call	2002cab8 <__subdf3>
20024c3c:	a80d883a 	mov	r6,r21
20024c40:	980f883a 	mov	r7,r19
20024c44:	1009883a 	mov	r4,r2
20024c48:	180b883a 	mov	r5,r3
20024c4c:	002c2ac0 	call	2002c2ac <__ledf2>
20024c50:	1003e816 	blt	r2,zero,20025bf4 <_dtoa_r+0x1598>
20024c54:	b825883a 	mov	r18,r23
20024c58:	bd83e926 	beq	r23,r22,20025c00 <_dtoa_r+0x15a4>
20024c5c:	a809883a 	mov	r4,r21
20024c60:	980b883a 	mov	r5,r19
20024c64:	000d883a 	mov	r6,zero
20024c68:	01d00934 	movhi	r7,16420
20024c6c:	002c3a00 	call	2002c3a0 <__muldf3>
20024c70:	000d883a 	mov	r6,zero
20024c74:	01d00934 	movhi	r7,16420
20024c78:	8009883a 	mov	r4,r16
20024c7c:	880b883a 	mov	r5,r17
20024c80:	102b883a 	mov	r21,r2
20024c84:	1827883a 	mov	r19,r3
20024c88:	002c3a00 	call	2002c3a0 <__muldf3>
20024c8c:	180b883a 	mov	r5,r3
20024c90:	1009883a 	mov	r4,r2
20024c94:	1821883a 	mov	r16,r3
20024c98:	1023883a 	mov	r17,r2
20024c9c:	002d3b40 	call	2002d3b4 <__fixdfsi>
20024ca0:	1009883a 	mov	r4,r2
20024ca4:	1029883a 	mov	r20,r2
20024ca8:	002d4340 	call	2002d434 <__floatsidf>
20024cac:	8809883a 	mov	r4,r17
20024cb0:	800b883a 	mov	r5,r16
20024cb4:	100d883a 	mov	r6,r2
20024cb8:	180f883a 	mov	r7,r3
20024cbc:	002cab80 	call	2002cab8 <__subdf3>
20024cc0:	a5000c04 	addi	r20,r20,48
20024cc4:	a80d883a 	mov	r6,r21
20024cc8:	980f883a 	mov	r7,r19
20024ccc:	1009883a 	mov	r4,r2
20024cd0:	180b883a 	mov	r5,r3
20024cd4:	95000005 	stb	r20,0(r18)
20024cd8:	1021883a 	mov	r16,r2
20024cdc:	1823883a 	mov	r17,r3
20024ce0:	002c2ac0 	call	2002c2ac <__ledf2>
20024ce4:	bdc00044 	addi	r23,r23,1
20024ce8:	800d883a 	mov	r6,r16
20024cec:	880f883a 	mov	r7,r17
20024cf0:	0009883a 	mov	r4,zero
20024cf4:	014ffc34 	movhi	r5,16368
20024cf8:	103fcf0e 	bge	r2,zero,20024c38 <__alt_data_end+0xfffe6c38>
20024cfc:	d8c01317 	ldw	r3,76(sp)
20024d00:	d8c00515 	stw	r3,20(sp)
20024d04:	d9400917 	ldw	r5,36(sp)
20024d08:	e009883a 	mov	r4,fp
20024d0c:	0026e7c0 	call	20026e7c <_Bfree>
20024d10:	d9000517 	ldw	r4,20(sp)
20024d14:	d9802317 	ldw	r6,140(sp)
20024d18:	d9c02517 	ldw	r7,148(sp)
20024d1c:	b8000005 	stb	zero,0(r23)
20024d20:	20800044 	addi	r2,r4,1
20024d24:	30800015 	stw	r2,0(r6)
20024d28:	3802aa26 	beq	r7,zero,200257d4 <_dtoa_r+0x1178>
20024d2c:	3dc00015 	stw	r23,0(r7)
20024d30:	d8800717 	ldw	r2,28(sp)
20024d34:	003e7906 	br	2002471c <__alt_data_end+0xfffe671c>
20024d38:	00800434 	movhi	r2,16
20024d3c:	10bfffc4 	addi	r2,r2,-1
20024d40:	88a2703a 	and	r17,r17,r2
20024d44:	883e851e 	bne	r17,zero,2002475c <__alt_data_end+0xfffe675c>
20024d48:	008800f4 	movhi	r2,8195
20024d4c:	10839404 	addi	r2,r2,3664
20024d50:	003e8406 	br	20024764 <__alt_data_end+0xfffe6764>
20024d54:	10c00204 	addi	r3,r2,8
20024d58:	003e8706 	br	20024778 <__alt_data_end+0xfffe6778>
20024d5c:	01400434 	movhi	r5,16
20024d60:	297fffc4 	addi	r5,r5,-1
20024d64:	994a703a 	and	r5,r19,r5
20024d68:	9009883a 	mov	r4,r18
20024d6c:	843f0044 	addi	r16,r16,-1023
20024d70:	294ffc34 	orhi	r5,r5,16368
20024d74:	dd800217 	ldw	r22,8(sp)
20024d78:	d8001115 	stw	zero,68(sp)
20024d7c:	003ea506 	br	20024814 <__alt_data_end+0xfffe6814>
20024d80:	008800f4 	movhi	r2,8195
20024d84:	10838b04 	addi	r2,r2,3628
20024d88:	003e6406 	br	2002471c <__alt_data_end+0xfffe671c>
20024d8c:	e0001115 	stw	zero,68(fp)
20024d90:	000b883a 	mov	r5,zero
20024d94:	e009883a 	mov	r4,fp
20024d98:	0026dd40 	call	20026dd4 <_Balloc>
20024d9c:	01bfffc4 	movi	r6,-1
20024da0:	01c00044 	movi	r7,1
20024da4:	d8800715 	stw	r2,28(sp)
20024da8:	d9800c15 	stw	r6,48(sp)
20024dac:	e0801015 	stw	r2,64(fp)
20024db0:	d8000315 	stw	zero,12(sp)
20024db4:	d9c00b15 	stw	r7,44(sp)
20024db8:	d9800615 	stw	r6,24(sp)
20024dbc:	d8002215 	stw	zero,136(sp)
20024dc0:	d8800117 	ldw	r2,4(sp)
20024dc4:	10008916 	blt	r2,zero,20024fec <_dtoa_r+0x990>
20024dc8:	d9000517 	ldw	r4,20(sp)
20024dcc:	00c00384 	movi	r3,14
20024dd0:	19008616 	blt	r3,r4,20024fec <_dtoa_r+0x990>
20024dd4:	200490fa 	slli	r2,r4,3
20024dd8:	00c800f4 	movhi	r3,8195
20024ddc:	d9802217 	ldw	r6,136(sp)
20024de0:	18c3b204 	addi	r3,r3,3784
20024de4:	1885883a 	add	r2,r3,r2
20024de8:	14000017 	ldw	r16,0(r2)
20024dec:	14400117 	ldw	r17,4(r2)
20024df0:	30016316 	blt	r6,zero,20025380 <_dtoa_r+0xd24>
20024df4:	800d883a 	mov	r6,r16
20024df8:	880f883a 	mov	r7,r17
20024dfc:	9009883a 	mov	r4,r18
20024e00:	980b883a 	mov	r5,r19
20024e04:	002b8600 	call	2002b860 <__divdf3>
20024e08:	180b883a 	mov	r5,r3
20024e0c:	1009883a 	mov	r4,r2
20024e10:	002d3b40 	call	2002d3b4 <__fixdfsi>
20024e14:	1009883a 	mov	r4,r2
20024e18:	102b883a 	mov	r21,r2
20024e1c:	002d4340 	call	2002d434 <__floatsidf>
20024e20:	800d883a 	mov	r6,r16
20024e24:	880f883a 	mov	r7,r17
20024e28:	1009883a 	mov	r4,r2
20024e2c:	180b883a 	mov	r5,r3
20024e30:	002c3a00 	call	2002c3a0 <__muldf3>
20024e34:	100d883a 	mov	r6,r2
20024e38:	180f883a 	mov	r7,r3
20024e3c:	9009883a 	mov	r4,r18
20024e40:	980b883a 	mov	r5,r19
20024e44:	002cab80 	call	2002cab8 <__subdf3>
20024e48:	d9c00717 	ldw	r7,28(sp)
20024e4c:	1009883a 	mov	r4,r2
20024e50:	a8800c04 	addi	r2,r21,48
20024e54:	38800005 	stb	r2,0(r7)
20024e58:	3dc00044 	addi	r23,r7,1
20024e5c:	d9c00617 	ldw	r7,24(sp)
20024e60:	01800044 	movi	r6,1
20024e64:	180b883a 	mov	r5,r3
20024e68:	2005883a 	mov	r2,r4
20024e6c:	39803826 	beq	r7,r6,20024f50 <_dtoa_r+0x8f4>
20024e70:	000d883a 	mov	r6,zero
20024e74:	01d00934 	movhi	r7,16420
20024e78:	002c3a00 	call	2002c3a0 <__muldf3>
20024e7c:	000d883a 	mov	r6,zero
20024e80:	000f883a 	mov	r7,zero
20024e84:	1009883a 	mov	r4,r2
20024e88:	180b883a 	mov	r5,r3
20024e8c:	1025883a 	mov	r18,r2
20024e90:	1827883a 	mov	r19,r3
20024e94:	002c1480 	call	2002c148 <__eqdf2>
20024e98:	103f9a26 	beq	r2,zero,20024d04 <__alt_data_end+0xfffe6d04>
20024e9c:	d9c00617 	ldw	r7,24(sp)
20024ea0:	d8c00717 	ldw	r3,28(sp)
20024ea4:	b829883a 	mov	r20,r23
20024ea8:	38bfffc4 	addi	r2,r7,-1
20024eac:	18ad883a 	add	r22,r3,r2
20024eb0:	00000a06 	br	20024edc <_dtoa_r+0x880>
20024eb4:	002c3a00 	call	2002c3a0 <__muldf3>
20024eb8:	000d883a 	mov	r6,zero
20024ebc:	000f883a 	mov	r7,zero
20024ec0:	1009883a 	mov	r4,r2
20024ec4:	180b883a 	mov	r5,r3
20024ec8:	1025883a 	mov	r18,r2
20024ecc:	1827883a 	mov	r19,r3
20024ed0:	b829883a 	mov	r20,r23
20024ed4:	002c1480 	call	2002c148 <__eqdf2>
20024ed8:	103f8a26 	beq	r2,zero,20024d04 <__alt_data_end+0xfffe6d04>
20024edc:	800d883a 	mov	r6,r16
20024ee0:	880f883a 	mov	r7,r17
20024ee4:	9009883a 	mov	r4,r18
20024ee8:	980b883a 	mov	r5,r19
20024eec:	002b8600 	call	2002b860 <__divdf3>
20024ef0:	180b883a 	mov	r5,r3
20024ef4:	1009883a 	mov	r4,r2
20024ef8:	002d3b40 	call	2002d3b4 <__fixdfsi>
20024efc:	1009883a 	mov	r4,r2
20024f00:	102b883a 	mov	r21,r2
20024f04:	002d4340 	call	2002d434 <__floatsidf>
20024f08:	800d883a 	mov	r6,r16
20024f0c:	880f883a 	mov	r7,r17
20024f10:	1009883a 	mov	r4,r2
20024f14:	180b883a 	mov	r5,r3
20024f18:	002c3a00 	call	2002c3a0 <__muldf3>
20024f1c:	100d883a 	mov	r6,r2
20024f20:	180f883a 	mov	r7,r3
20024f24:	9009883a 	mov	r4,r18
20024f28:	980b883a 	mov	r5,r19
20024f2c:	002cab80 	call	2002cab8 <__subdf3>
20024f30:	aa000c04 	addi	r8,r21,48
20024f34:	a2000005 	stb	r8,0(r20)
20024f38:	000d883a 	mov	r6,zero
20024f3c:	01d00934 	movhi	r7,16420
20024f40:	1009883a 	mov	r4,r2
20024f44:	180b883a 	mov	r5,r3
20024f48:	a5c00044 	addi	r23,r20,1
20024f4c:	b53fd91e 	bne	r22,r20,20024eb4 <__alt_data_end+0xfffe6eb4>
20024f50:	100d883a 	mov	r6,r2
20024f54:	180f883a 	mov	r7,r3
20024f58:	1009883a 	mov	r4,r2
20024f5c:	180b883a 	mov	r5,r3
20024f60:	002afb40 	call	2002afb4 <__adddf3>
20024f64:	100d883a 	mov	r6,r2
20024f68:	180f883a 	mov	r7,r3
20024f6c:	8009883a 	mov	r4,r16
20024f70:	880b883a 	mov	r5,r17
20024f74:	1027883a 	mov	r19,r2
20024f78:	1825883a 	mov	r18,r3
20024f7c:	002c2ac0 	call	2002c2ac <__ledf2>
20024f80:	10000816 	blt	r2,zero,20024fa4 <_dtoa_r+0x948>
20024f84:	980d883a 	mov	r6,r19
20024f88:	900f883a 	mov	r7,r18
20024f8c:	8009883a 	mov	r4,r16
20024f90:	880b883a 	mov	r5,r17
20024f94:	002c1480 	call	2002c148 <__eqdf2>
20024f98:	103f5a1e 	bne	r2,zero,20024d04 <__alt_data_end+0xfffe6d04>
20024f9c:	ad40004c 	andi	r21,r21,1
20024fa0:	a83f5826 	beq	r21,zero,20024d04 <__alt_data_end+0xfffe6d04>
20024fa4:	bd3fffc3 	ldbu	r20,-1(r23)
20024fa8:	b8bfffc4 	addi	r2,r23,-1
20024fac:	1007883a 	mov	r3,r2
20024fb0:	01400e44 	movi	r5,57
20024fb4:	d9800717 	ldw	r6,28(sp)
20024fb8:	00000506 	br	20024fd0 <_dtoa_r+0x974>
20024fbc:	18ffffc4 	addi	r3,r3,-1
20024fc0:	11824726 	beq	r2,r6,200258e0 <_dtoa_r+0x1284>
20024fc4:	1d000003 	ldbu	r20,0(r3)
20024fc8:	102f883a 	mov	r23,r2
20024fcc:	10bfffc4 	addi	r2,r2,-1
20024fd0:	a1003fcc 	andi	r4,r20,255
20024fd4:	2100201c 	xori	r4,r4,128
20024fd8:	213fe004 	addi	r4,r4,-128
20024fdc:	217ff726 	beq	r4,r5,20024fbc <__alt_data_end+0xfffe6fbc>
20024fe0:	a2000044 	addi	r8,r20,1
20024fe4:	12000005 	stb	r8,0(r2)
20024fe8:	003f4606 	br	20024d04 <__alt_data_end+0xfffe6d04>
20024fec:	d9000b17 	ldw	r4,44(sp)
20024ff0:	2000c826 	beq	r4,zero,20025314 <_dtoa_r+0xcb8>
20024ff4:	d9800317 	ldw	r6,12(sp)
20024ff8:	00c00044 	movi	r3,1
20024ffc:	1980f90e 	bge	r3,r6,200253e4 <_dtoa_r+0xd88>
20025000:	d8800617 	ldw	r2,24(sp)
20025004:	d8c00a17 	ldw	r3,40(sp)
20025008:	157fffc4 	addi	r21,r2,-1
2002500c:	1d41f316 	blt	r3,r21,200257dc <_dtoa_r+0x1180>
20025010:	1d6bc83a 	sub	r21,r3,r21
20025014:	d9c00617 	ldw	r7,24(sp)
20025018:	3802aa16 	blt	r7,zero,20025ac4 <_dtoa_r+0x1468>
2002501c:	dd000817 	ldw	r20,32(sp)
20025020:	d8800617 	ldw	r2,24(sp)
20025024:	d8c00817 	ldw	r3,32(sp)
20025028:	01400044 	movi	r5,1
2002502c:	e009883a 	mov	r4,fp
20025030:	1887883a 	add	r3,r3,r2
20025034:	d8c00815 	stw	r3,32(sp)
20025038:	b0ad883a 	add	r22,r22,r2
2002503c:	00271e00 	call	200271e0 <__i2b>
20025040:	1023883a 	mov	r17,r2
20025044:	a0000826 	beq	r20,zero,20025068 <_dtoa_r+0xa0c>
20025048:	0580070e 	bge	zero,r22,20025068 <_dtoa_r+0xa0c>
2002504c:	a005883a 	mov	r2,r20
20025050:	b500b916 	blt	r22,r20,20025338 <_dtoa_r+0xcdc>
20025054:	d9000817 	ldw	r4,32(sp)
20025058:	a0a9c83a 	sub	r20,r20,r2
2002505c:	b0adc83a 	sub	r22,r22,r2
20025060:	2089c83a 	sub	r4,r4,r2
20025064:	d9000815 	stw	r4,32(sp)
20025068:	d9800a17 	ldw	r6,40(sp)
2002506c:	0181810e 	bge	zero,r6,20025674 <_dtoa_r+0x1018>
20025070:	d9c00b17 	ldw	r7,44(sp)
20025074:	3800b326 	beq	r7,zero,20025344 <_dtoa_r+0xce8>
20025078:	a800b226 	beq	r21,zero,20025344 <_dtoa_r+0xce8>
2002507c:	880b883a 	mov	r5,r17
20025080:	a80d883a 	mov	r6,r21
20025084:	e009883a 	mov	r4,fp
20025088:	00274140 	call	20027414 <__pow5mult>
2002508c:	d9800917 	ldw	r6,36(sp)
20025090:	100b883a 	mov	r5,r2
20025094:	e009883a 	mov	r4,fp
20025098:	1023883a 	mov	r17,r2
2002509c:	002721c0 	call	2002721c <__multiply>
200250a0:	1021883a 	mov	r16,r2
200250a4:	d8800a17 	ldw	r2,40(sp)
200250a8:	d9400917 	ldw	r5,36(sp)
200250ac:	e009883a 	mov	r4,fp
200250b0:	1545c83a 	sub	r2,r2,r21
200250b4:	d8800a15 	stw	r2,40(sp)
200250b8:	0026e7c0 	call	20026e7c <_Bfree>
200250bc:	d8c00a17 	ldw	r3,40(sp)
200250c0:	18009f1e 	bne	r3,zero,20025340 <_dtoa_r+0xce4>
200250c4:	05c00044 	movi	r23,1
200250c8:	e009883a 	mov	r4,fp
200250cc:	b80b883a 	mov	r5,r23
200250d0:	00271e00 	call	200271e0 <__i2b>
200250d4:	d9000d17 	ldw	r4,52(sp)
200250d8:	102b883a 	mov	r21,r2
200250dc:	2000ce26 	beq	r4,zero,20025418 <_dtoa_r+0xdbc>
200250e0:	200d883a 	mov	r6,r4
200250e4:	100b883a 	mov	r5,r2
200250e8:	e009883a 	mov	r4,fp
200250ec:	00274140 	call	20027414 <__pow5mult>
200250f0:	d9800317 	ldw	r6,12(sp)
200250f4:	102b883a 	mov	r21,r2
200250f8:	b981810e 	bge	r23,r6,20025700 <_dtoa_r+0x10a4>
200250fc:	0027883a 	mov	r19,zero
20025100:	a8800417 	ldw	r2,16(r21)
20025104:	05c00804 	movi	r23,32
20025108:	10800104 	addi	r2,r2,4
2002510c:	1085883a 	add	r2,r2,r2
20025110:	1085883a 	add	r2,r2,r2
20025114:	a885883a 	add	r2,r21,r2
20025118:	11000017 	ldw	r4,0(r2)
2002511c:	00270c80 	call	200270c8 <__hi0bits>
20025120:	b885c83a 	sub	r2,r23,r2
20025124:	1585883a 	add	r2,r2,r22
20025128:	108007cc 	andi	r2,r2,31
2002512c:	1000b326 	beq	r2,zero,200253fc <_dtoa_r+0xda0>
20025130:	00c00804 	movi	r3,32
20025134:	1887c83a 	sub	r3,r3,r2
20025138:	01000104 	movi	r4,4
2002513c:	20c2cd0e 	bge	r4,r3,20025c74 <_dtoa_r+0x1618>
20025140:	00c00704 	movi	r3,28
20025144:	1885c83a 	sub	r2,r3,r2
20025148:	d8c00817 	ldw	r3,32(sp)
2002514c:	a0a9883a 	add	r20,r20,r2
20025150:	b0ad883a 	add	r22,r22,r2
20025154:	1887883a 	add	r3,r3,r2
20025158:	d8c00815 	stw	r3,32(sp)
2002515c:	d9800817 	ldw	r6,32(sp)
20025160:	0180040e 	bge	zero,r6,20025174 <_dtoa_r+0xb18>
20025164:	800b883a 	mov	r5,r16
20025168:	e009883a 	mov	r4,fp
2002516c:	00275540 	call	20027554 <__lshift>
20025170:	1021883a 	mov	r16,r2
20025174:	0580050e 	bge	zero,r22,2002518c <_dtoa_r+0xb30>
20025178:	a80b883a 	mov	r5,r21
2002517c:	b00d883a 	mov	r6,r22
20025180:	e009883a 	mov	r4,fp
20025184:	00275540 	call	20027554 <__lshift>
20025188:	102b883a 	mov	r21,r2
2002518c:	d9c00e17 	ldw	r7,56(sp)
20025190:	3801211e 	bne	r7,zero,20025618 <_dtoa_r+0xfbc>
20025194:	d9800617 	ldw	r6,24(sp)
20025198:	0181380e 	bge	zero,r6,2002567c <_dtoa_r+0x1020>
2002519c:	d8c00b17 	ldw	r3,44(sp)
200251a0:	1800ab1e 	bne	r3,zero,20025450 <_dtoa_r+0xdf4>
200251a4:	dc800717 	ldw	r18,28(sp)
200251a8:	dcc00617 	ldw	r19,24(sp)
200251ac:	9029883a 	mov	r20,r18
200251b0:	00000206 	br	200251bc <_dtoa_r+0xb60>
200251b4:	0026ea40 	call	20026ea4 <__multadd>
200251b8:	1021883a 	mov	r16,r2
200251bc:	a80b883a 	mov	r5,r21
200251c0:	8009883a 	mov	r4,r16
200251c4:	002445c0 	call	2002445c <quorem>
200251c8:	10800c04 	addi	r2,r2,48
200251cc:	90800005 	stb	r2,0(r18)
200251d0:	94800044 	addi	r18,r18,1
200251d4:	9507c83a 	sub	r3,r18,r20
200251d8:	000f883a 	mov	r7,zero
200251dc:	01800284 	movi	r6,10
200251e0:	800b883a 	mov	r5,r16
200251e4:	e009883a 	mov	r4,fp
200251e8:	1cfff216 	blt	r3,r19,200251b4 <__alt_data_end+0xfffe71b4>
200251ec:	1011883a 	mov	r8,r2
200251f0:	d8800617 	ldw	r2,24(sp)
200251f4:	0082370e 	bge	zero,r2,20025ad4 <_dtoa_r+0x1478>
200251f8:	d9000717 	ldw	r4,28(sp)
200251fc:	0025883a 	mov	r18,zero
20025200:	20af883a 	add	r23,r4,r2
20025204:	01800044 	movi	r6,1
20025208:	800b883a 	mov	r5,r16
2002520c:	e009883a 	mov	r4,fp
20025210:	da001715 	stw	r8,92(sp)
20025214:	00275540 	call	20027554 <__lshift>
20025218:	a80b883a 	mov	r5,r21
2002521c:	1009883a 	mov	r4,r2
20025220:	d8800915 	stw	r2,36(sp)
20025224:	002769c0 	call	2002769c <__mcmp>
20025228:	da001717 	ldw	r8,92(sp)
2002522c:	0081800e 	bge	zero,r2,20025830 <_dtoa_r+0x11d4>
20025230:	b93fffc3 	ldbu	r4,-1(r23)
20025234:	b8bfffc4 	addi	r2,r23,-1
20025238:	1007883a 	mov	r3,r2
2002523c:	01800e44 	movi	r6,57
20025240:	d9c00717 	ldw	r7,28(sp)
20025244:	00000506 	br	2002525c <_dtoa_r+0xc00>
20025248:	18ffffc4 	addi	r3,r3,-1
2002524c:	11c12326 	beq	r2,r7,200256dc <_dtoa_r+0x1080>
20025250:	19000003 	ldbu	r4,0(r3)
20025254:	102f883a 	mov	r23,r2
20025258:	10bfffc4 	addi	r2,r2,-1
2002525c:	21403fcc 	andi	r5,r4,255
20025260:	2940201c 	xori	r5,r5,128
20025264:	297fe004 	addi	r5,r5,-128
20025268:	29bff726 	beq	r5,r6,20025248 <__alt_data_end+0xfffe7248>
2002526c:	21000044 	addi	r4,r4,1
20025270:	11000005 	stb	r4,0(r2)
20025274:	a80b883a 	mov	r5,r21
20025278:	e009883a 	mov	r4,fp
2002527c:	0026e7c0 	call	20026e7c <_Bfree>
20025280:	883ea026 	beq	r17,zero,20024d04 <__alt_data_end+0xfffe6d04>
20025284:	90000426 	beq	r18,zero,20025298 <_dtoa_r+0xc3c>
20025288:	94400326 	beq	r18,r17,20025298 <_dtoa_r+0xc3c>
2002528c:	900b883a 	mov	r5,r18
20025290:	e009883a 	mov	r4,fp
20025294:	0026e7c0 	call	20026e7c <_Bfree>
20025298:	880b883a 	mov	r5,r17
2002529c:	e009883a 	mov	r4,fp
200252a0:	0026e7c0 	call	20026e7c <_Bfree>
200252a4:	003e9706 	br	20024d04 <__alt_data_end+0xfffe6d04>
200252a8:	01800044 	movi	r6,1
200252ac:	d9800e15 	stw	r6,56(sp)
200252b0:	003d9606 	br	2002490c <__alt_data_end+0xfffe690c>
200252b4:	d8800817 	ldw	r2,32(sp)
200252b8:	d8c00517 	ldw	r3,20(sp)
200252bc:	d8000d15 	stw	zero,52(sp)
200252c0:	10c5c83a 	sub	r2,r2,r3
200252c4:	00c9c83a 	sub	r4,zero,r3
200252c8:	d8800815 	stw	r2,32(sp)
200252cc:	d9000a15 	stw	r4,40(sp)
200252d0:	003d9706 	br	20024930 <__alt_data_end+0xfffe6930>
200252d4:	05adc83a 	sub	r22,zero,r22
200252d8:	dd800815 	stw	r22,32(sp)
200252dc:	002d883a 	mov	r22,zero
200252e0:	003d8e06 	br	2002491c <__alt_data_end+0xfffe691c>
200252e4:	d9000517 	ldw	r4,20(sp)
200252e8:	002d4340 	call	2002d434 <__floatsidf>
200252ec:	100d883a 	mov	r6,r2
200252f0:	180f883a 	mov	r7,r3
200252f4:	a009883a 	mov	r4,r20
200252f8:	880b883a 	mov	r5,r17
200252fc:	002c1480 	call	2002c148 <__eqdf2>
20025300:	103d7126 	beq	r2,zero,200248c8 <__alt_data_end+0xfffe68c8>
20025304:	d9c00517 	ldw	r7,20(sp)
20025308:	39ffffc4 	addi	r7,r7,-1
2002530c:	d9c00515 	stw	r7,20(sp)
20025310:	003d6d06 	br	200248c8 <__alt_data_end+0xfffe68c8>
20025314:	dd400a17 	ldw	r21,40(sp)
20025318:	dd000817 	ldw	r20,32(sp)
2002531c:	0023883a 	mov	r17,zero
20025320:	003f4806 	br	20025044 <__alt_data_end+0xfffe7044>
20025324:	10e3c83a 	sub	r17,r2,r3
20025328:	9448983a 	sll	r4,r18,r17
2002532c:	003d3206 	br	200247f8 <__alt_data_end+0xfffe67f8>
20025330:	d8000e15 	stw	zero,56(sp)
20025334:	003d7506 	br	2002490c <__alt_data_end+0xfffe690c>
20025338:	b005883a 	mov	r2,r22
2002533c:	003f4506 	br	20025054 <__alt_data_end+0xfffe7054>
20025340:	dc000915 	stw	r16,36(sp)
20025344:	d9800a17 	ldw	r6,40(sp)
20025348:	d9400917 	ldw	r5,36(sp)
2002534c:	e009883a 	mov	r4,fp
20025350:	00274140 	call	20027414 <__pow5mult>
20025354:	1021883a 	mov	r16,r2
20025358:	003f5a06 	br	200250c4 <__alt_data_end+0xfffe70c4>
2002535c:	01c00044 	movi	r7,1
20025360:	d9c00b15 	stw	r7,44(sp)
20025364:	d8802217 	ldw	r2,136(sp)
20025368:	0081280e 	bge	zero,r2,2002580c <_dtoa_r+0x11b0>
2002536c:	100d883a 	mov	r6,r2
20025370:	1021883a 	mov	r16,r2
20025374:	d8800c15 	stw	r2,48(sp)
20025378:	d8800615 	stw	r2,24(sp)
2002537c:	003d8806 	br	200249a0 <__alt_data_end+0xfffe69a0>
20025380:	d8800617 	ldw	r2,24(sp)
20025384:	00be9b16 	blt	zero,r2,20024df4 <__alt_data_end+0xfffe6df4>
20025388:	10010f1e 	bne	r2,zero,200257c8 <_dtoa_r+0x116c>
2002538c:	880b883a 	mov	r5,r17
20025390:	000d883a 	mov	r6,zero
20025394:	01d00534 	movhi	r7,16404
20025398:	8009883a 	mov	r4,r16
2002539c:	002c3a00 	call	2002c3a0 <__muldf3>
200253a0:	900d883a 	mov	r6,r18
200253a4:	980f883a 	mov	r7,r19
200253a8:	1009883a 	mov	r4,r2
200253ac:	180b883a 	mov	r5,r3
200253b0:	002c1d00 	call	2002c1d0 <__gedf2>
200253b4:	002b883a 	mov	r21,zero
200253b8:	0023883a 	mov	r17,zero
200253bc:	1000bf16 	blt	r2,zero,200256bc <_dtoa_r+0x1060>
200253c0:	d9802217 	ldw	r6,136(sp)
200253c4:	ddc00717 	ldw	r23,28(sp)
200253c8:	018c303a 	nor	r6,zero,r6
200253cc:	d9800515 	stw	r6,20(sp)
200253d0:	a80b883a 	mov	r5,r21
200253d4:	e009883a 	mov	r4,fp
200253d8:	0026e7c0 	call	20026e7c <_Bfree>
200253dc:	883e4926 	beq	r17,zero,20024d04 <__alt_data_end+0xfffe6d04>
200253e0:	003fad06 	br	20025298 <__alt_data_end+0xfffe7298>
200253e4:	d9c01117 	ldw	r7,68(sp)
200253e8:	3801bc26 	beq	r7,zero,20025adc <_dtoa_r+0x1480>
200253ec:	10810cc4 	addi	r2,r2,1075
200253f0:	dd400a17 	ldw	r21,40(sp)
200253f4:	dd000817 	ldw	r20,32(sp)
200253f8:	003f0a06 	br	20025024 <__alt_data_end+0xfffe7024>
200253fc:	00800704 	movi	r2,28
20025400:	d9000817 	ldw	r4,32(sp)
20025404:	a0a9883a 	add	r20,r20,r2
20025408:	b0ad883a 	add	r22,r22,r2
2002540c:	2089883a 	add	r4,r4,r2
20025410:	d9000815 	stw	r4,32(sp)
20025414:	003f5106 	br	2002515c <__alt_data_end+0xfffe715c>
20025418:	d8c00317 	ldw	r3,12(sp)
2002541c:	b8c1fc0e 	bge	r23,r3,20025c10 <_dtoa_r+0x15b4>
20025420:	0027883a 	mov	r19,zero
20025424:	b805883a 	mov	r2,r23
20025428:	003f3e06 	br	20025124 <__alt_data_end+0xfffe7124>
2002542c:	880b883a 	mov	r5,r17
20025430:	e009883a 	mov	r4,fp
20025434:	000f883a 	mov	r7,zero
20025438:	01800284 	movi	r6,10
2002543c:	0026ea40 	call	20026ea4 <__multadd>
20025440:	d9000c17 	ldw	r4,48(sp)
20025444:	1023883a 	mov	r17,r2
20025448:	0102040e 	bge	zero,r4,20025c5c <_dtoa_r+0x1600>
2002544c:	d9000615 	stw	r4,24(sp)
20025450:	0500050e 	bge	zero,r20,20025468 <_dtoa_r+0xe0c>
20025454:	880b883a 	mov	r5,r17
20025458:	a00d883a 	mov	r6,r20
2002545c:	e009883a 	mov	r4,fp
20025460:	00275540 	call	20027554 <__lshift>
20025464:	1023883a 	mov	r17,r2
20025468:	9801241e 	bne	r19,zero,200258fc <_dtoa_r+0x12a0>
2002546c:	8829883a 	mov	r20,r17
20025470:	d9000617 	ldw	r4,24(sp)
20025474:	dcc00717 	ldw	r19,28(sp)
20025478:	9480004c 	andi	r18,r18,1
2002547c:	20bfffc4 	addi	r2,r4,-1
20025480:	9885883a 	add	r2,r19,r2
20025484:	d8800415 	stw	r2,16(sp)
20025488:	dc800615 	stw	r18,24(sp)
2002548c:	a80b883a 	mov	r5,r21
20025490:	8009883a 	mov	r4,r16
20025494:	002445c0 	call	2002445c <quorem>
20025498:	880b883a 	mov	r5,r17
2002549c:	8009883a 	mov	r4,r16
200254a0:	102f883a 	mov	r23,r2
200254a4:	002769c0 	call	2002769c <__mcmp>
200254a8:	a80b883a 	mov	r5,r21
200254ac:	a00d883a 	mov	r6,r20
200254b0:	e009883a 	mov	r4,fp
200254b4:	102d883a 	mov	r22,r2
200254b8:	00276fc0 	call	200276fc <__mdiff>
200254bc:	1007883a 	mov	r3,r2
200254c0:	10800317 	ldw	r2,12(r2)
200254c4:	bc800c04 	addi	r18,r23,48
200254c8:	180b883a 	mov	r5,r3
200254cc:	10004e1e 	bne	r2,zero,20025608 <_dtoa_r+0xfac>
200254d0:	8009883a 	mov	r4,r16
200254d4:	d8c01615 	stw	r3,88(sp)
200254d8:	002769c0 	call	2002769c <__mcmp>
200254dc:	d8c01617 	ldw	r3,88(sp)
200254e0:	e009883a 	mov	r4,fp
200254e4:	d8801615 	stw	r2,88(sp)
200254e8:	180b883a 	mov	r5,r3
200254ec:	0026e7c0 	call	20026e7c <_Bfree>
200254f0:	d8801617 	ldw	r2,88(sp)
200254f4:	1000041e 	bne	r2,zero,20025508 <_dtoa_r+0xeac>
200254f8:	d9800317 	ldw	r6,12(sp)
200254fc:	3000021e 	bne	r6,zero,20025508 <_dtoa_r+0xeac>
20025500:	d8c00617 	ldw	r3,24(sp)
20025504:	18003726 	beq	r3,zero,200255e4 <_dtoa_r+0xf88>
20025508:	b0002016 	blt	r22,zero,2002558c <_dtoa_r+0xf30>
2002550c:	b000041e 	bne	r22,zero,20025520 <_dtoa_r+0xec4>
20025510:	d9000317 	ldw	r4,12(sp)
20025514:	2000021e 	bne	r4,zero,20025520 <_dtoa_r+0xec4>
20025518:	d8c00617 	ldw	r3,24(sp)
2002551c:	18001b26 	beq	r3,zero,2002558c <_dtoa_r+0xf30>
20025520:	00810716 	blt	zero,r2,20025940 <_dtoa_r+0x12e4>
20025524:	d8c00417 	ldw	r3,16(sp)
20025528:	9d800044 	addi	r22,r19,1
2002552c:	9c800005 	stb	r18,0(r19)
20025530:	b02f883a 	mov	r23,r22
20025534:	98c10626 	beq	r19,r3,20025950 <_dtoa_r+0x12f4>
20025538:	800b883a 	mov	r5,r16
2002553c:	000f883a 	mov	r7,zero
20025540:	01800284 	movi	r6,10
20025544:	e009883a 	mov	r4,fp
20025548:	0026ea40 	call	20026ea4 <__multadd>
2002554c:	1021883a 	mov	r16,r2
20025550:	000f883a 	mov	r7,zero
20025554:	01800284 	movi	r6,10
20025558:	880b883a 	mov	r5,r17
2002555c:	e009883a 	mov	r4,fp
20025560:	8d002526 	beq	r17,r20,200255f8 <_dtoa_r+0xf9c>
20025564:	0026ea40 	call	20026ea4 <__multadd>
20025568:	a00b883a 	mov	r5,r20
2002556c:	000f883a 	mov	r7,zero
20025570:	01800284 	movi	r6,10
20025574:	e009883a 	mov	r4,fp
20025578:	1023883a 	mov	r17,r2
2002557c:	0026ea40 	call	20026ea4 <__multadd>
20025580:	1029883a 	mov	r20,r2
20025584:	b027883a 	mov	r19,r22
20025588:	003fc006 	br	2002548c <__alt_data_end+0xfffe748c>
2002558c:	9011883a 	mov	r8,r18
20025590:	00800e0e 	bge	zero,r2,200255cc <_dtoa_r+0xf70>
20025594:	800b883a 	mov	r5,r16
20025598:	01800044 	movi	r6,1
2002559c:	e009883a 	mov	r4,fp
200255a0:	da001715 	stw	r8,92(sp)
200255a4:	00275540 	call	20027554 <__lshift>
200255a8:	a80b883a 	mov	r5,r21
200255ac:	1009883a 	mov	r4,r2
200255b0:	1021883a 	mov	r16,r2
200255b4:	002769c0 	call	2002769c <__mcmp>
200255b8:	da001717 	ldw	r8,92(sp)
200255bc:	0081960e 	bge	zero,r2,20025c18 <_dtoa_r+0x15bc>
200255c0:	00800e44 	movi	r2,57
200255c4:	40817026 	beq	r8,r2,20025b88 <_dtoa_r+0x152c>
200255c8:	ba000c44 	addi	r8,r23,49
200255cc:	8825883a 	mov	r18,r17
200255d0:	9dc00044 	addi	r23,r19,1
200255d4:	9a000005 	stb	r8,0(r19)
200255d8:	a023883a 	mov	r17,r20
200255dc:	dc000915 	stw	r16,36(sp)
200255e0:	003f2406 	br	20025274 <__alt_data_end+0xfffe7274>
200255e4:	00800e44 	movi	r2,57
200255e8:	9011883a 	mov	r8,r18
200255ec:	90816626 	beq	r18,r2,20025b88 <_dtoa_r+0x152c>
200255f0:	05bff516 	blt	zero,r22,200255c8 <__alt_data_end+0xfffe75c8>
200255f4:	003ff506 	br	200255cc <__alt_data_end+0xfffe75cc>
200255f8:	0026ea40 	call	20026ea4 <__multadd>
200255fc:	1023883a 	mov	r17,r2
20025600:	1029883a 	mov	r20,r2
20025604:	003fdf06 	br	20025584 <__alt_data_end+0xfffe7584>
20025608:	e009883a 	mov	r4,fp
2002560c:	0026e7c0 	call	20026e7c <_Bfree>
20025610:	00800044 	movi	r2,1
20025614:	003fbc06 	br	20025508 <__alt_data_end+0xfffe7508>
20025618:	a80b883a 	mov	r5,r21
2002561c:	8009883a 	mov	r4,r16
20025620:	002769c0 	call	2002769c <__mcmp>
20025624:	103edb0e 	bge	r2,zero,20025194 <__alt_data_end+0xfffe7194>
20025628:	800b883a 	mov	r5,r16
2002562c:	000f883a 	mov	r7,zero
20025630:	01800284 	movi	r6,10
20025634:	e009883a 	mov	r4,fp
20025638:	0026ea40 	call	20026ea4 <__multadd>
2002563c:	1021883a 	mov	r16,r2
20025640:	d8800517 	ldw	r2,20(sp)
20025644:	d8c00b17 	ldw	r3,44(sp)
20025648:	10bfffc4 	addi	r2,r2,-1
2002564c:	d8800515 	stw	r2,20(sp)
20025650:	183f761e 	bne	r3,zero,2002542c <__alt_data_end+0xfffe742c>
20025654:	d9000c17 	ldw	r4,48(sp)
20025658:	0101730e 	bge	zero,r4,20025c28 <_dtoa_r+0x15cc>
2002565c:	d9000615 	stw	r4,24(sp)
20025660:	003ed006 	br	200251a4 <__alt_data_end+0xfffe71a4>
20025664:	00800084 	movi	r2,2
20025668:	3081861e 	bne	r6,r2,20025c84 <_dtoa_r+0x1628>
2002566c:	d8000b15 	stw	zero,44(sp)
20025670:	003f3c06 	br	20025364 <__alt_data_end+0xfffe7364>
20025674:	dc000917 	ldw	r16,36(sp)
20025678:	003e9206 	br	200250c4 <__alt_data_end+0xfffe70c4>
2002567c:	d9c00317 	ldw	r7,12(sp)
20025680:	00800084 	movi	r2,2
20025684:	11fec50e 	bge	r2,r7,2002519c <__alt_data_end+0xfffe719c>
20025688:	d9000617 	ldw	r4,24(sp)
2002568c:	20013c1e 	bne	r4,zero,20025b80 <_dtoa_r+0x1524>
20025690:	a80b883a 	mov	r5,r21
20025694:	000f883a 	mov	r7,zero
20025698:	01800144 	movi	r6,5
2002569c:	e009883a 	mov	r4,fp
200256a0:	0026ea40 	call	20026ea4 <__multadd>
200256a4:	100b883a 	mov	r5,r2
200256a8:	8009883a 	mov	r4,r16
200256ac:	102b883a 	mov	r21,r2
200256b0:	002769c0 	call	2002769c <__mcmp>
200256b4:	dc000915 	stw	r16,36(sp)
200256b8:	00bf410e 	bge	zero,r2,200253c0 <__alt_data_end+0xfffe73c0>
200256bc:	d9c00717 	ldw	r7,28(sp)
200256c0:	00800c44 	movi	r2,49
200256c4:	38800005 	stb	r2,0(r7)
200256c8:	d8800517 	ldw	r2,20(sp)
200256cc:	3dc00044 	addi	r23,r7,1
200256d0:	10800044 	addi	r2,r2,1
200256d4:	d8800515 	stw	r2,20(sp)
200256d8:	003f3d06 	br	200253d0 <__alt_data_end+0xfffe73d0>
200256dc:	d9800517 	ldw	r6,20(sp)
200256e0:	d9c00717 	ldw	r7,28(sp)
200256e4:	00800c44 	movi	r2,49
200256e8:	31800044 	addi	r6,r6,1
200256ec:	d9800515 	stw	r6,20(sp)
200256f0:	38800005 	stb	r2,0(r7)
200256f4:	003edf06 	br	20025274 <__alt_data_end+0xfffe7274>
200256f8:	d8000b15 	stw	zero,44(sp)
200256fc:	003c9f06 	br	2002497c <__alt_data_end+0xfffe697c>
20025700:	903e7e1e 	bne	r18,zero,200250fc <__alt_data_end+0xfffe70fc>
20025704:	00800434 	movhi	r2,16
20025708:	10bfffc4 	addi	r2,r2,-1
2002570c:	9884703a 	and	r2,r19,r2
20025710:	1000ea1e 	bne	r2,zero,20025abc <_dtoa_r+0x1460>
20025714:	9cdffc2c 	andhi	r19,r19,32752
20025718:	9800e826 	beq	r19,zero,20025abc <_dtoa_r+0x1460>
2002571c:	d9c00817 	ldw	r7,32(sp)
20025720:	b5800044 	addi	r22,r22,1
20025724:	04c00044 	movi	r19,1
20025728:	39c00044 	addi	r7,r7,1
2002572c:	d9c00815 	stw	r7,32(sp)
20025730:	d8800d17 	ldw	r2,52(sp)
20025734:	103e721e 	bne	r2,zero,20025100 <__alt_data_end+0xfffe7100>
20025738:	00800044 	movi	r2,1
2002573c:	003e7906 	br	20025124 <__alt_data_end+0xfffe7124>
20025740:	8009883a 	mov	r4,r16
20025744:	002d4340 	call	2002d434 <__floatsidf>
20025748:	d9800f17 	ldw	r6,60(sp)
2002574c:	d9c01017 	ldw	r7,64(sp)
20025750:	1009883a 	mov	r4,r2
20025754:	180b883a 	mov	r5,r3
20025758:	002c3a00 	call	2002c3a0 <__muldf3>
2002575c:	000d883a 	mov	r6,zero
20025760:	01d00734 	movhi	r7,16412
20025764:	1009883a 	mov	r4,r2
20025768:	180b883a 	mov	r5,r3
2002576c:	002afb40 	call	2002afb4 <__adddf3>
20025770:	047f3034 	movhi	r17,64704
20025774:	1021883a 	mov	r16,r2
20025778:	1c63883a 	add	r17,r3,r17
2002577c:	d9000f17 	ldw	r4,60(sp)
20025780:	d9401017 	ldw	r5,64(sp)
20025784:	000d883a 	mov	r6,zero
20025788:	01d00534 	movhi	r7,16404
2002578c:	002cab80 	call	2002cab8 <__subdf3>
20025790:	800d883a 	mov	r6,r16
20025794:	880f883a 	mov	r7,r17
20025798:	1009883a 	mov	r4,r2
2002579c:	180b883a 	mov	r5,r3
200257a0:	102b883a 	mov	r21,r2
200257a4:	1829883a 	mov	r20,r3
200257a8:	002c1d00 	call	2002c1d0 <__gedf2>
200257ac:	00806c16 	blt	zero,r2,20025960 <_dtoa_r+0x1304>
200257b0:	89e0003c 	xorhi	r7,r17,32768
200257b4:	800d883a 	mov	r6,r16
200257b8:	a809883a 	mov	r4,r21
200257bc:	a00b883a 	mov	r5,r20
200257c0:	002c2ac0 	call	2002c2ac <__ledf2>
200257c4:	103d7e0e 	bge	r2,zero,20024dc0 <__alt_data_end+0xfffe6dc0>
200257c8:	002b883a 	mov	r21,zero
200257cc:	0023883a 	mov	r17,zero
200257d0:	003efb06 	br	200253c0 <__alt_data_end+0xfffe73c0>
200257d4:	d8800717 	ldw	r2,28(sp)
200257d8:	003bd006 	br	2002471c <__alt_data_end+0xfffe671c>
200257dc:	d9000a17 	ldw	r4,40(sp)
200257e0:	d9800d17 	ldw	r6,52(sp)
200257e4:	dd400a15 	stw	r21,40(sp)
200257e8:	a905c83a 	sub	r2,r21,r4
200257ec:	308d883a 	add	r6,r6,r2
200257f0:	d9800d15 	stw	r6,52(sp)
200257f4:	002b883a 	mov	r21,zero
200257f8:	003e0606 	br	20025014 <__alt_data_end+0xfffe7014>
200257fc:	9023883a 	mov	r17,r18
20025800:	9829883a 	mov	r20,r19
20025804:	04000084 	movi	r16,2
20025808:	003c9206 	br	20024a54 <__alt_data_end+0xfffe6a54>
2002580c:	04000044 	movi	r16,1
20025810:	dc000c15 	stw	r16,48(sp)
20025814:	dc000615 	stw	r16,24(sp)
20025818:	dc002215 	stw	r16,136(sp)
2002581c:	e0001115 	stw	zero,68(fp)
20025820:	000b883a 	mov	r5,zero
20025824:	003c6906 	br	200249cc <__alt_data_end+0xfffe69cc>
20025828:	3021883a 	mov	r16,r6
2002582c:	003ffb06 	br	2002581c <__alt_data_end+0xfffe781c>
20025830:	1000021e 	bne	r2,zero,2002583c <_dtoa_r+0x11e0>
20025834:	4200004c 	andi	r8,r8,1
20025838:	403e7d1e 	bne	r8,zero,20025230 <__alt_data_end+0xfffe7230>
2002583c:	01000c04 	movi	r4,48
20025840:	00000106 	br	20025848 <_dtoa_r+0x11ec>
20025844:	102f883a 	mov	r23,r2
20025848:	b8bfffc4 	addi	r2,r23,-1
2002584c:	10c00007 	ldb	r3,0(r2)
20025850:	193ffc26 	beq	r3,r4,20025844 <__alt_data_end+0xfffe7844>
20025854:	003e8706 	br	20025274 <__alt_data_end+0xfffe7274>
20025858:	d8800517 	ldw	r2,20(sp)
2002585c:	00a3c83a 	sub	r17,zero,r2
20025860:	8800a426 	beq	r17,zero,20025af4 <_dtoa_r+0x1498>
20025864:	888003cc 	andi	r2,r17,15
20025868:	100490fa 	slli	r2,r2,3
2002586c:	00c800f4 	movhi	r3,8195
20025870:	18c3b204 	addi	r3,r3,3784
20025874:	1885883a 	add	r2,r3,r2
20025878:	11800017 	ldw	r6,0(r2)
2002587c:	11c00117 	ldw	r7,4(r2)
20025880:	9009883a 	mov	r4,r18
20025884:	980b883a 	mov	r5,r19
20025888:	8823d13a 	srai	r17,r17,4
2002588c:	002c3a00 	call	2002c3a0 <__muldf3>
20025890:	d8800f15 	stw	r2,60(sp)
20025894:	d8c01015 	stw	r3,64(sp)
20025898:	8800e826 	beq	r17,zero,20025c3c <_dtoa_r+0x15e0>
2002589c:	050800f4 	movhi	r20,8195
200258a0:	a503a804 	addi	r20,r20,3744
200258a4:	04000084 	movi	r16,2
200258a8:	8980004c 	andi	r6,r17,1
200258ac:	1009883a 	mov	r4,r2
200258b0:	8823d07a 	srai	r17,r17,1
200258b4:	180b883a 	mov	r5,r3
200258b8:	30000426 	beq	r6,zero,200258cc <_dtoa_r+0x1270>
200258bc:	a1800017 	ldw	r6,0(r20)
200258c0:	a1c00117 	ldw	r7,4(r20)
200258c4:	84000044 	addi	r16,r16,1
200258c8:	002c3a00 	call	2002c3a0 <__muldf3>
200258cc:	a5000204 	addi	r20,r20,8
200258d0:	883ff51e 	bne	r17,zero,200258a8 <__alt_data_end+0xfffe78a8>
200258d4:	d8800f15 	stw	r2,60(sp)
200258d8:	d8c01015 	stw	r3,64(sp)
200258dc:	003c7606 	br	20024ab8 <__alt_data_end+0xfffe6ab8>
200258e0:	00c00c04 	movi	r3,48
200258e4:	10c00005 	stb	r3,0(r2)
200258e8:	d8c00517 	ldw	r3,20(sp)
200258ec:	bd3fffc3 	ldbu	r20,-1(r23)
200258f0:	18c00044 	addi	r3,r3,1
200258f4:	d8c00515 	stw	r3,20(sp)
200258f8:	003db906 	br	20024fe0 <__alt_data_end+0xfffe6fe0>
200258fc:	89400117 	ldw	r5,4(r17)
20025900:	e009883a 	mov	r4,fp
20025904:	0026dd40 	call	20026dd4 <_Balloc>
20025908:	89800417 	ldw	r6,16(r17)
2002590c:	89400304 	addi	r5,r17,12
20025910:	11000304 	addi	r4,r2,12
20025914:	31800084 	addi	r6,r6,2
20025918:	318d883a 	add	r6,r6,r6
2002591c:	318d883a 	add	r6,r6,r6
20025920:	1027883a 	mov	r19,r2
20025924:	002179c0 	call	2002179c <memcpy>
20025928:	01800044 	movi	r6,1
2002592c:	980b883a 	mov	r5,r19
20025930:	e009883a 	mov	r4,fp
20025934:	00275540 	call	20027554 <__lshift>
20025938:	1029883a 	mov	r20,r2
2002593c:	003ecc06 	br	20025470 <__alt_data_end+0xfffe7470>
20025940:	00800e44 	movi	r2,57
20025944:	90809026 	beq	r18,r2,20025b88 <_dtoa_r+0x152c>
20025948:	92000044 	addi	r8,r18,1
2002594c:	003f1f06 	br	200255cc <__alt_data_end+0xfffe75cc>
20025950:	9011883a 	mov	r8,r18
20025954:	8825883a 	mov	r18,r17
20025958:	a023883a 	mov	r17,r20
2002595c:	003e2906 	br	20025204 <__alt_data_end+0xfffe7204>
20025960:	002b883a 	mov	r21,zero
20025964:	0023883a 	mov	r17,zero
20025968:	003f5406 	br	200256bc <__alt_data_end+0xfffe76bc>
2002596c:	61bfffc4 	addi	r6,r12,-1
20025970:	300490fa 	slli	r2,r6,3
20025974:	00c800f4 	movhi	r3,8195
20025978:	18c3b204 	addi	r3,r3,3784
2002597c:	1885883a 	add	r2,r3,r2
20025980:	11000017 	ldw	r4,0(r2)
20025984:	11400117 	ldw	r5,4(r2)
20025988:	d8800717 	ldw	r2,28(sp)
2002598c:	880f883a 	mov	r7,r17
20025990:	d9801215 	stw	r6,72(sp)
20025994:	800d883a 	mov	r6,r16
20025998:	db001615 	stw	r12,88(sp)
2002599c:	15c00044 	addi	r23,r2,1
200259a0:	002c3a00 	call	2002c3a0 <__muldf3>
200259a4:	d9401017 	ldw	r5,64(sp)
200259a8:	d9000f17 	ldw	r4,60(sp)
200259ac:	d8c01515 	stw	r3,84(sp)
200259b0:	d8801415 	stw	r2,80(sp)
200259b4:	002d3b40 	call	2002d3b4 <__fixdfsi>
200259b8:	1009883a 	mov	r4,r2
200259bc:	1021883a 	mov	r16,r2
200259c0:	002d4340 	call	2002d434 <__floatsidf>
200259c4:	d9000f17 	ldw	r4,60(sp)
200259c8:	d9401017 	ldw	r5,64(sp)
200259cc:	100d883a 	mov	r6,r2
200259d0:	180f883a 	mov	r7,r3
200259d4:	002cab80 	call	2002cab8 <__subdf3>
200259d8:	1829883a 	mov	r20,r3
200259dc:	d8c00717 	ldw	r3,28(sp)
200259e0:	84000c04 	addi	r16,r16,48
200259e4:	1023883a 	mov	r17,r2
200259e8:	1c000005 	stb	r16,0(r3)
200259ec:	db001617 	ldw	r12,88(sp)
200259f0:	00800044 	movi	r2,1
200259f4:	60802226 	beq	r12,r2,20025a80 <_dtoa_r+0x1424>
200259f8:	d9c00717 	ldw	r7,28(sp)
200259fc:	8805883a 	mov	r2,r17
20025a00:	b82b883a 	mov	r21,r23
20025a04:	3b19883a 	add	r12,r7,r12
20025a08:	6023883a 	mov	r17,r12
20025a0c:	a007883a 	mov	r3,r20
20025a10:	dc800f15 	stw	r18,60(sp)
20025a14:	000d883a 	mov	r6,zero
20025a18:	01d00934 	movhi	r7,16420
20025a1c:	1009883a 	mov	r4,r2
20025a20:	180b883a 	mov	r5,r3
20025a24:	002c3a00 	call	2002c3a0 <__muldf3>
20025a28:	180b883a 	mov	r5,r3
20025a2c:	1009883a 	mov	r4,r2
20025a30:	1829883a 	mov	r20,r3
20025a34:	1025883a 	mov	r18,r2
20025a38:	002d3b40 	call	2002d3b4 <__fixdfsi>
20025a3c:	1009883a 	mov	r4,r2
20025a40:	1021883a 	mov	r16,r2
20025a44:	002d4340 	call	2002d434 <__floatsidf>
20025a48:	100d883a 	mov	r6,r2
20025a4c:	180f883a 	mov	r7,r3
20025a50:	9009883a 	mov	r4,r18
20025a54:	a00b883a 	mov	r5,r20
20025a58:	84000c04 	addi	r16,r16,48
20025a5c:	002cab80 	call	2002cab8 <__subdf3>
20025a60:	ad400044 	addi	r21,r21,1
20025a64:	ac3fffc5 	stb	r16,-1(r21)
20025a68:	ac7fea1e 	bne	r21,r17,20025a14 <__alt_data_end+0xfffe7a14>
20025a6c:	1023883a 	mov	r17,r2
20025a70:	d8801217 	ldw	r2,72(sp)
20025a74:	dc800f17 	ldw	r18,60(sp)
20025a78:	1829883a 	mov	r20,r3
20025a7c:	b8af883a 	add	r23,r23,r2
20025a80:	d9001417 	ldw	r4,80(sp)
20025a84:	d9401517 	ldw	r5,84(sp)
20025a88:	000d883a 	mov	r6,zero
20025a8c:	01cff834 	movhi	r7,16352
20025a90:	002afb40 	call	2002afb4 <__adddf3>
20025a94:	880d883a 	mov	r6,r17
20025a98:	a00f883a 	mov	r7,r20
20025a9c:	1009883a 	mov	r4,r2
20025aa0:	180b883a 	mov	r5,r3
20025aa4:	002c2ac0 	call	2002c2ac <__ledf2>
20025aa8:	10003e0e 	bge	r2,zero,20025ba4 <_dtoa_r+0x1548>
20025aac:	d9001317 	ldw	r4,76(sp)
20025ab0:	bd3fffc3 	ldbu	r20,-1(r23)
20025ab4:	d9000515 	stw	r4,20(sp)
20025ab8:	003d3b06 	br	20024fa8 <__alt_data_end+0xfffe6fa8>
20025abc:	0027883a 	mov	r19,zero
20025ac0:	003f1b06 	br	20025730 <__alt_data_end+0xfffe7730>
20025ac4:	d8800817 	ldw	r2,32(sp)
20025ac8:	11e9c83a 	sub	r20,r2,r7
20025acc:	0005883a 	mov	r2,zero
20025ad0:	003d5406 	br	20025024 <__alt_data_end+0xfffe7024>
20025ad4:	00800044 	movi	r2,1
20025ad8:	003dc706 	br	200251f8 <__alt_data_end+0xfffe71f8>
20025adc:	d8c00217 	ldw	r3,8(sp)
20025ae0:	00800d84 	movi	r2,54
20025ae4:	dd400a17 	ldw	r21,40(sp)
20025ae8:	10c5c83a 	sub	r2,r2,r3
20025aec:	dd000817 	ldw	r20,32(sp)
20025af0:	003d4c06 	br	20025024 <__alt_data_end+0xfffe7024>
20025af4:	dc800f15 	stw	r18,60(sp)
20025af8:	dcc01015 	stw	r19,64(sp)
20025afc:	04000084 	movi	r16,2
20025b00:	003bed06 	br	20024ab8 <__alt_data_end+0xfffe6ab8>
20025b04:	d9000617 	ldw	r4,24(sp)
20025b08:	203f0d26 	beq	r4,zero,20025740 <__alt_data_end+0xfffe7740>
20025b0c:	d9800c17 	ldw	r6,48(sp)
20025b10:	01bcab0e 	bge	zero,r6,20024dc0 <__alt_data_end+0xfffe6dc0>
20025b14:	d9401017 	ldw	r5,64(sp)
20025b18:	d9000f17 	ldw	r4,60(sp)
20025b1c:	000d883a 	mov	r6,zero
20025b20:	01d00934 	movhi	r7,16420
20025b24:	002c3a00 	call	2002c3a0 <__muldf3>
20025b28:	81000044 	addi	r4,r16,1
20025b2c:	d8800f15 	stw	r2,60(sp)
20025b30:	d8c01015 	stw	r3,64(sp)
20025b34:	002d4340 	call	2002d434 <__floatsidf>
20025b38:	d9800f17 	ldw	r6,60(sp)
20025b3c:	d9c01017 	ldw	r7,64(sp)
20025b40:	1009883a 	mov	r4,r2
20025b44:	180b883a 	mov	r5,r3
20025b48:	002c3a00 	call	2002c3a0 <__muldf3>
20025b4c:	01d00734 	movhi	r7,16412
20025b50:	000d883a 	mov	r6,zero
20025b54:	1009883a 	mov	r4,r2
20025b58:	180b883a 	mov	r5,r3
20025b5c:	002afb40 	call	2002afb4 <__adddf3>
20025b60:	d9c00517 	ldw	r7,20(sp)
20025b64:	047f3034 	movhi	r17,64704
20025b68:	1021883a 	mov	r16,r2
20025b6c:	39ffffc4 	addi	r7,r7,-1
20025b70:	d9c01315 	stw	r7,76(sp)
20025b74:	1c63883a 	add	r17,r3,r17
20025b78:	db000c17 	ldw	r12,48(sp)
20025b7c:	003bea06 	br	20024b28 <__alt_data_end+0xfffe6b28>
20025b80:	dc000915 	stw	r16,36(sp)
20025b84:	003e0e06 	br	200253c0 <__alt_data_end+0xfffe73c0>
20025b88:	01000e44 	movi	r4,57
20025b8c:	8825883a 	mov	r18,r17
20025b90:	9dc00044 	addi	r23,r19,1
20025b94:	99000005 	stb	r4,0(r19)
20025b98:	a023883a 	mov	r17,r20
20025b9c:	dc000915 	stw	r16,36(sp)
20025ba0:	003da406 	br	20025234 <__alt_data_end+0xfffe7234>
20025ba4:	d9801417 	ldw	r6,80(sp)
20025ba8:	d9c01517 	ldw	r7,84(sp)
20025bac:	0009883a 	mov	r4,zero
20025bb0:	014ff834 	movhi	r5,16352
20025bb4:	002cab80 	call	2002cab8 <__subdf3>
20025bb8:	880d883a 	mov	r6,r17
20025bbc:	a00f883a 	mov	r7,r20
20025bc0:	1009883a 	mov	r4,r2
20025bc4:	180b883a 	mov	r5,r3
20025bc8:	002c1d00 	call	2002c1d0 <__gedf2>
20025bcc:	00bc7c0e 	bge	zero,r2,20024dc0 <__alt_data_end+0xfffe6dc0>
20025bd0:	01000c04 	movi	r4,48
20025bd4:	00000106 	br	20025bdc <_dtoa_r+0x1580>
20025bd8:	102f883a 	mov	r23,r2
20025bdc:	b8bfffc4 	addi	r2,r23,-1
20025be0:	10c00007 	ldb	r3,0(r2)
20025be4:	193ffc26 	beq	r3,r4,20025bd8 <__alt_data_end+0xfffe7bd8>
20025be8:	d9801317 	ldw	r6,76(sp)
20025bec:	d9800515 	stw	r6,20(sp)
20025bf0:	003c4406 	br	20024d04 <__alt_data_end+0xfffe6d04>
20025bf4:	d9801317 	ldw	r6,76(sp)
20025bf8:	d9800515 	stw	r6,20(sp)
20025bfc:	003cea06 	br	20024fa8 <__alt_data_end+0xfffe6fa8>
20025c00:	dd800f17 	ldw	r22,60(sp)
20025c04:	dcc01017 	ldw	r19,64(sp)
20025c08:	dc801217 	ldw	r18,72(sp)
20025c0c:	003c6c06 	br	20024dc0 <__alt_data_end+0xfffe6dc0>
20025c10:	903e031e 	bne	r18,zero,20025420 <__alt_data_end+0xfffe7420>
20025c14:	003ebb06 	br	20025704 <__alt_data_end+0xfffe7704>
20025c18:	103e6c1e 	bne	r2,zero,200255cc <__alt_data_end+0xfffe75cc>
20025c1c:	4080004c 	andi	r2,r8,1
20025c20:	103e6a26 	beq	r2,zero,200255cc <__alt_data_end+0xfffe75cc>
20025c24:	003e6606 	br	200255c0 <__alt_data_end+0xfffe75c0>
20025c28:	d8c00317 	ldw	r3,12(sp)
20025c2c:	00800084 	movi	r2,2
20025c30:	10c02916 	blt	r2,r3,20025cd8 <_dtoa_r+0x167c>
20025c34:	d9000c17 	ldw	r4,48(sp)
20025c38:	003e8806 	br	2002565c <__alt_data_end+0xfffe765c>
20025c3c:	04000084 	movi	r16,2
20025c40:	003b9d06 	br	20024ab8 <__alt_data_end+0xfffe6ab8>
20025c44:	d9001317 	ldw	r4,76(sp)
20025c48:	d9000515 	stw	r4,20(sp)
20025c4c:	003cd606 	br	20024fa8 <__alt_data_end+0xfffe6fa8>
20025c50:	d8801317 	ldw	r2,76(sp)
20025c54:	d8800515 	stw	r2,20(sp)
20025c58:	003c2a06 	br	20024d04 <__alt_data_end+0xfffe6d04>
20025c5c:	d9800317 	ldw	r6,12(sp)
20025c60:	00800084 	movi	r2,2
20025c64:	11801516 	blt	r2,r6,20025cbc <_dtoa_r+0x1660>
20025c68:	d9c00c17 	ldw	r7,48(sp)
20025c6c:	d9c00615 	stw	r7,24(sp)
20025c70:	003df706 	br	20025450 <__alt_data_end+0xfffe7450>
20025c74:	193d3926 	beq	r3,r4,2002515c <__alt_data_end+0xfffe715c>
20025c78:	00c00f04 	movi	r3,60
20025c7c:	1885c83a 	sub	r2,r3,r2
20025c80:	003ddf06 	br	20025400 <__alt_data_end+0xfffe7400>
20025c84:	e009883a 	mov	r4,fp
20025c88:	e0001115 	stw	zero,68(fp)
20025c8c:	000b883a 	mov	r5,zero
20025c90:	0026dd40 	call	20026dd4 <_Balloc>
20025c94:	d8800715 	stw	r2,28(sp)
20025c98:	d8c00717 	ldw	r3,28(sp)
20025c9c:	00bfffc4 	movi	r2,-1
20025ca0:	01000044 	movi	r4,1
20025ca4:	d8800c15 	stw	r2,48(sp)
20025ca8:	e0c01015 	stw	r3,64(fp)
20025cac:	d9000b15 	stw	r4,44(sp)
20025cb0:	d8800615 	stw	r2,24(sp)
20025cb4:	d8002215 	stw	zero,136(sp)
20025cb8:	003c4106 	br	20024dc0 <__alt_data_end+0xfffe6dc0>
20025cbc:	d8c00c17 	ldw	r3,48(sp)
20025cc0:	d8c00615 	stw	r3,24(sp)
20025cc4:	003e7006 	br	20025688 <__alt_data_end+0xfffe7688>
20025cc8:	04400044 	movi	r17,1
20025ccc:	003b2006 	br	20024950 <__alt_data_end+0xfffe6950>
20025cd0:	000b883a 	mov	r5,zero
20025cd4:	003b3d06 	br	200249cc <__alt_data_end+0xfffe69cc>
20025cd8:	d8800c17 	ldw	r2,48(sp)
20025cdc:	d8800615 	stw	r2,24(sp)
20025ce0:	003e6906 	br	20025688 <__alt_data_end+0xfffe7688>

20025ce4 <_fclose_r>:
20025ce4:	28003926 	beq	r5,zero,20025dcc <_fclose_r+0xe8>
20025ce8:	defffc04 	addi	sp,sp,-16
20025cec:	dc400115 	stw	r17,4(sp)
20025cf0:	dc000015 	stw	r16,0(sp)
20025cf4:	dfc00315 	stw	ra,12(sp)
20025cf8:	dc800215 	stw	r18,8(sp)
20025cfc:	2023883a 	mov	r17,r4
20025d00:	2821883a 	mov	r16,r5
20025d04:	20000226 	beq	r4,zero,20025d10 <_fclose_r+0x2c>
20025d08:	20800e17 	ldw	r2,56(r4)
20025d0c:	10002726 	beq	r2,zero,20025dac <_fclose_r+0xc8>
20025d10:	8080030f 	ldh	r2,12(r16)
20025d14:	1000071e 	bne	r2,zero,20025d34 <_fclose_r+0x50>
20025d18:	0005883a 	mov	r2,zero
20025d1c:	dfc00317 	ldw	ra,12(sp)
20025d20:	dc800217 	ldw	r18,8(sp)
20025d24:	dc400117 	ldw	r17,4(sp)
20025d28:	dc000017 	ldw	r16,0(sp)
20025d2c:	dec00404 	addi	sp,sp,16
20025d30:	f800283a 	ret
20025d34:	800b883a 	mov	r5,r16
20025d38:	8809883a 	mov	r4,r17
20025d3c:	0025de80 	call	20025de8 <__sflush_r>
20025d40:	1025883a 	mov	r18,r2
20025d44:	80800b17 	ldw	r2,44(r16)
20025d48:	10000426 	beq	r2,zero,20025d5c <_fclose_r+0x78>
20025d4c:	81400717 	ldw	r5,28(r16)
20025d50:	8809883a 	mov	r4,r17
20025d54:	103ee83a 	callr	r2
20025d58:	10001616 	blt	r2,zero,20025db4 <_fclose_r+0xd0>
20025d5c:	8080030b 	ldhu	r2,12(r16)
20025d60:	1080200c 	andi	r2,r2,128
20025d64:	1000151e 	bne	r2,zero,20025dbc <_fclose_r+0xd8>
20025d68:	81400c17 	ldw	r5,48(r16)
20025d6c:	28000526 	beq	r5,zero,20025d84 <_fclose_r+0xa0>
20025d70:	80801004 	addi	r2,r16,64
20025d74:	28800226 	beq	r5,r2,20025d80 <_fclose_r+0x9c>
20025d78:	8809883a 	mov	r4,r17
20025d7c:	00261b40 	call	200261b4 <_free_r>
20025d80:	80000c15 	stw	zero,48(r16)
20025d84:	81401117 	ldw	r5,68(r16)
20025d88:	28000326 	beq	r5,zero,20025d98 <_fclose_r+0xb4>
20025d8c:	8809883a 	mov	r4,r17
20025d90:	00261b40 	call	200261b4 <_free_r>
20025d94:	80001115 	stw	zero,68(r16)
20025d98:	0020ce40 	call	20020ce4 <__sfp_lock_acquire>
20025d9c:	8000030d 	sth	zero,12(r16)
20025da0:	0020ce80 	call	20020ce8 <__sfp_lock_release>
20025da4:	9005883a 	mov	r2,r18
20025da8:	003fdc06 	br	20025d1c <__alt_data_end+0xfffe7d1c>
20025dac:	0020cd40 	call	20020cd4 <__sinit>
20025db0:	003fd706 	br	20025d10 <__alt_data_end+0xfffe7d10>
20025db4:	04bfffc4 	movi	r18,-1
20025db8:	003fe806 	br	20025d5c <__alt_data_end+0xfffe7d5c>
20025dbc:	81400417 	ldw	r5,16(r16)
20025dc0:	8809883a 	mov	r4,r17
20025dc4:	00261b40 	call	200261b4 <_free_r>
20025dc8:	003fe706 	br	20025d68 <__alt_data_end+0xfffe7d68>
20025dcc:	0005883a 	mov	r2,zero
20025dd0:	f800283a 	ret

20025dd4 <fclose>:
20025dd4:	008800f4 	movhi	r2,8195
20025dd8:	108b0a04 	addi	r2,r2,11304
20025ddc:	200b883a 	mov	r5,r4
20025de0:	11000017 	ldw	r4,0(r2)
20025de4:	0025ce41 	jmpi	20025ce4 <_fclose_r>

20025de8 <__sflush_r>:
20025de8:	2880030b 	ldhu	r2,12(r5)
20025dec:	defffb04 	addi	sp,sp,-20
20025df0:	dcc00315 	stw	r19,12(sp)
20025df4:	dc400115 	stw	r17,4(sp)
20025df8:	dfc00415 	stw	ra,16(sp)
20025dfc:	dc800215 	stw	r18,8(sp)
20025e00:	dc000015 	stw	r16,0(sp)
20025e04:	10c0020c 	andi	r3,r2,8
20025e08:	2823883a 	mov	r17,r5
20025e0c:	2027883a 	mov	r19,r4
20025e10:	1800311e 	bne	r3,zero,20025ed8 <__sflush_r+0xf0>
20025e14:	28c00117 	ldw	r3,4(r5)
20025e18:	10820014 	ori	r2,r2,2048
20025e1c:	2880030d 	sth	r2,12(r5)
20025e20:	00c04b0e 	bge	zero,r3,20025f50 <__sflush_r+0x168>
20025e24:	8a000a17 	ldw	r8,40(r17)
20025e28:	40002326 	beq	r8,zero,20025eb8 <__sflush_r+0xd0>
20025e2c:	9c000017 	ldw	r16,0(r19)
20025e30:	10c4000c 	andi	r3,r2,4096
20025e34:	98000015 	stw	zero,0(r19)
20025e38:	18004826 	beq	r3,zero,20025f5c <__sflush_r+0x174>
20025e3c:	89801417 	ldw	r6,80(r17)
20025e40:	10c0010c 	andi	r3,r2,4
20025e44:	18000626 	beq	r3,zero,20025e60 <__sflush_r+0x78>
20025e48:	88c00117 	ldw	r3,4(r17)
20025e4c:	88800c17 	ldw	r2,48(r17)
20025e50:	30cdc83a 	sub	r6,r6,r3
20025e54:	10000226 	beq	r2,zero,20025e60 <__sflush_r+0x78>
20025e58:	88800f17 	ldw	r2,60(r17)
20025e5c:	308dc83a 	sub	r6,r6,r2
20025e60:	89400717 	ldw	r5,28(r17)
20025e64:	000f883a 	mov	r7,zero
20025e68:	9809883a 	mov	r4,r19
20025e6c:	403ee83a 	callr	r8
20025e70:	00ffffc4 	movi	r3,-1
20025e74:	10c04426 	beq	r2,r3,20025f88 <__sflush_r+0x1a0>
20025e78:	88c0030b 	ldhu	r3,12(r17)
20025e7c:	89000417 	ldw	r4,16(r17)
20025e80:	88000115 	stw	zero,4(r17)
20025e84:	197dffcc 	andi	r5,r3,63487
20025e88:	8940030d 	sth	r5,12(r17)
20025e8c:	89000015 	stw	r4,0(r17)
20025e90:	18c4000c 	andi	r3,r3,4096
20025e94:	18002c1e 	bne	r3,zero,20025f48 <__sflush_r+0x160>
20025e98:	89400c17 	ldw	r5,48(r17)
20025e9c:	9c000015 	stw	r16,0(r19)
20025ea0:	28000526 	beq	r5,zero,20025eb8 <__sflush_r+0xd0>
20025ea4:	88801004 	addi	r2,r17,64
20025ea8:	28800226 	beq	r5,r2,20025eb4 <__sflush_r+0xcc>
20025eac:	9809883a 	mov	r4,r19
20025eb0:	00261b40 	call	200261b4 <_free_r>
20025eb4:	88000c15 	stw	zero,48(r17)
20025eb8:	0005883a 	mov	r2,zero
20025ebc:	dfc00417 	ldw	ra,16(sp)
20025ec0:	dcc00317 	ldw	r19,12(sp)
20025ec4:	dc800217 	ldw	r18,8(sp)
20025ec8:	dc400117 	ldw	r17,4(sp)
20025ecc:	dc000017 	ldw	r16,0(sp)
20025ed0:	dec00504 	addi	sp,sp,20
20025ed4:	f800283a 	ret
20025ed8:	2c800417 	ldw	r18,16(r5)
20025edc:	903ff626 	beq	r18,zero,20025eb8 <__alt_data_end+0xfffe7eb8>
20025ee0:	2c000017 	ldw	r16,0(r5)
20025ee4:	108000cc 	andi	r2,r2,3
20025ee8:	2c800015 	stw	r18,0(r5)
20025eec:	84a1c83a 	sub	r16,r16,r18
20025ef0:	1000131e 	bne	r2,zero,20025f40 <__sflush_r+0x158>
20025ef4:	28800517 	ldw	r2,20(r5)
20025ef8:	88800215 	stw	r2,8(r17)
20025efc:	04000316 	blt	zero,r16,20025f0c <__sflush_r+0x124>
20025f00:	003fed06 	br	20025eb8 <__alt_data_end+0xfffe7eb8>
20025f04:	90a5883a 	add	r18,r18,r2
20025f08:	043feb0e 	bge	zero,r16,20025eb8 <__alt_data_end+0xfffe7eb8>
20025f0c:	88800917 	ldw	r2,36(r17)
20025f10:	89400717 	ldw	r5,28(r17)
20025f14:	800f883a 	mov	r7,r16
20025f18:	900d883a 	mov	r6,r18
20025f1c:	9809883a 	mov	r4,r19
20025f20:	103ee83a 	callr	r2
20025f24:	80a1c83a 	sub	r16,r16,r2
20025f28:	00bff616 	blt	zero,r2,20025f04 <__alt_data_end+0xfffe7f04>
20025f2c:	88c0030b 	ldhu	r3,12(r17)
20025f30:	00bfffc4 	movi	r2,-1
20025f34:	18c01014 	ori	r3,r3,64
20025f38:	88c0030d 	sth	r3,12(r17)
20025f3c:	003fdf06 	br	20025ebc <__alt_data_end+0xfffe7ebc>
20025f40:	0005883a 	mov	r2,zero
20025f44:	003fec06 	br	20025ef8 <__alt_data_end+0xfffe7ef8>
20025f48:	88801415 	stw	r2,80(r17)
20025f4c:	003fd206 	br	20025e98 <__alt_data_end+0xfffe7e98>
20025f50:	28c00f17 	ldw	r3,60(r5)
20025f54:	00ffb316 	blt	zero,r3,20025e24 <__alt_data_end+0xfffe7e24>
20025f58:	003fd706 	br	20025eb8 <__alt_data_end+0xfffe7eb8>
20025f5c:	89400717 	ldw	r5,28(r17)
20025f60:	000d883a 	mov	r6,zero
20025f64:	01c00044 	movi	r7,1
20025f68:	9809883a 	mov	r4,r19
20025f6c:	403ee83a 	callr	r8
20025f70:	100d883a 	mov	r6,r2
20025f74:	00bfffc4 	movi	r2,-1
20025f78:	30801426 	beq	r6,r2,20025fcc <__sflush_r+0x1e4>
20025f7c:	8880030b 	ldhu	r2,12(r17)
20025f80:	8a000a17 	ldw	r8,40(r17)
20025f84:	003fae06 	br	20025e40 <__alt_data_end+0xfffe7e40>
20025f88:	98c00017 	ldw	r3,0(r19)
20025f8c:	183fba26 	beq	r3,zero,20025e78 <__alt_data_end+0xfffe7e78>
20025f90:	01000744 	movi	r4,29
20025f94:	19000626 	beq	r3,r4,20025fb0 <__sflush_r+0x1c8>
20025f98:	01000584 	movi	r4,22
20025f9c:	19000426 	beq	r3,r4,20025fb0 <__sflush_r+0x1c8>
20025fa0:	88c0030b 	ldhu	r3,12(r17)
20025fa4:	18c01014 	ori	r3,r3,64
20025fa8:	88c0030d 	sth	r3,12(r17)
20025fac:	003fc306 	br	20025ebc <__alt_data_end+0xfffe7ebc>
20025fb0:	8880030b 	ldhu	r2,12(r17)
20025fb4:	88c00417 	ldw	r3,16(r17)
20025fb8:	88000115 	stw	zero,4(r17)
20025fbc:	10bdffcc 	andi	r2,r2,63487
20025fc0:	8880030d 	sth	r2,12(r17)
20025fc4:	88c00015 	stw	r3,0(r17)
20025fc8:	003fb306 	br	20025e98 <__alt_data_end+0xfffe7e98>
20025fcc:	98800017 	ldw	r2,0(r19)
20025fd0:	103fea26 	beq	r2,zero,20025f7c <__alt_data_end+0xfffe7f7c>
20025fd4:	00c00744 	movi	r3,29
20025fd8:	10c00226 	beq	r2,r3,20025fe4 <__sflush_r+0x1fc>
20025fdc:	00c00584 	movi	r3,22
20025fe0:	10c0031e 	bne	r2,r3,20025ff0 <__sflush_r+0x208>
20025fe4:	9c000015 	stw	r16,0(r19)
20025fe8:	0005883a 	mov	r2,zero
20025fec:	003fb306 	br	20025ebc <__alt_data_end+0xfffe7ebc>
20025ff0:	88c0030b 	ldhu	r3,12(r17)
20025ff4:	3005883a 	mov	r2,r6
20025ff8:	18c01014 	ori	r3,r3,64
20025ffc:	88c0030d 	sth	r3,12(r17)
20026000:	003fae06 	br	20025ebc <__alt_data_end+0xfffe7ebc>

20026004 <_fflush_r>:
20026004:	defffd04 	addi	sp,sp,-12
20026008:	dc000115 	stw	r16,4(sp)
2002600c:	dfc00215 	stw	ra,8(sp)
20026010:	2021883a 	mov	r16,r4
20026014:	20000226 	beq	r4,zero,20026020 <_fflush_r+0x1c>
20026018:	20800e17 	ldw	r2,56(r4)
2002601c:	10000c26 	beq	r2,zero,20026050 <_fflush_r+0x4c>
20026020:	2880030f 	ldh	r2,12(r5)
20026024:	1000051e 	bne	r2,zero,2002603c <_fflush_r+0x38>
20026028:	0005883a 	mov	r2,zero
2002602c:	dfc00217 	ldw	ra,8(sp)
20026030:	dc000117 	ldw	r16,4(sp)
20026034:	dec00304 	addi	sp,sp,12
20026038:	f800283a 	ret
2002603c:	8009883a 	mov	r4,r16
20026040:	dfc00217 	ldw	ra,8(sp)
20026044:	dc000117 	ldw	r16,4(sp)
20026048:	dec00304 	addi	sp,sp,12
2002604c:	0025de81 	jmpi	20025de8 <__sflush_r>
20026050:	d9400015 	stw	r5,0(sp)
20026054:	0020cd40 	call	20020cd4 <__sinit>
20026058:	d9400017 	ldw	r5,0(sp)
2002605c:	003ff006 	br	20026020 <__alt_data_end+0xfffe8020>

20026060 <fflush>:
20026060:	20000526 	beq	r4,zero,20026078 <fflush+0x18>
20026064:	008800f4 	movhi	r2,8195
20026068:	108b0a04 	addi	r2,r2,11304
2002606c:	200b883a 	mov	r5,r4
20026070:	11000017 	ldw	r4,0(r2)
20026074:	00260041 	jmpi	20026004 <_fflush_r>
20026078:	008800f4 	movhi	r2,8195
2002607c:	108b0904 	addi	r2,r2,11300
20026080:	11000017 	ldw	r4,0(r2)
20026084:	014800b4 	movhi	r5,8194
20026088:	29580104 	addi	r5,r5,24580
2002608c:	0020de81 	jmpi	20020de8 <_fwalk_reent>

20026090 <_malloc_trim_r>:
20026090:	defffb04 	addi	sp,sp,-20
20026094:	dcc00315 	stw	r19,12(sp)
20026098:	04c800f4 	movhi	r19,8195
2002609c:	dc800215 	stw	r18,8(sp)
200260a0:	dc400115 	stw	r17,4(sp)
200260a4:	dc000015 	stw	r16,0(sp)
200260a8:	dfc00415 	stw	ra,16(sp)
200260ac:	2821883a 	mov	r16,r5
200260b0:	9cc55104 	addi	r19,r19,5444
200260b4:	2025883a 	mov	r18,r4
200260b8:	002dbe00 	call	2002dbe0 <__malloc_lock>
200260bc:	98800217 	ldw	r2,8(r19)
200260c0:	14400117 	ldw	r17,4(r2)
200260c4:	00bfff04 	movi	r2,-4
200260c8:	88a2703a 	and	r17,r17,r2
200260cc:	8c21c83a 	sub	r16,r17,r16
200260d0:	8403fbc4 	addi	r16,r16,4079
200260d4:	8020d33a 	srli	r16,r16,12
200260d8:	0083ffc4 	movi	r2,4095
200260dc:	843fffc4 	addi	r16,r16,-1
200260e0:	8020933a 	slli	r16,r16,12
200260e4:	1400060e 	bge	r2,r16,20026100 <_malloc_trim_r+0x70>
200260e8:	000b883a 	mov	r5,zero
200260ec:	9009883a 	mov	r4,r18
200260f0:	0021d5c0 	call	20021d5c <_sbrk_r>
200260f4:	98c00217 	ldw	r3,8(r19)
200260f8:	1c47883a 	add	r3,r3,r17
200260fc:	10c00a26 	beq	r2,r3,20026128 <_malloc_trim_r+0x98>
20026100:	9009883a 	mov	r4,r18
20026104:	002dc040 	call	2002dc04 <__malloc_unlock>
20026108:	0005883a 	mov	r2,zero
2002610c:	dfc00417 	ldw	ra,16(sp)
20026110:	dcc00317 	ldw	r19,12(sp)
20026114:	dc800217 	ldw	r18,8(sp)
20026118:	dc400117 	ldw	r17,4(sp)
2002611c:	dc000017 	ldw	r16,0(sp)
20026120:	dec00504 	addi	sp,sp,20
20026124:	f800283a 	ret
20026128:	040bc83a 	sub	r5,zero,r16
2002612c:	9009883a 	mov	r4,r18
20026130:	0021d5c0 	call	20021d5c <_sbrk_r>
20026134:	00ffffc4 	movi	r3,-1
20026138:	10c00d26 	beq	r2,r3,20026170 <_malloc_trim_r+0xe0>
2002613c:	00c800f4 	movhi	r3,8195
20026140:	18d20004 	addi	r3,r3,18432
20026144:	18800017 	ldw	r2,0(r3)
20026148:	99000217 	ldw	r4,8(r19)
2002614c:	8c23c83a 	sub	r17,r17,r16
20026150:	8c400054 	ori	r17,r17,1
20026154:	1421c83a 	sub	r16,r2,r16
20026158:	24400115 	stw	r17,4(r4)
2002615c:	9009883a 	mov	r4,r18
20026160:	1c000015 	stw	r16,0(r3)
20026164:	002dc040 	call	2002dc04 <__malloc_unlock>
20026168:	00800044 	movi	r2,1
2002616c:	003fe706 	br	2002610c <__alt_data_end+0xfffe810c>
20026170:	000b883a 	mov	r5,zero
20026174:	9009883a 	mov	r4,r18
20026178:	0021d5c0 	call	20021d5c <_sbrk_r>
2002617c:	99000217 	ldw	r4,8(r19)
20026180:	014003c4 	movi	r5,15
20026184:	1107c83a 	sub	r3,r2,r4
20026188:	28ffdd0e 	bge	r5,r3,20026100 <__alt_data_end+0xfffe8100>
2002618c:	014800f4 	movhi	r5,8195
20026190:	294b0b04 	addi	r5,r5,11308
20026194:	29400017 	ldw	r5,0(r5)
20026198:	18c00054 	ori	r3,r3,1
2002619c:	20c00115 	stw	r3,4(r4)
200261a0:	00c800f4 	movhi	r3,8195
200261a4:	1145c83a 	sub	r2,r2,r5
200261a8:	18d20004 	addi	r3,r3,18432
200261ac:	18800015 	stw	r2,0(r3)
200261b0:	003fd306 	br	20026100 <__alt_data_end+0xfffe8100>

200261b4 <_free_r>:
200261b4:	28004126 	beq	r5,zero,200262bc <_free_r+0x108>
200261b8:	defffd04 	addi	sp,sp,-12
200261bc:	dc400115 	stw	r17,4(sp)
200261c0:	dc000015 	stw	r16,0(sp)
200261c4:	2023883a 	mov	r17,r4
200261c8:	2821883a 	mov	r16,r5
200261cc:	dfc00215 	stw	ra,8(sp)
200261d0:	002dbe00 	call	2002dbe0 <__malloc_lock>
200261d4:	81ffff17 	ldw	r7,-4(r16)
200261d8:	00bfff84 	movi	r2,-2
200261dc:	010800f4 	movhi	r4,8195
200261e0:	81bffe04 	addi	r6,r16,-8
200261e4:	3884703a 	and	r2,r7,r2
200261e8:	21055104 	addi	r4,r4,5444
200261ec:	308b883a 	add	r5,r6,r2
200261f0:	2a400117 	ldw	r9,4(r5)
200261f4:	22000217 	ldw	r8,8(r4)
200261f8:	00ffff04 	movi	r3,-4
200261fc:	48c6703a 	and	r3,r9,r3
20026200:	2a005726 	beq	r5,r8,20026360 <_free_r+0x1ac>
20026204:	28c00115 	stw	r3,4(r5)
20026208:	39c0004c 	andi	r7,r7,1
2002620c:	3800091e 	bne	r7,zero,20026234 <_free_r+0x80>
20026210:	823ffe17 	ldw	r8,-8(r16)
20026214:	22400204 	addi	r9,r4,8
20026218:	320dc83a 	sub	r6,r6,r8
2002621c:	31c00217 	ldw	r7,8(r6)
20026220:	1205883a 	add	r2,r2,r8
20026224:	3a406526 	beq	r7,r9,200263bc <_free_r+0x208>
20026228:	32000317 	ldw	r8,12(r6)
2002622c:	3a000315 	stw	r8,12(r7)
20026230:	41c00215 	stw	r7,8(r8)
20026234:	28cf883a 	add	r7,r5,r3
20026238:	39c00117 	ldw	r7,4(r7)
2002623c:	39c0004c 	andi	r7,r7,1
20026240:	38003a26 	beq	r7,zero,2002632c <_free_r+0x178>
20026244:	10c00054 	ori	r3,r2,1
20026248:	30c00115 	stw	r3,4(r6)
2002624c:	3087883a 	add	r3,r6,r2
20026250:	18800015 	stw	r2,0(r3)
20026254:	00c07fc4 	movi	r3,511
20026258:	18801936 	bltu	r3,r2,200262c0 <_free_r+0x10c>
2002625c:	1004d0fa 	srli	r2,r2,3
20026260:	01c00044 	movi	r7,1
20026264:	21400117 	ldw	r5,4(r4)
20026268:	10c00044 	addi	r3,r2,1
2002626c:	18c7883a 	add	r3,r3,r3
20026270:	1005d0ba 	srai	r2,r2,2
20026274:	18c7883a 	add	r3,r3,r3
20026278:	18c7883a 	add	r3,r3,r3
2002627c:	1907883a 	add	r3,r3,r4
20026280:	3884983a 	sll	r2,r7,r2
20026284:	19c00017 	ldw	r7,0(r3)
20026288:	1a3ffe04 	addi	r8,r3,-8
2002628c:	1144b03a 	or	r2,r2,r5
20026290:	32000315 	stw	r8,12(r6)
20026294:	31c00215 	stw	r7,8(r6)
20026298:	20800115 	stw	r2,4(r4)
2002629c:	19800015 	stw	r6,0(r3)
200262a0:	39800315 	stw	r6,12(r7)
200262a4:	8809883a 	mov	r4,r17
200262a8:	dfc00217 	ldw	ra,8(sp)
200262ac:	dc400117 	ldw	r17,4(sp)
200262b0:	dc000017 	ldw	r16,0(sp)
200262b4:	dec00304 	addi	sp,sp,12
200262b8:	002dc041 	jmpi	2002dc04 <__malloc_unlock>
200262bc:	f800283a 	ret
200262c0:	100ad27a 	srli	r5,r2,9
200262c4:	00c00104 	movi	r3,4
200262c8:	19404a36 	bltu	r3,r5,200263f4 <_free_r+0x240>
200262cc:	100ad1ba 	srli	r5,r2,6
200262d0:	28c00e44 	addi	r3,r5,57
200262d4:	18c7883a 	add	r3,r3,r3
200262d8:	29400e04 	addi	r5,r5,56
200262dc:	18c7883a 	add	r3,r3,r3
200262e0:	18c7883a 	add	r3,r3,r3
200262e4:	1909883a 	add	r4,r3,r4
200262e8:	20c00017 	ldw	r3,0(r4)
200262ec:	01c800f4 	movhi	r7,8195
200262f0:	213ffe04 	addi	r4,r4,-8
200262f4:	39c55104 	addi	r7,r7,5444
200262f8:	20c04426 	beq	r4,r3,2002640c <_free_r+0x258>
200262fc:	01ffff04 	movi	r7,-4
20026300:	19400117 	ldw	r5,4(r3)
20026304:	29ca703a 	and	r5,r5,r7
20026308:	1140022e 	bgeu	r2,r5,20026314 <_free_r+0x160>
2002630c:	18c00217 	ldw	r3,8(r3)
20026310:	20fffb1e 	bne	r4,r3,20026300 <__alt_data_end+0xfffe8300>
20026314:	19000317 	ldw	r4,12(r3)
20026318:	31000315 	stw	r4,12(r6)
2002631c:	30c00215 	stw	r3,8(r6)
20026320:	21800215 	stw	r6,8(r4)
20026324:	19800315 	stw	r6,12(r3)
20026328:	003fde06 	br	200262a4 <__alt_data_end+0xfffe82a4>
2002632c:	29c00217 	ldw	r7,8(r5)
20026330:	10c5883a 	add	r2,r2,r3
20026334:	00c800f4 	movhi	r3,8195
20026338:	18c55304 	addi	r3,r3,5452
2002633c:	38c03b26 	beq	r7,r3,2002642c <_free_r+0x278>
20026340:	2a000317 	ldw	r8,12(r5)
20026344:	11400054 	ori	r5,r2,1
20026348:	3087883a 	add	r3,r6,r2
2002634c:	3a000315 	stw	r8,12(r7)
20026350:	41c00215 	stw	r7,8(r8)
20026354:	31400115 	stw	r5,4(r6)
20026358:	18800015 	stw	r2,0(r3)
2002635c:	003fbd06 	br	20026254 <__alt_data_end+0xfffe8254>
20026360:	39c0004c 	andi	r7,r7,1
20026364:	10c5883a 	add	r2,r2,r3
20026368:	3800071e 	bne	r7,zero,20026388 <_free_r+0x1d4>
2002636c:	81fffe17 	ldw	r7,-8(r16)
20026370:	31cdc83a 	sub	r6,r6,r7
20026374:	30c00317 	ldw	r3,12(r6)
20026378:	31400217 	ldw	r5,8(r6)
2002637c:	11c5883a 	add	r2,r2,r7
20026380:	28c00315 	stw	r3,12(r5)
20026384:	19400215 	stw	r5,8(r3)
20026388:	10c00054 	ori	r3,r2,1
2002638c:	30c00115 	stw	r3,4(r6)
20026390:	00c800f4 	movhi	r3,8195
20026394:	18cb0c04 	addi	r3,r3,11312
20026398:	18c00017 	ldw	r3,0(r3)
2002639c:	21800215 	stw	r6,8(r4)
200263a0:	10ffc036 	bltu	r2,r3,200262a4 <__alt_data_end+0xfffe82a4>
200263a4:	008800f4 	movhi	r2,8195
200263a8:	1091f404 	addi	r2,r2,18384
200263ac:	11400017 	ldw	r5,0(r2)
200263b0:	8809883a 	mov	r4,r17
200263b4:	00260900 	call	20026090 <_malloc_trim_r>
200263b8:	003fba06 	br	200262a4 <__alt_data_end+0xfffe82a4>
200263bc:	28c9883a 	add	r4,r5,r3
200263c0:	21000117 	ldw	r4,4(r4)
200263c4:	2100004c 	andi	r4,r4,1
200263c8:	2000391e 	bne	r4,zero,200264b0 <_free_r+0x2fc>
200263cc:	29c00217 	ldw	r7,8(r5)
200263d0:	29000317 	ldw	r4,12(r5)
200263d4:	1885883a 	add	r2,r3,r2
200263d8:	10c00054 	ori	r3,r2,1
200263dc:	39000315 	stw	r4,12(r7)
200263e0:	21c00215 	stw	r7,8(r4)
200263e4:	30c00115 	stw	r3,4(r6)
200263e8:	308d883a 	add	r6,r6,r2
200263ec:	30800015 	stw	r2,0(r6)
200263f0:	003fac06 	br	200262a4 <__alt_data_end+0xfffe82a4>
200263f4:	00c00504 	movi	r3,20
200263f8:	19401536 	bltu	r3,r5,20026450 <_free_r+0x29c>
200263fc:	28c01704 	addi	r3,r5,92
20026400:	18c7883a 	add	r3,r3,r3
20026404:	294016c4 	addi	r5,r5,91
20026408:	003fb406 	br	200262dc <__alt_data_end+0xfffe82dc>
2002640c:	280bd0ba 	srai	r5,r5,2
20026410:	00c00044 	movi	r3,1
20026414:	38800117 	ldw	r2,4(r7)
20026418:	194a983a 	sll	r5,r3,r5
2002641c:	2007883a 	mov	r3,r4
20026420:	2884b03a 	or	r2,r5,r2
20026424:	38800115 	stw	r2,4(r7)
20026428:	003fbb06 	br	20026318 <__alt_data_end+0xfffe8318>
2002642c:	21800515 	stw	r6,20(r4)
20026430:	21800415 	stw	r6,16(r4)
20026434:	10c00054 	ori	r3,r2,1
20026438:	31c00315 	stw	r7,12(r6)
2002643c:	31c00215 	stw	r7,8(r6)
20026440:	30c00115 	stw	r3,4(r6)
20026444:	308d883a 	add	r6,r6,r2
20026448:	30800015 	stw	r2,0(r6)
2002644c:	003f9506 	br	200262a4 <__alt_data_end+0xfffe82a4>
20026450:	00c01504 	movi	r3,84
20026454:	19400536 	bltu	r3,r5,2002646c <_free_r+0x2b8>
20026458:	100ad33a 	srli	r5,r2,12
2002645c:	28c01bc4 	addi	r3,r5,111
20026460:	18c7883a 	add	r3,r3,r3
20026464:	29401b84 	addi	r5,r5,110
20026468:	003f9c06 	br	200262dc <__alt_data_end+0xfffe82dc>
2002646c:	00c05504 	movi	r3,340
20026470:	19400536 	bltu	r3,r5,20026488 <_free_r+0x2d4>
20026474:	100ad3fa 	srli	r5,r2,15
20026478:	28c01e04 	addi	r3,r5,120
2002647c:	18c7883a 	add	r3,r3,r3
20026480:	29401dc4 	addi	r5,r5,119
20026484:	003f9506 	br	200262dc <__alt_data_end+0xfffe82dc>
20026488:	00c15504 	movi	r3,1364
2002648c:	19400536 	bltu	r3,r5,200264a4 <_free_r+0x2f0>
20026490:	100ad4ba 	srli	r5,r2,18
20026494:	28c01f44 	addi	r3,r5,125
20026498:	18c7883a 	add	r3,r3,r3
2002649c:	29401f04 	addi	r5,r5,124
200264a0:	003f8e06 	br	200262dc <__alt_data_end+0xfffe82dc>
200264a4:	00c03f84 	movi	r3,254
200264a8:	01401f84 	movi	r5,126
200264ac:	003f8b06 	br	200262dc <__alt_data_end+0xfffe82dc>
200264b0:	10c00054 	ori	r3,r2,1
200264b4:	30c00115 	stw	r3,4(r6)
200264b8:	308d883a 	add	r6,r6,r2
200264bc:	30800015 	stw	r2,0(r6)
200264c0:	003f7806 	br	200262a4 <__alt_data_end+0xfffe82a4>

200264c4 <__sfvwrite_r>:
200264c4:	30800217 	ldw	r2,8(r6)
200264c8:	10006726 	beq	r2,zero,20026668 <__sfvwrite_r+0x1a4>
200264cc:	28c0030b 	ldhu	r3,12(r5)
200264d0:	defff404 	addi	sp,sp,-48
200264d4:	dd400715 	stw	r21,28(sp)
200264d8:	dd000615 	stw	r20,24(sp)
200264dc:	dc000215 	stw	r16,8(sp)
200264e0:	dfc00b15 	stw	ra,44(sp)
200264e4:	df000a15 	stw	fp,40(sp)
200264e8:	ddc00915 	stw	r23,36(sp)
200264ec:	dd800815 	stw	r22,32(sp)
200264f0:	dcc00515 	stw	r19,20(sp)
200264f4:	dc800415 	stw	r18,16(sp)
200264f8:	dc400315 	stw	r17,12(sp)
200264fc:	1880020c 	andi	r2,r3,8
20026500:	2821883a 	mov	r16,r5
20026504:	202b883a 	mov	r21,r4
20026508:	3029883a 	mov	r20,r6
2002650c:	10002726 	beq	r2,zero,200265ac <__sfvwrite_r+0xe8>
20026510:	28800417 	ldw	r2,16(r5)
20026514:	10002526 	beq	r2,zero,200265ac <__sfvwrite_r+0xe8>
20026518:	1880008c 	andi	r2,r3,2
2002651c:	a4400017 	ldw	r17,0(r20)
20026520:	10002a26 	beq	r2,zero,200265cc <__sfvwrite_r+0x108>
20026524:	05a00034 	movhi	r22,32768
20026528:	0027883a 	mov	r19,zero
2002652c:	0025883a 	mov	r18,zero
20026530:	b5bf0004 	addi	r22,r22,-1024
20026534:	980d883a 	mov	r6,r19
20026538:	a809883a 	mov	r4,r21
2002653c:	90004626 	beq	r18,zero,20026658 <__sfvwrite_r+0x194>
20026540:	900f883a 	mov	r7,r18
20026544:	b480022e 	bgeu	r22,r18,20026550 <__sfvwrite_r+0x8c>
20026548:	01e00034 	movhi	r7,32768
2002654c:	39ff0004 	addi	r7,r7,-1024
20026550:	80800917 	ldw	r2,36(r16)
20026554:	81400717 	ldw	r5,28(r16)
20026558:	103ee83a 	callr	r2
2002655c:	0080570e 	bge	zero,r2,200266bc <__sfvwrite_r+0x1f8>
20026560:	a0c00217 	ldw	r3,8(r20)
20026564:	98a7883a 	add	r19,r19,r2
20026568:	90a5c83a 	sub	r18,r18,r2
2002656c:	1885c83a 	sub	r2,r3,r2
20026570:	a0800215 	stw	r2,8(r20)
20026574:	103fef1e 	bne	r2,zero,20026534 <__alt_data_end+0xfffe8534>
20026578:	0005883a 	mov	r2,zero
2002657c:	dfc00b17 	ldw	ra,44(sp)
20026580:	df000a17 	ldw	fp,40(sp)
20026584:	ddc00917 	ldw	r23,36(sp)
20026588:	dd800817 	ldw	r22,32(sp)
2002658c:	dd400717 	ldw	r21,28(sp)
20026590:	dd000617 	ldw	r20,24(sp)
20026594:	dcc00517 	ldw	r19,20(sp)
20026598:	dc800417 	ldw	r18,16(sp)
2002659c:	dc400317 	ldw	r17,12(sp)
200265a0:	dc000217 	ldw	r16,8(sp)
200265a4:	dec00c04 	addi	sp,sp,48
200265a8:	f800283a 	ret
200265ac:	800b883a 	mov	r5,r16
200265b0:	a809883a 	mov	r4,r21
200265b4:	00242b40 	call	200242b4 <__swsetup_r>
200265b8:	1000eb1e 	bne	r2,zero,20026968 <__sfvwrite_r+0x4a4>
200265bc:	80c0030b 	ldhu	r3,12(r16)
200265c0:	a4400017 	ldw	r17,0(r20)
200265c4:	1880008c 	andi	r2,r3,2
200265c8:	103fd61e 	bne	r2,zero,20026524 <__alt_data_end+0xfffe8524>
200265cc:	1880004c 	andi	r2,r3,1
200265d0:	10003f1e 	bne	r2,zero,200266d0 <__sfvwrite_r+0x20c>
200265d4:	0039883a 	mov	fp,zero
200265d8:	0025883a 	mov	r18,zero
200265dc:	90001a26 	beq	r18,zero,20026648 <__sfvwrite_r+0x184>
200265e0:	1880800c 	andi	r2,r3,512
200265e4:	84c00217 	ldw	r19,8(r16)
200265e8:	10002126 	beq	r2,zero,20026670 <__sfvwrite_r+0x1ac>
200265ec:	982f883a 	mov	r23,r19
200265f0:	94c09336 	bltu	r18,r19,20026840 <__sfvwrite_r+0x37c>
200265f4:	1881200c 	andi	r2,r3,1152
200265f8:	10009e1e 	bne	r2,zero,20026874 <__sfvwrite_r+0x3b0>
200265fc:	81000017 	ldw	r4,0(r16)
20026600:	b80d883a 	mov	r6,r23
20026604:	e00b883a 	mov	r5,fp
20026608:	0026c780 	call	20026c78 <memmove>
2002660c:	80c00217 	ldw	r3,8(r16)
20026610:	81000017 	ldw	r4,0(r16)
20026614:	9005883a 	mov	r2,r18
20026618:	1ce7c83a 	sub	r19,r3,r19
2002661c:	25cf883a 	add	r7,r4,r23
20026620:	84c00215 	stw	r19,8(r16)
20026624:	81c00015 	stw	r7,0(r16)
20026628:	a0c00217 	ldw	r3,8(r20)
2002662c:	e0b9883a 	add	fp,fp,r2
20026630:	90a5c83a 	sub	r18,r18,r2
20026634:	18a7c83a 	sub	r19,r3,r2
20026638:	a4c00215 	stw	r19,8(r20)
2002663c:	983fce26 	beq	r19,zero,20026578 <__alt_data_end+0xfffe8578>
20026640:	80c0030b 	ldhu	r3,12(r16)
20026644:	903fe61e 	bne	r18,zero,200265e0 <__alt_data_end+0xfffe85e0>
20026648:	8f000017 	ldw	fp,0(r17)
2002664c:	8c800117 	ldw	r18,4(r17)
20026650:	8c400204 	addi	r17,r17,8
20026654:	003fe106 	br	200265dc <__alt_data_end+0xfffe85dc>
20026658:	8cc00017 	ldw	r19,0(r17)
2002665c:	8c800117 	ldw	r18,4(r17)
20026660:	8c400204 	addi	r17,r17,8
20026664:	003fb306 	br	20026534 <__alt_data_end+0xfffe8534>
20026668:	0005883a 	mov	r2,zero
2002666c:	f800283a 	ret
20026670:	81000017 	ldw	r4,0(r16)
20026674:	80800417 	ldw	r2,16(r16)
20026678:	11005736 	bltu	r2,r4,200267d8 <__sfvwrite_r+0x314>
2002667c:	85c00517 	ldw	r23,20(r16)
20026680:	95c05536 	bltu	r18,r23,200267d8 <__sfvwrite_r+0x314>
20026684:	00a00034 	movhi	r2,32768
20026688:	10bfffc4 	addi	r2,r2,-1
2002668c:	9009883a 	mov	r4,r18
20026690:	1480012e 	bgeu	r2,r18,20026698 <__sfvwrite_r+0x1d4>
20026694:	1009883a 	mov	r4,r2
20026698:	b80b883a 	mov	r5,r23
2002669c:	002ae000 	call	2002ae00 <__divsi3>
200266a0:	15cf383a 	mul	r7,r2,r23
200266a4:	81400717 	ldw	r5,28(r16)
200266a8:	80800917 	ldw	r2,36(r16)
200266ac:	e00d883a 	mov	r6,fp
200266b0:	a809883a 	mov	r4,r21
200266b4:	103ee83a 	callr	r2
200266b8:	00bfdb16 	blt	zero,r2,20026628 <__alt_data_end+0xfffe8628>
200266bc:	8080030b 	ldhu	r2,12(r16)
200266c0:	10801014 	ori	r2,r2,64
200266c4:	8080030d 	sth	r2,12(r16)
200266c8:	00bfffc4 	movi	r2,-1
200266cc:	003fab06 	br	2002657c <__alt_data_end+0xfffe857c>
200266d0:	0027883a 	mov	r19,zero
200266d4:	0011883a 	mov	r8,zero
200266d8:	0039883a 	mov	fp,zero
200266dc:	0025883a 	mov	r18,zero
200266e0:	90001f26 	beq	r18,zero,20026760 <__sfvwrite_r+0x29c>
200266e4:	40005a26 	beq	r8,zero,20026850 <__sfvwrite_r+0x38c>
200266e8:	982d883a 	mov	r22,r19
200266ec:	94c0012e 	bgeu	r18,r19,200266f4 <__sfvwrite_r+0x230>
200266f0:	902d883a 	mov	r22,r18
200266f4:	81000017 	ldw	r4,0(r16)
200266f8:	80800417 	ldw	r2,16(r16)
200266fc:	b02f883a 	mov	r23,r22
20026700:	81c00517 	ldw	r7,20(r16)
20026704:	1100032e 	bgeu	r2,r4,20026714 <__sfvwrite_r+0x250>
20026708:	80c00217 	ldw	r3,8(r16)
2002670c:	38c7883a 	add	r3,r7,r3
20026710:	1d801816 	blt	r3,r22,20026774 <__sfvwrite_r+0x2b0>
20026714:	b1c03e16 	blt	r22,r7,20026810 <__sfvwrite_r+0x34c>
20026718:	80800917 	ldw	r2,36(r16)
2002671c:	81400717 	ldw	r5,28(r16)
20026720:	e00d883a 	mov	r6,fp
20026724:	da000115 	stw	r8,4(sp)
20026728:	a809883a 	mov	r4,r21
2002672c:	103ee83a 	callr	r2
20026730:	102f883a 	mov	r23,r2
20026734:	da000117 	ldw	r8,4(sp)
20026738:	00bfe00e 	bge	zero,r2,200266bc <__alt_data_end+0xfffe86bc>
2002673c:	9de7c83a 	sub	r19,r19,r23
20026740:	98001f26 	beq	r19,zero,200267c0 <__sfvwrite_r+0x2fc>
20026744:	a0800217 	ldw	r2,8(r20)
20026748:	e5f9883a 	add	fp,fp,r23
2002674c:	95e5c83a 	sub	r18,r18,r23
20026750:	15efc83a 	sub	r23,r2,r23
20026754:	a5c00215 	stw	r23,8(r20)
20026758:	b83f8726 	beq	r23,zero,20026578 <__alt_data_end+0xfffe8578>
2002675c:	903fe11e 	bne	r18,zero,200266e4 <__alt_data_end+0xfffe86e4>
20026760:	8f000017 	ldw	fp,0(r17)
20026764:	8c800117 	ldw	r18,4(r17)
20026768:	0011883a 	mov	r8,zero
2002676c:	8c400204 	addi	r17,r17,8
20026770:	003fdb06 	br	200266e0 <__alt_data_end+0xfffe86e0>
20026774:	180d883a 	mov	r6,r3
20026778:	e00b883a 	mov	r5,fp
2002677c:	da000115 	stw	r8,4(sp)
20026780:	d8c00015 	stw	r3,0(sp)
20026784:	0026c780 	call	20026c78 <memmove>
20026788:	d8c00017 	ldw	r3,0(sp)
2002678c:	80800017 	ldw	r2,0(r16)
20026790:	800b883a 	mov	r5,r16
20026794:	a809883a 	mov	r4,r21
20026798:	10c5883a 	add	r2,r2,r3
2002679c:	80800015 	stw	r2,0(r16)
200267a0:	d8c00015 	stw	r3,0(sp)
200267a4:	00260040 	call	20026004 <_fflush_r>
200267a8:	d8c00017 	ldw	r3,0(sp)
200267ac:	da000117 	ldw	r8,4(sp)
200267b0:	103fc21e 	bne	r2,zero,200266bc <__alt_data_end+0xfffe86bc>
200267b4:	182f883a 	mov	r23,r3
200267b8:	9de7c83a 	sub	r19,r19,r23
200267bc:	983fe11e 	bne	r19,zero,20026744 <__alt_data_end+0xfffe8744>
200267c0:	800b883a 	mov	r5,r16
200267c4:	a809883a 	mov	r4,r21
200267c8:	00260040 	call	20026004 <_fflush_r>
200267cc:	103fbb1e 	bne	r2,zero,200266bc <__alt_data_end+0xfffe86bc>
200267d0:	0011883a 	mov	r8,zero
200267d4:	003fdb06 	br	20026744 <__alt_data_end+0xfffe8744>
200267d8:	94c0012e 	bgeu	r18,r19,200267e0 <__sfvwrite_r+0x31c>
200267dc:	9027883a 	mov	r19,r18
200267e0:	980d883a 	mov	r6,r19
200267e4:	e00b883a 	mov	r5,fp
200267e8:	0026c780 	call	20026c78 <memmove>
200267ec:	80800217 	ldw	r2,8(r16)
200267f0:	80c00017 	ldw	r3,0(r16)
200267f4:	14c5c83a 	sub	r2,r2,r19
200267f8:	1cc7883a 	add	r3,r3,r19
200267fc:	80800215 	stw	r2,8(r16)
20026800:	80c00015 	stw	r3,0(r16)
20026804:	10004326 	beq	r2,zero,20026914 <__sfvwrite_r+0x450>
20026808:	9805883a 	mov	r2,r19
2002680c:	003f8606 	br	20026628 <__alt_data_end+0xfffe8628>
20026810:	b00d883a 	mov	r6,r22
20026814:	e00b883a 	mov	r5,fp
20026818:	da000115 	stw	r8,4(sp)
2002681c:	0026c780 	call	20026c78 <memmove>
20026820:	80800217 	ldw	r2,8(r16)
20026824:	80c00017 	ldw	r3,0(r16)
20026828:	da000117 	ldw	r8,4(sp)
2002682c:	1585c83a 	sub	r2,r2,r22
20026830:	1dad883a 	add	r22,r3,r22
20026834:	80800215 	stw	r2,8(r16)
20026838:	85800015 	stw	r22,0(r16)
2002683c:	003fbf06 	br	2002673c <__alt_data_end+0xfffe873c>
20026840:	81000017 	ldw	r4,0(r16)
20026844:	9027883a 	mov	r19,r18
20026848:	902f883a 	mov	r23,r18
2002684c:	003f6c06 	br	20026600 <__alt_data_end+0xfffe8600>
20026850:	900d883a 	mov	r6,r18
20026854:	01400284 	movi	r5,10
20026858:	e009883a 	mov	r4,fp
2002685c:	00216b80 	call	200216b8 <memchr>
20026860:	10003e26 	beq	r2,zero,2002695c <__sfvwrite_r+0x498>
20026864:	10800044 	addi	r2,r2,1
20026868:	1727c83a 	sub	r19,r2,fp
2002686c:	02000044 	movi	r8,1
20026870:	003f9d06 	br	200266e8 <__alt_data_end+0xfffe86e8>
20026874:	80800517 	ldw	r2,20(r16)
20026878:	81400417 	ldw	r5,16(r16)
2002687c:	81c00017 	ldw	r7,0(r16)
20026880:	10a7883a 	add	r19,r2,r2
20026884:	9885883a 	add	r2,r19,r2
20026888:	1026d7fa 	srli	r19,r2,31
2002688c:	396dc83a 	sub	r22,r7,r5
20026890:	b1000044 	addi	r4,r22,1
20026894:	9885883a 	add	r2,r19,r2
20026898:	1027d07a 	srai	r19,r2,1
2002689c:	2485883a 	add	r2,r4,r18
200268a0:	980d883a 	mov	r6,r19
200268a4:	9880022e 	bgeu	r19,r2,200268b0 <__sfvwrite_r+0x3ec>
200268a8:	1027883a 	mov	r19,r2
200268ac:	100d883a 	mov	r6,r2
200268b0:	18c1000c 	andi	r3,r3,1024
200268b4:	18001c26 	beq	r3,zero,20026928 <__sfvwrite_r+0x464>
200268b8:	300b883a 	mov	r5,r6
200268bc:	a809883a 	mov	r4,r21
200268c0:	0020eac0 	call	20020eac <_malloc_r>
200268c4:	102f883a 	mov	r23,r2
200268c8:	10002926 	beq	r2,zero,20026970 <__sfvwrite_r+0x4ac>
200268cc:	81400417 	ldw	r5,16(r16)
200268d0:	b00d883a 	mov	r6,r22
200268d4:	1009883a 	mov	r4,r2
200268d8:	002179c0 	call	2002179c <memcpy>
200268dc:	8080030b 	ldhu	r2,12(r16)
200268e0:	00fedfc4 	movi	r3,-1153
200268e4:	10c4703a 	and	r2,r2,r3
200268e8:	10802014 	ori	r2,r2,128
200268ec:	8080030d 	sth	r2,12(r16)
200268f0:	bd89883a 	add	r4,r23,r22
200268f4:	9d8fc83a 	sub	r7,r19,r22
200268f8:	85c00415 	stw	r23,16(r16)
200268fc:	84c00515 	stw	r19,20(r16)
20026900:	81000015 	stw	r4,0(r16)
20026904:	9027883a 	mov	r19,r18
20026908:	81c00215 	stw	r7,8(r16)
2002690c:	902f883a 	mov	r23,r18
20026910:	003f3b06 	br	20026600 <__alt_data_end+0xfffe8600>
20026914:	800b883a 	mov	r5,r16
20026918:	a809883a 	mov	r4,r21
2002691c:	00260040 	call	20026004 <_fflush_r>
20026920:	103fb926 	beq	r2,zero,20026808 <__alt_data_end+0xfffe8808>
20026924:	003f6506 	br	200266bc <__alt_data_end+0xfffe86bc>
20026928:	a809883a 	mov	r4,r21
2002692c:	0027f980 	call	20027f98 <_realloc_r>
20026930:	102f883a 	mov	r23,r2
20026934:	103fee1e 	bne	r2,zero,200268f0 <__alt_data_end+0xfffe88f0>
20026938:	81400417 	ldw	r5,16(r16)
2002693c:	a809883a 	mov	r4,r21
20026940:	00261b40 	call	200261b4 <_free_r>
20026944:	8080030b 	ldhu	r2,12(r16)
20026948:	00ffdfc4 	movi	r3,-129
2002694c:	1884703a 	and	r2,r3,r2
20026950:	00c00304 	movi	r3,12
20026954:	a8c00015 	stw	r3,0(r21)
20026958:	003f5906 	br	200266c0 <__alt_data_end+0xfffe86c0>
2002695c:	94c00044 	addi	r19,r18,1
20026960:	02000044 	movi	r8,1
20026964:	003f6006 	br	200266e8 <__alt_data_end+0xfffe86e8>
20026968:	00bfffc4 	movi	r2,-1
2002696c:	003f0306 	br	2002657c <__alt_data_end+0xfffe857c>
20026970:	00800304 	movi	r2,12
20026974:	a8800015 	stw	r2,0(r21)
20026978:	8080030b 	ldhu	r2,12(r16)
2002697c:	003f5006 	br	200266c0 <__alt_data_end+0xfffe86c0>

20026980 <_setlocale_r>:
20026980:	30001b26 	beq	r6,zero,200269f0 <_setlocale_r+0x70>
20026984:	014800f4 	movhi	r5,8195
20026988:	defffe04 	addi	sp,sp,-8
2002698c:	29439804 	addi	r5,r5,3680
20026990:	3009883a 	mov	r4,r6
20026994:	dc000015 	stw	r16,0(sp)
20026998:	dfc00115 	stw	ra,4(sp)
2002699c:	3021883a 	mov	r16,r6
200269a0:	00285700 	call	20028570 <strcmp>
200269a4:	1000061e 	bne	r2,zero,200269c0 <_setlocale_r+0x40>
200269a8:	008800f4 	movhi	r2,8195
200269ac:	10837904 	addi	r2,r2,3556
200269b0:	dfc00117 	ldw	ra,4(sp)
200269b4:	dc000017 	ldw	r16,0(sp)
200269b8:	dec00204 	addi	sp,sp,8
200269bc:	f800283a 	ret
200269c0:	014800f4 	movhi	r5,8195
200269c4:	29437904 	addi	r5,r5,3556
200269c8:	8009883a 	mov	r4,r16
200269cc:	00285700 	call	20028570 <strcmp>
200269d0:	103ff526 	beq	r2,zero,200269a8 <__alt_data_end+0xfffe89a8>
200269d4:	014800f4 	movhi	r5,8195
200269d8:	29438304 	addi	r5,r5,3596
200269dc:	8009883a 	mov	r4,r16
200269e0:	00285700 	call	20028570 <strcmp>
200269e4:	103ff026 	beq	r2,zero,200269a8 <__alt_data_end+0xfffe89a8>
200269e8:	0005883a 	mov	r2,zero
200269ec:	003ff006 	br	200269b0 <__alt_data_end+0xfffe89b0>
200269f0:	008800f4 	movhi	r2,8195
200269f4:	10837904 	addi	r2,r2,3556
200269f8:	f800283a 	ret

200269fc <__locale_charset>:
200269fc:	008800f4 	movhi	r2,8195
20026a00:	10865b04 	addi	r2,r2,6508
20026a04:	f800283a 	ret

20026a08 <__locale_mb_cur_max>:
20026a08:	008800f4 	movhi	r2,8195
20026a0c:	108b0d04 	addi	r2,r2,11316
20026a10:	10800017 	ldw	r2,0(r2)
20026a14:	f800283a 	ret

20026a18 <__locale_msgcharset>:
20026a18:	008800f4 	movhi	r2,8195
20026a1c:	10865304 	addi	r2,r2,6476
20026a20:	f800283a 	ret

20026a24 <__locale_cjk_lang>:
20026a24:	0005883a 	mov	r2,zero
20026a28:	f800283a 	ret

20026a2c <_localeconv_r>:
20026a2c:	008800f4 	movhi	r2,8195
20026a30:	10866304 	addi	r2,r2,6540
20026a34:	f800283a 	ret

20026a38 <setlocale>:
20026a38:	008800f4 	movhi	r2,8195
20026a3c:	108b0a04 	addi	r2,r2,11304
20026a40:	280d883a 	mov	r6,r5
20026a44:	200b883a 	mov	r5,r4
20026a48:	11000017 	ldw	r4,0(r2)
20026a4c:	00269801 	jmpi	20026980 <_setlocale_r>

20026a50 <localeconv>:
20026a50:	008800f4 	movhi	r2,8195
20026a54:	10866304 	addi	r2,r2,6540
20026a58:	f800283a 	ret

20026a5c <_lseek_r>:
20026a5c:	defffd04 	addi	sp,sp,-12
20026a60:	2805883a 	mov	r2,r5
20026a64:	dc000015 	stw	r16,0(sp)
20026a68:	040800f4 	movhi	r16,8195
20026a6c:	dc400115 	stw	r17,4(sp)
20026a70:	300b883a 	mov	r5,r6
20026a74:	8411f504 	addi	r16,r16,18388
20026a78:	2023883a 	mov	r17,r4
20026a7c:	380d883a 	mov	r6,r7
20026a80:	1009883a 	mov	r4,r2
20026a84:	dfc00215 	stw	ra,8(sp)
20026a88:	80000015 	stw	zero,0(r16)
20026a8c:	002da900 	call	2002da90 <lseek>
20026a90:	00ffffc4 	movi	r3,-1
20026a94:	10c00526 	beq	r2,r3,20026aac <_lseek_r+0x50>
20026a98:	dfc00217 	ldw	ra,8(sp)
20026a9c:	dc400117 	ldw	r17,4(sp)
20026aa0:	dc000017 	ldw	r16,0(sp)
20026aa4:	dec00304 	addi	sp,sp,12
20026aa8:	f800283a 	ret
20026aac:	80c00017 	ldw	r3,0(r16)
20026ab0:	183ff926 	beq	r3,zero,20026a98 <__alt_data_end+0xfffe8a98>
20026ab4:	88c00015 	stw	r3,0(r17)
20026ab8:	003ff706 	br	20026a98 <__alt_data_end+0xfffe8a98>

20026abc <__smakebuf_r>:
20026abc:	2880030b 	ldhu	r2,12(r5)
20026ac0:	10c0008c 	andi	r3,r2,2
20026ac4:	1800411e 	bne	r3,zero,20026bcc <__smakebuf_r+0x110>
20026ac8:	deffec04 	addi	sp,sp,-80
20026acc:	dc000f15 	stw	r16,60(sp)
20026ad0:	2821883a 	mov	r16,r5
20026ad4:	2940038f 	ldh	r5,14(r5)
20026ad8:	dc401015 	stw	r17,64(sp)
20026adc:	dfc01315 	stw	ra,76(sp)
20026ae0:	dcc01215 	stw	r19,72(sp)
20026ae4:	dc801115 	stw	r18,68(sp)
20026ae8:	2023883a 	mov	r17,r4
20026aec:	28001c16 	blt	r5,zero,20026b60 <__smakebuf_r+0xa4>
20026af0:	d80d883a 	mov	r6,sp
20026af4:	002a0b80 	call	2002a0b8 <_fstat_r>
20026af8:	10001816 	blt	r2,zero,20026b5c <__smakebuf_r+0xa0>
20026afc:	d8800117 	ldw	r2,4(sp)
20026b00:	00e00014 	movui	r3,32768
20026b04:	10bc000c 	andi	r2,r2,61440
20026b08:	14c80020 	cmpeqi	r19,r2,8192
20026b0c:	10c03726 	beq	r2,r3,20026bec <__smakebuf_r+0x130>
20026b10:	80c0030b 	ldhu	r3,12(r16)
20026b14:	18c20014 	ori	r3,r3,2048
20026b18:	80c0030d 	sth	r3,12(r16)
20026b1c:	00c80004 	movi	r3,8192
20026b20:	10c0521e 	bne	r2,r3,20026c6c <__smakebuf_r+0x1b0>
20026b24:	8140038f 	ldh	r5,14(r16)
20026b28:	8809883a 	mov	r4,r17
20026b2c:	002a1140 	call	2002a114 <_isatty_r>
20026b30:	10004c26 	beq	r2,zero,20026c64 <__smakebuf_r+0x1a8>
20026b34:	8080030b 	ldhu	r2,12(r16)
20026b38:	80c010c4 	addi	r3,r16,67
20026b3c:	80c00015 	stw	r3,0(r16)
20026b40:	10800054 	ori	r2,r2,1
20026b44:	8080030d 	sth	r2,12(r16)
20026b48:	00800044 	movi	r2,1
20026b4c:	80c00415 	stw	r3,16(r16)
20026b50:	80800515 	stw	r2,20(r16)
20026b54:	04810004 	movi	r18,1024
20026b58:	00000706 	br	20026b78 <__smakebuf_r+0xbc>
20026b5c:	8080030b 	ldhu	r2,12(r16)
20026b60:	10c0200c 	andi	r3,r2,128
20026b64:	18001f1e 	bne	r3,zero,20026be4 <__smakebuf_r+0x128>
20026b68:	04810004 	movi	r18,1024
20026b6c:	10820014 	ori	r2,r2,2048
20026b70:	8080030d 	sth	r2,12(r16)
20026b74:	0027883a 	mov	r19,zero
20026b78:	900b883a 	mov	r5,r18
20026b7c:	8809883a 	mov	r4,r17
20026b80:	0020eac0 	call	20020eac <_malloc_r>
20026b84:	10002c26 	beq	r2,zero,20026c38 <__smakebuf_r+0x17c>
20026b88:	80c0030b 	ldhu	r3,12(r16)
20026b8c:	010800b4 	movhi	r4,8194
20026b90:	21026304 	addi	r4,r4,2444
20026b94:	89000f15 	stw	r4,60(r17)
20026b98:	18c02014 	ori	r3,r3,128
20026b9c:	80c0030d 	sth	r3,12(r16)
20026ba0:	80800015 	stw	r2,0(r16)
20026ba4:	80800415 	stw	r2,16(r16)
20026ba8:	84800515 	stw	r18,20(r16)
20026bac:	98001a1e 	bne	r19,zero,20026c18 <__smakebuf_r+0x15c>
20026bb0:	dfc01317 	ldw	ra,76(sp)
20026bb4:	dcc01217 	ldw	r19,72(sp)
20026bb8:	dc801117 	ldw	r18,68(sp)
20026bbc:	dc401017 	ldw	r17,64(sp)
20026bc0:	dc000f17 	ldw	r16,60(sp)
20026bc4:	dec01404 	addi	sp,sp,80
20026bc8:	f800283a 	ret
20026bcc:	288010c4 	addi	r2,r5,67
20026bd0:	28800015 	stw	r2,0(r5)
20026bd4:	28800415 	stw	r2,16(r5)
20026bd8:	00800044 	movi	r2,1
20026bdc:	28800515 	stw	r2,20(r5)
20026be0:	f800283a 	ret
20026be4:	04801004 	movi	r18,64
20026be8:	003fe006 	br	20026b6c <__alt_data_end+0xfffe8b6c>
20026bec:	81000a17 	ldw	r4,40(r16)
20026bf0:	00c800b4 	movhi	r3,8194
20026bf4:	18c7a204 	addi	r3,r3,7816
20026bf8:	20ffc51e 	bne	r4,r3,20026b10 <__alt_data_end+0xfffe8b10>
20026bfc:	8080030b 	ldhu	r2,12(r16)
20026c00:	04810004 	movi	r18,1024
20026c04:	84801315 	stw	r18,76(r16)
20026c08:	1484b03a 	or	r2,r2,r18
20026c0c:	8080030d 	sth	r2,12(r16)
20026c10:	0027883a 	mov	r19,zero
20026c14:	003fd806 	br	20026b78 <__alt_data_end+0xfffe8b78>
20026c18:	8140038f 	ldh	r5,14(r16)
20026c1c:	8809883a 	mov	r4,r17
20026c20:	002a1140 	call	2002a114 <_isatty_r>
20026c24:	103fe226 	beq	r2,zero,20026bb0 <__alt_data_end+0xfffe8bb0>
20026c28:	8080030b 	ldhu	r2,12(r16)
20026c2c:	10800054 	ori	r2,r2,1
20026c30:	8080030d 	sth	r2,12(r16)
20026c34:	003fde06 	br	20026bb0 <__alt_data_end+0xfffe8bb0>
20026c38:	8080030b 	ldhu	r2,12(r16)
20026c3c:	10c0800c 	andi	r3,r2,512
20026c40:	183fdb1e 	bne	r3,zero,20026bb0 <__alt_data_end+0xfffe8bb0>
20026c44:	10800094 	ori	r2,r2,2
20026c48:	80c010c4 	addi	r3,r16,67
20026c4c:	8080030d 	sth	r2,12(r16)
20026c50:	00800044 	movi	r2,1
20026c54:	80c00015 	stw	r3,0(r16)
20026c58:	80c00415 	stw	r3,16(r16)
20026c5c:	80800515 	stw	r2,20(r16)
20026c60:	003fd306 	br	20026bb0 <__alt_data_end+0xfffe8bb0>
20026c64:	04810004 	movi	r18,1024
20026c68:	003fc306 	br	20026b78 <__alt_data_end+0xfffe8b78>
20026c6c:	0027883a 	mov	r19,zero
20026c70:	04810004 	movi	r18,1024
20026c74:	003fc006 	br	20026b78 <__alt_data_end+0xfffe8b78>

20026c78 <memmove>:
20026c78:	2005883a 	mov	r2,r4
20026c7c:	29000b2e 	bgeu	r5,r4,20026cac <memmove+0x34>
20026c80:	298f883a 	add	r7,r5,r6
20026c84:	21c0092e 	bgeu	r4,r7,20026cac <memmove+0x34>
20026c88:	2187883a 	add	r3,r4,r6
20026c8c:	198bc83a 	sub	r5,r3,r6
20026c90:	30004826 	beq	r6,zero,20026db4 <memmove+0x13c>
20026c94:	39ffffc4 	addi	r7,r7,-1
20026c98:	39000003 	ldbu	r4,0(r7)
20026c9c:	18ffffc4 	addi	r3,r3,-1
20026ca0:	19000005 	stb	r4,0(r3)
20026ca4:	28fffb1e 	bne	r5,r3,20026c94 <__alt_data_end+0xfffe8c94>
20026ca8:	f800283a 	ret
20026cac:	00c003c4 	movi	r3,15
20026cb0:	1980412e 	bgeu	r3,r6,20026db8 <memmove+0x140>
20026cb4:	2886b03a 	or	r3,r5,r2
20026cb8:	18c000cc 	andi	r3,r3,3
20026cbc:	1800401e 	bne	r3,zero,20026dc0 <memmove+0x148>
20026cc0:	33fffc04 	addi	r15,r6,-16
20026cc4:	781ed13a 	srli	r15,r15,4
20026cc8:	28c00104 	addi	r3,r5,4
20026ccc:	13400104 	addi	r13,r2,4
20026cd0:	781c913a 	slli	r14,r15,4
20026cd4:	2b000204 	addi	r12,r5,8
20026cd8:	12c00204 	addi	r11,r2,8
20026cdc:	73800504 	addi	r14,r14,20
20026ce0:	2a800304 	addi	r10,r5,12
20026ce4:	12400304 	addi	r9,r2,12
20026ce8:	2b9d883a 	add	r14,r5,r14
20026cec:	2811883a 	mov	r8,r5
20026cf0:	100f883a 	mov	r7,r2
20026cf4:	41000017 	ldw	r4,0(r8)
20026cf8:	39c00404 	addi	r7,r7,16
20026cfc:	18c00404 	addi	r3,r3,16
20026d00:	393ffc15 	stw	r4,-16(r7)
20026d04:	193ffc17 	ldw	r4,-16(r3)
20026d08:	6b400404 	addi	r13,r13,16
20026d0c:	5ac00404 	addi	r11,r11,16
20026d10:	693ffc15 	stw	r4,-16(r13)
20026d14:	61000017 	ldw	r4,0(r12)
20026d18:	4a400404 	addi	r9,r9,16
20026d1c:	42000404 	addi	r8,r8,16
20026d20:	593ffc15 	stw	r4,-16(r11)
20026d24:	51000017 	ldw	r4,0(r10)
20026d28:	63000404 	addi	r12,r12,16
20026d2c:	52800404 	addi	r10,r10,16
20026d30:	493ffc15 	stw	r4,-16(r9)
20026d34:	1bbfef1e 	bne	r3,r14,20026cf4 <__alt_data_end+0xfffe8cf4>
20026d38:	79000044 	addi	r4,r15,1
20026d3c:	2008913a 	slli	r4,r4,4
20026d40:	328003cc 	andi	r10,r6,15
20026d44:	02c000c4 	movi	r11,3
20026d48:	1107883a 	add	r3,r2,r4
20026d4c:	290b883a 	add	r5,r5,r4
20026d50:	5a801e2e 	bgeu	r11,r10,20026dcc <memmove+0x154>
20026d54:	1813883a 	mov	r9,r3
20026d58:	2811883a 	mov	r8,r5
20026d5c:	500f883a 	mov	r7,r10
20026d60:	41000017 	ldw	r4,0(r8)
20026d64:	4a400104 	addi	r9,r9,4
20026d68:	39ffff04 	addi	r7,r7,-4
20026d6c:	493fff15 	stw	r4,-4(r9)
20026d70:	42000104 	addi	r8,r8,4
20026d74:	59fffa36 	bltu	r11,r7,20026d60 <__alt_data_end+0xfffe8d60>
20026d78:	513fff04 	addi	r4,r10,-4
20026d7c:	2008d0ba 	srli	r4,r4,2
20026d80:	318000cc 	andi	r6,r6,3
20026d84:	21000044 	addi	r4,r4,1
20026d88:	2109883a 	add	r4,r4,r4
20026d8c:	2109883a 	add	r4,r4,r4
20026d90:	1907883a 	add	r3,r3,r4
20026d94:	290b883a 	add	r5,r5,r4
20026d98:	30000b26 	beq	r6,zero,20026dc8 <memmove+0x150>
20026d9c:	198d883a 	add	r6,r3,r6
20026da0:	29c00003 	ldbu	r7,0(r5)
20026da4:	18c00044 	addi	r3,r3,1
20026da8:	29400044 	addi	r5,r5,1
20026dac:	19ffffc5 	stb	r7,-1(r3)
20026db0:	19bffb1e 	bne	r3,r6,20026da0 <__alt_data_end+0xfffe8da0>
20026db4:	f800283a 	ret
20026db8:	1007883a 	mov	r3,r2
20026dbc:	003ff606 	br	20026d98 <__alt_data_end+0xfffe8d98>
20026dc0:	1007883a 	mov	r3,r2
20026dc4:	003ff506 	br	20026d9c <__alt_data_end+0xfffe8d9c>
20026dc8:	f800283a 	ret
20026dcc:	500d883a 	mov	r6,r10
20026dd0:	003ff106 	br	20026d98 <__alt_data_end+0xfffe8d98>

20026dd4 <_Balloc>:
20026dd4:	20801317 	ldw	r2,76(r4)
20026dd8:	defffc04 	addi	sp,sp,-16
20026ddc:	dc400115 	stw	r17,4(sp)
20026de0:	dc000015 	stw	r16,0(sp)
20026de4:	dfc00315 	stw	ra,12(sp)
20026de8:	dc800215 	stw	r18,8(sp)
20026dec:	2023883a 	mov	r17,r4
20026df0:	2821883a 	mov	r16,r5
20026df4:	10000f26 	beq	r2,zero,20026e34 <_Balloc+0x60>
20026df8:	8407883a 	add	r3,r16,r16
20026dfc:	18c7883a 	add	r3,r3,r3
20026e00:	10c7883a 	add	r3,r2,r3
20026e04:	18800017 	ldw	r2,0(r3)
20026e08:	10001126 	beq	r2,zero,20026e50 <_Balloc+0x7c>
20026e0c:	11000017 	ldw	r4,0(r2)
20026e10:	19000015 	stw	r4,0(r3)
20026e14:	10000415 	stw	zero,16(r2)
20026e18:	10000315 	stw	zero,12(r2)
20026e1c:	dfc00317 	ldw	ra,12(sp)
20026e20:	dc800217 	ldw	r18,8(sp)
20026e24:	dc400117 	ldw	r17,4(sp)
20026e28:	dc000017 	ldw	r16,0(sp)
20026e2c:	dec00404 	addi	sp,sp,16
20026e30:	f800283a 	ret
20026e34:	01800844 	movi	r6,33
20026e38:	01400104 	movi	r5,4
20026e3c:	0029dec0 	call	20029dec <_calloc_r>
20026e40:	88801315 	stw	r2,76(r17)
20026e44:	103fec1e 	bne	r2,zero,20026df8 <__alt_data_end+0xfffe8df8>
20026e48:	0005883a 	mov	r2,zero
20026e4c:	003ff306 	br	20026e1c <__alt_data_end+0xfffe8e1c>
20026e50:	01400044 	movi	r5,1
20026e54:	2c24983a 	sll	r18,r5,r16
20026e58:	8809883a 	mov	r4,r17
20026e5c:	91800144 	addi	r6,r18,5
20026e60:	318d883a 	add	r6,r6,r6
20026e64:	318d883a 	add	r6,r6,r6
20026e68:	0029dec0 	call	20029dec <_calloc_r>
20026e6c:	103ff626 	beq	r2,zero,20026e48 <__alt_data_end+0xfffe8e48>
20026e70:	14000115 	stw	r16,4(r2)
20026e74:	14800215 	stw	r18,8(r2)
20026e78:	003fe606 	br	20026e14 <__alt_data_end+0xfffe8e14>

20026e7c <_Bfree>:
20026e7c:	28000826 	beq	r5,zero,20026ea0 <_Bfree+0x24>
20026e80:	28c00117 	ldw	r3,4(r5)
20026e84:	20801317 	ldw	r2,76(r4)
20026e88:	18c7883a 	add	r3,r3,r3
20026e8c:	18c7883a 	add	r3,r3,r3
20026e90:	10c5883a 	add	r2,r2,r3
20026e94:	10c00017 	ldw	r3,0(r2)
20026e98:	28c00015 	stw	r3,0(r5)
20026e9c:	11400015 	stw	r5,0(r2)
20026ea0:	f800283a 	ret

20026ea4 <__multadd>:
20026ea4:	defffa04 	addi	sp,sp,-24
20026ea8:	dc800315 	stw	r18,12(sp)
20026eac:	dc400215 	stw	r17,8(sp)
20026eb0:	dc000115 	stw	r16,4(sp)
20026eb4:	2823883a 	mov	r17,r5
20026eb8:	2c000417 	ldw	r16,16(r5)
20026ebc:	dfc00515 	stw	ra,20(sp)
20026ec0:	dcc00415 	stw	r19,16(sp)
20026ec4:	2025883a 	mov	r18,r4
20026ec8:	29400504 	addi	r5,r5,20
20026ecc:	0011883a 	mov	r8,zero
20026ed0:	28c00017 	ldw	r3,0(r5)
20026ed4:	29400104 	addi	r5,r5,4
20026ed8:	42000044 	addi	r8,r8,1
20026edc:	18bfffcc 	andi	r2,r3,65535
20026ee0:	1185383a 	mul	r2,r2,r6
20026ee4:	1806d43a 	srli	r3,r3,16
20026ee8:	11cf883a 	add	r7,r2,r7
20026eec:	3808d43a 	srli	r4,r7,16
20026ef0:	1987383a 	mul	r3,r3,r6
20026ef4:	38bfffcc 	andi	r2,r7,65535
20026ef8:	1907883a 	add	r3,r3,r4
20026efc:	1808943a 	slli	r4,r3,16
20026f00:	180ed43a 	srli	r7,r3,16
20026f04:	2085883a 	add	r2,r4,r2
20026f08:	28bfff15 	stw	r2,-4(r5)
20026f0c:	443ff016 	blt	r8,r16,20026ed0 <__alt_data_end+0xfffe8ed0>
20026f10:	38000926 	beq	r7,zero,20026f38 <__multadd+0x94>
20026f14:	88800217 	ldw	r2,8(r17)
20026f18:	80800f0e 	bge	r16,r2,20026f58 <__multadd+0xb4>
20026f1c:	80800144 	addi	r2,r16,5
20026f20:	1085883a 	add	r2,r2,r2
20026f24:	1085883a 	add	r2,r2,r2
20026f28:	8885883a 	add	r2,r17,r2
20026f2c:	11c00015 	stw	r7,0(r2)
20026f30:	84000044 	addi	r16,r16,1
20026f34:	8c000415 	stw	r16,16(r17)
20026f38:	8805883a 	mov	r2,r17
20026f3c:	dfc00517 	ldw	ra,20(sp)
20026f40:	dcc00417 	ldw	r19,16(sp)
20026f44:	dc800317 	ldw	r18,12(sp)
20026f48:	dc400217 	ldw	r17,8(sp)
20026f4c:	dc000117 	ldw	r16,4(sp)
20026f50:	dec00604 	addi	sp,sp,24
20026f54:	f800283a 	ret
20026f58:	89400117 	ldw	r5,4(r17)
20026f5c:	9009883a 	mov	r4,r18
20026f60:	d9c00015 	stw	r7,0(sp)
20026f64:	29400044 	addi	r5,r5,1
20026f68:	0026dd40 	call	20026dd4 <_Balloc>
20026f6c:	89800417 	ldw	r6,16(r17)
20026f70:	89400304 	addi	r5,r17,12
20026f74:	11000304 	addi	r4,r2,12
20026f78:	31800084 	addi	r6,r6,2
20026f7c:	318d883a 	add	r6,r6,r6
20026f80:	318d883a 	add	r6,r6,r6
20026f84:	1027883a 	mov	r19,r2
20026f88:	002179c0 	call	2002179c <memcpy>
20026f8c:	d9c00017 	ldw	r7,0(sp)
20026f90:	88000a26 	beq	r17,zero,20026fbc <__multadd+0x118>
20026f94:	88c00117 	ldw	r3,4(r17)
20026f98:	90801317 	ldw	r2,76(r18)
20026f9c:	18c7883a 	add	r3,r3,r3
20026fa0:	18c7883a 	add	r3,r3,r3
20026fa4:	10c5883a 	add	r2,r2,r3
20026fa8:	10c00017 	ldw	r3,0(r2)
20026fac:	88c00015 	stw	r3,0(r17)
20026fb0:	14400015 	stw	r17,0(r2)
20026fb4:	9823883a 	mov	r17,r19
20026fb8:	003fd806 	br	20026f1c <__alt_data_end+0xfffe8f1c>
20026fbc:	9823883a 	mov	r17,r19
20026fc0:	003fd606 	br	20026f1c <__alt_data_end+0xfffe8f1c>

20026fc4 <__s2b>:
20026fc4:	defff904 	addi	sp,sp,-28
20026fc8:	dc400115 	stw	r17,4(sp)
20026fcc:	dc000015 	stw	r16,0(sp)
20026fd0:	2023883a 	mov	r17,r4
20026fd4:	2821883a 	mov	r16,r5
20026fd8:	39000204 	addi	r4,r7,8
20026fdc:	01400244 	movi	r5,9
20026fe0:	dcc00315 	stw	r19,12(sp)
20026fe4:	dc800215 	stw	r18,8(sp)
20026fe8:	dfc00615 	stw	ra,24(sp)
20026fec:	dd400515 	stw	r21,20(sp)
20026ff0:	dd000415 	stw	r20,16(sp)
20026ff4:	3825883a 	mov	r18,r7
20026ff8:	3027883a 	mov	r19,r6
20026ffc:	002ae000 	call	2002ae00 <__divsi3>
20027000:	00c00044 	movi	r3,1
20027004:	000b883a 	mov	r5,zero
20027008:	1880030e 	bge	r3,r2,20027018 <__s2b+0x54>
2002700c:	18c7883a 	add	r3,r3,r3
20027010:	29400044 	addi	r5,r5,1
20027014:	18bffd16 	blt	r3,r2,2002700c <__alt_data_end+0xfffe900c>
20027018:	8809883a 	mov	r4,r17
2002701c:	0026dd40 	call	20026dd4 <_Balloc>
20027020:	d8c00717 	ldw	r3,28(sp)
20027024:	10c00515 	stw	r3,20(r2)
20027028:	00c00044 	movi	r3,1
2002702c:	10c00415 	stw	r3,16(r2)
20027030:	00c00244 	movi	r3,9
20027034:	1cc0210e 	bge	r3,r19,200270bc <__s2b+0xf8>
20027038:	80eb883a 	add	r21,r16,r3
2002703c:	a829883a 	mov	r20,r21
20027040:	84e1883a 	add	r16,r16,r19
20027044:	a1c00007 	ldb	r7,0(r20)
20027048:	01800284 	movi	r6,10
2002704c:	a5000044 	addi	r20,r20,1
20027050:	100b883a 	mov	r5,r2
20027054:	39fff404 	addi	r7,r7,-48
20027058:	8809883a 	mov	r4,r17
2002705c:	0026ea40 	call	20026ea4 <__multadd>
20027060:	a43ff81e 	bne	r20,r16,20027044 <__alt_data_end+0xfffe9044>
20027064:	ace1883a 	add	r16,r21,r19
20027068:	843ffe04 	addi	r16,r16,-8
2002706c:	9c800a0e 	bge	r19,r18,20027098 <__s2b+0xd4>
20027070:	94e5c83a 	sub	r18,r18,r19
20027074:	84a5883a 	add	r18,r16,r18
20027078:	81c00007 	ldb	r7,0(r16)
2002707c:	01800284 	movi	r6,10
20027080:	84000044 	addi	r16,r16,1
20027084:	100b883a 	mov	r5,r2
20027088:	39fff404 	addi	r7,r7,-48
2002708c:	8809883a 	mov	r4,r17
20027090:	0026ea40 	call	20026ea4 <__multadd>
20027094:	84bff81e 	bne	r16,r18,20027078 <__alt_data_end+0xfffe9078>
20027098:	dfc00617 	ldw	ra,24(sp)
2002709c:	dd400517 	ldw	r21,20(sp)
200270a0:	dd000417 	ldw	r20,16(sp)
200270a4:	dcc00317 	ldw	r19,12(sp)
200270a8:	dc800217 	ldw	r18,8(sp)
200270ac:	dc400117 	ldw	r17,4(sp)
200270b0:	dc000017 	ldw	r16,0(sp)
200270b4:	dec00704 	addi	sp,sp,28
200270b8:	f800283a 	ret
200270bc:	84000284 	addi	r16,r16,10
200270c0:	1827883a 	mov	r19,r3
200270c4:	003fe906 	br	2002706c <__alt_data_end+0xfffe906c>

200270c8 <__hi0bits>:
200270c8:	20bfffec 	andhi	r2,r4,65535
200270cc:	1000141e 	bne	r2,zero,20027120 <__hi0bits+0x58>
200270d0:	2008943a 	slli	r4,r4,16
200270d4:	00800404 	movi	r2,16
200270d8:	20ffc02c 	andhi	r3,r4,65280
200270dc:	1800021e 	bne	r3,zero,200270e8 <__hi0bits+0x20>
200270e0:	2008923a 	slli	r4,r4,8
200270e4:	10800204 	addi	r2,r2,8
200270e8:	20fc002c 	andhi	r3,r4,61440
200270ec:	1800021e 	bne	r3,zero,200270f8 <__hi0bits+0x30>
200270f0:	2008913a 	slli	r4,r4,4
200270f4:	10800104 	addi	r2,r2,4
200270f8:	20f0002c 	andhi	r3,r4,49152
200270fc:	1800031e 	bne	r3,zero,2002710c <__hi0bits+0x44>
20027100:	2109883a 	add	r4,r4,r4
20027104:	10800084 	addi	r2,r2,2
20027108:	2109883a 	add	r4,r4,r4
2002710c:	20000316 	blt	r4,zero,2002711c <__hi0bits+0x54>
20027110:	2110002c 	andhi	r4,r4,16384
20027114:	2000041e 	bne	r4,zero,20027128 <__hi0bits+0x60>
20027118:	00800804 	movi	r2,32
2002711c:	f800283a 	ret
20027120:	0005883a 	mov	r2,zero
20027124:	003fec06 	br	200270d8 <__alt_data_end+0xfffe90d8>
20027128:	10800044 	addi	r2,r2,1
2002712c:	f800283a 	ret

20027130 <__lo0bits>:
20027130:	20c00017 	ldw	r3,0(r4)
20027134:	188001cc 	andi	r2,r3,7
20027138:	10000826 	beq	r2,zero,2002715c <__lo0bits+0x2c>
2002713c:	1880004c 	andi	r2,r3,1
20027140:	1000211e 	bne	r2,zero,200271c8 <__lo0bits+0x98>
20027144:	1880008c 	andi	r2,r3,2
20027148:	1000211e 	bne	r2,zero,200271d0 <__lo0bits+0xa0>
2002714c:	1806d0ba 	srli	r3,r3,2
20027150:	00800084 	movi	r2,2
20027154:	20c00015 	stw	r3,0(r4)
20027158:	f800283a 	ret
2002715c:	18bfffcc 	andi	r2,r3,65535
20027160:	10001326 	beq	r2,zero,200271b0 <__lo0bits+0x80>
20027164:	0005883a 	mov	r2,zero
20027168:	19403fcc 	andi	r5,r3,255
2002716c:	2800021e 	bne	r5,zero,20027178 <__lo0bits+0x48>
20027170:	1806d23a 	srli	r3,r3,8
20027174:	10800204 	addi	r2,r2,8
20027178:	194003cc 	andi	r5,r3,15
2002717c:	2800021e 	bne	r5,zero,20027188 <__lo0bits+0x58>
20027180:	1806d13a 	srli	r3,r3,4
20027184:	10800104 	addi	r2,r2,4
20027188:	194000cc 	andi	r5,r3,3
2002718c:	2800021e 	bne	r5,zero,20027198 <__lo0bits+0x68>
20027190:	1806d0ba 	srli	r3,r3,2
20027194:	10800084 	addi	r2,r2,2
20027198:	1940004c 	andi	r5,r3,1
2002719c:	2800081e 	bne	r5,zero,200271c0 <__lo0bits+0x90>
200271a0:	1806d07a 	srli	r3,r3,1
200271a4:	1800051e 	bne	r3,zero,200271bc <__lo0bits+0x8c>
200271a8:	00800804 	movi	r2,32
200271ac:	f800283a 	ret
200271b0:	1806d43a 	srli	r3,r3,16
200271b4:	00800404 	movi	r2,16
200271b8:	003feb06 	br	20027168 <__alt_data_end+0xfffe9168>
200271bc:	10800044 	addi	r2,r2,1
200271c0:	20c00015 	stw	r3,0(r4)
200271c4:	f800283a 	ret
200271c8:	0005883a 	mov	r2,zero
200271cc:	f800283a 	ret
200271d0:	1806d07a 	srli	r3,r3,1
200271d4:	00800044 	movi	r2,1
200271d8:	20c00015 	stw	r3,0(r4)
200271dc:	f800283a 	ret

200271e0 <__i2b>:
200271e0:	defffd04 	addi	sp,sp,-12
200271e4:	dc000015 	stw	r16,0(sp)
200271e8:	04000044 	movi	r16,1
200271ec:	dc400115 	stw	r17,4(sp)
200271f0:	2823883a 	mov	r17,r5
200271f4:	800b883a 	mov	r5,r16
200271f8:	dfc00215 	stw	ra,8(sp)
200271fc:	0026dd40 	call	20026dd4 <_Balloc>
20027200:	14400515 	stw	r17,20(r2)
20027204:	14000415 	stw	r16,16(r2)
20027208:	dfc00217 	ldw	ra,8(sp)
2002720c:	dc400117 	ldw	r17,4(sp)
20027210:	dc000017 	ldw	r16,0(sp)
20027214:	dec00304 	addi	sp,sp,12
20027218:	f800283a 	ret

2002721c <__multiply>:
2002721c:	defffa04 	addi	sp,sp,-24
20027220:	dcc00315 	stw	r19,12(sp)
20027224:	dc800215 	stw	r18,8(sp)
20027228:	34c00417 	ldw	r19,16(r6)
2002722c:	2c800417 	ldw	r18,16(r5)
20027230:	dd000415 	stw	r20,16(sp)
20027234:	dc400115 	stw	r17,4(sp)
20027238:	dfc00515 	stw	ra,20(sp)
2002723c:	dc000015 	stw	r16,0(sp)
20027240:	2829883a 	mov	r20,r5
20027244:	3023883a 	mov	r17,r6
20027248:	94c0050e 	bge	r18,r19,20027260 <__multiply+0x44>
2002724c:	9007883a 	mov	r3,r18
20027250:	3029883a 	mov	r20,r6
20027254:	9825883a 	mov	r18,r19
20027258:	2823883a 	mov	r17,r5
2002725c:	1827883a 	mov	r19,r3
20027260:	a0800217 	ldw	r2,8(r20)
20027264:	94e1883a 	add	r16,r18,r19
20027268:	a1400117 	ldw	r5,4(r20)
2002726c:	1400010e 	bge	r2,r16,20027274 <__multiply+0x58>
20027270:	29400044 	addi	r5,r5,1
20027274:	0026dd40 	call	20026dd4 <_Balloc>
20027278:	8415883a 	add	r10,r16,r16
2002727c:	12c00504 	addi	r11,r2,20
20027280:	5295883a 	add	r10,r10,r10
20027284:	5a95883a 	add	r10,r11,r10
20027288:	5807883a 	mov	r3,r11
2002728c:	5a80032e 	bgeu	r11,r10,2002729c <__multiply+0x80>
20027290:	18000015 	stw	zero,0(r3)
20027294:	18c00104 	addi	r3,r3,4
20027298:	1abffd36 	bltu	r3,r10,20027290 <__alt_data_end+0xfffe9290>
2002729c:	9ce7883a 	add	r19,r19,r19
200272a0:	94a5883a 	add	r18,r18,r18
200272a4:	89800504 	addi	r6,r17,20
200272a8:	9ce7883a 	add	r19,r19,r19
200272ac:	a3400504 	addi	r13,r20,20
200272b0:	94a5883a 	add	r18,r18,r18
200272b4:	34d9883a 	add	r12,r6,r19
200272b8:	6c93883a 	add	r9,r13,r18
200272bc:	3300422e 	bgeu	r6,r12,200273c8 <__multiply+0x1ac>
200272c0:	37c00017 	ldw	ra,0(r6)
200272c4:	fbffffcc 	andi	r15,ra,65535
200272c8:	78001b26 	beq	r15,zero,20027338 <__multiply+0x11c>
200272cc:	5811883a 	mov	r8,r11
200272d0:	681d883a 	mov	r14,r13
200272d4:	000f883a 	mov	r7,zero
200272d8:	71000017 	ldw	r4,0(r14)
200272dc:	40c00017 	ldw	r3,0(r8)
200272e0:	73800104 	addi	r14,r14,4
200272e4:	217fffcc 	andi	r5,r4,65535
200272e8:	2bcb383a 	mul	r5,r5,r15
200272ec:	2008d43a 	srli	r4,r4,16
200272f0:	1c7fffcc 	andi	r17,r3,65535
200272f4:	2c4b883a 	add	r5,r5,r17
200272f8:	29cb883a 	add	r5,r5,r7
200272fc:	23c9383a 	mul	r4,r4,r15
20027300:	1806d43a 	srli	r3,r3,16
20027304:	280ed43a 	srli	r7,r5,16
20027308:	297fffcc 	andi	r5,r5,65535
2002730c:	20c7883a 	add	r3,r4,r3
20027310:	19c7883a 	add	r3,r3,r7
20027314:	1808943a 	slli	r4,r3,16
20027318:	4023883a 	mov	r17,r8
2002731c:	180ed43a 	srli	r7,r3,16
20027320:	214ab03a 	or	r5,r4,r5
20027324:	41400015 	stw	r5,0(r8)
20027328:	42000104 	addi	r8,r8,4
2002732c:	727fea36 	bltu	r14,r9,200272d8 <__alt_data_end+0xfffe92d8>
20027330:	89c00115 	stw	r7,4(r17)
20027334:	37c00017 	ldw	ra,0(r6)
20027338:	f83ed43a 	srli	ra,ra,16
2002733c:	f8001f26 	beq	ra,zero,200273bc <__multiply+0x1a0>
20027340:	58c00017 	ldw	r3,0(r11)
20027344:	681d883a 	mov	r14,r13
20027348:	581f883a 	mov	r15,r11
2002734c:	1811883a 	mov	r8,r3
20027350:	5825883a 	mov	r18,r11
20027354:	000f883a 	mov	r7,zero
20027358:	00000106 	br	20027360 <__multiply+0x144>
2002735c:	8825883a 	mov	r18,r17
20027360:	7140000b 	ldhu	r5,0(r14)
20027364:	4010d43a 	srli	r8,r8,16
20027368:	193fffcc 	andi	r4,r3,65535
2002736c:	2fcb383a 	mul	r5,r5,ra
20027370:	7bc00104 	addi	r15,r15,4
20027374:	73800104 	addi	r14,r14,4
20027378:	2a0b883a 	add	r5,r5,r8
2002737c:	29cb883a 	add	r5,r5,r7
20027380:	2806943a 	slli	r3,r5,16
20027384:	94400104 	addi	r17,r18,4
20027388:	280ad43a 	srli	r5,r5,16
2002738c:	1908b03a 	or	r4,r3,r4
20027390:	793fff15 	stw	r4,-4(r15)
20027394:	70ffff17 	ldw	r3,-4(r14)
20027398:	8a000017 	ldw	r8,0(r17)
2002739c:	1806d43a 	srli	r3,r3,16
200273a0:	413fffcc 	andi	r4,r8,65535
200273a4:	1fc7383a 	mul	r3,r3,ra
200273a8:	1907883a 	add	r3,r3,r4
200273ac:	1947883a 	add	r3,r3,r5
200273b0:	180ed43a 	srli	r7,r3,16
200273b4:	727fe936 	bltu	r14,r9,2002735c <__alt_data_end+0xfffe935c>
200273b8:	90c00115 	stw	r3,4(r18)
200273bc:	31800104 	addi	r6,r6,4
200273c0:	5ac00104 	addi	r11,r11,4
200273c4:	333fbe36 	bltu	r6,r12,200272c0 <__alt_data_end+0xfffe92c0>
200273c8:	0400090e 	bge	zero,r16,200273f0 <__multiply+0x1d4>
200273cc:	50ffff17 	ldw	r3,-4(r10)
200273d0:	52bfff04 	addi	r10,r10,-4
200273d4:	18000326 	beq	r3,zero,200273e4 <__multiply+0x1c8>
200273d8:	00000506 	br	200273f0 <__multiply+0x1d4>
200273dc:	50c00017 	ldw	r3,0(r10)
200273e0:	1800031e 	bne	r3,zero,200273f0 <__multiply+0x1d4>
200273e4:	843fffc4 	addi	r16,r16,-1
200273e8:	52bfff04 	addi	r10,r10,-4
200273ec:	803ffb1e 	bne	r16,zero,200273dc <__alt_data_end+0xfffe93dc>
200273f0:	14000415 	stw	r16,16(r2)
200273f4:	dfc00517 	ldw	ra,20(sp)
200273f8:	dd000417 	ldw	r20,16(sp)
200273fc:	dcc00317 	ldw	r19,12(sp)
20027400:	dc800217 	ldw	r18,8(sp)
20027404:	dc400117 	ldw	r17,4(sp)
20027408:	dc000017 	ldw	r16,0(sp)
2002740c:	dec00604 	addi	sp,sp,24
20027410:	f800283a 	ret

20027414 <__pow5mult>:
20027414:	defffa04 	addi	sp,sp,-24
20027418:	dcc00315 	stw	r19,12(sp)
2002741c:	dc000015 	stw	r16,0(sp)
20027420:	dfc00515 	stw	ra,20(sp)
20027424:	dd000415 	stw	r20,16(sp)
20027428:	dc800215 	stw	r18,8(sp)
2002742c:	dc400115 	stw	r17,4(sp)
20027430:	308000cc 	andi	r2,r6,3
20027434:	3021883a 	mov	r16,r6
20027438:	2027883a 	mov	r19,r4
2002743c:	10002f1e 	bne	r2,zero,200274fc <__pow5mult+0xe8>
20027440:	2825883a 	mov	r18,r5
20027444:	8021d0ba 	srai	r16,r16,2
20027448:	80001a26 	beq	r16,zero,200274b4 <__pow5mult+0xa0>
2002744c:	9c401217 	ldw	r17,72(r19)
20027450:	8800061e 	bne	r17,zero,2002746c <__pow5mult+0x58>
20027454:	00003406 	br	20027528 <__pow5mult+0x114>
20027458:	8021d07a 	srai	r16,r16,1
2002745c:	80001526 	beq	r16,zero,200274b4 <__pow5mult+0xa0>
20027460:	88800017 	ldw	r2,0(r17)
20027464:	10001c26 	beq	r2,zero,200274d8 <__pow5mult+0xc4>
20027468:	1023883a 	mov	r17,r2
2002746c:	8080004c 	andi	r2,r16,1
20027470:	103ff926 	beq	r2,zero,20027458 <__alt_data_end+0xfffe9458>
20027474:	880d883a 	mov	r6,r17
20027478:	900b883a 	mov	r5,r18
2002747c:	9809883a 	mov	r4,r19
20027480:	002721c0 	call	2002721c <__multiply>
20027484:	90001b26 	beq	r18,zero,200274f4 <__pow5mult+0xe0>
20027488:	91000117 	ldw	r4,4(r18)
2002748c:	98c01317 	ldw	r3,76(r19)
20027490:	8021d07a 	srai	r16,r16,1
20027494:	2109883a 	add	r4,r4,r4
20027498:	2109883a 	add	r4,r4,r4
2002749c:	1907883a 	add	r3,r3,r4
200274a0:	19000017 	ldw	r4,0(r3)
200274a4:	91000015 	stw	r4,0(r18)
200274a8:	1c800015 	stw	r18,0(r3)
200274ac:	1025883a 	mov	r18,r2
200274b0:	803feb1e 	bne	r16,zero,20027460 <__alt_data_end+0xfffe9460>
200274b4:	9005883a 	mov	r2,r18
200274b8:	dfc00517 	ldw	ra,20(sp)
200274bc:	dd000417 	ldw	r20,16(sp)
200274c0:	dcc00317 	ldw	r19,12(sp)
200274c4:	dc800217 	ldw	r18,8(sp)
200274c8:	dc400117 	ldw	r17,4(sp)
200274cc:	dc000017 	ldw	r16,0(sp)
200274d0:	dec00604 	addi	sp,sp,24
200274d4:	f800283a 	ret
200274d8:	880d883a 	mov	r6,r17
200274dc:	880b883a 	mov	r5,r17
200274e0:	9809883a 	mov	r4,r19
200274e4:	002721c0 	call	2002721c <__multiply>
200274e8:	88800015 	stw	r2,0(r17)
200274ec:	10000015 	stw	zero,0(r2)
200274f0:	003fdd06 	br	20027468 <__alt_data_end+0xfffe9468>
200274f4:	1025883a 	mov	r18,r2
200274f8:	003fd706 	br	20027458 <__alt_data_end+0xfffe9458>
200274fc:	10bfffc4 	addi	r2,r2,-1
20027500:	1085883a 	add	r2,r2,r2
20027504:	00c800f4 	movhi	r3,8195
20027508:	18c39b04 	addi	r3,r3,3692
2002750c:	1085883a 	add	r2,r2,r2
20027510:	1885883a 	add	r2,r3,r2
20027514:	11800017 	ldw	r6,0(r2)
20027518:	000f883a 	mov	r7,zero
2002751c:	0026ea40 	call	20026ea4 <__multadd>
20027520:	1025883a 	mov	r18,r2
20027524:	003fc706 	br	20027444 <__alt_data_end+0xfffe9444>
20027528:	05000044 	movi	r20,1
2002752c:	a00b883a 	mov	r5,r20
20027530:	9809883a 	mov	r4,r19
20027534:	0026dd40 	call	20026dd4 <_Balloc>
20027538:	1023883a 	mov	r17,r2
2002753c:	00809c44 	movi	r2,625
20027540:	88800515 	stw	r2,20(r17)
20027544:	8d000415 	stw	r20,16(r17)
20027548:	9c401215 	stw	r17,72(r19)
2002754c:	88000015 	stw	zero,0(r17)
20027550:	003fc606 	br	2002746c <__alt_data_end+0xfffe946c>

20027554 <__lshift>:
20027554:	defff904 	addi	sp,sp,-28
20027558:	dd400515 	stw	r21,20(sp)
2002755c:	dcc00315 	stw	r19,12(sp)
20027560:	302bd17a 	srai	r21,r6,5
20027564:	2cc00417 	ldw	r19,16(r5)
20027568:	28800217 	ldw	r2,8(r5)
2002756c:	dd000415 	stw	r20,16(sp)
20027570:	ace7883a 	add	r19,r21,r19
20027574:	dc800215 	stw	r18,8(sp)
20027578:	dc400115 	stw	r17,4(sp)
2002757c:	dc000015 	stw	r16,0(sp)
20027580:	dfc00615 	stw	ra,24(sp)
20027584:	9c000044 	addi	r16,r19,1
20027588:	2823883a 	mov	r17,r5
2002758c:	3029883a 	mov	r20,r6
20027590:	2025883a 	mov	r18,r4
20027594:	29400117 	ldw	r5,4(r5)
20027598:	1400030e 	bge	r2,r16,200275a8 <__lshift+0x54>
2002759c:	1085883a 	add	r2,r2,r2
200275a0:	29400044 	addi	r5,r5,1
200275a4:	143ffd16 	blt	r2,r16,2002759c <__alt_data_end+0xfffe959c>
200275a8:	9009883a 	mov	r4,r18
200275ac:	0026dd40 	call	20026dd4 <_Balloc>
200275b0:	10c00504 	addi	r3,r2,20
200275b4:	0540070e 	bge	zero,r21,200275d4 <__lshift+0x80>
200275b8:	ad6b883a 	add	r21,r21,r21
200275bc:	ad6b883a 	add	r21,r21,r21
200275c0:	1809883a 	mov	r4,r3
200275c4:	1d47883a 	add	r3,r3,r21
200275c8:	20000015 	stw	zero,0(r4)
200275cc:	21000104 	addi	r4,r4,4
200275d0:	193ffd1e 	bne	r3,r4,200275c8 <__alt_data_end+0xfffe95c8>
200275d4:	8a000417 	ldw	r8,16(r17)
200275d8:	89000504 	addi	r4,r17,20
200275dc:	a18007cc 	andi	r6,r20,31
200275e0:	4211883a 	add	r8,r8,r8
200275e4:	4211883a 	add	r8,r8,r8
200275e8:	2211883a 	add	r8,r4,r8
200275ec:	30002326 	beq	r6,zero,2002767c <__lshift+0x128>
200275f0:	02400804 	movi	r9,32
200275f4:	4993c83a 	sub	r9,r9,r6
200275f8:	000b883a 	mov	r5,zero
200275fc:	21c00017 	ldw	r7,0(r4)
20027600:	1815883a 	mov	r10,r3
20027604:	18c00104 	addi	r3,r3,4
20027608:	398e983a 	sll	r7,r7,r6
2002760c:	21000104 	addi	r4,r4,4
20027610:	394ab03a 	or	r5,r7,r5
20027614:	197fff15 	stw	r5,-4(r3)
20027618:	217fff17 	ldw	r5,-4(r4)
2002761c:	2a4ad83a 	srl	r5,r5,r9
20027620:	223ff636 	bltu	r4,r8,200275fc <__alt_data_end+0xfffe95fc>
20027624:	51400115 	stw	r5,4(r10)
20027628:	28001a1e 	bne	r5,zero,20027694 <__lshift+0x140>
2002762c:	843fffc4 	addi	r16,r16,-1
20027630:	14000415 	stw	r16,16(r2)
20027634:	88000826 	beq	r17,zero,20027658 <__lshift+0x104>
20027638:	89000117 	ldw	r4,4(r17)
2002763c:	90c01317 	ldw	r3,76(r18)
20027640:	2109883a 	add	r4,r4,r4
20027644:	2109883a 	add	r4,r4,r4
20027648:	1907883a 	add	r3,r3,r4
2002764c:	19000017 	ldw	r4,0(r3)
20027650:	89000015 	stw	r4,0(r17)
20027654:	1c400015 	stw	r17,0(r3)
20027658:	dfc00617 	ldw	ra,24(sp)
2002765c:	dd400517 	ldw	r21,20(sp)
20027660:	dd000417 	ldw	r20,16(sp)
20027664:	dcc00317 	ldw	r19,12(sp)
20027668:	dc800217 	ldw	r18,8(sp)
2002766c:	dc400117 	ldw	r17,4(sp)
20027670:	dc000017 	ldw	r16,0(sp)
20027674:	dec00704 	addi	sp,sp,28
20027678:	f800283a 	ret
2002767c:	21400017 	ldw	r5,0(r4)
20027680:	18c00104 	addi	r3,r3,4
20027684:	21000104 	addi	r4,r4,4
20027688:	197fff15 	stw	r5,-4(r3)
2002768c:	223ffb36 	bltu	r4,r8,2002767c <__alt_data_end+0xfffe967c>
20027690:	003fe606 	br	2002762c <__alt_data_end+0xfffe962c>
20027694:	9c000084 	addi	r16,r19,2
20027698:	003fe406 	br	2002762c <__alt_data_end+0xfffe962c>

2002769c <__mcmp>:
2002769c:	20800417 	ldw	r2,16(r4)
200276a0:	28c00417 	ldw	r3,16(r5)
200276a4:	10c5c83a 	sub	r2,r2,r3
200276a8:	1000111e 	bne	r2,zero,200276f0 <__mcmp+0x54>
200276ac:	18c7883a 	add	r3,r3,r3
200276b0:	18c7883a 	add	r3,r3,r3
200276b4:	21000504 	addi	r4,r4,20
200276b8:	29400504 	addi	r5,r5,20
200276bc:	20c5883a 	add	r2,r4,r3
200276c0:	28cb883a 	add	r5,r5,r3
200276c4:	00000106 	br	200276cc <__mcmp+0x30>
200276c8:	20800a2e 	bgeu	r4,r2,200276f4 <__mcmp+0x58>
200276cc:	10bfff04 	addi	r2,r2,-4
200276d0:	297fff04 	addi	r5,r5,-4
200276d4:	11800017 	ldw	r6,0(r2)
200276d8:	28c00017 	ldw	r3,0(r5)
200276dc:	30fffa26 	beq	r6,r3,200276c8 <__alt_data_end+0xfffe96c8>
200276e0:	30c00236 	bltu	r6,r3,200276ec <__mcmp+0x50>
200276e4:	00800044 	movi	r2,1
200276e8:	f800283a 	ret
200276ec:	00bfffc4 	movi	r2,-1
200276f0:	f800283a 	ret
200276f4:	0005883a 	mov	r2,zero
200276f8:	f800283a 	ret

200276fc <__mdiff>:
200276fc:	28c00417 	ldw	r3,16(r5)
20027700:	30800417 	ldw	r2,16(r6)
20027704:	defffa04 	addi	sp,sp,-24
20027708:	dcc00315 	stw	r19,12(sp)
2002770c:	dc800215 	stw	r18,8(sp)
20027710:	dfc00515 	stw	ra,20(sp)
20027714:	dd000415 	stw	r20,16(sp)
20027718:	dc400115 	stw	r17,4(sp)
2002771c:	dc000015 	stw	r16,0(sp)
20027720:	1887c83a 	sub	r3,r3,r2
20027724:	2825883a 	mov	r18,r5
20027728:	3027883a 	mov	r19,r6
2002772c:	1800141e 	bne	r3,zero,20027780 <__mdiff+0x84>
20027730:	1085883a 	add	r2,r2,r2
20027734:	1085883a 	add	r2,r2,r2
20027738:	2a000504 	addi	r8,r5,20
2002773c:	34000504 	addi	r16,r6,20
20027740:	4087883a 	add	r3,r8,r2
20027744:	8085883a 	add	r2,r16,r2
20027748:	00000106 	br	20027750 <__mdiff+0x54>
2002774c:	40c0592e 	bgeu	r8,r3,200278b4 <__mdiff+0x1b8>
20027750:	18ffff04 	addi	r3,r3,-4
20027754:	10bfff04 	addi	r2,r2,-4
20027758:	19c00017 	ldw	r7,0(r3)
2002775c:	11400017 	ldw	r5,0(r2)
20027760:	397ffa26 	beq	r7,r5,2002774c <__alt_data_end+0xfffe974c>
20027764:	3940592e 	bgeu	r7,r5,200278cc <__mdiff+0x1d0>
20027768:	9005883a 	mov	r2,r18
2002776c:	4023883a 	mov	r17,r8
20027770:	9825883a 	mov	r18,r19
20027774:	05000044 	movi	r20,1
20027778:	1027883a 	mov	r19,r2
2002777c:	00000406 	br	20027790 <__mdiff+0x94>
20027780:	18005616 	blt	r3,zero,200278dc <__mdiff+0x1e0>
20027784:	34400504 	addi	r17,r6,20
20027788:	2c000504 	addi	r16,r5,20
2002778c:	0029883a 	mov	r20,zero
20027790:	91400117 	ldw	r5,4(r18)
20027794:	0026dd40 	call	20026dd4 <_Balloc>
20027798:	92400417 	ldw	r9,16(r18)
2002779c:	9b000417 	ldw	r12,16(r19)
200277a0:	12c00504 	addi	r11,r2,20
200277a4:	4a51883a 	add	r8,r9,r9
200277a8:	6319883a 	add	r12,r12,r12
200277ac:	4211883a 	add	r8,r8,r8
200277b0:	6319883a 	add	r12,r12,r12
200277b4:	15000315 	stw	r20,12(r2)
200277b8:	8211883a 	add	r8,r16,r8
200277bc:	8b19883a 	add	r12,r17,r12
200277c0:	0007883a 	mov	r3,zero
200277c4:	81400017 	ldw	r5,0(r16)
200277c8:	89c00017 	ldw	r7,0(r17)
200277cc:	59800104 	addi	r6,r11,4
200277d0:	293fffcc 	andi	r4,r5,65535
200277d4:	20c7883a 	add	r3,r4,r3
200277d8:	393fffcc 	andi	r4,r7,65535
200277dc:	1909c83a 	sub	r4,r3,r4
200277e0:	280ad43a 	srli	r5,r5,16
200277e4:	380ed43a 	srli	r7,r7,16
200277e8:	2007d43a 	srai	r3,r4,16
200277ec:	213fffcc 	andi	r4,r4,65535
200277f0:	29cbc83a 	sub	r5,r5,r7
200277f4:	28c7883a 	add	r3,r5,r3
200277f8:	180a943a 	slli	r5,r3,16
200277fc:	8c400104 	addi	r17,r17,4
20027800:	84000104 	addi	r16,r16,4
20027804:	2908b03a 	or	r4,r5,r4
20027808:	59000015 	stw	r4,0(r11)
2002780c:	1807d43a 	srai	r3,r3,16
20027810:	3015883a 	mov	r10,r6
20027814:	3017883a 	mov	r11,r6
20027818:	8b3fea36 	bltu	r17,r12,200277c4 <__alt_data_end+0xfffe97c4>
2002781c:	8200162e 	bgeu	r16,r8,20027878 <__mdiff+0x17c>
20027820:	8017883a 	mov	r11,r16
20027824:	59400017 	ldw	r5,0(r11)
20027828:	31800104 	addi	r6,r6,4
2002782c:	5ac00104 	addi	r11,r11,4
20027830:	293fffcc 	andi	r4,r5,65535
20027834:	20c7883a 	add	r3,r4,r3
20027838:	280ed43a 	srli	r7,r5,16
2002783c:	180bd43a 	srai	r5,r3,16
20027840:	193fffcc 	andi	r4,r3,65535
20027844:	3947883a 	add	r3,r7,r5
20027848:	180a943a 	slli	r5,r3,16
2002784c:	1807d43a 	srai	r3,r3,16
20027850:	2908b03a 	or	r4,r5,r4
20027854:	313fff15 	stw	r4,-4(r6)
20027858:	5a3ff236 	bltu	r11,r8,20027824 <__alt_data_end+0xfffe9824>
2002785c:	0406303a 	nor	r3,zero,r16
20027860:	1a07883a 	add	r3,r3,r8
20027864:	1806d0ba 	srli	r3,r3,2
20027868:	18c00044 	addi	r3,r3,1
2002786c:	18c7883a 	add	r3,r3,r3
20027870:	18c7883a 	add	r3,r3,r3
20027874:	50d5883a 	add	r10,r10,r3
20027878:	50ffff04 	addi	r3,r10,-4
2002787c:	2000041e 	bne	r4,zero,20027890 <__mdiff+0x194>
20027880:	18ffff04 	addi	r3,r3,-4
20027884:	19000017 	ldw	r4,0(r3)
20027888:	4a7fffc4 	addi	r9,r9,-1
2002788c:	203ffc26 	beq	r4,zero,20027880 <__alt_data_end+0xfffe9880>
20027890:	12400415 	stw	r9,16(r2)
20027894:	dfc00517 	ldw	ra,20(sp)
20027898:	dd000417 	ldw	r20,16(sp)
2002789c:	dcc00317 	ldw	r19,12(sp)
200278a0:	dc800217 	ldw	r18,8(sp)
200278a4:	dc400117 	ldw	r17,4(sp)
200278a8:	dc000017 	ldw	r16,0(sp)
200278ac:	dec00604 	addi	sp,sp,24
200278b0:	f800283a 	ret
200278b4:	000b883a 	mov	r5,zero
200278b8:	0026dd40 	call	20026dd4 <_Balloc>
200278bc:	00c00044 	movi	r3,1
200278c0:	10c00415 	stw	r3,16(r2)
200278c4:	10000515 	stw	zero,20(r2)
200278c8:	003ff206 	br	20027894 <__alt_data_end+0xfffe9894>
200278cc:	8023883a 	mov	r17,r16
200278d0:	0029883a 	mov	r20,zero
200278d4:	4021883a 	mov	r16,r8
200278d8:	003fad06 	br	20027790 <__alt_data_end+0xfffe9790>
200278dc:	9005883a 	mov	r2,r18
200278e0:	94400504 	addi	r17,r18,20
200278e4:	9c000504 	addi	r16,r19,20
200278e8:	9825883a 	mov	r18,r19
200278ec:	05000044 	movi	r20,1
200278f0:	1027883a 	mov	r19,r2
200278f4:	003fa606 	br	20027790 <__alt_data_end+0xfffe9790>

200278f8 <__ulp>:
200278f8:	295ffc2c 	andhi	r5,r5,32752
200278fc:	00bf3034 	movhi	r2,64704
20027900:	2887883a 	add	r3,r5,r2
20027904:	00c0020e 	bge	zero,r3,20027910 <__ulp+0x18>
20027908:	0005883a 	mov	r2,zero
2002790c:	f800283a 	ret
20027910:	00c7c83a 	sub	r3,zero,r3
20027914:	1807d53a 	srai	r3,r3,20
20027918:	008004c4 	movi	r2,19
2002791c:	10c00b0e 	bge	r2,r3,2002794c <__ulp+0x54>
20027920:	18bffb04 	addi	r2,r3,-20
20027924:	01000784 	movi	r4,30
20027928:	0007883a 	mov	r3,zero
2002792c:	20800516 	blt	r4,r2,20027944 <__ulp+0x4c>
20027930:	010007c4 	movi	r4,31
20027934:	2089c83a 	sub	r4,r4,r2
20027938:	00800044 	movi	r2,1
2002793c:	1104983a 	sll	r2,r2,r4
20027940:	f800283a 	ret
20027944:	00800044 	movi	r2,1
20027948:	f800283a 	ret
2002794c:	01400234 	movhi	r5,8
20027950:	28c7d83a 	sra	r3,r5,r3
20027954:	0005883a 	mov	r2,zero
20027958:	f800283a 	ret

2002795c <__b2d>:
2002795c:	defffa04 	addi	sp,sp,-24
20027960:	dc000015 	stw	r16,0(sp)
20027964:	24000417 	ldw	r16,16(r4)
20027968:	dc400115 	stw	r17,4(sp)
2002796c:	24400504 	addi	r17,r4,20
20027970:	8421883a 	add	r16,r16,r16
20027974:	8421883a 	add	r16,r16,r16
20027978:	8c21883a 	add	r16,r17,r16
2002797c:	dc800215 	stw	r18,8(sp)
20027980:	84bfff17 	ldw	r18,-4(r16)
20027984:	dd000415 	stw	r20,16(sp)
20027988:	dcc00315 	stw	r19,12(sp)
2002798c:	9009883a 	mov	r4,r18
20027990:	2829883a 	mov	r20,r5
20027994:	dfc00515 	stw	ra,20(sp)
20027998:	00270c80 	call	200270c8 <__hi0bits>
2002799c:	00c00804 	movi	r3,32
200279a0:	1889c83a 	sub	r4,r3,r2
200279a4:	a1000015 	stw	r4,0(r20)
200279a8:	01000284 	movi	r4,10
200279ac:	84ffff04 	addi	r19,r16,-4
200279b0:	20801216 	blt	r4,r2,200279fc <__b2d+0xa0>
200279b4:	018002c4 	movi	r6,11
200279b8:	308dc83a 	sub	r6,r6,r2
200279bc:	9186d83a 	srl	r3,r18,r6
200279c0:	18cffc34 	orhi	r3,r3,16368
200279c4:	8cc0212e 	bgeu	r17,r19,20027a4c <__b2d+0xf0>
200279c8:	813ffe17 	ldw	r4,-8(r16)
200279cc:	218cd83a 	srl	r6,r4,r6
200279d0:	10800544 	addi	r2,r2,21
200279d4:	9084983a 	sll	r2,r18,r2
200279d8:	1184b03a 	or	r2,r2,r6
200279dc:	dfc00517 	ldw	ra,20(sp)
200279e0:	dd000417 	ldw	r20,16(sp)
200279e4:	dcc00317 	ldw	r19,12(sp)
200279e8:	dc800217 	ldw	r18,8(sp)
200279ec:	dc400117 	ldw	r17,4(sp)
200279f0:	dc000017 	ldw	r16,0(sp)
200279f4:	dec00604 	addi	sp,sp,24
200279f8:	f800283a 	ret
200279fc:	8cc00f2e 	bgeu	r17,r19,20027a3c <__b2d+0xe0>
20027a00:	117ffd44 	addi	r5,r2,-11
20027a04:	80bffe17 	ldw	r2,-8(r16)
20027a08:	28000e26 	beq	r5,zero,20027a44 <__b2d+0xe8>
20027a0c:	1949c83a 	sub	r4,r3,r5
20027a10:	9164983a 	sll	r18,r18,r5
20027a14:	1106d83a 	srl	r3,r2,r4
20027a18:	81bffe04 	addi	r6,r16,-8
20027a1c:	948ffc34 	orhi	r18,r18,16368
20027a20:	90c6b03a 	or	r3,r18,r3
20027a24:	89800e2e 	bgeu	r17,r6,20027a60 <__b2d+0x104>
20027a28:	81bffd17 	ldw	r6,-12(r16)
20027a2c:	1144983a 	sll	r2,r2,r5
20027a30:	310ad83a 	srl	r5,r6,r4
20027a34:	2884b03a 	or	r2,r5,r2
20027a38:	003fe806 	br	200279dc <__alt_data_end+0xfffe99dc>
20027a3c:	10bffd44 	addi	r2,r2,-11
20027a40:	1000041e 	bne	r2,zero,20027a54 <__b2d+0xf8>
20027a44:	90cffc34 	orhi	r3,r18,16368
20027a48:	003fe406 	br	200279dc <__alt_data_end+0xfffe99dc>
20027a4c:	000d883a 	mov	r6,zero
20027a50:	003fdf06 	br	200279d0 <__alt_data_end+0xfffe99d0>
20027a54:	90a4983a 	sll	r18,r18,r2
20027a58:	0005883a 	mov	r2,zero
20027a5c:	003ff906 	br	20027a44 <__alt_data_end+0xfffe9a44>
20027a60:	1144983a 	sll	r2,r2,r5
20027a64:	003fdd06 	br	200279dc <__alt_data_end+0xfffe99dc>

20027a68 <__d2b>:
20027a68:	defff804 	addi	sp,sp,-32
20027a6c:	dc000215 	stw	r16,8(sp)
20027a70:	3021883a 	mov	r16,r6
20027a74:	dc400315 	stw	r17,12(sp)
20027a78:	8022907a 	slli	r17,r16,1
20027a7c:	dd000615 	stw	r20,24(sp)
20027a80:	2829883a 	mov	r20,r5
20027a84:	01400044 	movi	r5,1
20027a88:	dcc00515 	stw	r19,20(sp)
20027a8c:	dc800415 	stw	r18,16(sp)
20027a90:	dfc00715 	stw	ra,28(sp)
20027a94:	3825883a 	mov	r18,r7
20027a98:	8822d57a 	srli	r17,r17,21
20027a9c:	0026dd40 	call	20026dd4 <_Balloc>
20027aa0:	1027883a 	mov	r19,r2
20027aa4:	00800434 	movhi	r2,16
20027aa8:	10bfffc4 	addi	r2,r2,-1
20027aac:	808c703a 	and	r6,r16,r2
20027ab0:	88000126 	beq	r17,zero,20027ab8 <__d2b+0x50>
20027ab4:	31800434 	orhi	r6,r6,16
20027ab8:	d9800015 	stw	r6,0(sp)
20027abc:	a0002426 	beq	r20,zero,20027b50 <__d2b+0xe8>
20027ac0:	d9000104 	addi	r4,sp,4
20027ac4:	dd000115 	stw	r20,4(sp)
20027ac8:	00271300 	call	20027130 <__lo0bits>
20027acc:	d8c00017 	ldw	r3,0(sp)
20027ad0:	10002f1e 	bne	r2,zero,20027b90 <__d2b+0x128>
20027ad4:	d9000117 	ldw	r4,4(sp)
20027ad8:	99000515 	stw	r4,20(r19)
20027adc:	1821003a 	cmpeq	r16,r3,zero
20027ae0:	01000084 	movi	r4,2
20027ae4:	2421c83a 	sub	r16,r4,r16
20027ae8:	98c00615 	stw	r3,24(r19)
20027aec:	9c000415 	stw	r16,16(r19)
20027af0:	88001f1e 	bne	r17,zero,20027b70 <__d2b+0x108>
20027af4:	10bef384 	addi	r2,r2,-1074
20027af8:	90800015 	stw	r2,0(r18)
20027afc:	00900034 	movhi	r2,16384
20027b00:	10bfffc4 	addi	r2,r2,-1
20027b04:	8085883a 	add	r2,r16,r2
20027b08:	1085883a 	add	r2,r2,r2
20027b0c:	1085883a 	add	r2,r2,r2
20027b10:	9885883a 	add	r2,r19,r2
20027b14:	11000517 	ldw	r4,20(r2)
20027b18:	8020917a 	slli	r16,r16,5
20027b1c:	00270c80 	call	200270c8 <__hi0bits>
20027b20:	d8c00817 	ldw	r3,32(sp)
20027b24:	8085c83a 	sub	r2,r16,r2
20027b28:	18800015 	stw	r2,0(r3)
20027b2c:	9805883a 	mov	r2,r19
20027b30:	dfc00717 	ldw	ra,28(sp)
20027b34:	dd000617 	ldw	r20,24(sp)
20027b38:	dcc00517 	ldw	r19,20(sp)
20027b3c:	dc800417 	ldw	r18,16(sp)
20027b40:	dc400317 	ldw	r17,12(sp)
20027b44:	dc000217 	ldw	r16,8(sp)
20027b48:	dec00804 	addi	sp,sp,32
20027b4c:	f800283a 	ret
20027b50:	d809883a 	mov	r4,sp
20027b54:	00271300 	call	20027130 <__lo0bits>
20027b58:	d8c00017 	ldw	r3,0(sp)
20027b5c:	04000044 	movi	r16,1
20027b60:	9c000415 	stw	r16,16(r19)
20027b64:	98c00515 	stw	r3,20(r19)
20027b68:	10800804 	addi	r2,r2,32
20027b6c:	883fe126 	beq	r17,zero,20027af4 <__alt_data_end+0xfffe9af4>
20027b70:	00c00d44 	movi	r3,53
20027b74:	8c7ef344 	addi	r17,r17,-1075
20027b78:	88a3883a 	add	r17,r17,r2
20027b7c:	1885c83a 	sub	r2,r3,r2
20027b80:	d8c00817 	ldw	r3,32(sp)
20027b84:	94400015 	stw	r17,0(r18)
20027b88:	18800015 	stw	r2,0(r3)
20027b8c:	003fe706 	br	20027b2c <__alt_data_end+0xfffe9b2c>
20027b90:	01000804 	movi	r4,32
20027b94:	2089c83a 	sub	r4,r4,r2
20027b98:	1908983a 	sll	r4,r3,r4
20027b9c:	d9400117 	ldw	r5,4(sp)
20027ba0:	1886d83a 	srl	r3,r3,r2
20027ba4:	2148b03a 	or	r4,r4,r5
20027ba8:	99000515 	stw	r4,20(r19)
20027bac:	d8c00015 	stw	r3,0(sp)
20027bb0:	003fca06 	br	20027adc <__alt_data_end+0xfffe9adc>

20027bb4 <__ratio>:
20027bb4:	defff904 	addi	sp,sp,-28
20027bb8:	dc400315 	stw	r17,12(sp)
20027bbc:	2823883a 	mov	r17,r5
20027bc0:	d9400104 	addi	r5,sp,4
20027bc4:	dfc00615 	stw	ra,24(sp)
20027bc8:	dcc00515 	stw	r19,20(sp)
20027bcc:	dc800415 	stw	r18,16(sp)
20027bd0:	2027883a 	mov	r19,r4
20027bd4:	dc000215 	stw	r16,8(sp)
20027bd8:	002795c0 	call	2002795c <__b2d>
20027bdc:	d80b883a 	mov	r5,sp
20027be0:	8809883a 	mov	r4,r17
20027be4:	1025883a 	mov	r18,r2
20027be8:	1821883a 	mov	r16,r3
20027bec:	002795c0 	call	2002795c <__b2d>
20027bf0:	8a000417 	ldw	r8,16(r17)
20027bf4:	99000417 	ldw	r4,16(r19)
20027bf8:	d9400117 	ldw	r5,4(sp)
20027bfc:	2209c83a 	sub	r4,r4,r8
20027c00:	2010917a 	slli	r8,r4,5
20027c04:	d9000017 	ldw	r4,0(sp)
20027c08:	2909c83a 	sub	r4,r5,r4
20027c0c:	4109883a 	add	r4,r8,r4
20027c10:	01000e0e 	bge	zero,r4,20027c4c <__ratio+0x98>
20027c14:	2008953a 	slli	r4,r4,20
20027c18:	2421883a 	add	r16,r4,r16
20027c1c:	100d883a 	mov	r6,r2
20027c20:	180f883a 	mov	r7,r3
20027c24:	9009883a 	mov	r4,r18
20027c28:	800b883a 	mov	r5,r16
20027c2c:	002b8600 	call	2002b860 <__divdf3>
20027c30:	dfc00617 	ldw	ra,24(sp)
20027c34:	dcc00517 	ldw	r19,20(sp)
20027c38:	dc800417 	ldw	r18,16(sp)
20027c3c:	dc400317 	ldw	r17,12(sp)
20027c40:	dc000217 	ldw	r16,8(sp)
20027c44:	dec00704 	addi	sp,sp,28
20027c48:	f800283a 	ret
20027c4c:	2008953a 	slli	r4,r4,20
20027c50:	1907c83a 	sub	r3,r3,r4
20027c54:	003ff106 	br	20027c1c <__alt_data_end+0xfffe9c1c>

20027c58 <_mprec_log10>:
20027c58:	defffe04 	addi	sp,sp,-8
20027c5c:	dc000015 	stw	r16,0(sp)
20027c60:	dfc00115 	stw	ra,4(sp)
20027c64:	008005c4 	movi	r2,23
20027c68:	2021883a 	mov	r16,r4
20027c6c:	11000d0e 	bge	r2,r4,20027ca4 <_mprec_log10+0x4c>
20027c70:	0005883a 	mov	r2,zero
20027c74:	00cffc34 	movhi	r3,16368
20027c78:	843fffc4 	addi	r16,r16,-1
20027c7c:	000d883a 	mov	r6,zero
20027c80:	01d00934 	movhi	r7,16420
20027c84:	1009883a 	mov	r4,r2
20027c88:	180b883a 	mov	r5,r3
20027c8c:	002c3a00 	call	2002c3a0 <__muldf3>
20027c90:	803ff91e 	bne	r16,zero,20027c78 <__alt_data_end+0xfffe9c78>
20027c94:	dfc00117 	ldw	ra,4(sp)
20027c98:	dc000017 	ldw	r16,0(sp)
20027c9c:	dec00204 	addi	sp,sp,8
20027ca0:	f800283a 	ret
20027ca4:	202090fa 	slli	r16,r4,3
20027ca8:	008800f4 	movhi	r2,8195
20027cac:	1083b204 	addi	r2,r2,3784
20027cb0:	1421883a 	add	r16,r2,r16
20027cb4:	80800017 	ldw	r2,0(r16)
20027cb8:	80c00117 	ldw	r3,4(r16)
20027cbc:	dfc00117 	ldw	ra,4(sp)
20027cc0:	dc000017 	ldw	r16,0(sp)
20027cc4:	dec00204 	addi	sp,sp,8
20027cc8:	f800283a 	ret

20027ccc <__copybits>:
20027ccc:	297fffc4 	addi	r5,r5,-1
20027cd0:	280fd17a 	srai	r7,r5,5
20027cd4:	30c00417 	ldw	r3,16(r6)
20027cd8:	30800504 	addi	r2,r6,20
20027cdc:	39c00044 	addi	r7,r7,1
20027ce0:	18c7883a 	add	r3,r3,r3
20027ce4:	39cf883a 	add	r7,r7,r7
20027ce8:	18c7883a 	add	r3,r3,r3
20027cec:	39cf883a 	add	r7,r7,r7
20027cf0:	10c7883a 	add	r3,r2,r3
20027cf4:	21cf883a 	add	r7,r4,r7
20027cf8:	10c00d2e 	bgeu	r2,r3,20027d30 <__copybits+0x64>
20027cfc:	200b883a 	mov	r5,r4
20027d00:	12000017 	ldw	r8,0(r2)
20027d04:	29400104 	addi	r5,r5,4
20027d08:	10800104 	addi	r2,r2,4
20027d0c:	2a3fff15 	stw	r8,-4(r5)
20027d10:	10fffb36 	bltu	r2,r3,20027d00 <__alt_data_end+0xfffe9d00>
20027d14:	1985c83a 	sub	r2,r3,r6
20027d18:	10bffac4 	addi	r2,r2,-21
20027d1c:	1004d0ba 	srli	r2,r2,2
20027d20:	10800044 	addi	r2,r2,1
20027d24:	1085883a 	add	r2,r2,r2
20027d28:	1085883a 	add	r2,r2,r2
20027d2c:	2089883a 	add	r4,r4,r2
20027d30:	21c0032e 	bgeu	r4,r7,20027d40 <__copybits+0x74>
20027d34:	20000015 	stw	zero,0(r4)
20027d38:	21000104 	addi	r4,r4,4
20027d3c:	21fffd36 	bltu	r4,r7,20027d34 <__alt_data_end+0xfffe9d34>
20027d40:	f800283a 	ret

20027d44 <__any_on>:
20027d44:	20c00417 	ldw	r3,16(r4)
20027d48:	2805d17a 	srai	r2,r5,5
20027d4c:	21000504 	addi	r4,r4,20
20027d50:	18800d0e 	bge	r3,r2,20027d88 <__any_on+0x44>
20027d54:	18c7883a 	add	r3,r3,r3
20027d58:	18c7883a 	add	r3,r3,r3
20027d5c:	20c7883a 	add	r3,r4,r3
20027d60:	20c0192e 	bgeu	r4,r3,20027dc8 <__any_on+0x84>
20027d64:	18bfff17 	ldw	r2,-4(r3)
20027d68:	18ffff04 	addi	r3,r3,-4
20027d6c:	1000041e 	bne	r2,zero,20027d80 <__any_on+0x3c>
20027d70:	20c0142e 	bgeu	r4,r3,20027dc4 <__any_on+0x80>
20027d74:	18ffff04 	addi	r3,r3,-4
20027d78:	19400017 	ldw	r5,0(r3)
20027d7c:	283ffc26 	beq	r5,zero,20027d70 <__alt_data_end+0xfffe9d70>
20027d80:	00800044 	movi	r2,1
20027d84:	f800283a 	ret
20027d88:	10c00a0e 	bge	r2,r3,20027db4 <__any_on+0x70>
20027d8c:	1085883a 	add	r2,r2,r2
20027d90:	1085883a 	add	r2,r2,r2
20027d94:	294007cc 	andi	r5,r5,31
20027d98:	2087883a 	add	r3,r4,r2
20027d9c:	283ff026 	beq	r5,zero,20027d60 <__alt_data_end+0xfffe9d60>
20027da0:	19800017 	ldw	r6,0(r3)
20027da4:	3144d83a 	srl	r2,r6,r5
20027da8:	114a983a 	sll	r5,r2,r5
20027dac:	317ff41e 	bne	r6,r5,20027d80 <__alt_data_end+0xfffe9d80>
20027db0:	003feb06 	br	20027d60 <__alt_data_end+0xfffe9d60>
20027db4:	1085883a 	add	r2,r2,r2
20027db8:	1085883a 	add	r2,r2,r2
20027dbc:	2087883a 	add	r3,r4,r2
20027dc0:	003fe706 	br	20027d60 <__alt_data_end+0xfffe9d60>
20027dc4:	f800283a 	ret
20027dc8:	0005883a 	mov	r2,zero
20027dcc:	f800283a 	ret

20027dd0 <_putc_r>:
20027dd0:	defffc04 	addi	sp,sp,-16
20027dd4:	dc000215 	stw	r16,8(sp)
20027dd8:	dfc00315 	stw	ra,12(sp)
20027ddc:	2021883a 	mov	r16,r4
20027de0:	20000226 	beq	r4,zero,20027dec <_putc_r+0x1c>
20027de4:	20800e17 	ldw	r2,56(r4)
20027de8:	10001b26 	beq	r2,zero,20027e58 <_putc_r+0x88>
20027dec:	30800217 	ldw	r2,8(r6)
20027df0:	10bfffc4 	addi	r2,r2,-1
20027df4:	30800215 	stw	r2,8(r6)
20027df8:	10000a16 	blt	r2,zero,20027e24 <_putc_r+0x54>
20027dfc:	30800017 	ldw	r2,0(r6)
20027e00:	11400005 	stb	r5,0(r2)
20027e04:	30800017 	ldw	r2,0(r6)
20027e08:	10c00044 	addi	r3,r2,1
20027e0c:	30c00015 	stw	r3,0(r6)
20027e10:	10800003 	ldbu	r2,0(r2)
20027e14:	dfc00317 	ldw	ra,12(sp)
20027e18:	dc000217 	ldw	r16,8(sp)
20027e1c:	dec00404 	addi	sp,sp,16
20027e20:	f800283a 	ret
20027e24:	30c00617 	ldw	r3,24(r6)
20027e28:	10c00616 	blt	r2,r3,20027e44 <_putc_r+0x74>
20027e2c:	30800017 	ldw	r2,0(r6)
20027e30:	00c00284 	movi	r3,10
20027e34:	11400005 	stb	r5,0(r2)
20027e38:	30800017 	ldw	r2,0(r6)
20027e3c:	11400003 	ldbu	r5,0(r2)
20027e40:	28fff11e 	bne	r5,r3,20027e08 <__alt_data_end+0xfffe9e08>
20027e44:	8009883a 	mov	r4,r16
20027e48:	dfc00317 	ldw	ra,12(sp)
20027e4c:	dc000217 	ldw	r16,8(sp)
20027e50:	dec00404 	addi	sp,sp,16
20027e54:	0029c941 	jmpi	20029c94 <__swbuf_r>
20027e58:	d9400015 	stw	r5,0(sp)
20027e5c:	d9800115 	stw	r6,4(sp)
20027e60:	0020cd40 	call	20020cd4 <__sinit>
20027e64:	d9800117 	ldw	r6,4(sp)
20027e68:	d9400017 	ldw	r5,0(sp)
20027e6c:	003fdf06 	br	20027dec <__alt_data_end+0xfffe9dec>

20027e70 <putc>:
20027e70:	008800f4 	movhi	r2,8195
20027e74:	defffc04 	addi	sp,sp,-16
20027e78:	108b0a04 	addi	r2,r2,11304
20027e7c:	dc000115 	stw	r16,4(sp)
20027e80:	14000017 	ldw	r16,0(r2)
20027e84:	dc400215 	stw	r17,8(sp)
20027e88:	dfc00315 	stw	ra,12(sp)
20027e8c:	2023883a 	mov	r17,r4
20027e90:	80000226 	beq	r16,zero,20027e9c <putc+0x2c>
20027e94:	80800e17 	ldw	r2,56(r16)
20027e98:	10001a26 	beq	r2,zero,20027f04 <putc+0x94>
20027e9c:	28800217 	ldw	r2,8(r5)
20027ea0:	10bfffc4 	addi	r2,r2,-1
20027ea4:	28800215 	stw	r2,8(r5)
20027ea8:	10000b16 	blt	r2,zero,20027ed8 <putc+0x68>
20027eac:	28800017 	ldw	r2,0(r5)
20027eb0:	14400005 	stb	r17,0(r2)
20027eb4:	28800017 	ldw	r2,0(r5)
20027eb8:	10c00044 	addi	r3,r2,1
20027ebc:	28c00015 	stw	r3,0(r5)
20027ec0:	10800003 	ldbu	r2,0(r2)
20027ec4:	dfc00317 	ldw	ra,12(sp)
20027ec8:	dc400217 	ldw	r17,8(sp)
20027ecc:	dc000117 	ldw	r16,4(sp)
20027ed0:	dec00404 	addi	sp,sp,16
20027ed4:	f800283a 	ret
20027ed8:	28c00617 	ldw	r3,24(r5)
20027edc:	10c00e16 	blt	r2,r3,20027f18 <putc+0xa8>
20027ee0:	28800017 	ldw	r2,0(r5)
20027ee4:	01000284 	movi	r4,10
20027ee8:	14400005 	stb	r17,0(r2)
20027eec:	28800017 	ldw	r2,0(r5)
20027ef0:	10c00003 	ldbu	r3,0(r2)
20027ef4:	193ff01e 	bne	r3,r4,20027eb8 <__alt_data_end+0xfffe9eb8>
20027ef8:	280d883a 	mov	r6,r5
20027efc:	180b883a 	mov	r5,r3
20027f00:	00000706 	br	20027f20 <putc+0xb0>
20027f04:	8009883a 	mov	r4,r16
20027f08:	d9400015 	stw	r5,0(sp)
20027f0c:	0020cd40 	call	20020cd4 <__sinit>
20027f10:	d9400017 	ldw	r5,0(sp)
20027f14:	003fe106 	br	20027e9c <__alt_data_end+0xfffe9e9c>
20027f18:	280d883a 	mov	r6,r5
20027f1c:	880b883a 	mov	r5,r17
20027f20:	8009883a 	mov	r4,r16
20027f24:	dfc00317 	ldw	ra,12(sp)
20027f28:	dc400217 	ldw	r17,8(sp)
20027f2c:	dc000117 	ldw	r16,4(sp)
20027f30:	dec00404 	addi	sp,sp,16
20027f34:	0029c941 	jmpi	20029c94 <__swbuf_r>

20027f38 <_read_r>:
20027f38:	defffd04 	addi	sp,sp,-12
20027f3c:	2805883a 	mov	r2,r5
20027f40:	dc000015 	stw	r16,0(sp)
20027f44:	040800f4 	movhi	r16,8195
20027f48:	dc400115 	stw	r17,4(sp)
20027f4c:	300b883a 	mov	r5,r6
20027f50:	8411f504 	addi	r16,r16,18388
20027f54:	2023883a 	mov	r17,r4
20027f58:	380d883a 	mov	r6,r7
20027f5c:	1009883a 	mov	r4,r2
20027f60:	dfc00215 	stw	ra,8(sp)
20027f64:	80000015 	stw	zero,0(r16)
20027f68:	002dc640 	call	2002dc64 <read>
20027f6c:	00ffffc4 	movi	r3,-1
20027f70:	10c00526 	beq	r2,r3,20027f88 <_read_r+0x50>
20027f74:	dfc00217 	ldw	ra,8(sp)
20027f78:	dc400117 	ldw	r17,4(sp)
20027f7c:	dc000017 	ldw	r16,0(sp)
20027f80:	dec00304 	addi	sp,sp,12
20027f84:	f800283a 	ret
20027f88:	80c00017 	ldw	r3,0(r16)
20027f8c:	183ff926 	beq	r3,zero,20027f74 <__alt_data_end+0xfffe9f74>
20027f90:	88c00015 	stw	r3,0(r17)
20027f94:	003ff706 	br	20027f74 <__alt_data_end+0xfffe9f74>

20027f98 <_realloc_r>:
20027f98:	defff604 	addi	sp,sp,-40
20027f9c:	dc800215 	stw	r18,8(sp)
20027fa0:	dfc00915 	stw	ra,36(sp)
20027fa4:	df000815 	stw	fp,32(sp)
20027fa8:	ddc00715 	stw	r23,28(sp)
20027fac:	dd800615 	stw	r22,24(sp)
20027fb0:	dd400515 	stw	r21,20(sp)
20027fb4:	dd000415 	stw	r20,16(sp)
20027fb8:	dcc00315 	stw	r19,12(sp)
20027fbc:	dc400115 	stw	r17,4(sp)
20027fc0:	dc000015 	stw	r16,0(sp)
20027fc4:	3025883a 	mov	r18,r6
20027fc8:	2800b726 	beq	r5,zero,200282a8 <_realloc_r+0x310>
20027fcc:	282b883a 	mov	r21,r5
20027fd0:	2029883a 	mov	r20,r4
20027fd4:	002dbe00 	call	2002dbe0 <__malloc_lock>
20027fd8:	a8bfff17 	ldw	r2,-4(r21)
20027fdc:	043fff04 	movi	r16,-4
20027fe0:	90c002c4 	addi	r3,r18,11
20027fe4:	01000584 	movi	r4,22
20027fe8:	acfffe04 	addi	r19,r21,-8
20027fec:	1420703a 	and	r16,r2,r16
20027ff0:	20c0332e 	bgeu	r4,r3,200280c0 <_realloc_r+0x128>
20027ff4:	047ffe04 	movi	r17,-8
20027ff8:	1c62703a 	and	r17,r3,r17
20027ffc:	8807883a 	mov	r3,r17
20028000:	88005816 	blt	r17,zero,20028164 <_realloc_r+0x1cc>
20028004:	8c805736 	bltu	r17,r18,20028164 <_realloc_r+0x1cc>
20028008:	80c0300e 	bge	r16,r3,200280cc <_realloc_r+0x134>
2002800c:	070800f4 	movhi	fp,8195
20028010:	e7055104 	addi	fp,fp,5444
20028014:	e1c00217 	ldw	r7,8(fp)
20028018:	9c09883a 	add	r4,r19,r16
2002801c:	22000117 	ldw	r8,4(r4)
20028020:	21c06326 	beq	r4,r7,200281b0 <_realloc_r+0x218>
20028024:	017fff84 	movi	r5,-2
20028028:	414a703a 	and	r5,r8,r5
2002802c:	214b883a 	add	r5,r4,r5
20028030:	29800117 	ldw	r6,4(r5)
20028034:	3180004c 	andi	r6,r6,1
20028038:	30003f26 	beq	r6,zero,20028138 <_realloc_r+0x1a0>
2002803c:	1080004c 	andi	r2,r2,1
20028040:	10008326 	beq	r2,zero,20028250 <_realloc_r+0x2b8>
20028044:	900b883a 	mov	r5,r18
20028048:	a009883a 	mov	r4,r20
2002804c:	0020eac0 	call	20020eac <_malloc_r>
20028050:	1025883a 	mov	r18,r2
20028054:	10011e26 	beq	r2,zero,200284d0 <_realloc_r+0x538>
20028058:	a93fff17 	ldw	r4,-4(r21)
2002805c:	10fffe04 	addi	r3,r2,-8
20028060:	00bfff84 	movi	r2,-2
20028064:	2084703a 	and	r2,r4,r2
20028068:	9885883a 	add	r2,r19,r2
2002806c:	1880ee26 	beq	r3,r2,20028428 <_realloc_r+0x490>
20028070:	81bfff04 	addi	r6,r16,-4
20028074:	00800904 	movi	r2,36
20028078:	1180b836 	bltu	r2,r6,2002835c <_realloc_r+0x3c4>
2002807c:	00c004c4 	movi	r3,19
20028080:	19809636 	bltu	r3,r6,200282dc <_realloc_r+0x344>
20028084:	9005883a 	mov	r2,r18
20028088:	a807883a 	mov	r3,r21
2002808c:	19000017 	ldw	r4,0(r3)
20028090:	11000015 	stw	r4,0(r2)
20028094:	19000117 	ldw	r4,4(r3)
20028098:	11000115 	stw	r4,4(r2)
2002809c:	18c00217 	ldw	r3,8(r3)
200280a0:	10c00215 	stw	r3,8(r2)
200280a4:	a80b883a 	mov	r5,r21
200280a8:	a009883a 	mov	r4,r20
200280ac:	00261b40 	call	200261b4 <_free_r>
200280b0:	a009883a 	mov	r4,r20
200280b4:	002dc040 	call	2002dc04 <__malloc_unlock>
200280b8:	9005883a 	mov	r2,r18
200280bc:	00001206 	br	20028108 <_realloc_r+0x170>
200280c0:	00c00404 	movi	r3,16
200280c4:	1823883a 	mov	r17,r3
200280c8:	003fce06 	br	20028004 <__alt_data_end+0xfffea004>
200280cc:	a825883a 	mov	r18,r21
200280d0:	8445c83a 	sub	r2,r16,r17
200280d4:	00c003c4 	movi	r3,15
200280d8:	18802636 	bltu	r3,r2,20028174 <_realloc_r+0x1dc>
200280dc:	99800117 	ldw	r6,4(r19)
200280e0:	9c07883a 	add	r3,r19,r16
200280e4:	3180004c 	andi	r6,r6,1
200280e8:	3420b03a 	or	r16,r6,r16
200280ec:	9c000115 	stw	r16,4(r19)
200280f0:	18800117 	ldw	r2,4(r3)
200280f4:	10800054 	ori	r2,r2,1
200280f8:	18800115 	stw	r2,4(r3)
200280fc:	a009883a 	mov	r4,r20
20028100:	002dc040 	call	2002dc04 <__malloc_unlock>
20028104:	9005883a 	mov	r2,r18
20028108:	dfc00917 	ldw	ra,36(sp)
2002810c:	df000817 	ldw	fp,32(sp)
20028110:	ddc00717 	ldw	r23,28(sp)
20028114:	dd800617 	ldw	r22,24(sp)
20028118:	dd400517 	ldw	r21,20(sp)
2002811c:	dd000417 	ldw	r20,16(sp)
20028120:	dcc00317 	ldw	r19,12(sp)
20028124:	dc800217 	ldw	r18,8(sp)
20028128:	dc400117 	ldw	r17,4(sp)
2002812c:	dc000017 	ldw	r16,0(sp)
20028130:	dec00a04 	addi	sp,sp,40
20028134:	f800283a 	ret
20028138:	017fff04 	movi	r5,-4
2002813c:	414a703a 	and	r5,r8,r5
20028140:	814d883a 	add	r6,r16,r5
20028144:	30c01f16 	blt	r6,r3,200281c4 <_realloc_r+0x22c>
20028148:	20800317 	ldw	r2,12(r4)
2002814c:	20c00217 	ldw	r3,8(r4)
20028150:	a825883a 	mov	r18,r21
20028154:	3021883a 	mov	r16,r6
20028158:	18800315 	stw	r2,12(r3)
2002815c:	10c00215 	stw	r3,8(r2)
20028160:	003fdb06 	br	200280d0 <__alt_data_end+0xfffea0d0>
20028164:	00800304 	movi	r2,12
20028168:	a0800015 	stw	r2,0(r20)
2002816c:	0005883a 	mov	r2,zero
20028170:	003fe506 	br	20028108 <__alt_data_end+0xfffea108>
20028174:	98c00117 	ldw	r3,4(r19)
20028178:	9c4b883a 	add	r5,r19,r17
2002817c:	11000054 	ori	r4,r2,1
20028180:	18c0004c 	andi	r3,r3,1
20028184:	1c62b03a 	or	r17,r3,r17
20028188:	9c400115 	stw	r17,4(r19)
2002818c:	29000115 	stw	r4,4(r5)
20028190:	2885883a 	add	r2,r5,r2
20028194:	10c00117 	ldw	r3,4(r2)
20028198:	29400204 	addi	r5,r5,8
2002819c:	a009883a 	mov	r4,r20
200281a0:	18c00054 	ori	r3,r3,1
200281a4:	10c00115 	stw	r3,4(r2)
200281a8:	00261b40 	call	200261b4 <_free_r>
200281ac:	003fd306 	br	200280fc <__alt_data_end+0xfffea0fc>
200281b0:	017fff04 	movi	r5,-4
200281b4:	414a703a 	and	r5,r8,r5
200281b8:	89800404 	addi	r6,r17,16
200281bc:	8151883a 	add	r8,r16,r5
200281c0:	4180590e 	bge	r8,r6,20028328 <_realloc_r+0x390>
200281c4:	1080004c 	andi	r2,r2,1
200281c8:	103f9e1e 	bne	r2,zero,20028044 <__alt_data_end+0xfffea044>
200281cc:	adbffe17 	ldw	r22,-8(r21)
200281d0:	00bfff04 	movi	r2,-4
200281d4:	9dadc83a 	sub	r22,r19,r22
200281d8:	b1800117 	ldw	r6,4(r22)
200281dc:	3084703a 	and	r2,r6,r2
200281e0:	20002026 	beq	r4,zero,20028264 <_realloc_r+0x2cc>
200281e4:	80af883a 	add	r23,r16,r2
200281e8:	b96f883a 	add	r23,r23,r5
200281ec:	21c05f26 	beq	r4,r7,2002836c <_realloc_r+0x3d4>
200281f0:	b8c01c16 	blt	r23,r3,20028264 <_realloc_r+0x2cc>
200281f4:	20800317 	ldw	r2,12(r4)
200281f8:	20c00217 	ldw	r3,8(r4)
200281fc:	81bfff04 	addi	r6,r16,-4
20028200:	01000904 	movi	r4,36
20028204:	18800315 	stw	r2,12(r3)
20028208:	10c00215 	stw	r3,8(r2)
2002820c:	b0c00217 	ldw	r3,8(r22)
20028210:	b0800317 	ldw	r2,12(r22)
20028214:	b4800204 	addi	r18,r22,8
20028218:	18800315 	stw	r2,12(r3)
2002821c:	10c00215 	stw	r3,8(r2)
20028220:	21801b36 	bltu	r4,r6,20028290 <_realloc_r+0x2f8>
20028224:	008004c4 	movi	r2,19
20028228:	1180352e 	bgeu	r2,r6,20028300 <_realloc_r+0x368>
2002822c:	a8800017 	ldw	r2,0(r21)
20028230:	b0800215 	stw	r2,8(r22)
20028234:	a8800117 	ldw	r2,4(r21)
20028238:	b0800315 	stw	r2,12(r22)
2002823c:	008006c4 	movi	r2,27
20028240:	11807f36 	bltu	r2,r6,20028440 <_realloc_r+0x4a8>
20028244:	b0800404 	addi	r2,r22,16
20028248:	ad400204 	addi	r21,r21,8
2002824c:	00002d06 	br	20028304 <_realloc_r+0x36c>
20028250:	adbffe17 	ldw	r22,-8(r21)
20028254:	00bfff04 	movi	r2,-4
20028258:	9dadc83a 	sub	r22,r19,r22
2002825c:	b1000117 	ldw	r4,4(r22)
20028260:	2084703a 	and	r2,r4,r2
20028264:	b03f7726 	beq	r22,zero,20028044 <__alt_data_end+0xfffea044>
20028268:	80af883a 	add	r23,r16,r2
2002826c:	b8ff7516 	blt	r23,r3,20028044 <__alt_data_end+0xfffea044>
20028270:	b0800317 	ldw	r2,12(r22)
20028274:	b0c00217 	ldw	r3,8(r22)
20028278:	81bfff04 	addi	r6,r16,-4
2002827c:	01000904 	movi	r4,36
20028280:	18800315 	stw	r2,12(r3)
20028284:	10c00215 	stw	r3,8(r2)
20028288:	b4800204 	addi	r18,r22,8
2002828c:	21bfe52e 	bgeu	r4,r6,20028224 <__alt_data_end+0xfffea224>
20028290:	a80b883a 	mov	r5,r21
20028294:	9009883a 	mov	r4,r18
20028298:	0026c780 	call	20026c78 <memmove>
2002829c:	b821883a 	mov	r16,r23
200282a0:	b027883a 	mov	r19,r22
200282a4:	003f8a06 	br	200280d0 <__alt_data_end+0xfffea0d0>
200282a8:	300b883a 	mov	r5,r6
200282ac:	dfc00917 	ldw	ra,36(sp)
200282b0:	df000817 	ldw	fp,32(sp)
200282b4:	ddc00717 	ldw	r23,28(sp)
200282b8:	dd800617 	ldw	r22,24(sp)
200282bc:	dd400517 	ldw	r21,20(sp)
200282c0:	dd000417 	ldw	r20,16(sp)
200282c4:	dcc00317 	ldw	r19,12(sp)
200282c8:	dc800217 	ldw	r18,8(sp)
200282cc:	dc400117 	ldw	r17,4(sp)
200282d0:	dc000017 	ldw	r16,0(sp)
200282d4:	dec00a04 	addi	sp,sp,40
200282d8:	0020eac1 	jmpi	20020eac <_malloc_r>
200282dc:	a8c00017 	ldw	r3,0(r21)
200282e0:	90c00015 	stw	r3,0(r18)
200282e4:	a8c00117 	ldw	r3,4(r21)
200282e8:	90c00115 	stw	r3,4(r18)
200282ec:	00c006c4 	movi	r3,27
200282f0:	19804536 	bltu	r3,r6,20028408 <_realloc_r+0x470>
200282f4:	90800204 	addi	r2,r18,8
200282f8:	a8c00204 	addi	r3,r21,8
200282fc:	003f6306 	br	2002808c <__alt_data_end+0xfffea08c>
20028300:	9005883a 	mov	r2,r18
20028304:	a8c00017 	ldw	r3,0(r21)
20028308:	b821883a 	mov	r16,r23
2002830c:	b027883a 	mov	r19,r22
20028310:	10c00015 	stw	r3,0(r2)
20028314:	a8c00117 	ldw	r3,4(r21)
20028318:	10c00115 	stw	r3,4(r2)
2002831c:	a8c00217 	ldw	r3,8(r21)
20028320:	10c00215 	stw	r3,8(r2)
20028324:	003f6a06 	br	200280d0 <__alt_data_end+0xfffea0d0>
20028328:	9c67883a 	add	r19,r19,r17
2002832c:	4445c83a 	sub	r2,r8,r17
20028330:	e4c00215 	stw	r19,8(fp)
20028334:	10800054 	ori	r2,r2,1
20028338:	98800115 	stw	r2,4(r19)
2002833c:	a8bfff17 	ldw	r2,-4(r21)
20028340:	a009883a 	mov	r4,r20
20028344:	1080004c 	andi	r2,r2,1
20028348:	1462b03a 	or	r17,r2,r17
2002834c:	ac7fff15 	stw	r17,-4(r21)
20028350:	002dc040 	call	2002dc04 <__malloc_unlock>
20028354:	a805883a 	mov	r2,r21
20028358:	003f6b06 	br	20028108 <__alt_data_end+0xfffea108>
2002835c:	a80b883a 	mov	r5,r21
20028360:	9009883a 	mov	r4,r18
20028364:	0026c780 	call	20026c78 <memmove>
20028368:	003f4e06 	br	200280a4 <__alt_data_end+0xfffea0a4>
2002836c:	89000404 	addi	r4,r17,16
20028370:	b93fbc16 	blt	r23,r4,20028264 <__alt_data_end+0xfffea264>
20028374:	b0800317 	ldw	r2,12(r22)
20028378:	b0c00217 	ldw	r3,8(r22)
2002837c:	81bfff04 	addi	r6,r16,-4
20028380:	01000904 	movi	r4,36
20028384:	18800315 	stw	r2,12(r3)
20028388:	10c00215 	stw	r3,8(r2)
2002838c:	b4800204 	addi	r18,r22,8
20028390:	21804336 	bltu	r4,r6,200284a0 <_realloc_r+0x508>
20028394:	008004c4 	movi	r2,19
20028398:	11803f2e 	bgeu	r2,r6,20028498 <_realloc_r+0x500>
2002839c:	a8800017 	ldw	r2,0(r21)
200283a0:	b0800215 	stw	r2,8(r22)
200283a4:	a8800117 	ldw	r2,4(r21)
200283a8:	b0800315 	stw	r2,12(r22)
200283ac:	008006c4 	movi	r2,27
200283b0:	11803f36 	bltu	r2,r6,200284b0 <_realloc_r+0x518>
200283b4:	b0800404 	addi	r2,r22,16
200283b8:	ad400204 	addi	r21,r21,8
200283bc:	a8c00017 	ldw	r3,0(r21)
200283c0:	10c00015 	stw	r3,0(r2)
200283c4:	a8c00117 	ldw	r3,4(r21)
200283c8:	10c00115 	stw	r3,4(r2)
200283cc:	a8c00217 	ldw	r3,8(r21)
200283d0:	10c00215 	stw	r3,8(r2)
200283d4:	b447883a 	add	r3,r22,r17
200283d8:	bc45c83a 	sub	r2,r23,r17
200283dc:	e0c00215 	stw	r3,8(fp)
200283e0:	10800054 	ori	r2,r2,1
200283e4:	18800115 	stw	r2,4(r3)
200283e8:	b0800117 	ldw	r2,4(r22)
200283ec:	a009883a 	mov	r4,r20
200283f0:	1080004c 	andi	r2,r2,1
200283f4:	1462b03a 	or	r17,r2,r17
200283f8:	b4400115 	stw	r17,4(r22)
200283fc:	002dc040 	call	2002dc04 <__malloc_unlock>
20028400:	9005883a 	mov	r2,r18
20028404:	003f4006 	br	20028108 <__alt_data_end+0xfffea108>
20028408:	a8c00217 	ldw	r3,8(r21)
2002840c:	90c00215 	stw	r3,8(r18)
20028410:	a8c00317 	ldw	r3,12(r21)
20028414:	90c00315 	stw	r3,12(r18)
20028418:	30801126 	beq	r6,r2,20028460 <_realloc_r+0x4c8>
2002841c:	90800404 	addi	r2,r18,16
20028420:	a8c00404 	addi	r3,r21,16
20028424:	003f1906 	br	2002808c <__alt_data_end+0xfffea08c>
20028428:	90ffff17 	ldw	r3,-4(r18)
2002842c:	00bfff04 	movi	r2,-4
20028430:	a825883a 	mov	r18,r21
20028434:	1884703a 	and	r2,r3,r2
20028438:	80a1883a 	add	r16,r16,r2
2002843c:	003f2406 	br	200280d0 <__alt_data_end+0xfffea0d0>
20028440:	a8800217 	ldw	r2,8(r21)
20028444:	b0800415 	stw	r2,16(r22)
20028448:	a8800317 	ldw	r2,12(r21)
2002844c:	b0800515 	stw	r2,20(r22)
20028450:	31000a26 	beq	r6,r4,2002847c <_realloc_r+0x4e4>
20028454:	b0800604 	addi	r2,r22,24
20028458:	ad400404 	addi	r21,r21,16
2002845c:	003fa906 	br	20028304 <__alt_data_end+0xfffea304>
20028460:	a9000417 	ldw	r4,16(r21)
20028464:	90800604 	addi	r2,r18,24
20028468:	a8c00604 	addi	r3,r21,24
2002846c:	91000415 	stw	r4,16(r18)
20028470:	a9000517 	ldw	r4,20(r21)
20028474:	91000515 	stw	r4,20(r18)
20028478:	003f0406 	br	2002808c <__alt_data_end+0xfffea08c>
2002847c:	a8c00417 	ldw	r3,16(r21)
20028480:	ad400604 	addi	r21,r21,24
20028484:	b0800804 	addi	r2,r22,32
20028488:	b0c00615 	stw	r3,24(r22)
2002848c:	a8ffff17 	ldw	r3,-4(r21)
20028490:	b0c00715 	stw	r3,28(r22)
20028494:	003f9b06 	br	20028304 <__alt_data_end+0xfffea304>
20028498:	9005883a 	mov	r2,r18
2002849c:	003fc706 	br	200283bc <__alt_data_end+0xfffea3bc>
200284a0:	a80b883a 	mov	r5,r21
200284a4:	9009883a 	mov	r4,r18
200284a8:	0026c780 	call	20026c78 <memmove>
200284ac:	003fc906 	br	200283d4 <__alt_data_end+0xfffea3d4>
200284b0:	a8800217 	ldw	r2,8(r21)
200284b4:	b0800415 	stw	r2,16(r22)
200284b8:	a8800317 	ldw	r2,12(r21)
200284bc:	b0800515 	stw	r2,20(r22)
200284c0:	31000726 	beq	r6,r4,200284e0 <_realloc_r+0x548>
200284c4:	b0800604 	addi	r2,r22,24
200284c8:	ad400404 	addi	r21,r21,16
200284cc:	003fbb06 	br	200283bc <__alt_data_end+0xfffea3bc>
200284d0:	a009883a 	mov	r4,r20
200284d4:	002dc040 	call	2002dc04 <__malloc_unlock>
200284d8:	0005883a 	mov	r2,zero
200284dc:	003f0a06 	br	20028108 <__alt_data_end+0xfffea108>
200284e0:	a8c00417 	ldw	r3,16(r21)
200284e4:	ad400604 	addi	r21,r21,24
200284e8:	b0800804 	addi	r2,r22,32
200284ec:	b0c00615 	stw	r3,24(r22)
200284f0:	a8ffff17 	ldw	r3,-4(r21)
200284f4:	b0c00715 	stw	r3,28(r22)
200284f8:	003fb006 	br	200283bc <__alt_data_end+0xfffea3bc>

200284fc <__fpclassifyd>:
200284fc:	00a00034 	movhi	r2,32768
20028500:	10bfffc4 	addi	r2,r2,-1
20028504:	2884703a 	and	r2,r5,r2
20028508:	10000726 	beq	r2,zero,20028528 <__fpclassifyd+0x2c>
2002850c:	00fffc34 	movhi	r3,65520
20028510:	019ff834 	movhi	r6,32736
20028514:	28c7883a 	add	r3,r5,r3
20028518:	31bfffc4 	addi	r6,r6,-1
2002851c:	30c00536 	bltu	r6,r3,20028534 <__fpclassifyd+0x38>
20028520:	00800104 	movi	r2,4
20028524:	f800283a 	ret
20028528:	2000021e 	bne	r4,zero,20028534 <__fpclassifyd+0x38>
2002852c:	00800084 	movi	r2,2
20028530:	f800283a 	ret
20028534:	00dffc34 	movhi	r3,32752
20028538:	019ff834 	movhi	r6,32736
2002853c:	28cb883a 	add	r5,r5,r3
20028540:	31bfffc4 	addi	r6,r6,-1
20028544:	317ff62e 	bgeu	r6,r5,20028520 <__alt_data_end+0xfffea520>
20028548:	01400434 	movhi	r5,16
2002854c:	297fffc4 	addi	r5,r5,-1
20028550:	28800236 	bltu	r5,r2,2002855c <__fpclassifyd+0x60>
20028554:	008000c4 	movi	r2,3
20028558:	f800283a 	ret
2002855c:	10c00226 	beq	r2,r3,20028568 <__fpclassifyd+0x6c>
20028560:	0005883a 	mov	r2,zero
20028564:	f800283a 	ret
20028568:	2005003a 	cmpeq	r2,r4,zero
2002856c:	f800283a 	ret

20028570 <strcmp>:
20028570:	2144b03a 	or	r2,r4,r5
20028574:	108000cc 	andi	r2,r2,3
20028578:	1000171e 	bne	r2,zero,200285d8 <strcmp+0x68>
2002857c:	20800017 	ldw	r2,0(r4)
20028580:	28c00017 	ldw	r3,0(r5)
20028584:	10c0141e 	bne	r2,r3,200285d8 <strcmp+0x68>
20028588:	027fbff4 	movhi	r9,65279
2002858c:	4a7fbfc4 	addi	r9,r9,-257
20028590:	0086303a 	nor	r3,zero,r2
20028594:	02202074 	movhi	r8,32897
20028598:	1245883a 	add	r2,r2,r9
2002859c:	42202004 	addi	r8,r8,-32640
200285a0:	10c4703a 	and	r2,r2,r3
200285a4:	1204703a 	and	r2,r2,r8
200285a8:	10000226 	beq	r2,zero,200285b4 <strcmp+0x44>
200285ac:	00002306 	br	2002863c <strcmp+0xcc>
200285b0:	1000221e 	bne	r2,zero,2002863c <strcmp+0xcc>
200285b4:	21000104 	addi	r4,r4,4
200285b8:	20c00017 	ldw	r3,0(r4)
200285bc:	29400104 	addi	r5,r5,4
200285c0:	29800017 	ldw	r6,0(r5)
200285c4:	1a4f883a 	add	r7,r3,r9
200285c8:	00c4303a 	nor	r2,zero,r3
200285cc:	3884703a 	and	r2,r7,r2
200285d0:	1204703a 	and	r2,r2,r8
200285d4:	19bff626 	beq	r3,r6,200285b0 <__alt_data_end+0xfffea5b0>
200285d8:	20800003 	ldbu	r2,0(r4)
200285dc:	10c03fcc 	andi	r3,r2,255
200285e0:	18c0201c 	xori	r3,r3,128
200285e4:	18ffe004 	addi	r3,r3,-128
200285e8:	18000c26 	beq	r3,zero,2002861c <strcmp+0xac>
200285ec:	29800007 	ldb	r6,0(r5)
200285f0:	19800326 	beq	r3,r6,20028600 <strcmp+0x90>
200285f4:	00001306 	br	20028644 <strcmp+0xd4>
200285f8:	29800007 	ldb	r6,0(r5)
200285fc:	11800b1e 	bne	r2,r6,2002862c <strcmp+0xbc>
20028600:	21000044 	addi	r4,r4,1
20028604:	20c00003 	ldbu	r3,0(r4)
20028608:	29400044 	addi	r5,r5,1
2002860c:	18803fcc 	andi	r2,r3,255
20028610:	1080201c 	xori	r2,r2,128
20028614:	10bfe004 	addi	r2,r2,-128
20028618:	103ff71e 	bne	r2,zero,200285f8 <__alt_data_end+0xfffea5f8>
2002861c:	0007883a 	mov	r3,zero
20028620:	28800003 	ldbu	r2,0(r5)
20028624:	1885c83a 	sub	r2,r3,r2
20028628:	f800283a 	ret
2002862c:	28800003 	ldbu	r2,0(r5)
20028630:	18c03fcc 	andi	r3,r3,255
20028634:	1885c83a 	sub	r2,r3,r2
20028638:	f800283a 	ret
2002863c:	0005883a 	mov	r2,zero
20028640:	f800283a 	ret
20028644:	10c03fcc 	andi	r3,r2,255
20028648:	003ff506 	br	20028620 <__alt_data_end+0xfffea620>

2002864c <__sprint_r.part.0>:
2002864c:	28801917 	ldw	r2,100(r5)
20028650:	defff604 	addi	sp,sp,-40
20028654:	dd400515 	stw	r21,20(sp)
20028658:	dfc00915 	stw	ra,36(sp)
2002865c:	df000815 	stw	fp,32(sp)
20028660:	ddc00715 	stw	r23,28(sp)
20028664:	dd800615 	stw	r22,24(sp)
20028668:	dd000415 	stw	r20,16(sp)
2002866c:	dcc00315 	stw	r19,12(sp)
20028670:	dc800215 	stw	r18,8(sp)
20028674:	dc400115 	stw	r17,4(sp)
20028678:	dc000015 	stw	r16,0(sp)
2002867c:	1088000c 	andi	r2,r2,8192
20028680:	302b883a 	mov	r21,r6
20028684:	10002e26 	beq	r2,zero,20028740 <__sprint_r.part.0+0xf4>
20028688:	30800217 	ldw	r2,8(r6)
2002868c:	35800017 	ldw	r22,0(r6)
20028690:	10002926 	beq	r2,zero,20028738 <__sprint_r.part.0+0xec>
20028694:	2827883a 	mov	r19,r5
20028698:	2029883a 	mov	r20,r4
2002869c:	b5c00104 	addi	r23,r22,4
200286a0:	04bfffc4 	movi	r18,-1
200286a4:	bc400017 	ldw	r17,0(r23)
200286a8:	b4000017 	ldw	r16,0(r22)
200286ac:	0039883a 	mov	fp,zero
200286b0:	8822d0ba 	srli	r17,r17,2
200286b4:	8800031e 	bne	r17,zero,200286c4 <__sprint_r.part.0+0x78>
200286b8:	00001806 	br	2002871c <__sprint_r.part.0+0xd0>
200286bc:	84000104 	addi	r16,r16,4
200286c0:	8f001526 	beq	r17,fp,20028718 <__sprint_r.part.0+0xcc>
200286c4:	81400017 	ldw	r5,0(r16)
200286c8:	980d883a 	mov	r6,r19
200286cc:	a009883a 	mov	r4,r20
200286d0:	002a0140 	call	2002a014 <_fputwc_r>
200286d4:	e7000044 	addi	fp,fp,1
200286d8:	14bff81e 	bne	r2,r18,200286bc <__alt_data_end+0xfffea6bc>
200286dc:	9005883a 	mov	r2,r18
200286e0:	a8000215 	stw	zero,8(r21)
200286e4:	a8000115 	stw	zero,4(r21)
200286e8:	dfc00917 	ldw	ra,36(sp)
200286ec:	df000817 	ldw	fp,32(sp)
200286f0:	ddc00717 	ldw	r23,28(sp)
200286f4:	dd800617 	ldw	r22,24(sp)
200286f8:	dd400517 	ldw	r21,20(sp)
200286fc:	dd000417 	ldw	r20,16(sp)
20028700:	dcc00317 	ldw	r19,12(sp)
20028704:	dc800217 	ldw	r18,8(sp)
20028708:	dc400117 	ldw	r17,4(sp)
2002870c:	dc000017 	ldw	r16,0(sp)
20028710:	dec00a04 	addi	sp,sp,40
20028714:	f800283a 	ret
20028718:	a8800217 	ldw	r2,8(r21)
2002871c:	8c63883a 	add	r17,r17,r17
20028720:	8c63883a 	add	r17,r17,r17
20028724:	1445c83a 	sub	r2,r2,r17
20028728:	a8800215 	stw	r2,8(r21)
2002872c:	b5800204 	addi	r22,r22,8
20028730:	bdc00204 	addi	r23,r23,8
20028734:	103fdb1e 	bne	r2,zero,200286a4 <__alt_data_end+0xfffea6a4>
20028738:	0005883a 	mov	r2,zero
2002873c:	003fe806 	br	200286e0 <__alt_data_end+0xfffea6e0>
20028740:	00264c40 	call	200264c4 <__sfvwrite_r>
20028744:	003fe606 	br	200286e0 <__alt_data_end+0xfffea6e0>

20028748 <__sprint_r>:
20028748:	30c00217 	ldw	r3,8(r6)
2002874c:	18000126 	beq	r3,zero,20028754 <__sprint_r+0xc>
20028750:	002864c1 	jmpi	2002864c <__sprint_r.part.0>
20028754:	30000115 	stw	zero,4(r6)
20028758:	0005883a 	mov	r2,zero
2002875c:	f800283a 	ret

20028760 <___vfiprintf_internal_r>:
20028760:	deffc904 	addi	sp,sp,-220
20028764:	df003515 	stw	fp,212(sp)
20028768:	dd003115 	stw	r20,196(sp)
2002876c:	dfc03615 	stw	ra,216(sp)
20028770:	ddc03415 	stw	r23,208(sp)
20028774:	dd803315 	stw	r22,204(sp)
20028778:	dd403215 	stw	r21,200(sp)
2002877c:	dcc03015 	stw	r19,192(sp)
20028780:	dc802f15 	stw	r18,188(sp)
20028784:	dc402e15 	stw	r17,184(sp)
20028788:	dc002d15 	stw	r16,180(sp)
2002878c:	d9002015 	stw	r4,128(sp)
20028790:	d9c02215 	stw	r7,136(sp)
20028794:	2829883a 	mov	r20,r5
20028798:	3039883a 	mov	fp,r6
2002879c:	20000226 	beq	r4,zero,200287a8 <___vfiprintf_internal_r+0x48>
200287a0:	20800e17 	ldw	r2,56(r4)
200287a4:	1000cf26 	beq	r2,zero,20028ae4 <___vfiprintf_internal_r+0x384>
200287a8:	a080030b 	ldhu	r2,12(r20)
200287ac:	10c8000c 	andi	r3,r2,8192
200287b0:	1800061e 	bne	r3,zero,200287cc <___vfiprintf_internal_r+0x6c>
200287b4:	a1001917 	ldw	r4,100(r20)
200287b8:	00f7ffc4 	movi	r3,-8193
200287bc:	10880014 	ori	r2,r2,8192
200287c0:	20c6703a 	and	r3,r4,r3
200287c4:	a080030d 	sth	r2,12(r20)
200287c8:	a0c01915 	stw	r3,100(r20)
200287cc:	10c0020c 	andi	r3,r2,8
200287d0:	1800a926 	beq	r3,zero,20028a78 <___vfiprintf_internal_r+0x318>
200287d4:	a0c00417 	ldw	r3,16(r20)
200287d8:	1800a726 	beq	r3,zero,20028a78 <___vfiprintf_internal_r+0x318>
200287dc:	1080068c 	andi	r2,r2,26
200287e0:	00c00284 	movi	r3,10
200287e4:	10c0ac26 	beq	r2,r3,20028a98 <___vfiprintf_internal_r+0x338>
200287e8:	da801a04 	addi	r10,sp,104
200287ec:	da801e15 	stw	r10,120(sp)
200287f0:	d8801e17 	ldw	r2,120(sp)
200287f4:	da8019c4 	addi	r10,sp,103
200287f8:	058800f4 	movhi	r22,8195
200287fc:	05c800f4 	movhi	r23,8195
20028800:	da801f15 	stw	r10,124(sp)
20028804:	1295c83a 	sub	r10,r2,r10
20028808:	b583e804 	addi	r22,r22,4000
2002880c:	bdc3e404 	addi	r23,r23,3984
20028810:	dec01a15 	stw	sp,104(sp)
20028814:	d8001c15 	stw	zero,112(sp)
20028818:	d8001b15 	stw	zero,108(sp)
2002881c:	d8002615 	stw	zero,152(sp)
20028820:	d8002315 	stw	zero,140(sp)
20028824:	da802715 	stw	r10,156(sp)
20028828:	d811883a 	mov	r8,sp
2002882c:	dd002115 	stw	r20,132(sp)
20028830:	e021883a 	mov	r16,fp
20028834:	80800007 	ldb	r2,0(r16)
20028838:	1003ea26 	beq	r2,zero,200297e4 <___vfiprintf_internal_r+0x1084>
2002883c:	00c00944 	movi	r3,37
20028840:	8025883a 	mov	r18,r16
20028844:	10c0021e 	bne	r2,r3,20028850 <___vfiprintf_internal_r+0xf0>
20028848:	00001606 	br	200288a4 <___vfiprintf_internal_r+0x144>
2002884c:	10c00326 	beq	r2,r3,2002885c <___vfiprintf_internal_r+0xfc>
20028850:	94800044 	addi	r18,r18,1
20028854:	90800007 	ldb	r2,0(r18)
20028858:	103ffc1e 	bne	r2,zero,2002884c <__alt_data_end+0xfffea84c>
2002885c:	9423c83a 	sub	r17,r18,r16
20028860:	88001026 	beq	r17,zero,200288a4 <___vfiprintf_internal_r+0x144>
20028864:	d8c01c17 	ldw	r3,112(sp)
20028868:	d8801b17 	ldw	r2,108(sp)
2002886c:	44000015 	stw	r16,0(r8)
20028870:	88c7883a 	add	r3,r17,r3
20028874:	10800044 	addi	r2,r2,1
20028878:	44400115 	stw	r17,4(r8)
2002887c:	d8c01c15 	stw	r3,112(sp)
20028880:	d8801b15 	stw	r2,108(sp)
20028884:	010001c4 	movi	r4,7
20028888:	2080760e 	bge	r4,r2,20028a64 <___vfiprintf_internal_r+0x304>
2002888c:	1803821e 	bne	r3,zero,20029698 <___vfiprintf_internal_r+0xf38>
20028890:	da802317 	ldw	r10,140(sp)
20028894:	d8001b15 	stw	zero,108(sp)
20028898:	d811883a 	mov	r8,sp
2002889c:	5455883a 	add	r10,r10,r17
200288a0:	da802315 	stw	r10,140(sp)
200288a4:	90800007 	ldb	r2,0(r18)
200288a8:	10044626 	beq	r2,zero,200299c4 <___vfiprintf_internal_r+0x1264>
200288ac:	90c00047 	ldb	r3,1(r18)
200288b0:	94000044 	addi	r16,r18,1
200288b4:	d8001d85 	stb	zero,118(sp)
200288b8:	0009883a 	mov	r4,zero
200288bc:	000f883a 	mov	r7,zero
200288c0:	027fffc4 	movi	r9,-1
200288c4:	0023883a 	mov	r17,zero
200288c8:	0029883a 	mov	r20,zero
200288cc:	01401604 	movi	r5,88
200288d0:	01800244 	movi	r6,9
200288d4:	03400a84 	movi	r13,42
200288d8:	03001b04 	movi	r12,108
200288dc:	84000044 	addi	r16,r16,1
200288e0:	18bff804 	addi	r2,r3,-32
200288e4:	28827336 	bltu	r5,r2,200292b4 <___vfiprintf_internal_r+0xb54>
200288e8:	100490ba 	slli	r2,r2,2
200288ec:	028800f4 	movhi	r10,8195
200288f0:	52a24004 	addi	r10,r10,-30464
200288f4:	1285883a 	add	r2,r2,r10
200288f8:	10800017 	ldw	r2,0(r2)
200288fc:	1000683a 	jmp	r2
20028900:	20028fe8 	cmpgeui	zero,r4,2623
20028904:	200292b4 	orhi	zero,r4,2634
20028908:	200292b4 	orhi	zero,r4,2634
2002890c:	20029008 	cmpgei	zero,r4,2624
20028910:	200292b4 	orhi	zero,r4,2634
20028914:	200292b4 	orhi	zero,r4,2634
20028918:	200292b4 	orhi	zero,r4,2634
2002891c:	200292b4 	orhi	zero,r4,2634
20028920:	200292b4 	orhi	zero,r4,2634
20028924:	200292b4 	orhi	zero,r4,2634
20028928:	200291f0 	cmpltui	zero,r4,2631
2002892c:	2002920c 	andi	zero,r4,2632
20028930:	200292b4 	orhi	zero,r4,2634
20028934:	20028af4 	orhi	zero,r4,2603
20028938:	2002921c 	xori	zero,r4,2632
2002893c:	200292b4 	orhi	zero,r4,2634
20028940:	20029014 	ori	zero,r4,2624
20028944:	20029020 	cmpeqi	zero,r4,2624
20028948:	20029020 	cmpeqi	zero,r4,2624
2002894c:	20029020 	cmpeqi	zero,r4,2624
20028950:	20029020 	cmpeqi	zero,r4,2624
20028954:	20029020 	cmpeqi	zero,r4,2624
20028958:	20029020 	cmpeqi	zero,r4,2624
2002895c:	20029020 	cmpeqi	zero,r4,2624
20028960:	20029020 	cmpeqi	zero,r4,2624
20028964:	20029020 	cmpeqi	zero,r4,2624
20028968:	200292b4 	orhi	zero,r4,2634
2002896c:	200292b4 	orhi	zero,r4,2634
20028970:	200292b4 	orhi	zero,r4,2634
20028974:	200292b4 	orhi	zero,r4,2634
20028978:	200292b4 	orhi	zero,r4,2634
2002897c:	200292b4 	orhi	zero,r4,2634
20028980:	200292b4 	orhi	zero,r4,2634
20028984:	200292b4 	orhi	zero,r4,2634
20028988:	200292b4 	orhi	zero,r4,2634
2002898c:	200292b4 	orhi	zero,r4,2634
20028990:	2002904c 	andi	zero,r4,2625
20028994:	200292b4 	orhi	zero,r4,2634
20028998:	200292b4 	orhi	zero,r4,2634
2002899c:	200292b4 	orhi	zero,r4,2634
200289a0:	200292b4 	orhi	zero,r4,2634
200289a4:	200292b4 	orhi	zero,r4,2634
200289a8:	200292b4 	orhi	zero,r4,2634
200289ac:	200292b4 	orhi	zero,r4,2634
200289b0:	200292b4 	orhi	zero,r4,2634
200289b4:	200292b4 	orhi	zero,r4,2634
200289b8:	200292b4 	orhi	zero,r4,2634
200289bc:	20029084 	addi	zero,r4,2626
200289c0:	200292b4 	orhi	zero,r4,2634
200289c4:	200292b4 	orhi	zero,r4,2634
200289c8:	200292b4 	orhi	zero,r4,2634
200289cc:	200292b4 	orhi	zero,r4,2634
200289d0:	200292b4 	orhi	zero,r4,2634
200289d4:	200290dc 	xori	zero,r4,2627
200289d8:	200292b4 	orhi	zero,r4,2634
200289dc:	200292b4 	orhi	zero,r4,2634
200289e0:	2002914c 	andi	zero,r4,2629
200289e4:	200292b4 	orhi	zero,r4,2634
200289e8:	200292b4 	orhi	zero,r4,2634
200289ec:	200292b4 	orhi	zero,r4,2634
200289f0:	200292b4 	orhi	zero,r4,2634
200289f4:	200292b4 	orhi	zero,r4,2634
200289f8:	200292b4 	orhi	zero,r4,2634
200289fc:	200292b4 	orhi	zero,r4,2634
20028a00:	200292b4 	orhi	zero,r4,2634
20028a04:	200292b4 	orhi	zero,r4,2634
20028a08:	200292b4 	orhi	zero,r4,2634
20028a0c:	20028ef8 	rdprs	zero,r4,2619
20028a10:	20028f24 	muli	zero,r4,2620
20028a14:	200292b4 	orhi	zero,r4,2634
20028a18:	200292b4 	orhi	zero,r4,2634
20028a1c:	200292b4 	orhi	zero,r4,2634
20028a20:	2002925c 	xori	zero,r4,2633
20028a24:	20028f24 	muli	zero,r4,2620
20028a28:	200292b4 	orhi	zero,r4,2634
20028a2c:	200292b4 	orhi	zero,r4,2634
20028a30:	20028db8 	rdprs	zero,r4,2614
20028a34:	200292b4 	orhi	zero,r4,2634
20028a38:	20028dc8 	cmpgei	zero,r4,2615
20028a3c:	20028e04 	addi	zero,r4,2616
20028a40:	20028b00 	call	220028b0 <__alt_data_end+0x1fc48b0>
20028a44:	20028dac 	andhi	zero,r4,2614
20028a48:	200292b4 	orhi	zero,r4,2634
20028a4c:	20029188 	cmpgei	zero,r4,2630
20028a50:	200292b4 	orhi	zero,r4,2634
20028a54:	200291e0 	cmpeqi	zero,r4,2631
20028a58:	200292b4 	orhi	zero,r4,2634
20028a5c:	200292b4 	orhi	zero,r4,2634
20028a60:	20028ea4 	muli	zero,r4,2618
20028a64:	42000204 	addi	r8,r8,8
20028a68:	da802317 	ldw	r10,140(sp)
20028a6c:	5455883a 	add	r10,r10,r17
20028a70:	da802315 	stw	r10,140(sp)
20028a74:	003f8b06 	br	200288a4 <__alt_data_end+0xfffea8a4>
20028a78:	d9002017 	ldw	r4,128(sp)
20028a7c:	a00b883a 	mov	r5,r20
20028a80:	00242b40 	call	200242b4 <__swsetup_r>
20028a84:	1003b11e 	bne	r2,zero,2002994c <___vfiprintf_internal_r+0x11ec>
20028a88:	a080030b 	ldhu	r2,12(r20)
20028a8c:	00c00284 	movi	r3,10
20028a90:	1080068c 	andi	r2,r2,26
20028a94:	10ff541e 	bne	r2,r3,200287e8 <__alt_data_end+0xfffea7e8>
20028a98:	a080038f 	ldh	r2,14(r20)
20028a9c:	103f5216 	blt	r2,zero,200287e8 <__alt_data_end+0xfffea7e8>
20028aa0:	d9c02217 	ldw	r7,136(sp)
20028aa4:	d9002017 	ldw	r4,128(sp)
20028aa8:	e00d883a 	mov	r6,fp
20028aac:	a00b883a 	mov	r5,r20
20028ab0:	0029bd80 	call	20029bd8 <__sbprintf>
20028ab4:	dfc03617 	ldw	ra,216(sp)
20028ab8:	df003517 	ldw	fp,212(sp)
20028abc:	ddc03417 	ldw	r23,208(sp)
20028ac0:	dd803317 	ldw	r22,204(sp)
20028ac4:	dd403217 	ldw	r21,200(sp)
20028ac8:	dd003117 	ldw	r20,196(sp)
20028acc:	dcc03017 	ldw	r19,192(sp)
20028ad0:	dc802f17 	ldw	r18,188(sp)
20028ad4:	dc402e17 	ldw	r17,184(sp)
20028ad8:	dc002d17 	ldw	r16,180(sp)
20028adc:	dec03704 	addi	sp,sp,220
20028ae0:	f800283a 	ret
20028ae4:	0020cd40 	call	20020cd4 <__sinit>
20028ae8:	003f2f06 	br	200287a8 <__alt_data_end+0xfffea7a8>
20028aec:	0463c83a 	sub	r17,zero,r17
20028af0:	d8802215 	stw	r2,136(sp)
20028af4:	a5000114 	ori	r20,r20,4
20028af8:	80c00007 	ldb	r3,0(r16)
20028afc:	003f7706 	br	200288dc <__alt_data_end+0xfffea8dc>
20028b00:	00800c04 	movi	r2,48
20028b04:	da802217 	ldw	r10,136(sp)
20028b08:	d8801d05 	stb	r2,116(sp)
20028b0c:	00801e04 	movi	r2,120
20028b10:	d8801d45 	stb	r2,117(sp)
20028b14:	d8001d85 	stb	zero,118(sp)
20028b18:	50c00104 	addi	r3,r10,4
20028b1c:	54800017 	ldw	r18,0(r10)
20028b20:	0027883a 	mov	r19,zero
20028b24:	a0800094 	ori	r2,r20,2
20028b28:	48030b16 	blt	r9,zero,20029758 <___vfiprintf_internal_r+0xff8>
20028b2c:	00bfdfc4 	movi	r2,-129
20028b30:	a096703a 	and	r11,r20,r2
20028b34:	d8c02215 	stw	r3,136(sp)
20028b38:	5d000094 	ori	r20,r11,2
20028b3c:	90032b1e 	bne	r18,zero,200297ec <___vfiprintf_internal_r+0x108c>
20028b40:	008800f4 	movhi	r2,8195
20028b44:	10838404 	addi	r2,r2,3600
20028b48:	d8802615 	stw	r2,152(sp)
20028b4c:	0039883a 	mov	fp,zero
20028b50:	48017b1e 	bne	r9,zero,20029140 <___vfiprintf_internal_r+0x9e0>
20028b54:	0013883a 	mov	r9,zero
20028b58:	0027883a 	mov	r19,zero
20028b5c:	dd401a04 	addi	r21,sp,104
20028b60:	4825883a 	mov	r18,r9
20028b64:	4cc0010e 	bge	r9,r19,20028b6c <___vfiprintf_internal_r+0x40c>
20028b68:	9825883a 	mov	r18,r19
20028b6c:	e7003fcc 	andi	fp,fp,255
20028b70:	e700201c 	xori	fp,fp,128
20028b74:	e73fe004 	addi	fp,fp,-128
20028b78:	e0000126 	beq	fp,zero,20028b80 <___vfiprintf_internal_r+0x420>
20028b7c:	94800044 	addi	r18,r18,1
20028b80:	a380008c 	andi	r14,r20,2
20028b84:	70000126 	beq	r14,zero,20028b8c <___vfiprintf_internal_r+0x42c>
20028b88:	94800084 	addi	r18,r18,2
20028b8c:	a700210c 	andi	fp,r20,132
20028b90:	e001df1e 	bne	fp,zero,20029310 <___vfiprintf_internal_r+0xbb0>
20028b94:	8c87c83a 	sub	r3,r17,r18
20028b98:	00c1dd0e 	bge	zero,r3,20029310 <___vfiprintf_internal_r+0xbb0>
20028b9c:	01c00404 	movi	r7,16
20028ba0:	d8801c17 	ldw	r2,112(sp)
20028ba4:	38c3ad0e 	bge	r7,r3,20029a5c <___vfiprintf_internal_r+0x12fc>
20028ba8:	028800f4 	movhi	r10,8195
20028bac:	5283e804 	addi	r10,r10,4000
20028bb0:	dc002915 	stw	r16,164(sp)
20028bb4:	d9801b17 	ldw	r6,108(sp)
20028bb8:	da802415 	stw	r10,144(sp)
20028bbc:	03c001c4 	movi	r15,7
20028bc0:	da402515 	stw	r9,148(sp)
20028bc4:	db802815 	stw	r14,160(sp)
20028bc8:	1821883a 	mov	r16,r3
20028bcc:	00000506 	br	20028be4 <___vfiprintf_internal_r+0x484>
20028bd0:	31400084 	addi	r5,r6,2
20028bd4:	42000204 	addi	r8,r8,8
20028bd8:	200d883a 	mov	r6,r4
20028bdc:	843ffc04 	addi	r16,r16,-16
20028be0:	3c000d0e 	bge	r7,r16,20028c18 <___vfiprintf_internal_r+0x4b8>
20028be4:	10800404 	addi	r2,r2,16
20028be8:	31000044 	addi	r4,r6,1
20028bec:	45800015 	stw	r22,0(r8)
20028bf0:	41c00115 	stw	r7,4(r8)
20028bf4:	d8801c15 	stw	r2,112(sp)
20028bf8:	d9001b15 	stw	r4,108(sp)
20028bfc:	793ff40e 	bge	r15,r4,20028bd0 <__alt_data_end+0xfffeabd0>
20028c00:	1001b51e 	bne	r2,zero,200292d8 <___vfiprintf_internal_r+0xb78>
20028c04:	843ffc04 	addi	r16,r16,-16
20028c08:	000d883a 	mov	r6,zero
20028c0c:	01400044 	movi	r5,1
20028c10:	d811883a 	mov	r8,sp
20028c14:	3c3ff316 	blt	r7,r16,20028be4 <__alt_data_end+0xfffeabe4>
20028c18:	8007883a 	mov	r3,r16
20028c1c:	da402517 	ldw	r9,148(sp)
20028c20:	db802817 	ldw	r14,160(sp)
20028c24:	dc002917 	ldw	r16,164(sp)
20028c28:	da802417 	ldw	r10,144(sp)
20028c2c:	1885883a 	add	r2,r3,r2
20028c30:	40c00115 	stw	r3,4(r8)
20028c34:	42800015 	stw	r10,0(r8)
20028c38:	d8801c15 	stw	r2,112(sp)
20028c3c:	d9401b15 	stw	r5,108(sp)
20028c40:	00c001c4 	movi	r3,7
20028c44:	19426016 	blt	r3,r5,200295c8 <___vfiprintf_internal_r+0xe68>
20028c48:	d8c01d87 	ldb	r3,118(sp)
20028c4c:	42000204 	addi	r8,r8,8
20028c50:	29000044 	addi	r4,r5,1
20028c54:	1801b31e 	bne	r3,zero,20029324 <___vfiprintf_internal_r+0xbc4>
20028c58:	7001c026 	beq	r14,zero,2002935c <___vfiprintf_internal_r+0xbfc>
20028c5c:	d8c01d04 	addi	r3,sp,116
20028c60:	10800084 	addi	r2,r2,2
20028c64:	40c00015 	stw	r3,0(r8)
20028c68:	00c00084 	movi	r3,2
20028c6c:	40c00115 	stw	r3,4(r8)
20028c70:	d8801c15 	stw	r2,112(sp)
20028c74:	d9001b15 	stw	r4,108(sp)
20028c78:	00c001c4 	movi	r3,7
20028c7c:	1902650e 	bge	r3,r4,20029614 <___vfiprintf_internal_r+0xeb4>
20028c80:	10029a1e 	bne	r2,zero,200296ec <___vfiprintf_internal_r+0xf8c>
20028c84:	00c02004 	movi	r3,128
20028c88:	01000044 	movi	r4,1
20028c8c:	000b883a 	mov	r5,zero
20028c90:	d811883a 	mov	r8,sp
20028c94:	e0c1b31e 	bne	fp,r3,20029364 <___vfiprintf_internal_r+0xc04>
20028c98:	8cb9c83a 	sub	fp,r17,r18
20028c9c:	0701b10e 	bge	zero,fp,20029364 <___vfiprintf_internal_r+0xc04>
20028ca0:	01c00404 	movi	r7,16
20028ca4:	3f03890e 	bge	r7,fp,20029acc <___vfiprintf_internal_r+0x136c>
20028ca8:	00c800f4 	movhi	r3,8195
20028cac:	18c3e404 	addi	r3,r3,3984
20028cb0:	d8c02415 	stw	r3,144(sp)
20028cb4:	8007883a 	mov	r3,r16
20028cb8:	034001c4 	movi	r13,7
20028cbc:	e021883a 	mov	r16,fp
20028cc0:	da402515 	stw	r9,148(sp)
20028cc4:	1839883a 	mov	fp,r3
20028cc8:	00000506 	br	20028ce0 <___vfiprintf_internal_r+0x580>
20028ccc:	29800084 	addi	r6,r5,2
20028cd0:	42000204 	addi	r8,r8,8
20028cd4:	180b883a 	mov	r5,r3
20028cd8:	843ffc04 	addi	r16,r16,-16
20028cdc:	3c000d0e 	bge	r7,r16,20028d14 <___vfiprintf_internal_r+0x5b4>
20028ce0:	10800404 	addi	r2,r2,16
20028ce4:	28c00044 	addi	r3,r5,1
20028ce8:	45c00015 	stw	r23,0(r8)
20028cec:	41c00115 	stw	r7,4(r8)
20028cf0:	d8801c15 	stw	r2,112(sp)
20028cf4:	d8c01b15 	stw	r3,108(sp)
20028cf8:	68fff40e 	bge	r13,r3,20028ccc <__alt_data_end+0xfffeaccc>
20028cfc:	1002241e 	bne	r2,zero,20029590 <___vfiprintf_internal_r+0xe30>
20028d00:	843ffc04 	addi	r16,r16,-16
20028d04:	01800044 	movi	r6,1
20028d08:	000b883a 	mov	r5,zero
20028d0c:	d811883a 	mov	r8,sp
20028d10:	3c3ff316 	blt	r7,r16,20028ce0 <__alt_data_end+0xfffeace0>
20028d14:	da402517 	ldw	r9,148(sp)
20028d18:	e007883a 	mov	r3,fp
20028d1c:	8039883a 	mov	fp,r16
20028d20:	1821883a 	mov	r16,r3
20028d24:	d8c02417 	ldw	r3,144(sp)
20028d28:	1705883a 	add	r2,r2,fp
20028d2c:	47000115 	stw	fp,4(r8)
20028d30:	40c00015 	stw	r3,0(r8)
20028d34:	d8801c15 	stw	r2,112(sp)
20028d38:	d9801b15 	stw	r6,108(sp)
20028d3c:	00c001c4 	movi	r3,7
20028d40:	19827616 	blt	r3,r6,2002971c <___vfiprintf_internal_r+0xfbc>
20028d44:	4cf9c83a 	sub	fp,r9,r19
20028d48:	42000204 	addi	r8,r8,8
20028d4c:	31000044 	addi	r4,r6,1
20028d50:	300b883a 	mov	r5,r6
20028d54:	07018516 	blt	zero,fp,2002936c <___vfiprintf_internal_r+0xc0c>
20028d58:	9885883a 	add	r2,r19,r2
20028d5c:	45400015 	stw	r21,0(r8)
20028d60:	44c00115 	stw	r19,4(r8)
20028d64:	d8801c15 	stw	r2,112(sp)
20028d68:	d9001b15 	stw	r4,108(sp)
20028d6c:	00c001c4 	movi	r3,7
20028d70:	1901dd0e 	bge	r3,r4,200294e8 <___vfiprintf_internal_r+0xd88>
20028d74:	1002401e 	bne	r2,zero,20029678 <___vfiprintf_internal_r+0xf18>
20028d78:	d8001b15 	stw	zero,108(sp)
20028d7c:	a2c0010c 	andi	r11,r20,4
20028d80:	58000226 	beq	r11,zero,20028d8c <___vfiprintf_internal_r+0x62c>
20028d84:	8ca7c83a 	sub	r19,r17,r18
20028d88:	04c2f216 	blt	zero,r19,20029954 <___vfiprintf_internal_r+0x11f4>
20028d8c:	8c80010e 	bge	r17,r18,20028d94 <___vfiprintf_internal_r+0x634>
20028d90:	9023883a 	mov	r17,r18
20028d94:	da802317 	ldw	r10,140(sp)
20028d98:	5455883a 	add	r10,r10,r17
20028d9c:	da802315 	stw	r10,140(sp)
20028da0:	d8001b15 	stw	zero,108(sp)
20028da4:	d811883a 	mov	r8,sp
20028da8:	003ea206 	br	20028834 <__alt_data_end+0xfffea834>
20028dac:	a5000814 	ori	r20,r20,32
20028db0:	80c00007 	ldb	r3,0(r16)
20028db4:	003ec906 	br	200288dc <__alt_data_end+0xfffea8dc>
20028db8:	80c00007 	ldb	r3,0(r16)
20028dbc:	1b030926 	beq	r3,r12,200299e4 <___vfiprintf_internal_r+0x1284>
20028dc0:	a5000414 	ori	r20,r20,16
20028dc4:	003ec506 	br	200288dc <__alt_data_end+0xfffea8dc>
20028dc8:	21003fcc 	andi	r4,r4,255
20028dcc:	20035e1e 	bne	r4,zero,20029b48 <___vfiprintf_internal_r+0x13e8>
20028dd0:	a080080c 	andi	r2,r20,32
20028dd4:	1002a526 	beq	r2,zero,2002986c <___vfiprintf_internal_r+0x110c>
20028dd8:	da802217 	ldw	r10,136(sp)
20028ddc:	50800017 	ldw	r2,0(r10)
20028de0:	da802317 	ldw	r10,140(sp)
20028de4:	5007d7fa 	srai	r3,r10,31
20028de8:	da802217 	ldw	r10,136(sp)
20028dec:	10c00115 	stw	r3,4(r2)
20028df0:	52800104 	addi	r10,r10,4
20028df4:	da802215 	stw	r10,136(sp)
20028df8:	da802317 	ldw	r10,140(sp)
20028dfc:	12800015 	stw	r10,0(r2)
20028e00:	003e8c06 	br	20028834 <__alt_data_end+0xfffea834>
20028e04:	21003fcc 	andi	r4,r4,255
20028e08:	2003511e 	bne	r4,zero,20029b50 <___vfiprintf_internal_r+0x13f0>
20028e0c:	a080080c 	andi	r2,r20,32
20028e10:	1000a126 	beq	r2,zero,20029098 <___vfiprintf_internal_r+0x938>
20028e14:	da802217 	ldw	r10,136(sp)
20028e18:	d8001d85 	stb	zero,118(sp)
20028e1c:	50800204 	addi	r2,r10,8
20028e20:	54800017 	ldw	r18,0(r10)
20028e24:	54c00117 	ldw	r19,4(r10)
20028e28:	4802b416 	blt	r9,zero,200298fc <___vfiprintf_internal_r+0x119c>
20028e2c:	013fdfc4 	movi	r4,-129
20028e30:	94c6b03a 	or	r3,r18,r19
20028e34:	d8802215 	stw	r2,136(sp)
20028e38:	a128703a 	and	r20,r20,r4
20028e3c:	1800a226 	beq	r3,zero,200290c8 <___vfiprintf_internal_r+0x968>
20028e40:	0039883a 	mov	fp,zero
20028e44:	dd401a04 	addi	r21,sp,104
20028e48:	9006d0fa 	srli	r3,r18,3
20028e4c:	9808977a 	slli	r4,r19,29
20028e50:	9826d0fa 	srli	r19,r19,3
20028e54:	948001cc 	andi	r18,r18,7
20028e58:	90800c04 	addi	r2,r18,48
20028e5c:	ad7fffc4 	addi	r21,r21,-1
20028e60:	20e4b03a 	or	r18,r4,r3
20028e64:	a8800005 	stb	r2,0(r21)
20028e68:	94c6b03a 	or	r3,r18,r19
20028e6c:	183ff61e 	bne	r3,zero,20028e48 <__alt_data_end+0xfffeae48>
20028e70:	a0c0004c 	andi	r3,r20,1
20028e74:	18005926 	beq	r3,zero,20028fdc <___vfiprintf_internal_r+0x87c>
20028e78:	10803fcc 	andi	r2,r2,255
20028e7c:	1080201c 	xori	r2,r2,128
20028e80:	10bfe004 	addi	r2,r2,-128
20028e84:	00c00c04 	movi	r3,48
20028e88:	10c05426 	beq	r2,r3,20028fdc <___vfiprintf_internal_r+0x87c>
20028e8c:	da801e17 	ldw	r10,120(sp)
20028e90:	a8bfffc4 	addi	r2,r21,-1
20028e94:	a8ffffc5 	stb	r3,-1(r21)
20028e98:	50a7c83a 	sub	r19,r10,r2
20028e9c:	102b883a 	mov	r21,r2
20028ea0:	003f2f06 	br	20028b60 <__alt_data_end+0xfffeab60>
20028ea4:	21003fcc 	andi	r4,r4,255
20028ea8:	2003421e 	bne	r4,zero,20029bb4 <___vfiprintf_internal_r+0x1454>
20028eac:	008800f4 	movhi	r2,8195
20028eb0:	10838404 	addi	r2,r2,3600
20028eb4:	d8802615 	stw	r2,152(sp)
20028eb8:	a080080c 	andi	r2,r20,32
20028ebc:	1000aa26 	beq	r2,zero,20029168 <___vfiprintf_internal_r+0xa08>
20028ec0:	da802217 	ldw	r10,136(sp)
20028ec4:	54800017 	ldw	r18,0(r10)
20028ec8:	54c00117 	ldw	r19,4(r10)
20028ecc:	52800204 	addi	r10,r10,8
20028ed0:	da802215 	stw	r10,136(sp)
20028ed4:	a080004c 	andi	r2,r20,1
20028ed8:	1001d226 	beq	r2,zero,20029624 <___vfiprintf_internal_r+0xec4>
20028edc:	94c4b03a 	or	r2,r18,r19
20028ee0:	1002351e 	bne	r2,zero,200297b8 <___vfiprintf_internal_r+0x1058>
20028ee4:	d8001d85 	stb	zero,118(sp)
20028ee8:	48022216 	blt	r9,zero,20029774 <___vfiprintf_internal_r+0x1014>
20028eec:	00bfdfc4 	movi	r2,-129
20028ef0:	a0a8703a 	and	r20,r20,r2
20028ef4:	003f1506 	br	20028b4c <__alt_data_end+0xfffeab4c>
20028ef8:	da802217 	ldw	r10,136(sp)
20028efc:	04800044 	movi	r18,1
20028f00:	d8001d85 	stb	zero,118(sp)
20028f04:	50800017 	ldw	r2,0(r10)
20028f08:	52800104 	addi	r10,r10,4
20028f0c:	da802215 	stw	r10,136(sp)
20028f10:	d8801005 	stb	r2,64(sp)
20028f14:	9027883a 	mov	r19,r18
20028f18:	dd401004 	addi	r21,sp,64
20028f1c:	0013883a 	mov	r9,zero
20028f20:	003f1706 	br	20028b80 <__alt_data_end+0xfffeab80>
20028f24:	21003fcc 	andi	r4,r4,255
20028f28:	2003201e 	bne	r4,zero,20029bac <___vfiprintf_internal_r+0x144c>
20028f2c:	a080080c 	andi	r2,r20,32
20028f30:	10004b26 	beq	r2,zero,20029060 <___vfiprintf_internal_r+0x900>
20028f34:	da802217 	ldw	r10,136(sp)
20028f38:	50800117 	ldw	r2,4(r10)
20028f3c:	54800017 	ldw	r18,0(r10)
20028f40:	52800204 	addi	r10,r10,8
20028f44:	da802215 	stw	r10,136(sp)
20028f48:	1027883a 	mov	r19,r2
20028f4c:	10022c16 	blt	r2,zero,20029800 <___vfiprintf_internal_r+0x10a0>
20028f50:	df001d83 	ldbu	fp,118(sp)
20028f54:	48007216 	blt	r9,zero,20029120 <___vfiprintf_internal_r+0x9c0>
20028f58:	00ffdfc4 	movi	r3,-129
20028f5c:	94c4b03a 	or	r2,r18,r19
20028f60:	a0e8703a 	and	r20,r20,r3
20028f64:	1000cc26 	beq	r2,zero,20029298 <___vfiprintf_internal_r+0xb38>
20028f68:	98021026 	beq	r19,zero,200297ac <___vfiprintf_internal_r+0x104c>
20028f6c:	dc402415 	stw	r17,144(sp)
20028f70:	dc002515 	stw	r16,148(sp)
20028f74:	9823883a 	mov	r17,r19
20028f78:	9021883a 	mov	r16,r18
20028f7c:	dd401a04 	addi	r21,sp,104
20028f80:	4825883a 	mov	r18,r9
20028f84:	4027883a 	mov	r19,r8
20028f88:	8009883a 	mov	r4,r16
20028f8c:	880b883a 	mov	r5,r17
20028f90:	01800284 	movi	r6,10
20028f94:	000f883a 	mov	r7,zero
20028f98:	002a8c80 	call	2002a8c8 <__umoddi3>
20028f9c:	10800c04 	addi	r2,r2,48
20028fa0:	ad7fffc4 	addi	r21,r21,-1
20028fa4:	8009883a 	mov	r4,r16
20028fa8:	880b883a 	mov	r5,r17
20028fac:	a8800005 	stb	r2,0(r21)
20028fb0:	01800284 	movi	r6,10
20028fb4:	000f883a 	mov	r7,zero
20028fb8:	002a3500 	call	2002a350 <__udivdi3>
20028fbc:	1021883a 	mov	r16,r2
20028fc0:	10c4b03a 	or	r2,r2,r3
20028fc4:	1823883a 	mov	r17,r3
20028fc8:	103fef1e 	bne	r2,zero,20028f88 <__alt_data_end+0xfffeaf88>
20028fcc:	dc402417 	ldw	r17,144(sp)
20028fd0:	dc002517 	ldw	r16,148(sp)
20028fd4:	9013883a 	mov	r9,r18
20028fd8:	9811883a 	mov	r8,r19
20028fdc:	da801e17 	ldw	r10,120(sp)
20028fe0:	5567c83a 	sub	r19,r10,r21
20028fe4:	003ede06 	br	20028b60 <__alt_data_end+0xfffeab60>
20028fe8:	38803fcc 	andi	r2,r7,255
20028fec:	1080201c 	xori	r2,r2,128
20028ff0:	10bfe004 	addi	r2,r2,-128
20028ff4:	1002371e 	bne	r2,zero,200298d4 <___vfiprintf_internal_r+0x1174>
20028ff8:	01000044 	movi	r4,1
20028ffc:	01c00804 	movi	r7,32
20029000:	80c00007 	ldb	r3,0(r16)
20029004:	003e3506 	br	200288dc <__alt_data_end+0xfffea8dc>
20029008:	a5000054 	ori	r20,r20,1
2002900c:	80c00007 	ldb	r3,0(r16)
20029010:	003e3206 	br	200288dc <__alt_data_end+0xfffea8dc>
20029014:	a5002014 	ori	r20,r20,128
20029018:	80c00007 	ldb	r3,0(r16)
2002901c:	003e2f06 	br	200288dc <__alt_data_end+0xfffea8dc>
20029020:	8015883a 	mov	r10,r16
20029024:	0023883a 	mov	r17,zero
20029028:	18bff404 	addi	r2,r3,-48
2002902c:	50c00007 	ldb	r3,0(r10)
20029030:	8c4002a4 	muli	r17,r17,10
20029034:	84000044 	addi	r16,r16,1
20029038:	8015883a 	mov	r10,r16
2002903c:	1463883a 	add	r17,r2,r17
20029040:	18bff404 	addi	r2,r3,-48
20029044:	30bff92e 	bgeu	r6,r2,2002902c <__alt_data_end+0xfffeb02c>
20029048:	003e2506 	br	200288e0 <__alt_data_end+0xfffea8e0>
2002904c:	21003fcc 	andi	r4,r4,255
20029050:	2002d41e 	bne	r4,zero,20029ba4 <___vfiprintf_internal_r+0x1444>
20029054:	a5000414 	ori	r20,r20,16
20029058:	a080080c 	andi	r2,r20,32
2002905c:	103fb51e 	bne	r2,zero,20028f34 <__alt_data_end+0xfffeaf34>
20029060:	a080040c 	andi	r2,r20,16
20029064:	1001f826 	beq	r2,zero,20029848 <___vfiprintf_internal_r+0x10e8>
20029068:	da802217 	ldw	r10,136(sp)
2002906c:	54800017 	ldw	r18,0(r10)
20029070:	52800104 	addi	r10,r10,4
20029074:	da802215 	stw	r10,136(sp)
20029078:	9027d7fa 	srai	r19,r18,31
2002907c:	9805883a 	mov	r2,r19
20029080:	003fb206 	br	20028f4c <__alt_data_end+0xfffeaf4c>
20029084:	21003fcc 	andi	r4,r4,255
20029088:	2002c41e 	bne	r4,zero,20029b9c <___vfiprintf_internal_r+0x143c>
2002908c:	a5000414 	ori	r20,r20,16
20029090:	a080080c 	andi	r2,r20,32
20029094:	103f5f1e 	bne	r2,zero,20028e14 <__alt_data_end+0xfffeae14>
20029098:	a080040c 	andi	r2,r20,16
2002909c:	10020f26 	beq	r2,zero,200298dc <___vfiprintf_internal_r+0x117c>
200290a0:	da802217 	ldw	r10,136(sp)
200290a4:	d8001d85 	stb	zero,118(sp)
200290a8:	0027883a 	mov	r19,zero
200290ac:	50800104 	addi	r2,r10,4
200290b0:	54800017 	ldw	r18,0(r10)
200290b4:	48021116 	blt	r9,zero,200298fc <___vfiprintf_internal_r+0x119c>
200290b8:	00ffdfc4 	movi	r3,-129
200290bc:	d8802215 	stw	r2,136(sp)
200290c0:	a0e8703a 	and	r20,r20,r3
200290c4:	903f5e1e 	bne	r18,zero,20028e40 <__alt_data_end+0xfffeae40>
200290c8:	0039883a 	mov	fp,zero
200290cc:	4802a626 	beq	r9,zero,20029b68 <___vfiprintf_internal_r+0x1408>
200290d0:	0025883a 	mov	r18,zero
200290d4:	0027883a 	mov	r19,zero
200290d8:	003f5a06 	br	20028e44 <__alt_data_end+0xfffeae44>
200290dc:	21003fcc 	andi	r4,r4,255
200290e0:	20029f1e 	bne	r4,zero,20029b60 <___vfiprintf_internal_r+0x1400>
200290e4:	a5000414 	ori	r20,r20,16
200290e8:	a080080c 	andi	r2,r20,32
200290ec:	10005e1e 	bne	r2,zero,20029268 <___vfiprintf_internal_r+0xb08>
200290f0:	a080040c 	andi	r2,r20,16
200290f4:	1001a21e 	bne	r2,zero,20029780 <___vfiprintf_internal_r+0x1020>
200290f8:	a080100c 	andi	r2,r20,64
200290fc:	d8001d85 	stb	zero,118(sp)
20029100:	da802217 	ldw	r10,136(sp)
20029104:	1002231e 	bne	r2,zero,20029994 <___vfiprintf_internal_r+0x1234>
20029108:	50800104 	addi	r2,r10,4
2002910c:	54800017 	ldw	r18,0(r10)
20029110:	0027883a 	mov	r19,zero
20029114:	4801a00e 	bge	r9,zero,20029798 <___vfiprintf_internal_r+0x1038>
20029118:	d8802215 	stw	r2,136(sp)
2002911c:	0039883a 	mov	fp,zero
20029120:	94c4b03a 	or	r2,r18,r19
20029124:	103f901e 	bne	r2,zero,20028f68 <__alt_data_end+0xfffeaf68>
20029128:	00800044 	movi	r2,1
2002912c:	10803fcc 	andi	r2,r2,255
20029130:	00c00044 	movi	r3,1
20029134:	10c05926 	beq	r2,r3,2002929c <___vfiprintf_internal_r+0xb3c>
20029138:	00c00084 	movi	r3,2
2002913c:	10ffe41e 	bne	r2,r3,200290d0 <__alt_data_end+0xfffeb0d0>
20029140:	0025883a 	mov	r18,zero
20029144:	0027883a 	mov	r19,zero
20029148:	00013d06 	br	20029640 <___vfiprintf_internal_r+0xee0>
2002914c:	21003fcc 	andi	r4,r4,255
20029150:	2002811e 	bne	r4,zero,20029b58 <___vfiprintf_internal_r+0x13f8>
20029154:	008800f4 	movhi	r2,8195
20029158:	10837f04 	addi	r2,r2,3580
2002915c:	d8802615 	stw	r2,152(sp)
20029160:	a080080c 	andi	r2,r20,32
20029164:	103f561e 	bne	r2,zero,20028ec0 <__alt_data_end+0xfffeaec0>
20029168:	a080040c 	andi	r2,r20,16
2002916c:	1001d126 	beq	r2,zero,200298b4 <___vfiprintf_internal_r+0x1154>
20029170:	da802217 	ldw	r10,136(sp)
20029174:	0027883a 	mov	r19,zero
20029178:	54800017 	ldw	r18,0(r10)
2002917c:	52800104 	addi	r10,r10,4
20029180:	da802215 	stw	r10,136(sp)
20029184:	003f5306 	br	20028ed4 <__alt_data_end+0xfffeaed4>
20029188:	da802217 	ldw	r10,136(sp)
2002918c:	d8001d85 	stb	zero,118(sp)
20029190:	55400017 	ldw	r21,0(r10)
20029194:	50c00104 	addi	r3,r10,4
20029198:	a8024226 	beq	r21,zero,20029aa4 <___vfiprintf_internal_r+0x1344>
2002919c:	48021816 	blt	r9,zero,20029a00 <___vfiprintf_internal_r+0x12a0>
200291a0:	480d883a 	mov	r6,r9
200291a4:	000b883a 	mov	r5,zero
200291a8:	a809883a 	mov	r4,r21
200291ac:	d8c02a15 	stw	r3,168(sp)
200291b0:	da002b15 	stw	r8,172(sp)
200291b4:	da402c15 	stw	r9,176(sp)
200291b8:	00216b80 	call	200216b8 <memchr>
200291bc:	d8c02a17 	ldw	r3,168(sp)
200291c0:	da002b17 	ldw	r8,172(sp)
200291c4:	da402c17 	ldw	r9,176(sp)
200291c8:	10024826 	beq	r2,zero,20029aec <___vfiprintf_internal_r+0x138c>
200291cc:	1567c83a 	sub	r19,r2,r21
200291d0:	df001d83 	ldbu	fp,118(sp)
200291d4:	d8c02215 	stw	r3,136(sp)
200291d8:	0013883a 	mov	r9,zero
200291dc:	003e6006 	br	20028b60 <__alt_data_end+0xfffeab60>
200291e0:	21003fcc 	andi	r4,r4,255
200291e4:	203fc026 	beq	r4,zero,200290e8 <__alt_data_end+0xfffeb0e8>
200291e8:	d9c01d85 	stb	r7,118(sp)
200291ec:	003fbe06 	br	200290e8 <__alt_data_end+0xfffeb0e8>
200291f0:	da802217 	ldw	r10,136(sp)
200291f4:	54400017 	ldw	r17,0(r10)
200291f8:	50800104 	addi	r2,r10,4
200291fc:	883e3b16 	blt	r17,zero,20028aec <__alt_data_end+0xfffeaaec>
20029200:	d8802215 	stw	r2,136(sp)
20029204:	80c00007 	ldb	r3,0(r16)
20029208:	003db406 	br	200288dc <__alt_data_end+0xfffea8dc>
2002920c:	01000044 	movi	r4,1
20029210:	01c00ac4 	movi	r7,43
20029214:	80c00007 	ldb	r3,0(r16)
20029218:	003db006 	br	200288dc <__alt_data_end+0xfffea8dc>
2002921c:	80c00007 	ldb	r3,0(r16)
20029220:	82800044 	addi	r10,r16,1
20029224:	1b423c26 	beq	r3,r13,20029b18 <___vfiprintf_internal_r+0x13b8>
20029228:	18bff404 	addi	r2,r3,-48
2002922c:	0013883a 	mov	r9,zero
20029230:	30822b36 	bltu	r6,r2,20029ae0 <___vfiprintf_internal_r+0x1380>
20029234:	50c00007 	ldb	r3,0(r10)
20029238:	4a4002a4 	muli	r9,r9,10
2002923c:	54000044 	addi	r16,r10,1
20029240:	8015883a 	mov	r10,r16
20029244:	4893883a 	add	r9,r9,r2
20029248:	18bff404 	addi	r2,r3,-48
2002924c:	30bff92e 	bgeu	r6,r2,20029234 <__alt_data_end+0xfffeb234>
20029250:	483da30e 	bge	r9,zero,200288e0 <__alt_data_end+0xfffea8e0>
20029254:	027fffc4 	movi	r9,-1
20029258:	003da106 	br	200288e0 <__alt_data_end+0xfffea8e0>
2002925c:	a5001014 	ori	r20,r20,64
20029260:	80c00007 	ldb	r3,0(r16)
20029264:	003d9d06 	br	200288dc <__alt_data_end+0xfffea8dc>
20029268:	da802217 	ldw	r10,136(sp)
2002926c:	d8001d85 	stb	zero,118(sp)
20029270:	50c00204 	addi	r3,r10,8
20029274:	54800017 	ldw	r18,0(r10)
20029278:	54c00117 	ldw	r19,4(r10)
2002927c:	4801ca16 	blt	r9,zero,200299a8 <___vfiprintf_internal_r+0x1248>
20029280:	013fdfc4 	movi	r4,-129
20029284:	94c4b03a 	or	r2,r18,r19
20029288:	d8c02215 	stw	r3,136(sp)
2002928c:	a128703a 	and	r20,r20,r4
20029290:	0039883a 	mov	fp,zero
20029294:	103f341e 	bne	r2,zero,20028f68 <__alt_data_end+0xfffeaf68>
20029298:	483e2e26 	beq	r9,zero,20028b54 <__alt_data_end+0xfffeab54>
2002929c:	0025883a 	mov	r18,zero
200292a0:	94800c04 	addi	r18,r18,48
200292a4:	dc8019c5 	stb	r18,103(sp)
200292a8:	dcc02717 	ldw	r19,156(sp)
200292ac:	dd4019c4 	addi	r21,sp,103
200292b0:	003e2b06 	br	20028b60 <__alt_data_end+0xfffeab60>
200292b4:	21003fcc 	andi	r4,r4,255
200292b8:	2002361e 	bne	r4,zero,20029b94 <___vfiprintf_internal_r+0x1434>
200292bc:	1801c126 	beq	r3,zero,200299c4 <___vfiprintf_internal_r+0x1264>
200292c0:	04800044 	movi	r18,1
200292c4:	d8c01005 	stb	r3,64(sp)
200292c8:	d8001d85 	stb	zero,118(sp)
200292cc:	9027883a 	mov	r19,r18
200292d0:	dd401004 	addi	r21,sp,64
200292d4:	003f1106 	br	20028f1c <__alt_data_end+0xfffeaf1c>
200292d8:	d9402117 	ldw	r5,132(sp)
200292dc:	d9002017 	ldw	r4,128(sp)
200292e0:	d9801a04 	addi	r6,sp,104
200292e4:	d9c02b15 	stw	r7,172(sp)
200292e8:	dbc02a15 	stw	r15,168(sp)
200292ec:	002864c0 	call	2002864c <__sprint_r.part.0>
200292f0:	d9c02b17 	ldw	r7,172(sp)
200292f4:	dbc02a17 	ldw	r15,168(sp)
200292f8:	10006d1e 	bne	r2,zero,200294b0 <___vfiprintf_internal_r+0xd50>
200292fc:	d9801b17 	ldw	r6,108(sp)
20029300:	d8801c17 	ldw	r2,112(sp)
20029304:	d811883a 	mov	r8,sp
20029308:	31400044 	addi	r5,r6,1
2002930c:	003e3306 	br	20028bdc <__alt_data_end+0xfffeabdc>
20029310:	d9401b17 	ldw	r5,108(sp)
20029314:	d8801c17 	ldw	r2,112(sp)
20029318:	29000044 	addi	r4,r5,1
2002931c:	d8c01d87 	ldb	r3,118(sp)
20029320:	183e4d26 	beq	r3,zero,20028c58 <__alt_data_end+0xfffeac58>
20029324:	00c00044 	movi	r3,1
20029328:	d9401d84 	addi	r5,sp,118
2002932c:	10c5883a 	add	r2,r2,r3
20029330:	41400015 	stw	r5,0(r8)
20029334:	40c00115 	stw	r3,4(r8)
20029338:	d8801c15 	stw	r2,112(sp)
2002933c:	d9001b15 	stw	r4,108(sp)
20029340:	014001c4 	movi	r5,7
20029344:	2900a90e 	bge	r5,r4,200295ec <___vfiprintf_internal_r+0xe8c>
20029348:	1000da1e 	bne	r2,zero,200296b4 <___vfiprintf_internal_r+0xf54>
2002934c:	7000ab1e 	bne	r14,zero,200295fc <___vfiprintf_internal_r+0xe9c>
20029350:	000b883a 	mov	r5,zero
20029354:	1809883a 	mov	r4,r3
20029358:	d811883a 	mov	r8,sp
2002935c:	00c02004 	movi	r3,128
20029360:	e0fe4d26 	beq	fp,r3,20028c98 <__alt_data_end+0xfffeac98>
20029364:	4cf9c83a 	sub	fp,r9,r19
20029368:	073e7b0e 	bge	zero,fp,20028d58 <__alt_data_end+0xfffead58>
2002936c:	01c00404 	movi	r7,16
20029370:	3f01900e 	bge	r7,fp,200299b4 <___vfiprintf_internal_r+0x1254>
20029374:	00c800f4 	movhi	r3,8195
20029378:	18c3e404 	addi	r3,r3,3984
2002937c:	d8c02415 	stw	r3,144(sp)
20029380:	034001c4 	movi	r13,7
20029384:	00000506 	br	2002939c <___vfiprintf_internal_r+0xc3c>
20029388:	29000084 	addi	r4,r5,2
2002938c:	42000204 	addi	r8,r8,8
20029390:	180b883a 	mov	r5,r3
20029394:	e73ffc04 	addi	fp,fp,-16
20029398:	3f000d0e 	bge	r7,fp,200293d0 <___vfiprintf_internal_r+0xc70>
2002939c:	10800404 	addi	r2,r2,16
200293a0:	28c00044 	addi	r3,r5,1
200293a4:	45c00015 	stw	r23,0(r8)
200293a8:	41c00115 	stw	r7,4(r8)
200293ac:	d8801c15 	stw	r2,112(sp)
200293b0:	d8c01b15 	stw	r3,108(sp)
200293b4:	68fff40e 	bge	r13,r3,20029388 <__alt_data_end+0xfffeb388>
200293b8:	1000101e 	bne	r2,zero,200293fc <___vfiprintf_internal_r+0xc9c>
200293bc:	e73ffc04 	addi	fp,fp,-16
200293c0:	01000044 	movi	r4,1
200293c4:	000b883a 	mov	r5,zero
200293c8:	d811883a 	mov	r8,sp
200293cc:	3f3ff316 	blt	r7,fp,2002939c <__alt_data_end+0xfffeb39c>
200293d0:	da802417 	ldw	r10,144(sp)
200293d4:	1705883a 	add	r2,r2,fp
200293d8:	47000115 	stw	fp,4(r8)
200293dc:	42800015 	stw	r10,0(r8)
200293e0:	d8801c15 	stw	r2,112(sp)
200293e4:	d9001b15 	stw	r4,108(sp)
200293e8:	00c001c4 	movi	r3,7
200293ec:	19003616 	blt	r3,r4,200294c8 <___vfiprintf_internal_r+0xd68>
200293f0:	42000204 	addi	r8,r8,8
200293f4:	21000044 	addi	r4,r4,1
200293f8:	003e5706 	br	20028d58 <__alt_data_end+0xfffead58>
200293fc:	d9402117 	ldw	r5,132(sp)
20029400:	d9002017 	ldw	r4,128(sp)
20029404:	d9801a04 	addi	r6,sp,104
20029408:	d9c02b15 	stw	r7,172(sp)
2002940c:	db402a15 	stw	r13,168(sp)
20029410:	002864c0 	call	2002864c <__sprint_r.part.0>
20029414:	d9c02b17 	ldw	r7,172(sp)
20029418:	db402a17 	ldw	r13,168(sp)
2002941c:	1000241e 	bne	r2,zero,200294b0 <___vfiprintf_internal_r+0xd50>
20029420:	d9401b17 	ldw	r5,108(sp)
20029424:	d8801c17 	ldw	r2,112(sp)
20029428:	d811883a 	mov	r8,sp
2002942c:	29000044 	addi	r4,r5,1
20029430:	003fd806 	br	20029394 <__alt_data_end+0xfffeb394>
20029434:	d9401b17 	ldw	r5,108(sp)
20029438:	00c800f4 	movhi	r3,8195
2002943c:	18c3e804 	addi	r3,r3,4000
20029440:	d8c02415 	stw	r3,144(sp)
20029444:	29400044 	addi	r5,r5,1
20029448:	d8c02417 	ldw	r3,144(sp)
2002944c:	14c5883a 	add	r2,r2,r19
20029450:	44c00115 	stw	r19,4(r8)
20029454:	40c00015 	stw	r3,0(r8)
20029458:	d8801c15 	stw	r2,112(sp)
2002945c:	d9401b15 	stw	r5,108(sp)
20029460:	00c001c4 	movi	r3,7
20029464:	1940070e 	bge	r3,r5,20029484 <___vfiprintf_internal_r+0xd24>
20029468:	103e4826 	beq	r2,zero,20028d8c <__alt_data_end+0xfffead8c>
2002946c:	d9402117 	ldw	r5,132(sp)
20029470:	d9002017 	ldw	r4,128(sp)
20029474:	d9801a04 	addi	r6,sp,104
20029478:	002864c0 	call	2002864c <__sprint_r.part.0>
2002947c:	10000c1e 	bne	r2,zero,200294b0 <___vfiprintf_internal_r+0xd50>
20029480:	d8801c17 	ldw	r2,112(sp)
20029484:	8c80010e 	bge	r17,r18,2002948c <___vfiprintf_internal_r+0xd2c>
20029488:	9023883a 	mov	r17,r18
2002948c:	da802317 	ldw	r10,140(sp)
20029490:	5455883a 	add	r10,r10,r17
20029494:	da802315 	stw	r10,140(sp)
20029498:	103e4126 	beq	r2,zero,20028da0 <__alt_data_end+0xfffeada0>
2002949c:	d9402117 	ldw	r5,132(sp)
200294a0:	d9002017 	ldw	r4,128(sp)
200294a4:	d9801a04 	addi	r6,sp,104
200294a8:	002864c0 	call	2002864c <__sprint_r.part.0>
200294ac:	103e3c26 	beq	r2,zero,20028da0 <__alt_data_end+0xfffeada0>
200294b0:	dd002117 	ldw	r20,132(sp)
200294b4:	a080030b 	ldhu	r2,12(r20)
200294b8:	1080100c 	andi	r2,r2,64
200294bc:	1001231e 	bne	r2,zero,2002994c <___vfiprintf_internal_r+0x11ec>
200294c0:	d8802317 	ldw	r2,140(sp)
200294c4:	003d7b06 	br	20028ab4 <__alt_data_end+0xfffeaab4>
200294c8:	1000991e 	bne	r2,zero,20029730 <___vfiprintf_internal_r+0xfd0>
200294cc:	00c00044 	movi	r3,1
200294d0:	9805883a 	mov	r2,r19
200294d4:	dd400015 	stw	r21,0(sp)
200294d8:	dcc00115 	stw	r19,4(sp)
200294dc:	dcc01c15 	stw	r19,112(sp)
200294e0:	d8c01b15 	stw	r3,108(sp)
200294e4:	d811883a 	mov	r8,sp
200294e8:	42000204 	addi	r8,r8,8
200294ec:	a2c0010c 	andi	r11,r20,4
200294f0:	583fe426 	beq	r11,zero,20029484 <__alt_data_end+0xfffeb484>
200294f4:	8ca7c83a 	sub	r19,r17,r18
200294f8:	04ffe20e 	bge	zero,r19,20029484 <__alt_data_end+0xfffeb484>
200294fc:	01c00404 	movi	r7,16
20029500:	3cffcc0e 	bge	r7,r19,20029434 <__alt_data_end+0xfffeb434>
20029504:	028800f4 	movhi	r10,8195
20029508:	5283e804 	addi	r10,r10,4000
2002950c:	d9001b17 	ldw	r4,108(sp)
20029510:	da802415 	stw	r10,144(sp)
20029514:	382b883a 	mov	r21,r7
20029518:	050001c4 	movi	r20,7
2002951c:	df002017 	ldw	fp,128(sp)
20029520:	00000506 	br	20029538 <___vfiprintf_internal_r+0xdd8>
20029524:	21400084 	addi	r5,r4,2
20029528:	42000204 	addi	r8,r8,8
2002952c:	1809883a 	mov	r4,r3
20029530:	9cfffc04 	addi	r19,r19,-16
20029534:	acffc40e 	bge	r21,r19,20029448 <__alt_data_end+0xfffeb448>
20029538:	10800404 	addi	r2,r2,16
2002953c:	20c00044 	addi	r3,r4,1
20029540:	45800015 	stw	r22,0(r8)
20029544:	45400115 	stw	r21,4(r8)
20029548:	d8801c15 	stw	r2,112(sp)
2002954c:	d8c01b15 	stw	r3,108(sp)
20029550:	a0fff40e 	bge	r20,r3,20029524 <__alt_data_end+0xfffeb524>
20029554:	1000041e 	bne	r2,zero,20029568 <___vfiprintf_internal_r+0xe08>
20029558:	01400044 	movi	r5,1
2002955c:	0009883a 	mov	r4,zero
20029560:	d811883a 	mov	r8,sp
20029564:	003ff206 	br	20029530 <__alt_data_end+0xfffeb530>
20029568:	d9402117 	ldw	r5,132(sp)
2002956c:	d9801a04 	addi	r6,sp,104
20029570:	e009883a 	mov	r4,fp
20029574:	002864c0 	call	2002864c <__sprint_r.part.0>
20029578:	103fcd1e 	bne	r2,zero,200294b0 <__alt_data_end+0xfffeb4b0>
2002957c:	d9001b17 	ldw	r4,108(sp)
20029580:	d8801c17 	ldw	r2,112(sp)
20029584:	d811883a 	mov	r8,sp
20029588:	21400044 	addi	r5,r4,1
2002958c:	003fe806 	br	20029530 <__alt_data_end+0xfffeb530>
20029590:	d9402117 	ldw	r5,132(sp)
20029594:	d9002017 	ldw	r4,128(sp)
20029598:	d9801a04 	addi	r6,sp,104
2002959c:	d9c02b15 	stw	r7,172(sp)
200295a0:	db402a15 	stw	r13,168(sp)
200295a4:	002864c0 	call	2002864c <__sprint_r.part.0>
200295a8:	d9c02b17 	ldw	r7,172(sp)
200295ac:	db402a17 	ldw	r13,168(sp)
200295b0:	103fbf1e 	bne	r2,zero,200294b0 <__alt_data_end+0xfffeb4b0>
200295b4:	d9401b17 	ldw	r5,108(sp)
200295b8:	d8801c17 	ldw	r2,112(sp)
200295bc:	d811883a 	mov	r8,sp
200295c0:	29800044 	addi	r6,r5,1
200295c4:	003dc406 	br	20028cd8 <__alt_data_end+0xfffeacd8>
200295c8:	1000d21e 	bne	r2,zero,20029914 <___vfiprintf_internal_r+0x11b4>
200295cc:	d8c01d87 	ldb	r3,118(sp)
200295d0:	18009526 	beq	r3,zero,20029828 <___vfiprintf_internal_r+0x10c8>
200295d4:	00800044 	movi	r2,1
200295d8:	d8c01d84 	addi	r3,sp,118
200295dc:	1009883a 	mov	r4,r2
200295e0:	d8c00015 	stw	r3,0(sp)
200295e4:	d8800115 	stw	r2,4(sp)
200295e8:	d811883a 	mov	r8,sp
200295ec:	200b883a 	mov	r5,r4
200295f0:	42000204 	addi	r8,r8,8
200295f4:	21000044 	addi	r4,r4,1
200295f8:	003d9706 	br	20028c58 <__alt_data_end+0xfffeac58>
200295fc:	d9001d04 	addi	r4,sp,116
20029600:	00800084 	movi	r2,2
20029604:	d9000015 	stw	r4,0(sp)
20029608:	d8800115 	stw	r2,4(sp)
2002960c:	1809883a 	mov	r4,r3
20029610:	d811883a 	mov	r8,sp
20029614:	200b883a 	mov	r5,r4
20029618:	42000204 	addi	r8,r8,8
2002961c:	21000044 	addi	r4,r4,1
20029620:	003f4e06 	br	2002935c <__alt_data_end+0xfffeb35c>
20029624:	d8001d85 	stb	zero,118(sp)
20029628:	48005016 	blt	r9,zero,2002976c <___vfiprintf_internal_r+0x100c>
2002962c:	00ffdfc4 	movi	r3,-129
20029630:	94c4b03a 	or	r2,r18,r19
20029634:	a0e8703a 	and	r20,r20,r3
20029638:	103d4426 	beq	r2,zero,20028b4c <__alt_data_end+0xfffeab4c>
2002963c:	0039883a 	mov	fp,zero
20029640:	d9002617 	ldw	r4,152(sp)
20029644:	dd401a04 	addi	r21,sp,104
20029648:	908003cc 	andi	r2,r18,15
2002964c:	9806973a 	slli	r3,r19,28
20029650:	2085883a 	add	r2,r4,r2
20029654:	9024d13a 	srli	r18,r18,4
20029658:	10800003 	ldbu	r2,0(r2)
2002965c:	9826d13a 	srli	r19,r19,4
20029660:	ad7fffc4 	addi	r21,r21,-1
20029664:	1ca4b03a 	or	r18,r3,r18
20029668:	a8800005 	stb	r2,0(r21)
2002966c:	94c4b03a 	or	r2,r18,r19
20029670:	103ff51e 	bne	r2,zero,20029648 <__alt_data_end+0xfffeb648>
20029674:	003e5906 	br	20028fdc <__alt_data_end+0xfffeafdc>
20029678:	d9402117 	ldw	r5,132(sp)
2002967c:	d9002017 	ldw	r4,128(sp)
20029680:	d9801a04 	addi	r6,sp,104
20029684:	002864c0 	call	2002864c <__sprint_r.part.0>
20029688:	103f891e 	bne	r2,zero,200294b0 <__alt_data_end+0xfffeb4b0>
2002968c:	d8801c17 	ldw	r2,112(sp)
20029690:	d811883a 	mov	r8,sp
20029694:	003f9506 	br	200294ec <__alt_data_end+0xfffeb4ec>
20029698:	d9402117 	ldw	r5,132(sp)
2002969c:	d9002017 	ldw	r4,128(sp)
200296a0:	d9801a04 	addi	r6,sp,104
200296a4:	002864c0 	call	2002864c <__sprint_r.part.0>
200296a8:	103f811e 	bne	r2,zero,200294b0 <__alt_data_end+0xfffeb4b0>
200296ac:	d811883a 	mov	r8,sp
200296b0:	003ced06 	br	20028a68 <__alt_data_end+0xfffeaa68>
200296b4:	d9402117 	ldw	r5,132(sp)
200296b8:	d9002017 	ldw	r4,128(sp)
200296bc:	d9801a04 	addi	r6,sp,104
200296c0:	da402c15 	stw	r9,176(sp)
200296c4:	db802a15 	stw	r14,168(sp)
200296c8:	002864c0 	call	2002864c <__sprint_r.part.0>
200296cc:	da402c17 	ldw	r9,176(sp)
200296d0:	db802a17 	ldw	r14,168(sp)
200296d4:	103f761e 	bne	r2,zero,200294b0 <__alt_data_end+0xfffeb4b0>
200296d8:	d9401b17 	ldw	r5,108(sp)
200296dc:	d8801c17 	ldw	r2,112(sp)
200296e0:	d811883a 	mov	r8,sp
200296e4:	29000044 	addi	r4,r5,1
200296e8:	003d5b06 	br	20028c58 <__alt_data_end+0xfffeac58>
200296ec:	d9402117 	ldw	r5,132(sp)
200296f0:	d9002017 	ldw	r4,128(sp)
200296f4:	d9801a04 	addi	r6,sp,104
200296f8:	da402c15 	stw	r9,176(sp)
200296fc:	002864c0 	call	2002864c <__sprint_r.part.0>
20029700:	da402c17 	ldw	r9,176(sp)
20029704:	103f6a1e 	bne	r2,zero,200294b0 <__alt_data_end+0xfffeb4b0>
20029708:	d9401b17 	ldw	r5,108(sp)
2002970c:	d8801c17 	ldw	r2,112(sp)
20029710:	d811883a 	mov	r8,sp
20029714:	29000044 	addi	r4,r5,1
20029718:	003f1006 	br	2002935c <__alt_data_end+0xfffeb35c>
2002971c:	1000c31e 	bne	r2,zero,20029a2c <___vfiprintf_internal_r+0x12cc>
20029720:	01000044 	movi	r4,1
20029724:	000b883a 	mov	r5,zero
20029728:	d811883a 	mov	r8,sp
2002972c:	003f0d06 	br	20029364 <__alt_data_end+0xfffeb364>
20029730:	d9402117 	ldw	r5,132(sp)
20029734:	d9002017 	ldw	r4,128(sp)
20029738:	d9801a04 	addi	r6,sp,104
2002973c:	002864c0 	call	2002864c <__sprint_r.part.0>
20029740:	103f5b1e 	bne	r2,zero,200294b0 <__alt_data_end+0xfffeb4b0>
20029744:	d9001b17 	ldw	r4,108(sp)
20029748:	d8801c17 	ldw	r2,112(sp)
2002974c:	d811883a 	mov	r8,sp
20029750:	21000044 	addi	r4,r4,1
20029754:	003d8006 	br	20028d58 <__alt_data_end+0xfffead58>
20029758:	010800f4 	movhi	r4,8195
2002975c:	21038404 	addi	r4,r4,3600
20029760:	d9002615 	stw	r4,152(sp)
20029764:	d8c02215 	stw	r3,136(sp)
20029768:	1029883a 	mov	r20,r2
2002976c:	94c4b03a 	or	r2,r18,r19
20029770:	103fb21e 	bne	r2,zero,2002963c <__alt_data_end+0xfffeb63c>
20029774:	0039883a 	mov	fp,zero
20029778:	00800084 	movi	r2,2
2002977c:	003e6b06 	br	2002912c <__alt_data_end+0xfffeb12c>
20029780:	da802217 	ldw	r10,136(sp)
20029784:	d8001d85 	stb	zero,118(sp)
20029788:	0027883a 	mov	r19,zero
2002978c:	50800104 	addi	r2,r10,4
20029790:	54800017 	ldw	r18,0(r10)
20029794:	483e6016 	blt	r9,zero,20029118 <__alt_data_end+0xfffeb118>
20029798:	00ffdfc4 	movi	r3,-129
2002979c:	d8802215 	stw	r2,136(sp)
200297a0:	a0e8703a 	and	r20,r20,r3
200297a4:	0039883a 	mov	fp,zero
200297a8:	903ebb26 	beq	r18,zero,20029298 <__alt_data_end+0xfffeb298>
200297ac:	00800244 	movi	r2,9
200297b0:	14bdee36 	bltu	r2,r18,20028f6c <__alt_data_end+0xfffeaf6c>
200297b4:	003eba06 	br	200292a0 <__alt_data_end+0xfffeb2a0>
200297b8:	00800c04 	movi	r2,48
200297bc:	d8c01d45 	stb	r3,117(sp)
200297c0:	d8801d05 	stb	r2,116(sp)
200297c4:	d8001d85 	stb	zero,118(sp)
200297c8:	a0c00094 	ori	r3,r20,2
200297cc:	4800a916 	blt	r9,zero,20029a74 <___vfiprintf_internal_r+0x1314>
200297d0:	00bfdfc4 	movi	r2,-129
200297d4:	a096703a 	and	r11,r20,r2
200297d8:	5d000094 	ori	r20,r11,2
200297dc:	0039883a 	mov	fp,zero
200297e0:	003f9706 	br	20029640 <__alt_data_end+0xfffeb640>
200297e4:	8025883a 	mov	r18,r16
200297e8:	003c2e06 	br	200288a4 <__alt_data_end+0xfffea8a4>
200297ec:	008800f4 	movhi	r2,8195
200297f0:	10838404 	addi	r2,r2,3600
200297f4:	0039883a 	mov	fp,zero
200297f8:	d8802615 	stw	r2,152(sp)
200297fc:	003f9006 	br	20029640 <__alt_data_end+0xfffeb640>
20029800:	04a5c83a 	sub	r18,zero,r18
20029804:	07000b44 	movi	fp,45
20029808:	9004c03a 	cmpne	r2,r18,zero
2002980c:	04e7c83a 	sub	r19,zero,r19
20029810:	df001d85 	stb	fp,118(sp)
20029814:	98a7c83a 	sub	r19,r19,r2
20029818:	48009f16 	blt	r9,zero,20029a98 <___vfiprintf_internal_r+0x1338>
2002981c:	00bfdfc4 	movi	r2,-129
20029820:	a0a8703a 	and	r20,r20,r2
20029824:	003dd006 	br	20028f68 <__alt_data_end+0xfffeaf68>
20029828:	70004c26 	beq	r14,zero,2002995c <___vfiprintf_internal_r+0x11fc>
2002982c:	00800084 	movi	r2,2
20029830:	d8c01d04 	addi	r3,sp,116
20029834:	d8c00015 	stw	r3,0(sp)
20029838:	d8800115 	stw	r2,4(sp)
2002983c:	01000044 	movi	r4,1
20029840:	d811883a 	mov	r8,sp
20029844:	003f7306 	br	20029614 <__alt_data_end+0xfffeb614>
20029848:	a080100c 	andi	r2,r20,64
2002984c:	da802217 	ldw	r10,136(sp)
20029850:	103e0626 	beq	r2,zero,2002906c <__alt_data_end+0xfffeb06c>
20029854:	5480000f 	ldh	r18,0(r10)
20029858:	52800104 	addi	r10,r10,4
2002985c:	da802215 	stw	r10,136(sp)
20029860:	9027d7fa 	srai	r19,r18,31
20029864:	9805883a 	mov	r2,r19
20029868:	003db806 	br	20028f4c <__alt_data_end+0xfffeaf4c>
2002986c:	a080040c 	andi	r2,r20,16
20029870:	1000091e 	bne	r2,zero,20029898 <___vfiprintf_internal_r+0x1138>
20029874:	a2c0100c 	andi	r11,r20,64
20029878:	58000726 	beq	r11,zero,20029898 <___vfiprintf_internal_r+0x1138>
2002987c:	da802217 	ldw	r10,136(sp)
20029880:	50800017 	ldw	r2,0(r10)
20029884:	52800104 	addi	r10,r10,4
20029888:	da802215 	stw	r10,136(sp)
2002988c:	da802317 	ldw	r10,140(sp)
20029890:	1280000d 	sth	r10,0(r2)
20029894:	003be706 	br	20028834 <__alt_data_end+0xfffea834>
20029898:	da802217 	ldw	r10,136(sp)
2002989c:	50800017 	ldw	r2,0(r10)
200298a0:	52800104 	addi	r10,r10,4
200298a4:	da802215 	stw	r10,136(sp)
200298a8:	da802317 	ldw	r10,140(sp)
200298ac:	12800015 	stw	r10,0(r2)
200298b0:	003be006 	br	20028834 <__alt_data_end+0xfffea834>
200298b4:	a080100c 	andi	r2,r20,64
200298b8:	da802217 	ldw	r10,136(sp)
200298bc:	10003026 	beq	r2,zero,20029980 <___vfiprintf_internal_r+0x1220>
200298c0:	5480000b 	ldhu	r18,0(r10)
200298c4:	52800104 	addi	r10,r10,4
200298c8:	0027883a 	mov	r19,zero
200298cc:	da802215 	stw	r10,136(sp)
200298d0:	003d8006 	br	20028ed4 <__alt_data_end+0xfffeaed4>
200298d4:	80c00007 	ldb	r3,0(r16)
200298d8:	003c0006 	br	200288dc <__alt_data_end+0xfffea8dc>
200298dc:	a080100c 	andi	r2,r20,64
200298e0:	d8001d85 	stb	zero,118(sp)
200298e4:	da802217 	ldw	r10,136(sp)
200298e8:	1000201e 	bne	r2,zero,2002996c <___vfiprintf_internal_r+0x120c>
200298ec:	50800104 	addi	r2,r10,4
200298f0:	54800017 	ldw	r18,0(r10)
200298f4:	0027883a 	mov	r19,zero
200298f8:	483def0e 	bge	r9,zero,200290b8 <__alt_data_end+0xfffeb0b8>
200298fc:	94c6b03a 	or	r3,r18,r19
20029900:	d8802215 	stw	r2,136(sp)
20029904:	183d4e1e 	bne	r3,zero,20028e40 <__alt_data_end+0xfffeae40>
20029908:	0039883a 	mov	fp,zero
2002990c:	0005883a 	mov	r2,zero
20029910:	003e0606 	br	2002912c <__alt_data_end+0xfffeb12c>
20029914:	d9402117 	ldw	r5,132(sp)
20029918:	d9002017 	ldw	r4,128(sp)
2002991c:	d9801a04 	addi	r6,sp,104
20029920:	da402c15 	stw	r9,176(sp)
20029924:	db802a15 	stw	r14,168(sp)
20029928:	002864c0 	call	2002864c <__sprint_r.part.0>
2002992c:	da402c17 	ldw	r9,176(sp)
20029930:	db802a17 	ldw	r14,168(sp)
20029934:	103ede1e 	bne	r2,zero,200294b0 <__alt_data_end+0xfffeb4b0>
20029938:	d9401b17 	ldw	r5,108(sp)
2002993c:	d8801c17 	ldw	r2,112(sp)
20029940:	d811883a 	mov	r8,sp
20029944:	29000044 	addi	r4,r5,1
20029948:	003e7406 	br	2002931c <__alt_data_end+0xfffeb31c>
2002994c:	00bfffc4 	movi	r2,-1
20029950:	003c5806 	br	20028ab4 <__alt_data_end+0xfffeaab4>
20029954:	d811883a 	mov	r8,sp
20029958:	003ee806 	br	200294fc <__alt_data_end+0xfffeb4fc>
2002995c:	000b883a 	mov	r5,zero
20029960:	01000044 	movi	r4,1
20029964:	d811883a 	mov	r8,sp
20029968:	003e7c06 	br	2002935c <__alt_data_end+0xfffeb35c>
2002996c:	50800104 	addi	r2,r10,4
20029970:	5480000b 	ldhu	r18,0(r10)
20029974:	0027883a 	mov	r19,zero
20029978:	483dcf0e 	bge	r9,zero,200290b8 <__alt_data_end+0xfffeb0b8>
2002997c:	003fdf06 	br	200298fc <__alt_data_end+0xfffeb8fc>
20029980:	54800017 	ldw	r18,0(r10)
20029984:	52800104 	addi	r10,r10,4
20029988:	0027883a 	mov	r19,zero
2002998c:	da802215 	stw	r10,136(sp)
20029990:	003d5006 	br	20028ed4 <__alt_data_end+0xfffeaed4>
20029994:	50800104 	addi	r2,r10,4
20029998:	5480000b 	ldhu	r18,0(r10)
2002999c:	0027883a 	mov	r19,zero
200299a0:	483f7d0e 	bge	r9,zero,20029798 <__alt_data_end+0xfffeb798>
200299a4:	003ddc06 	br	20029118 <__alt_data_end+0xfffeb118>
200299a8:	d8c02215 	stw	r3,136(sp)
200299ac:	0039883a 	mov	fp,zero
200299b0:	003ddb06 	br	20029120 <__alt_data_end+0xfffeb120>
200299b4:	028800f4 	movhi	r10,8195
200299b8:	5283e404 	addi	r10,r10,3984
200299bc:	da802415 	stw	r10,144(sp)
200299c0:	003e8306 	br	200293d0 <__alt_data_end+0xfffeb3d0>
200299c4:	d8801c17 	ldw	r2,112(sp)
200299c8:	dd002117 	ldw	r20,132(sp)
200299cc:	103eb926 	beq	r2,zero,200294b4 <__alt_data_end+0xfffeb4b4>
200299d0:	d9002017 	ldw	r4,128(sp)
200299d4:	d9801a04 	addi	r6,sp,104
200299d8:	a00b883a 	mov	r5,r20
200299dc:	002864c0 	call	2002864c <__sprint_r.part.0>
200299e0:	003eb406 	br	200294b4 <__alt_data_end+0xfffeb4b4>
200299e4:	80c00043 	ldbu	r3,1(r16)
200299e8:	a5000814 	ori	r20,r20,32
200299ec:	84000044 	addi	r16,r16,1
200299f0:	18c03fcc 	andi	r3,r3,255
200299f4:	18c0201c 	xori	r3,r3,128
200299f8:	18ffe004 	addi	r3,r3,-128
200299fc:	003bb706 	br	200288dc <__alt_data_end+0xfffea8dc>
20029a00:	a809883a 	mov	r4,r21
20029a04:	d8c02a15 	stw	r3,168(sp)
20029a08:	da002b15 	stw	r8,172(sp)
20029a0c:	0021eec0 	call	20021eec <strlen>
20029a10:	d8c02a17 	ldw	r3,168(sp)
20029a14:	1027883a 	mov	r19,r2
20029a18:	df001d83 	ldbu	fp,118(sp)
20029a1c:	d8c02215 	stw	r3,136(sp)
20029a20:	0013883a 	mov	r9,zero
20029a24:	da002b17 	ldw	r8,172(sp)
20029a28:	003c4d06 	br	20028b60 <__alt_data_end+0xfffeab60>
20029a2c:	d9402117 	ldw	r5,132(sp)
20029a30:	d9002017 	ldw	r4,128(sp)
20029a34:	d9801a04 	addi	r6,sp,104
20029a38:	da402c15 	stw	r9,176(sp)
20029a3c:	002864c0 	call	2002864c <__sprint_r.part.0>
20029a40:	da402c17 	ldw	r9,176(sp)
20029a44:	103e9a1e 	bne	r2,zero,200294b0 <__alt_data_end+0xfffeb4b0>
20029a48:	d9401b17 	ldw	r5,108(sp)
20029a4c:	d8801c17 	ldw	r2,112(sp)
20029a50:	d811883a 	mov	r8,sp
20029a54:	29000044 	addi	r4,r5,1
20029a58:	003e4206 	br	20029364 <__alt_data_end+0xfffeb364>
20029a5c:	d9401b17 	ldw	r5,108(sp)
20029a60:	010800f4 	movhi	r4,8195
20029a64:	2103e804 	addi	r4,r4,4000
20029a68:	d9002415 	stw	r4,144(sp)
20029a6c:	29400044 	addi	r5,r5,1
20029a70:	003c6d06 	br	20028c28 <__alt_data_end+0xfffeac28>
20029a74:	0039883a 	mov	fp,zero
20029a78:	00800084 	movi	r2,2
20029a7c:	10803fcc 	andi	r2,r2,255
20029a80:	01000044 	movi	r4,1
20029a84:	11001e26 	beq	r2,r4,20029b00 <___vfiprintf_internal_r+0x13a0>
20029a88:	01000084 	movi	r4,2
20029a8c:	11001e1e 	bne	r2,r4,20029b08 <___vfiprintf_internal_r+0x13a8>
20029a90:	1829883a 	mov	r20,r3
20029a94:	003eea06 	br	20029640 <__alt_data_end+0xfffeb640>
20029a98:	a007883a 	mov	r3,r20
20029a9c:	00800044 	movi	r2,1
20029aa0:	003ff606 	br	20029a7c <__alt_data_end+0xfffeba7c>
20029aa4:	00800184 	movi	r2,6
20029aa8:	1240012e 	bgeu	r2,r9,20029ab0 <___vfiprintf_internal_r+0x1350>
20029aac:	1013883a 	mov	r9,r2
20029ab0:	4827883a 	mov	r19,r9
20029ab4:	4825883a 	mov	r18,r9
20029ab8:	48001516 	blt	r9,zero,20029b10 <___vfiprintf_internal_r+0x13b0>
20029abc:	054800f4 	movhi	r21,8195
20029ac0:	d8c02215 	stw	r3,136(sp)
20029ac4:	ad438904 	addi	r21,r21,3620
20029ac8:	003d1406 	br	20028f1c <__alt_data_end+0xfffeaf1c>
20029acc:	028800f4 	movhi	r10,8195
20029ad0:	5283e404 	addi	r10,r10,3984
20029ad4:	da802415 	stw	r10,144(sp)
20029ad8:	200d883a 	mov	r6,r4
20029adc:	003c9106 	br	20028d24 <__alt_data_end+0xfffead24>
20029ae0:	5021883a 	mov	r16,r10
20029ae4:	0013883a 	mov	r9,zero
20029ae8:	003b7d06 	br	200288e0 <__alt_data_end+0xfffea8e0>
20029aec:	4827883a 	mov	r19,r9
20029af0:	df001d83 	ldbu	fp,118(sp)
20029af4:	d8c02215 	stw	r3,136(sp)
20029af8:	0013883a 	mov	r9,zero
20029afc:	003c1806 	br	20028b60 <__alt_data_end+0xfffeab60>
20029b00:	1829883a 	mov	r20,r3
20029b04:	003d1806 	br	20028f68 <__alt_data_end+0xfffeaf68>
20029b08:	1829883a 	mov	r20,r3
20029b0c:	003ccd06 	br	20028e44 <__alt_data_end+0xfffeae44>
20029b10:	0025883a 	mov	r18,zero
20029b14:	003fe906 	br	20029abc <__alt_data_end+0xfffebabc>
20029b18:	d8802217 	ldw	r2,136(sp)
20029b1c:	80c00043 	ldbu	r3,1(r16)
20029b20:	5021883a 	mov	r16,r10
20029b24:	12400017 	ldw	r9,0(r2)
20029b28:	10800104 	addi	r2,r2,4
20029b2c:	d8802215 	stw	r2,136(sp)
20029b30:	483faf0e 	bge	r9,zero,200299f0 <__alt_data_end+0xfffeb9f0>
20029b34:	18c03fcc 	andi	r3,r3,255
20029b38:	18c0201c 	xori	r3,r3,128
20029b3c:	027fffc4 	movi	r9,-1
20029b40:	18ffe004 	addi	r3,r3,-128
20029b44:	003b6506 	br	200288dc <__alt_data_end+0xfffea8dc>
20029b48:	d9c01d85 	stb	r7,118(sp)
20029b4c:	003ca006 	br	20028dd0 <__alt_data_end+0xfffeadd0>
20029b50:	d9c01d85 	stb	r7,118(sp)
20029b54:	003cad06 	br	20028e0c <__alt_data_end+0xfffeae0c>
20029b58:	d9c01d85 	stb	r7,118(sp)
20029b5c:	003d7d06 	br	20029154 <__alt_data_end+0xfffeb154>
20029b60:	d9c01d85 	stb	r7,118(sp)
20029b64:	003d5f06 	br	200290e4 <__alt_data_end+0xfffeb0e4>
20029b68:	a080004c 	andi	r2,r20,1
20029b6c:	0039883a 	mov	fp,zero
20029b70:	10000526 	beq	r2,zero,20029b88 <___vfiprintf_internal_r+0x1428>
20029b74:	00800c04 	movi	r2,48
20029b78:	d88019c5 	stb	r2,103(sp)
20029b7c:	dcc02717 	ldw	r19,156(sp)
20029b80:	dd4019c4 	addi	r21,sp,103
20029b84:	003bf606 	br	20028b60 <__alt_data_end+0xfffeab60>
20029b88:	0027883a 	mov	r19,zero
20029b8c:	dd401a04 	addi	r21,sp,104
20029b90:	003bf306 	br	20028b60 <__alt_data_end+0xfffeab60>
20029b94:	d9c01d85 	stb	r7,118(sp)
20029b98:	003dc806 	br	200292bc <__alt_data_end+0xfffeb2bc>
20029b9c:	d9c01d85 	stb	r7,118(sp)
20029ba0:	003d3a06 	br	2002908c <__alt_data_end+0xfffeb08c>
20029ba4:	d9c01d85 	stb	r7,118(sp)
20029ba8:	003d2a06 	br	20029054 <__alt_data_end+0xfffeb054>
20029bac:	d9c01d85 	stb	r7,118(sp)
20029bb0:	003cde06 	br	20028f2c <__alt_data_end+0xfffeaf2c>
20029bb4:	d9c01d85 	stb	r7,118(sp)
20029bb8:	003cbc06 	br	20028eac <__alt_data_end+0xfffeaeac>

20029bbc <__vfiprintf_internal>:
20029bbc:	008800f4 	movhi	r2,8195
20029bc0:	108b0a04 	addi	r2,r2,11304
20029bc4:	300f883a 	mov	r7,r6
20029bc8:	280d883a 	mov	r6,r5
20029bcc:	200b883a 	mov	r5,r4
20029bd0:	11000017 	ldw	r4,0(r2)
20029bd4:	00287601 	jmpi	20028760 <___vfiprintf_internal_r>

20029bd8 <__sbprintf>:
20029bd8:	2880030b 	ldhu	r2,12(r5)
20029bdc:	2ac01917 	ldw	r11,100(r5)
20029be0:	2a80038b 	ldhu	r10,14(r5)
20029be4:	2a400717 	ldw	r9,28(r5)
20029be8:	2a000917 	ldw	r8,36(r5)
20029bec:	defee204 	addi	sp,sp,-1144
20029bf0:	00c10004 	movi	r3,1024
20029bf4:	dc011a15 	stw	r16,1128(sp)
20029bf8:	10bfff4c 	andi	r2,r2,65533
20029bfc:	2821883a 	mov	r16,r5
20029c00:	d8cb883a 	add	r5,sp,r3
20029c04:	dc811c15 	stw	r18,1136(sp)
20029c08:	dc411b15 	stw	r17,1132(sp)
20029c0c:	dfc11d15 	stw	ra,1140(sp)
20029c10:	2025883a 	mov	r18,r4
20029c14:	d881030d 	sth	r2,1036(sp)
20029c18:	dac11915 	stw	r11,1124(sp)
20029c1c:	da81038d 	sth	r10,1038(sp)
20029c20:	da410715 	stw	r9,1052(sp)
20029c24:	da010915 	stw	r8,1060(sp)
20029c28:	dec10015 	stw	sp,1024(sp)
20029c2c:	dec10415 	stw	sp,1040(sp)
20029c30:	d8c10215 	stw	r3,1032(sp)
20029c34:	d8c10515 	stw	r3,1044(sp)
20029c38:	d8010615 	stw	zero,1048(sp)
20029c3c:	00287600 	call	20028760 <___vfiprintf_internal_r>
20029c40:	1023883a 	mov	r17,r2
20029c44:	10000416 	blt	r2,zero,20029c58 <__sbprintf+0x80>
20029c48:	d9410004 	addi	r5,sp,1024
20029c4c:	9009883a 	mov	r4,r18
20029c50:	00260040 	call	20026004 <_fflush_r>
20029c54:	10000d1e 	bne	r2,zero,20029c8c <__sbprintf+0xb4>
20029c58:	d881030b 	ldhu	r2,1036(sp)
20029c5c:	1080100c 	andi	r2,r2,64
20029c60:	10000326 	beq	r2,zero,20029c70 <__sbprintf+0x98>
20029c64:	8080030b 	ldhu	r2,12(r16)
20029c68:	10801014 	ori	r2,r2,64
20029c6c:	8080030d 	sth	r2,12(r16)
20029c70:	8805883a 	mov	r2,r17
20029c74:	dfc11d17 	ldw	ra,1140(sp)
20029c78:	dc811c17 	ldw	r18,1136(sp)
20029c7c:	dc411b17 	ldw	r17,1132(sp)
20029c80:	dc011a17 	ldw	r16,1128(sp)
20029c84:	dec11e04 	addi	sp,sp,1144
20029c88:	f800283a 	ret
20029c8c:	047fffc4 	movi	r17,-1
20029c90:	003ff106 	br	20029c58 <__alt_data_end+0xfffebc58>

20029c94 <__swbuf_r>:
20029c94:	defffb04 	addi	sp,sp,-20
20029c98:	dcc00315 	stw	r19,12(sp)
20029c9c:	dc800215 	stw	r18,8(sp)
20029ca0:	dc000015 	stw	r16,0(sp)
20029ca4:	dfc00415 	stw	ra,16(sp)
20029ca8:	dc400115 	stw	r17,4(sp)
20029cac:	2025883a 	mov	r18,r4
20029cb0:	2827883a 	mov	r19,r5
20029cb4:	3021883a 	mov	r16,r6
20029cb8:	20000226 	beq	r4,zero,20029cc4 <__swbuf_r+0x30>
20029cbc:	20800e17 	ldw	r2,56(r4)
20029cc0:	10004226 	beq	r2,zero,20029dcc <__swbuf_r+0x138>
20029cc4:	80800617 	ldw	r2,24(r16)
20029cc8:	8100030b 	ldhu	r4,12(r16)
20029ccc:	80800215 	stw	r2,8(r16)
20029cd0:	2080020c 	andi	r2,r4,8
20029cd4:	10003626 	beq	r2,zero,20029db0 <__swbuf_r+0x11c>
20029cd8:	80c00417 	ldw	r3,16(r16)
20029cdc:	18003426 	beq	r3,zero,20029db0 <__swbuf_r+0x11c>
20029ce0:	2088000c 	andi	r2,r4,8192
20029ce4:	9c403fcc 	andi	r17,r19,255
20029ce8:	10001a26 	beq	r2,zero,20029d54 <__swbuf_r+0xc0>
20029cec:	80800017 	ldw	r2,0(r16)
20029cf0:	81000517 	ldw	r4,20(r16)
20029cf4:	10c7c83a 	sub	r3,r2,r3
20029cf8:	1900200e 	bge	r3,r4,20029d7c <__swbuf_r+0xe8>
20029cfc:	18c00044 	addi	r3,r3,1
20029d00:	81000217 	ldw	r4,8(r16)
20029d04:	11400044 	addi	r5,r2,1
20029d08:	81400015 	stw	r5,0(r16)
20029d0c:	213fffc4 	addi	r4,r4,-1
20029d10:	81000215 	stw	r4,8(r16)
20029d14:	14c00005 	stb	r19,0(r2)
20029d18:	80800517 	ldw	r2,20(r16)
20029d1c:	10c01e26 	beq	r2,r3,20029d98 <__swbuf_r+0x104>
20029d20:	8080030b 	ldhu	r2,12(r16)
20029d24:	1080004c 	andi	r2,r2,1
20029d28:	10000226 	beq	r2,zero,20029d34 <__swbuf_r+0xa0>
20029d2c:	00800284 	movi	r2,10
20029d30:	88801926 	beq	r17,r2,20029d98 <__swbuf_r+0x104>
20029d34:	8805883a 	mov	r2,r17
20029d38:	dfc00417 	ldw	ra,16(sp)
20029d3c:	dcc00317 	ldw	r19,12(sp)
20029d40:	dc800217 	ldw	r18,8(sp)
20029d44:	dc400117 	ldw	r17,4(sp)
20029d48:	dc000017 	ldw	r16,0(sp)
20029d4c:	dec00504 	addi	sp,sp,20
20029d50:	f800283a 	ret
20029d54:	81401917 	ldw	r5,100(r16)
20029d58:	00b7ffc4 	movi	r2,-8193
20029d5c:	21080014 	ori	r4,r4,8192
20029d60:	2884703a 	and	r2,r5,r2
20029d64:	80801915 	stw	r2,100(r16)
20029d68:	80800017 	ldw	r2,0(r16)
20029d6c:	8100030d 	sth	r4,12(r16)
20029d70:	81000517 	ldw	r4,20(r16)
20029d74:	10c7c83a 	sub	r3,r2,r3
20029d78:	193fe016 	blt	r3,r4,20029cfc <__alt_data_end+0xfffebcfc>
20029d7c:	800b883a 	mov	r5,r16
20029d80:	9009883a 	mov	r4,r18
20029d84:	00260040 	call	20026004 <_fflush_r>
20029d88:	1000071e 	bne	r2,zero,20029da8 <__swbuf_r+0x114>
20029d8c:	80800017 	ldw	r2,0(r16)
20029d90:	00c00044 	movi	r3,1
20029d94:	003fda06 	br	20029d00 <__alt_data_end+0xfffebd00>
20029d98:	800b883a 	mov	r5,r16
20029d9c:	9009883a 	mov	r4,r18
20029da0:	00260040 	call	20026004 <_fflush_r>
20029da4:	103fe326 	beq	r2,zero,20029d34 <__alt_data_end+0xfffebd34>
20029da8:	00bfffc4 	movi	r2,-1
20029dac:	003fe206 	br	20029d38 <__alt_data_end+0xfffebd38>
20029db0:	800b883a 	mov	r5,r16
20029db4:	9009883a 	mov	r4,r18
20029db8:	00242b40 	call	200242b4 <__swsetup_r>
20029dbc:	103ffa1e 	bne	r2,zero,20029da8 <__alt_data_end+0xfffebda8>
20029dc0:	8100030b 	ldhu	r4,12(r16)
20029dc4:	80c00417 	ldw	r3,16(r16)
20029dc8:	003fc506 	br	20029ce0 <__alt_data_end+0xfffebce0>
20029dcc:	0020cd40 	call	20020cd4 <__sinit>
20029dd0:	003fbc06 	br	20029cc4 <__alt_data_end+0xfffebcc4>

20029dd4 <__swbuf>:
20029dd4:	008800f4 	movhi	r2,8195
20029dd8:	108b0a04 	addi	r2,r2,11304
20029ddc:	280d883a 	mov	r6,r5
20029de0:	200b883a 	mov	r5,r4
20029de4:	11000017 	ldw	r4,0(r2)
20029de8:	0029c941 	jmpi	20029c94 <__swbuf_r>

20029dec <_calloc_r>:
20029dec:	298b383a 	mul	r5,r5,r6
20029df0:	defffe04 	addi	sp,sp,-8
20029df4:	dfc00115 	stw	ra,4(sp)
20029df8:	dc000015 	stw	r16,0(sp)
20029dfc:	0020eac0 	call	20020eac <_malloc_r>
20029e00:	10002926 	beq	r2,zero,20029ea8 <_calloc_r+0xbc>
20029e04:	11bfff17 	ldw	r6,-4(r2)
20029e08:	1021883a 	mov	r16,r2
20029e0c:	00bfff04 	movi	r2,-4
20029e10:	308c703a 	and	r6,r6,r2
20029e14:	00c00904 	movi	r3,36
20029e18:	308d883a 	add	r6,r6,r2
20029e1c:	19801636 	bltu	r3,r6,20029e78 <_calloc_r+0x8c>
20029e20:	008004c4 	movi	r2,19
20029e24:	11800b2e 	bgeu	r2,r6,20029e54 <_calloc_r+0x68>
20029e28:	80000015 	stw	zero,0(r16)
20029e2c:	80000115 	stw	zero,4(r16)
20029e30:	008006c4 	movi	r2,27
20029e34:	11801a2e 	bgeu	r2,r6,20029ea0 <_calloc_r+0xb4>
20029e38:	80000215 	stw	zero,8(r16)
20029e3c:	80000315 	stw	zero,12(r16)
20029e40:	30c0151e 	bne	r6,r3,20029e98 <_calloc_r+0xac>
20029e44:	80000415 	stw	zero,16(r16)
20029e48:	80800604 	addi	r2,r16,24
20029e4c:	80000515 	stw	zero,20(r16)
20029e50:	00000106 	br	20029e58 <_calloc_r+0x6c>
20029e54:	8005883a 	mov	r2,r16
20029e58:	10000015 	stw	zero,0(r2)
20029e5c:	10000115 	stw	zero,4(r2)
20029e60:	10000215 	stw	zero,8(r2)
20029e64:	8005883a 	mov	r2,r16
20029e68:	dfc00117 	ldw	ra,4(sp)
20029e6c:	dc000017 	ldw	r16,0(sp)
20029e70:	dec00204 	addi	sp,sp,8
20029e74:	f800283a 	ret
20029e78:	000b883a 	mov	r5,zero
20029e7c:	8009883a 	mov	r4,r16
20029e80:	00218e40 	call	200218e4 <memset>
20029e84:	8005883a 	mov	r2,r16
20029e88:	dfc00117 	ldw	ra,4(sp)
20029e8c:	dc000017 	ldw	r16,0(sp)
20029e90:	dec00204 	addi	sp,sp,8
20029e94:	f800283a 	ret
20029e98:	80800404 	addi	r2,r16,16
20029e9c:	003fee06 	br	20029e58 <__alt_data_end+0xfffebe58>
20029ea0:	80800204 	addi	r2,r16,8
20029ea4:	003fec06 	br	20029e58 <__alt_data_end+0xfffebe58>
20029ea8:	0005883a 	mov	r2,zero
20029eac:	003fee06 	br	20029e68 <__alt_data_end+0xfffebe68>

20029eb0 <__fputwc>:
20029eb0:	defff804 	addi	sp,sp,-32
20029eb4:	dcc00415 	stw	r19,16(sp)
20029eb8:	dc800315 	stw	r18,12(sp)
20029ebc:	dc000115 	stw	r16,4(sp)
20029ec0:	dfc00715 	stw	ra,28(sp)
20029ec4:	dd400615 	stw	r21,24(sp)
20029ec8:	dd000515 	stw	r20,20(sp)
20029ecc:	dc400215 	stw	r17,8(sp)
20029ed0:	2027883a 	mov	r19,r4
20029ed4:	2825883a 	mov	r18,r5
20029ed8:	3021883a 	mov	r16,r6
20029edc:	0026a080 	call	20026a08 <__locale_mb_cur_max>
20029ee0:	00c00044 	movi	r3,1
20029ee4:	10c03e26 	beq	r2,r3,20029fe0 <__fputwc+0x130>
20029ee8:	81c01704 	addi	r7,r16,92
20029eec:	900d883a 	mov	r6,r18
20029ef0:	d80b883a 	mov	r5,sp
20029ef4:	9809883a 	mov	r4,r19
20029ef8:	002a1680 	call	2002a168 <_wcrtomb_r>
20029efc:	1029883a 	mov	r20,r2
20029f00:	00bfffc4 	movi	r2,-1
20029f04:	a0802026 	beq	r20,r2,20029f88 <__fputwc+0xd8>
20029f08:	d9400003 	ldbu	r5,0(sp)
20029f0c:	a0001c26 	beq	r20,zero,20029f80 <__fputwc+0xd0>
20029f10:	0023883a 	mov	r17,zero
20029f14:	05400284 	movi	r21,10
20029f18:	00000906 	br	20029f40 <__fputwc+0x90>
20029f1c:	80800017 	ldw	r2,0(r16)
20029f20:	11400005 	stb	r5,0(r2)
20029f24:	80c00017 	ldw	r3,0(r16)
20029f28:	18c00044 	addi	r3,r3,1
20029f2c:	80c00015 	stw	r3,0(r16)
20029f30:	8c400044 	addi	r17,r17,1
20029f34:	dc45883a 	add	r2,sp,r17
20029f38:	8d00112e 	bgeu	r17,r20,20029f80 <__fputwc+0xd0>
20029f3c:	11400003 	ldbu	r5,0(r2)
20029f40:	80c00217 	ldw	r3,8(r16)
20029f44:	18ffffc4 	addi	r3,r3,-1
20029f48:	80c00215 	stw	r3,8(r16)
20029f4c:	183ff30e 	bge	r3,zero,20029f1c <__alt_data_end+0xfffebf1c>
20029f50:	80800617 	ldw	r2,24(r16)
20029f54:	18801916 	blt	r3,r2,20029fbc <__fputwc+0x10c>
20029f58:	80800017 	ldw	r2,0(r16)
20029f5c:	11400005 	stb	r5,0(r2)
20029f60:	80800017 	ldw	r2,0(r16)
20029f64:	10c00003 	ldbu	r3,0(r2)
20029f68:	10800044 	addi	r2,r2,1
20029f6c:	1d402326 	beq	r3,r21,20029ffc <__fputwc+0x14c>
20029f70:	80800015 	stw	r2,0(r16)
20029f74:	8c400044 	addi	r17,r17,1
20029f78:	dc45883a 	add	r2,sp,r17
20029f7c:	8d3fef36 	bltu	r17,r20,20029f3c <__alt_data_end+0xfffebf3c>
20029f80:	9005883a 	mov	r2,r18
20029f84:	00000406 	br	20029f98 <__fputwc+0xe8>
20029f88:	80c0030b 	ldhu	r3,12(r16)
20029f8c:	a005883a 	mov	r2,r20
20029f90:	18c01014 	ori	r3,r3,64
20029f94:	80c0030d 	sth	r3,12(r16)
20029f98:	dfc00717 	ldw	ra,28(sp)
20029f9c:	dd400617 	ldw	r21,24(sp)
20029fa0:	dd000517 	ldw	r20,20(sp)
20029fa4:	dcc00417 	ldw	r19,16(sp)
20029fa8:	dc800317 	ldw	r18,12(sp)
20029fac:	dc400217 	ldw	r17,8(sp)
20029fb0:	dc000117 	ldw	r16,4(sp)
20029fb4:	dec00804 	addi	sp,sp,32
20029fb8:	f800283a 	ret
20029fbc:	800d883a 	mov	r6,r16
20029fc0:	29403fcc 	andi	r5,r5,255
20029fc4:	9809883a 	mov	r4,r19
20029fc8:	0029c940 	call	20029c94 <__swbuf_r>
20029fcc:	10bfffe0 	cmpeqi	r2,r2,-1
20029fd0:	10803fcc 	andi	r2,r2,255
20029fd4:	103fd626 	beq	r2,zero,20029f30 <__alt_data_end+0xfffebf30>
20029fd8:	00bfffc4 	movi	r2,-1
20029fdc:	003fee06 	br	20029f98 <__alt_data_end+0xfffebf98>
20029fe0:	90ffffc4 	addi	r3,r18,-1
20029fe4:	01003f84 	movi	r4,254
20029fe8:	20ffbf36 	bltu	r4,r3,20029ee8 <__alt_data_end+0xfffebee8>
20029fec:	900b883a 	mov	r5,r18
20029ff0:	dc800005 	stb	r18,0(sp)
20029ff4:	1029883a 	mov	r20,r2
20029ff8:	003fc506 	br	20029f10 <__alt_data_end+0xfffebf10>
20029ffc:	800d883a 	mov	r6,r16
2002a000:	a80b883a 	mov	r5,r21
2002a004:	9809883a 	mov	r4,r19
2002a008:	0029c940 	call	20029c94 <__swbuf_r>
2002a00c:	10bfffe0 	cmpeqi	r2,r2,-1
2002a010:	003fef06 	br	20029fd0 <__alt_data_end+0xfffebfd0>

2002a014 <_fputwc_r>:
2002a014:	3080030b 	ldhu	r2,12(r6)
2002a018:	10c8000c 	andi	r3,r2,8192
2002a01c:	1800051e 	bne	r3,zero,2002a034 <_fputwc_r+0x20>
2002a020:	30c01917 	ldw	r3,100(r6)
2002a024:	10880014 	ori	r2,r2,8192
2002a028:	3080030d 	sth	r2,12(r6)
2002a02c:	18880014 	ori	r2,r3,8192
2002a030:	30801915 	stw	r2,100(r6)
2002a034:	0029eb01 	jmpi	20029eb0 <__fputwc>

2002a038 <fputwc>:
2002a038:	008800f4 	movhi	r2,8195
2002a03c:	defffc04 	addi	sp,sp,-16
2002a040:	108b0a04 	addi	r2,r2,11304
2002a044:	dc000115 	stw	r16,4(sp)
2002a048:	14000017 	ldw	r16,0(r2)
2002a04c:	dc400215 	stw	r17,8(sp)
2002a050:	dfc00315 	stw	ra,12(sp)
2002a054:	2023883a 	mov	r17,r4
2002a058:	80000226 	beq	r16,zero,2002a064 <fputwc+0x2c>
2002a05c:	80800e17 	ldw	r2,56(r16)
2002a060:	10001026 	beq	r2,zero,2002a0a4 <fputwc+0x6c>
2002a064:	2880030b 	ldhu	r2,12(r5)
2002a068:	10c8000c 	andi	r3,r2,8192
2002a06c:	1800051e 	bne	r3,zero,2002a084 <fputwc+0x4c>
2002a070:	28c01917 	ldw	r3,100(r5)
2002a074:	10880014 	ori	r2,r2,8192
2002a078:	2880030d 	sth	r2,12(r5)
2002a07c:	18880014 	ori	r2,r3,8192
2002a080:	28801915 	stw	r2,100(r5)
2002a084:	280d883a 	mov	r6,r5
2002a088:	8009883a 	mov	r4,r16
2002a08c:	880b883a 	mov	r5,r17
2002a090:	dfc00317 	ldw	ra,12(sp)
2002a094:	dc400217 	ldw	r17,8(sp)
2002a098:	dc000117 	ldw	r16,4(sp)
2002a09c:	dec00404 	addi	sp,sp,16
2002a0a0:	0029eb01 	jmpi	20029eb0 <__fputwc>
2002a0a4:	8009883a 	mov	r4,r16
2002a0a8:	d9400015 	stw	r5,0(sp)
2002a0ac:	0020cd40 	call	20020cd4 <__sinit>
2002a0b0:	d9400017 	ldw	r5,0(sp)
2002a0b4:	003feb06 	br	2002a064 <__alt_data_end+0xfffec064>

2002a0b8 <_fstat_r>:
2002a0b8:	defffd04 	addi	sp,sp,-12
2002a0bc:	2805883a 	mov	r2,r5
2002a0c0:	dc000015 	stw	r16,0(sp)
2002a0c4:	040800f4 	movhi	r16,8195
2002a0c8:	dc400115 	stw	r17,4(sp)
2002a0cc:	8411f504 	addi	r16,r16,18388
2002a0d0:	2023883a 	mov	r17,r4
2002a0d4:	300b883a 	mov	r5,r6
2002a0d8:	1009883a 	mov	r4,r2
2002a0dc:	dfc00215 	stw	ra,8(sp)
2002a0e0:	80000015 	stw	zero,0(r16)
2002a0e4:	002d7d80 	call	2002d7d8 <fstat>
2002a0e8:	00ffffc4 	movi	r3,-1
2002a0ec:	10c00526 	beq	r2,r3,2002a104 <_fstat_r+0x4c>
2002a0f0:	dfc00217 	ldw	ra,8(sp)
2002a0f4:	dc400117 	ldw	r17,4(sp)
2002a0f8:	dc000017 	ldw	r16,0(sp)
2002a0fc:	dec00304 	addi	sp,sp,12
2002a100:	f800283a 	ret
2002a104:	80c00017 	ldw	r3,0(r16)
2002a108:	183ff926 	beq	r3,zero,2002a0f0 <__alt_data_end+0xfffec0f0>
2002a10c:	88c00015 	stw	r3,0(r17)
2002a110:	003ff706 	br	2002a0f0 <__alt_data_end+0xfffec0f0>

2002a114 <_isatty_r>:
2002a114:	defffd04 	addi	sp,sp,-12
2002a118:	dc000015 	stw	r16,0(sp)
2002a11c:	040800f4 	movhi	r16,8195
2002a120:	dc400115 	stw	r17,4(sp)
2002a124:	8411f504 	addi	r16,r16,18388
2002a128:	2023883a 	mov	r17,r4
2002a12c:	2809883a 	mov	r4,r5
2002a130:	dfc00215 	stw	ra,8(sp)
2002a134:	80000015 	stw	zero,0(r16)
2002a138:	002d8c40 	call	2002d8c4 <isatty>
2002a13c:	00ffffc4 	movi	r3,-1
2002a140:	10c00526 	beq	r2,r3,2002a158 <_isatty_r+0x44>
2002a144:	dfc00217 	ldw	ra,8(sp)
2002a148:	dc400117 	ldw	r17,4(sp)
2002a14c:	dc000017 	ldw	r16,0(sp)
2002a150:	dec00304 	addi	sp,sp,12
2002a154:	f800283a 	ret
2002a158:	80c00017 	ldw	r3,0(r16)
2002a15c:	183ff926 	beq	r3,zero,2002a144 <__alt_data_end+0xfffec144>
2002a160:	88c00015 	stw	r3,0(r17)
2002a164:	003ff706 	br	2002a144 <__alt_data_end+0xfffec144>

2002a168 <_wcrtomb_r>:
2002a168:	defff604 	addi	sp,sp,-40
2002a16c:	008800f4 	movhi	r2,8195
2002a170:	dc800815 	stw	r18,32(sp)
2002a174:	dc400715 	stw	r17,28(sp)
2002a178:	dc000615 	stw	r16,24(sp)
2002a17c:	108b0e04 	addi	r2,r2,11320
2002a180:	dfc00915 	stw	ra,36(sp)
2002a184:	2021883a 	mov	r16,r4
2002a188:	3823883a 	mov	r17,r7
2002a18c:	14800017 	ldw	r18,0(r2)
2002a190:	28001426 	beq	r5,zero,2002a1e4 <_wcrtomb_r+0x7c>
2002a194:	d9400415 	stw	r5,16(sp)
2002a198:	d9800515 	stw	r6,20(sp)
2002a19c:	00269fc0 	call	200269fc <__locale_charset>
2002a1a0:	d9800517 	ldw	r6,20(sp)
2002a1a4:	d9400417 	ldw	r5,16(sp)
2002a1a8:	100f883a 	mov	r7,r2
2002a1ac:	dc400015 	stw	r17,0(sp)
2002a1b0:	8009883a 	mov	r4,r16
2002a1b4:	903ee83a 	callr	r18
2002a1b8:	00ffffc4 	movi	r3,-1
2002a1bc:	10c0031e 	bne	r2,r3,2002a1cc <_wcrtomb_r+0x64>
2002a1c0:	88000015 	stw	zero,0(r17)
2002a1c4:	00c02284 	movi	r3,138
2002a1c8:	80c00015 	stw	r3,0(r16)
2002a1cc:	dfc00917 	ldw	ra,36(sp)
2002a1d0:	dc800817 	ldw	r18,32(sp)
2002a1d4:	dc400717 	ldw	r17,28(sp)
2002a1d8:	dc000617 	ldw	r16,24(sp)
2002a1dc:	dec00a04 	addi	sp,sp,40
2002a1e0:	f800283a 	ret
2002a1e4:	00269fc0 	call	200269fc <__locale_charset>
2002a1e8:	100f883a 	mov	r7,r2
2002a1ec:	dc400015 	stw	r17,0(sp)
2002a1f0:	000d883a 	mov	r6,zero
2002a1f4:	d9400104 	addi	r5,sp,4
2002a1f8:	8009883a 	mov	r4,r16
2002a1fc:	903ee83a 	callr	r18
2002a200:	003fed06 	br	2002a1b8 <__alt_data_end+0xfffec1b8>

2002a204 <wcrtomb>:
2002a204:	defff604 	addi	sp,sp,-40
2002a208:	008800f4 	movhi	r2,8195
2002a20c:	dc800615 	stw	r18,24(sp)
2002a210:	dc400515 	stw	r17,20(sp)
2002a214:	108b0a04 	addi	r2,r2,11304
2002a218:	dfc00915 	stw	ra,36(sp)
2002a21c:	dd000815 	stw	r20,32(sp)
2002a220:	dcc00715 	stw	r19,28(sp)
2002a224:	dc000415 	stw	r16,16(sp)
2002a228:	3025883a 	mov	r18,r6
2002a22c:	14400017 	ldw	r17,0(r2)
2002a230:	20001926 	beq	r4,zero,2002a298 <wcrtomb+0x94>
2002a234:	008800f4 	movhi	r2,8195
2002a238:	108b0e04 	addi	r2,r2,11320
2002a23c:	15000017 	ldw	r20,0(r2)
2002a240:	2021883a 	mov	r16,r4
2002a244:	2827883a 	mov	r19,r5
2002a248:	00269fc0 	call	200269fc <__locale_charset>
2002a24c:	100f883a 	mov	r7,r2
2002a250:	dc800015 	stw	r18,0(sp)
2002a254:	980d883a 	mov	r6,r19
2002a258:	800b883a 	mov	r5,r16
2002a25c:	8809883a 	mov	r4,r17
2002a260:	a03ee83a 	callr	r20
2002a264:	00ffffc4 	movi	r3,-1
2002a268:	10c0031e 	bne	r2,r3,2002a278 <wcrtomb+0x74>
2002a26c:	90000015 	stw	zero,0(r18)
2002a270:	00c02284 	movi	r3,138
2002a274:	88c00015 	stw	r3,0(r17)
2002a278:	dfc00917 	ldw	ra,36(sp)
2002a27c:	dd000817 	ldw	r20,32(sp)
2002a280:	dcc00717 	ldw	r19,28(sp)
2002a284:	dc800617 	ldw	r18,24(sp)
2002a288:	dc400517 	ldw	r17,20(sp)
2002a28c:	dc000417 	ldw	r16,16(sp)
2002a290:	dec00a04 	addi	sp,sp,40
2002a294:	f800283a 	ret
2002a298:	008800f4 	movhi	r2,8195
2002a29c:	108b0e04 	addi	r2,r2,11320
2002a2a0:	14000017 	ldw	r16,0(r2)
2002a2a4:	00269fc0 	call	200269fc <__locale_charset>
2002a2a8:	100f883a 	mov	r7,r2
2002a2ac:	dc800015 	stw	r18,0(sp)
2002a2b0:	000d883a 	mov	r6,zero
2002a2b4:	d9400104 	addi	r5,sp,4
2002a2b8:	8809883a 	mov	r4,r17
2002a2bc:	803ee83a 	callr	r16
2002a2c0:	003fe806 	br	2002a264 <__alt_data_end+0xfffec264>

2002a2c4 <__ascii_wctomb>:
2002a2c4:	28000526 	beq	r5,zero,2002a2dc <__ascii_wctomb+0x18>
2002a2c8:	00803fc4 	movi	r2,255
2002a2cc:	11800536 	bltu	r2,r6,2002a2e4 <__ascii_wctomb+0x20>
2002a2d0:	29800005 	stb	r6,0(r5)
2002a2d4:	00800044 	movi	r2,1
2002a2d8:	f800283a 	ret
2002a2dc:	0005883a 	mov	r2,zero
2002a2e0:	f800283a 	ret
2002a2e4:	00802284 	movi	r2,138
2002a2e8:	20800015 	stw	r2,0(r4)
2002a2ec:	00bfffc4 	movi	r2,-1
2002a2f0:	f800283a 	ret

2002a2f4 <_wctomb_r>:
2002a2f4:	008800f4 	movhi	r2,8195
2002a2f8:	defff904 	addi	sp,sp,-28
2002a2fc:	108b0e04 	addi	r2,r2,11320
2002a300:	dfc00615 	stw	ra,24(sp)
2002a304:	dc400515 	stw	r17,20(sp)
2002a308:	dc000415 	stw	r16,16(sp)
2002a30c:	3823883a 	mov	r17,r7
2002a310:	14000017 	ldw	r16,0(r2)
2002a314:	d9000115 	stw	r4,4(sp)
2002a318:	d9400215 	stw	r5,8(sp)
2002a31c:	d9800315 	stw	r6,12(sp)
2002a320:	00269fc0 	call	200269fc <__locale_charset>
2002a324:	d9800317 	ldw	r6,12(sp)
2002a328:	d9400217 	ldw	r5,8(sp)
2002a32c:	d9000117 	ldw	r4,4(sp)
2002a330:	100f883a 	mov	r7,r2
2002a334:	dc400015 	stw	r17,0(sp)
2002a338:	803ee83a 	callr	r16
2002a33c:	dfc00617 	ldw	ra,24(sp)
2002a340:	dc400517 	ldw	r17,20(sp)
2002a344:	dc000417 	ldw	r16,16(sp)
2002a348:	dec00704 	addi	sp,sp,28
2002a34c:	f800283a 	ret

2002a350 <__udivdi3>:
2002a350:	defff504 	addi	sp,sp,-44
2002a354:	dcc00415 	stw	r19,16(sp)
2002a358:	dc000115 	stw	r16,4(sp)
2002a35c:	dfc00a15 	stw	ra,40(sp)
2002a360:	df000915 	stw	fp,36(sp)
2002a364:	ddc00815 	stw	r23,32(sp)
2002a368:	dd800715 	stw	r22,28(sp)
2002a36c:	dd400615 	stw	r21,24(sp)
2002a370:	dd000515 	stw	r20,20(sp)
2002a374:	dc800315 	stw	r18,12(sp)
2002a378:	dc400215 	stw	r17,8(sp)
2002a37c:	2027883a 	mov	r19,r4
2002a380:	2821883a 	mov	r16,r5
2002a384:	3800411e 	bne	r7,zero,2002a48c <__udivdi3+0x13c>
2002a388:	3023883a 	mov	r17,r6
2002a38c:	2025883a 	mov	r18,r4
2002a390:	2980522e 	bgeu	r5,r6,2002a4dc <__udivdi3+0x18c>
2002a394:	00bfffd4 	movui	r2,65535
2002a398:	282d883a 	mov	r22,r5
2002a39c:	1180a836 	bltu	r2,r6,2002a640 <__udivdi3+0x2f0>
2002a3a0:	00803fc4 	movi	r2,255
2002a3a4:	1185803a 	cmpltu	r2,r2,r6
2002a3a8:	100490fa 	slli	r2,r2,3
2002a3ac:	3086d83a 	srl	r3,r6,r2
2002a3b0:	010800f4 	movhi	r4,8195
2002a3b4:	2103ec04 	addi	r4,r4,4016
2002a3b8:	20c7883a 	add	r3,r4,r3
2002a3bc:	18c00003 	ldbu	r3,0(r3)
2002a3c0:	1885883a 	add	r2,r3,r2
2002a3c4:	00c00804 	movi	r3,32
2002a3c8:	1887c83a 	sub	r3,r3,r2
2002a3cc:	18000526 	beq	r3,zero,2002a3e4 <__udivdi3+0x94>
2002a3d0:	80e0983a 	sll	r16,r16,r3
2002a3d4:	9884d83a 	srl	r2,r19,r2
2002a3d8:	30e2983a 	sll	r17,r6,r3
2002a3dc:	98e4983a 	sll	r18,r19,r3
2002a3e0:	142cb03a 	or	r22,r2,r16
2002a3e4:	882ad43a 	srli	r21,r17,16
2002a3e8:	b009883a 	mov	r4,r22
2002a3ec:	8d3fffcc 	andi	r20,r17,65535
2002a3f0:	a80b883a 	mov	r5,r21
2002a3f4:	002af5c0 	call	2002af5c <__umodsi3>
2002a3f8:	b009883a 	mov	r4,r22
2002a3fc:	a80b883a 	mov	r5,r21
2002a400:	1027883a 	mov	r19,r2
2002a404:	002aef80 	call	2002aef8 <__udivsi3>
2002a408:	102d883a 	mov	r22,r2
2002a40c:	9826943a 	slli	r19,r19,16
2002a410:	9004d43a 	srli	r2,r18,16
2002a414:	a5a1383a 	mul	r16,r20,r22
2002a418:	14c4b03a 	or	r2,r2,r19
2002a41c:	1400052e 	bgeu	r2,r16,2002a434 <__udivdi3+0xe4>
2002a420:	1445883a 	add	r2,r2,r17
2002a424:	b0ffffc4 	addi	r3,r22,-1
2002a428:	14400136 	bltu	r2,r17,2002a430 <__udivdi3+0xe0>
2002a42c:	14012336 	bltu	r2,r16,2002a8bc <__udivdi3+0x56c>
2002a430:	182d883a 	mov	r22,r3
2002a434:	1421c83a 	sub	r16,r2,r16
2002a438:	a80b883a 	mov	r5,r21
2002a43c:	8009883a 	mov	r4,r16
2002a440:	002af5c0 	call	2002af5c <__umodsi3>
2002a444:	1027883a 	mov	r19,r2
2002a448:	a80b883a 	mov	r5,r21
2002a44c:	8009883a 	mov	r4,r16
2002a450:	002aef80 	call	2002aef8 <__udivsi3>
2002a454:	9826943a 	slli	r19,r19,16
2002a458:	a0a9383a 	mul	r20,r20,r2
2002a45c:	94bfffcc 	andi	r18,r18,65535
2002a460:	94e4b03a 	or	r18,r18,r19
2002a464:	9500052e 	bgeu	r18,r20,2002a47c <__udivdi3+0x12c>
2002a468:	8ca5883a 	add	r18,r17,r18
2002a46c:	10ffffc4 	addi	r3,r2,-1
2002a470:	9440f136 	bltu	r18,r17,2002a838 <__udivdi3+0x4e8>
2002a474:	9500f02e 	bgeu	r18,r20,2002a838 <__udivdi3+0x4e8>
2002a478:	10bfff84 	addi	r2,r2,-2
2002a47c:	b00c943a 	slli	r6,r22,16
2002a480:	0007883a 	mov	r3,zero
2002a484:	3084b03a 	or	r2,r6,r2
2002a488:	00005906 	br	2002a5f0 <__udivdi3+0x2a0>
2002a48c:	29c05636 	bltu	r5,r7,2002a5e8 <__udivdi3+0x298>
2002a490:	00bfffd4 	movui	r2,65535
2002a494:	11c0622e 	bgeu	r2,r7,2002a620 <__udivdi3+0x2d0>
2002a498:	00804034 	movhi	r2,256
2002a49c:	10bfffc4 	addi	r2,r2,-1
2002a4a0:	11c0ee36 	bltu	r2,r7,2002a85c <__udivdi3+0x50c>
2002a4a4:	00800404 	movi	r2,16
2002a4a8:	3886d83a 	srl	r3,r7,r2
2002a4ac:	010800f4 	movhi	r4,8195
2002a4b0:	2103ec04 	addi	r4,r4,4016
2002a4b4:	20c7883a 	add	r3,r4,r3
2002a4b8:	18c00003 	ldbu	r3,0(r3)
2002a4bc:	05400804 	movi	r21,32
2002a4c0:	1885883a 	add	r2,r3,r2
2002a4c4:	a8abc83a 	sub	r21,r21,r2
2002a4c8:	a800621e 	bne	r21,zero,2002a654 <__udivdi3+0x304>
2002a4cc:	3c00e936 	bltu	r7,r16,2002a874 <__udivdi3+0x524>
2002a4d0:	9985403a 	cmpgeu	r2,r19,r6
2002a4d4:	0007883a 	mov	r3,zero
2002a4d8:	00004506 	br	2002a5f0 <__udivdi3+0x2a0>
2002a4dc:	3000041e 	bne	r6,zero,2002a4f0 <__udivdi3+0x1a0>
2002a4e0:	000b883a 	mov	r5,zero
2002a4e4:	01000044 	movi	r4,1
2002a4e8:	002aef80 	call	2002aef8 <__udivsi3>
2002a4ec:	1023883a 	mov	r17,r2
2002a4f0:	00bfffd4 	movui	r2,65535
2002a4f4:	14404e2e 	bgeu	r2,r17,2002a630 <__udivdi3+0x2e0>
2002a4f8:	00804034 	movhi	r2,256
2002a4fc:	10bfffc4 	addi	r2,r2,-1
2002a500:	1440d836 	bltu	r2,r17,2002a864 <__udivdi3+0x514>
2002a504:	00800404 	movi	r2,16
2002a508:	8886d83a 	srl	r3,r17,r2
2002a50c:	010800f4 	movhi	r4,8195
2002a510:	2103ec04 	addi	r4,r4,4016
2002a514:	20c7883a 	add	r3,r4,r3
2002a518:	18c00003 	ldbu	r3,0(r3)
2002a51c:	1885883a 	add	r2,r3,r2
2002a520:	00c00804 	movi	r3,32
2002a524:	1887c83a 	sub	r3,r3,r2
2002a528:	18008f1e 	bne	r3,zero,2002a768 <__udivdi3+0x418>
2002a52c:	882ad43a 	srli	r21,r17,16
2002a530:	8461c83a 	sub	r16,r16,r17
2002a534:	8d3fffcc 	andi	r20,r17,65535
2002a538:	00c00044 	movi	r3,1
2002a53c:	8009883a 	mov	r4,r16
2002a540:	a80b883a 	mov	r5,r21
2002a544:	d8c00015 	stw	r3,0(sp)
2002a548:	002af5c0 	call	2002af5c <__umodsi3>
2002a54c:	8009883a 	mov	r4,r16
2002a550:	a80b883a 	mov	r5,r21
2002a554:	1027883a 	mov	r19,r2
2002a558:	002aef80 	call	2002aef8 <__udivsi3>
2002a55c:	9826943a 	slli	r19,r19,16
2002a560:	9008d43a 	srli	r4,r18,16
2002a564:	1521383a 	mul	r16,r2,r20
2002a568:	102d883a 	mov	r22,r2
2002a56c:	24c8b03a 	or	r4,r4,r19
2002a570:	d8c00017 	ldw	r3,0(sp)
2002a574:	2400052e 	bgeu	r4,r16,2002a58c <__udivdi3+0x23c>
2002a578:	2449883a 	add	r4,r4,r17
2002a57c:	b0bfffc4 	addi	r2,r22,-1
2002a580:	24400136 	bltu	r4,r17,2002a588 <__udivdi3+0x238>
2002a584:	2400ca36 	bltu	r4,r16,2002a8b0 <__udivdi3+0x560>
2002a588:	102d883a 	mov	r22,r2
2002a58c:	2421c83a 	sub	r16,r4,r16
2002a590:	a80b883a 	mov	r5,r21
2002a594:	8009883a 	mov	r4,r16
2002a598:	d8c00015 	stw	r3,0(sp)
2002a59c:	002af5c0 	call	2002af5c <__umodsi3>
2002a5a0:	1027883a 	mov	r19,r2
2002a5a4:	a80b883a 	mov	r5,r21
2002a5a8:	8009883a 	mov	r4,r16
2002a5ac:	002aef80 	call	2002aef8 <__udivsi3>
2002a5b0:	9826943a 	slli	r19,r19,16
2002a5b4:	1529383a 	mul	r20,r2,r20
2002a5b8:	94bfffcc 	andi	r18,r18,65535
2002a5bc:	94e4b03a 	or	r18,r18,r19
2002a5c0:	d8c00017 	ldw	r3,0(sp)
2002a5c4:	9500052e 	bgeu	r18,r20,2002a5dc <__udivdi3+0x28c>
2002a5c8:	8ca5883a 	add	r18,r17,r18
2002a5cc:	113fffc4 	addi	r4,r2,-1
2002a5d0:	94409736 	bltu	r18,r17,2002a830 <__udivdi3+0x4e0>
2002a5d4:	9500962e 	bgeu	r18,r20,2002a830 <__udivdi3+0x4e0>
2002a5d8:	10bfff84 	addi	r2,r2,-2
2002a5dc:	b00c943a 	slli	r6,r22,16
2002a5e0:	3084b03a 	or	r2,r6,r2
2002a5e4:	00000206 	br	2002a5f0 <__udivdi3+0x2a0>
2002a5e8:	0007883a 	mov	r3,zero
2002a5ec:	0005883a 	mov	r2,zero
2002a5f0:	dfc00a17 	ldw	ra,40(sp)
2002a5f4:	df000917 	ldw	fp,36(sp)
2002a5f8:	ddc00817 	ldw	r23,32(sp)
2002a5fc:	dd800717 	ldw	r22,28(sp)
2002a600:	dd400617 	ldw	r21,24(sp)
2002a604:	dd000517 	ldw	r20,20(sp)
2002a608:	dcc00417 	ldw	r19,16(sp)
2002a60c:	dc800317 	ldw	r18,12(sp)
2002a610:	dc400217 	ldw	r17,8(sp)
2002a614:	dc000117 	ldw	r16,4(sp)
2002a618:	dec00b04 	addi	sp,sp,44
2002a61c:	f800283a 	ret
2002a620:	00803fc4 	movi	r2,255
2002a624:	11c5803a 	cmpltu	r2,r2,r7
2002a628:	100490fa 	slli	r2,r2,3
2002a62c:	003f9e06 	br	2002a4a8 <__alt_data_end+0xfffec4a8>
2002a630:	00803fc4 	movi	r2,255
2002a634:	1445803a 	cmpltu	r2,r2,r17
2002a638:	100490fa 	slli	r2,r2,3
2002a63c:	003fb206 	br	2002a508 <__alt_data_end+0xfffec508>
2002a640:	00804034 	movhi	r2,256
2002a644:	10bfffc4 	addi	r2,r2,-1
2002a648:	11808836 	bltu	r2,r6,2002a86c <__udivdi3+0x51c>
2002a64c:	00800404 	movi	r2,16
2002a650:	003f5606 	br	2002a3ac <__alt_data_end+0xfffec3ac>
2002a654:	30aed83a 	srl	r23,r6,r2
2002a658:	3d4e983a 	sll	r7,r7,r21
2002a65c:	80acd83a 	srl	r22,r16,r2
2002a660:	9884d83a 	srl	r2,r19,r2
2002a664:	3deeb03a 	or	r23,r7,r23
2002a668:	b824d43a 	srli	r18,r23,16
2002a66c:	8560983a 	sll	r16,r16,r21
2002a670:	b009883a 	mov	r4,r22
2002a674:	900b883a 	mov	r5,r18
2002a678:	3568983a 	sll	r20,r6,r21
2002a67c:	1420b03a 	or	r16,r2,r16
2002a680:	002af5c0 	call	2002af5c <__umodsi3>
2002a684:	b009883a 	mov	r4,r22
2002a688:	900b883a 	mov	r5,r18
2002a68c:	1023883a 	mov	r17,r2
2002a690:	002aef80 	call	2002aef8 <__udivsi3>
2002a694:	8808943a 	slli	r4,r17,16
2002a698:	bf3fffcc 	andi	fp,r23,65535
2002a69c:	8006d43a 	srli	r3,r16,16
2002a6a0:	e0a3383a 	mul	r17,fp,r2
2002a6a4:	100d883a 	mov	r6,r2
2002a6a8:	1906b03a 	or	r3,r3,r4
2002a6ac:	1c40042e 	bgeu	r3,r17,2002a6c0 <__udivdi3+0x370>
2002a6b0:	1dc7883a 	add	r3,r3,r23
2002a6b4:	10bfffc4 	addi	r2,r2,-1
2002a6b8:	1dc0752e 	bgeu	r3,r23,2002a890 <__udivdi3+0x540>
2002a6bc:	100d883a 	mov	r6,r2
2002a6c0:	1c63c83a 	sub	r17,r3,r17
2002a6c4:	900b883a 	mov	r5,r18
2002a6c8:	8809883a 	mov	r4,r17
2002a6cc:	d9800015 	stw	r6,0(sp)
2002a6d0:	002af5c0 	call	2002af5c <__umodsi3>
2002a6d4:	102d883a 	mov	r22,r2
2002a6d8:	8809883a 	mov	r4,r17
2002a6dc:	900b883a 	mov	r5,r18
2002a6e0:	002aef80 	call	2002aef8 <__udivsi3>
2002a6e4:	b02c943a 	slli	r22,r22,16
2002a6e8:	e089383a 	mul	r4,fp,r2
2002a6ec:	843fffcc 	andi	r16,r16,65535
2002a6f0:	85a0b03a 	or	r16,r16,r22
2002a6f4:	d9800017 	ldw	r6,0(sp)
2002a6f8:	8100042e 	bgeu	r16,r4,2002a70c <__udivdi3+0x3bc>
2002a6fc:	85e1883a 	add	r16,r16,r23
2002a700:	10ffffc4 	addi	r3,r2,-1
2002a704:	85c05e2e 	bgeu	r16,r23,2002a880 <__udivdi3+0x530>
2002a708:	1805883a 	mov	r2,r3
2002a70c:	300c943a 	slli	r6,r6,16
2002a710:	a17fffcc 	andi	r5,r20,65535
2002a714:	a028d43a 	srli	r20,r20,16
2002a718:	3084b03a 	or	r2,r6,r2
2002a71c:	10ffffcc 	andi	r3,r2,65535
2002a720:	100cd43a 	srli	r6,r2,16
2002a724:	194f383a 	mul	r7,r3,r5
2002a728:	1d07383a 	mul	r3,r3,r20
2002a72c:	314b383a 	mul	r5,r6,r5
2002a730:	3810d43a 	srli	r8,r7,16
2002a734:	8121c83a 	sub	r16,r16,r4
2002a738:	1947883a 	add	r3,r3,r5
2002a73c:	40c7883a 	add	r3,r8,r3
2002a740:	350d383a 	mul	r6,r6,r20
2002a744:	1940022e 	bgeu	r3,r5,2002a750 <__udivdi3+0x400>
2002a748:	01000074 	movhi	r4,1
2002a74c:	310d883a 	add	r6,r6,r4
2002a750:	1828d43a 	srli	r20,r3,16
2002a754:	a18d883a 	add	r6,r20,r6
2002a758:	81803e36 	bltu	r16,r6,2002a854 <__udivdi3+0x504>
2002a75c:	81803826 	beq	r16,r6,2002a840 <__udivdi3+0x4f0>
2002a760:	0007883a 	mov	r3,zero
2002a764:	003fa206 	br	2002a5f0 <__alt_data_end+0xfffec5f0>
2002a768:	88e2983a 	sll	r17,r17,r3
2002a76c:	80a8d83a 	srl	r20,r16,r2
2002a770:	80e0983a 	sll	r16,r16,r3
2002a774:	882ad43a 	srli	r21,r17,16
2002a778:	9884d83a 	srl	r2,r19,r2
2002a77c:	a009883a 	mov	r4,r20
2002a780:	a80b883a 	mov	r5,r21
2002a784:	142eb03a 	or	r23,r2,r16
2002a788:	98e4983a 	sll	r18,r19,r3
2002a78c:	002af5c0 	call	2002af5c <__umodsi3>
2002a790:	a009883a 	mov	r4,r20
2002a794:	a80b883a 	mov	r5,r21
2002a798:	1021883a 	mov	r16,r2
2002a79c:	002aef80 	call	2002aef8 <__udivsi3>
2002a7a0:	1039883a 	mov	fp,r2
2002a7a4:	8d3fffcc 	andi	r20,r17,65535
2002a7a8:	8020943a 	slli	r16,r16,16
2002a7ac:	b804d43a 	srli	r2,r23,16
2002a7b0:	a72d383a 	mul	r22,r20,fp
2002a7b4:	1404b03a 	or	r2,r2,r16
2002a7b8:	1580062e 	bgeu	r2,r22,2002a7d4 <__udivdi3+0x484>
2002a7bc:	1445883a 	add	r2,r2,r17
2002a7c0:	e0ffffc4 	addi	r3,fp,-1
2002a7c4:	14403836 	bltu	r2,r17,2002a8a8 <__udivdi3+0x558>
2002a7c8:	1580372e 	bgeu	r2,r22,2002a8a8 <__udivdi3+0x558>
2002a7cc:	e73fff84 	addi	fp,fp,-2
2002a7d0:	1445883a 	add	r2,r2,r17
2002a7d4:	15adc83a 	sub	r22,r2,r22
2002a7d8:	a80b883a 	mov	r5,r21
2002a7dc:	b009883a 	mov	r4,r22
2002a7e0:	002af5c0 	call	2002af5c <__umodsi3>
2002a7e4:	1027883a 	mov	r19,r2
2002a7e8:	b009883a 	mov	r4,r22
2002a7ec:	a80b883a 	mov	r5,r21
2002a7f0:	002aef80 	call	2002aef8 <__udivsi3>
2002a7f4:	9826943a 	slli	r19,r19,16
2002a7f8:	a0a1383a 	mul	r16,r20,r2
2002a7fc:	b93fffcc 	andi	r4,r23,65535
2002a800:	24c8b03a 	or	r4,r4,r19
2002a804:	2400062e 	bgeu	r4,r16,2002a820 <__udivdi3+0x4d0>
2002a808:	2449883a 	add	r4,r4,r17
2002a80c:	10ffffc4 	addi	r3,r2,-1
2002a810:	24402336 	bltu	r4,r17,2002a8a0 <__udivdi3+0x550>
2002a814:	2400222e 	bgeu	r4,r16,2002a8a0 <__udivdi3+0x550>
2002a818:	10bfff84 	addi	r2,r2,-2
2002a81c:	2449883a 	add	r4,r4,r17
2002a820:	e038943a 	slli	fp,fp,16
2002a824:	2421c83a 	sub	r16,r4,r16
2002a828:	e086b03a 	or	r3,fp,r2
2002a82c:	003f4306 	br	2002a53c <__alt_data_end+0xfffec53c>
2002a830:	2005883a 	mov	r2,r4
2002a834:	003f6906 	br	2002a5dc <__alt_data_end+0xfffec5dc>
2002a838:	1805883a 	mov	r2,r3
2002a83c:	003f0f06 	br	2002a47c <__alt_data_end+0xfffec47c>
2002a840:	1806943a 	slli	r3,r3,16
2002a844:	9d66983a 	sll	r19,r19,r21
2002a848:	39ffffcc 	andi	r7,r7,65535
2002a84c:	19c7883a 	add	r3,r3,r7
2002a850:	98ffc32e 	bgeu	r19,r3,2002a760 <__alt_data_end+0xfffec760>
2002a854:	10bfffc4 	addi	r2,r2,-1
2002a858:	003fc106 	br	2002a760 <__alt_data_end+0xfffec760>
2002a85c:	00800604 	movi	r2,24
2002a860:	003f1106 	br	2002a4a8 <__alt_data_end+0xfffec4a8>
2002a864:	00800604 	movi	r2,24
2002a868:	003f2706 	br	2002a508 <__alt_data_end+0xfffec508>
2002a86c:	00800604 	movi	r2,24
2002a870:	003ece06 	br	2002a3ac <__alt_data_end+0xfffec3ac>
2002a874:	0007883a 	mov	r3,zero
2002a878:	00800044 	movi	r2,1
2002a87c:	003f5c06 	br	2002a5f0 <__alt_data_end+0xfffec5f0>
2002a880:	813fa12e 	bgeu	r16,r4,2002a708 <__alt_data_end+0xfffec708>
2002a884:	10bfff84 	addi	r2,r2,-2
2002a888:	85e1883a 	add	r16,r16,r23
2002a88c:	003f9f06 	br	2002a70c <__alt_data_end+0xfffec70c>
2002a890:	1c7f8a2e 	bgeu	r3,r17,2002a6bc <__alt_data_end+0xfffec6bc>
2002a894:	31bfff84 	addi	r6,r6,-2
2002a898:	1dc7883a 	add	r3,r3,r23
2002a89c:	003f8806 	br	2002a6c0 <__alt_data_end+0xfffec6c0>
2002a8a0:	1805883a 	mov	r2,r3
2002a8a4:	003fde06 	br	2002a820 <__alt_data_end+0xfffec820>
2002a8a8:	1839883a 	mov	fp,r3
2002a8ac:	003fc906 	br	2002a7d4 <__alt_data_end+0xfffec7d4>
2002a8b0:	b5bfff84 	addi	r22,r22,-2
2002a8b4:	2449883a 	add	r4,r4,r17
2002a8b8:	003f3406 	br	2002a58c <__alt_data_end+0xfffec58c>
2002a8bc:	b5bfff84 	addi	r22,r22,-2
2002a8c0:	1445883a 	add	r2,r2,r17
2002a8c4:	003edb06 	br	2002a434 <__alt_data_end+0xfffec434>

2002a8c8 <__umoddi3>:
2002a8c8:	defff404 	addi	sp,sp,-48
2002a8cc:	df000a15 	stw	fp,40(sp)
2002a8d0:	dc400315 	stw	r17,12(sp)
2002a8d4:	dc000215 	stw	r16,8(sp)
2002a8d8:	dfc00b15 	stw	ra,44(sp)
2002a8dc:	ddc00915 	stw	r23,36(sp)
2002a8e0:	dd800815 	stw	r22,32(sp)
2002a8e4:	dd400715 	stw	r21,28(sp)
2002a8e8:	dd000615 	stw	r20,24(sp)
2002a8ec:	dcc00515 	stw	r19,20(sp)
2002a8f0:	dc800415 	stw	r18,16(sp)
2002a8f4:	2021883a 	mov	r16,r4
2002a8f8:	2823883a 	mov	r17,r5
2002a8fc:	2839883a 	mov	fp,r5
2002a900:	38003c1e 	bne	r7,zero,2002a9f4 <__umoddi3+0x12c>
2002a904:	3027883a 	mov	r19,r6
2002a908:	2029883a 	mov	r20,r4
2002a90c:	2980512e 	bgeu	r5,r6,2002aa54 <__umoddi3+0x18c>
2002a910:	00bfffd4 	movui	r2,65535
2002a914:	11809a36 	bltu	r2,r6,2002ab80 <__umoddi3+0x2b8>
2002a918:	01003fc4 	movi	r4,255
2002a91c:	2189803a 	cmpltu	r4,r4,r6
2002a920:	200890fa 	slli	r4,r4,3
2002a924:	3104d83a 	srl	r2,r6,r4
2002a928:	00c800f4 	movhi	r3,8195
2002a92c:	18c3ec04 	addi	r3,r3,4016
2002a930:	1885883a 	add	r2,r3,r2
2002a934:	10c00003 	ldbu	r3,0(r2)
2002a938:	00800804 	movi	r2,32
2002a93c:	1909883a 	add	r4,r3,r4
2002a940:	1125c83a 	sub	r18,r2,r4
2002a944:	90000526 	beq	r18,zero,2002a95c <__umoddi3+0x94>
2002a948:	8ca2983a 	sll	r17,r17,r18
2002a94c:	8108d83a 	srl	r4,r16,r4
2002a950:	34a6983a 	sll	r19,r6,r18
2002a954:	84a8983a 	sll	r20,r16,r18
2002a958:	2478b03a 	or	fp,r4,r17
2002a95c:	982ed43a 	srli	r23,r19,16
2002a960:	e009883a 	mov	r4,fp
2002a964:	9dbfffcc 	andi	r22,r19,65535
2002a968:	b80b883a 	mov	r5,r23
2002a96c:	002af5c0 	call	2002af5c <__umodsi3>
2002a970:	e009883a 	mov	r4,fp
2002a974:	b80b883a 	mov	r5,r23
2002a978:	102b883a 	mov	r21,r2
2002a97c:	002aef80 	call	2002aef8 <__udivsi3>
2002a980:	a806943a 	slli	r3,r21,16
2002a984:	a008d43a 	srli	r4,r20,16
2002a988:	b085383a 	mul	r2,r22,r2
2002a98c:	20c8b03a 	or	r4,r4,r3
2002a990:	2080032e 	bgeu	r4,r2,2002a9a0 <__umoddi3+0xd8>
2002a994:	24c9883a 	add	r4,r4,r19
2002a998:	24c00136 	bltu	r4,r19,2002a9a0 <__umoddi3+0xd8>
2002a99c:	20811036 	bltu	r4,r2,2002ade0 <__umoddi3+0x518>
2002a9a0:	20abc83a 	sub	r21,r4,r2
2002a9a4:	b80b883a 	mov	r5,r23
2002a9a8:	a809883a 	mov	r4,r21
2002a9ac:	002af5c0 	call	2002af5c <__umodsi3>
2002a9b0:	1023883a 	mov	r17,r2
2002a9b4:	b80b883a 	mov	r5,r23
2002a9b8:	a809883a 	mov	r4,r21
2002a9bc:	002aef80 	call	2002aef8 <__udivsi3>
2002a9c0:	8822943a 	slli	r17,r17,16
2002a9c4:	b085383a 	mul	r2,r22,r2
2002a9c8:	a0ffffcc 	andi	r3,r20,65535
2002a9cc:	1c46b03a 	or	r3,r3,r17
2002a9d0:	1880042e 	bgeu	r3,r2,2002a9e4 <__umoddi3+0x11c>
2002a9d4:	1cc7883a 	add	r3,r3,r19
2002a9d8:	1cc00236 	bltu	r3,r19,2002a9e4 <__umoddi3+0x11c>
2002a9dc:	1880012e 	bgeu	r3,r2,2002a9e4 <__umoddi3+0x11c>
2002a9e0:	1cc7883a 	add	r3,r3,r19
2002a9e4:	1885c83a 	sub	r2,r3,r2
2002a9e8:	1484d83a 	srl	r2,r2,r18
2002a9ec:	0007883a 	mov	r3,zero
2002a9f0:	00004f06 	br	2002ab30 <__umoddi3+0x268>
2002a9f4:	29c04c36 	bltu	r5,r7,2002ab28 <__umoddi3+0x260>
2002a9f8:	00bfffd4 	movui	r2,65535
2002a9fc:	11c0582e 	bgeu	r2,r7,2002ab60 <__umoddi3+0x298>
2002aa00:	00804034 	movhi	r2,256
2002aa04:	10bfffc4 	addi	r2,r2,-1
2002aa08:	11c0e736 	bltu	r2,r7,2002ada8 <__umoddi3+0x4e0>
2002aa0c:	01000404 	movi	r4,16
2002aa10:	3904d83a 	srl	r2,r7,r4
2002aa14:	00c800f4 	movhi	r3,8195
2002aa18:	18c3ec04 	addi	r3,r3,4016
2002aa1c:	1885883a 	add	r2,r3,r2
2002aa20:	14c00003 	ldbu	r19,0(r2)
2002aa24:	00c00804 	movi	r3,32
2002aa28:	9927883a 	add	r19,r19,r4
2002aa2c:	1ce9c83a 	sub	r20,r3,r19
2002aa30:	a000581e 	bne	r20,zero,2002ab94 <__umoddi3+0x2cc>
2002aa34:	3c400136 	bltu	r7,r17,2002aa3c <__umoddi3+0x174>
2002aa38:	8180eb36 	bltu	r16,r6,2002ade8 <__umoddi3+0x520>
2002aa3c:	8185c83a 	sub	r2,r16,r6
2002aa40:	89e3c83a 	sub	r17,r17,r7
2002aa44:	8089803a 	cmpltu	r4,r16,r2
2002aa48:	8939c83a 	sub	fp,r17,r4
2002aa4c:	e007883a 	mov	r3,fp
2002aa50:	00003706 	br	2002ab30 <__umoddi3+0x268>
2002aa54:	3000041e 	bne	r6,zero,2002aa68 <__umoddi3+0x1a0>
2002aa58:	000b883a 	mov	r5,zero
2002aa5c:	01000044 	movi	r4,1
2002aa60:	002aef80 	call	2002aef8 <__udivsi3>
2002aa64:	1027883a 	mov	r19,r2
2002aa68:	00bfffd4 	movui	r2,65535
2002aa6c:	14c0402e 	bgeu	r2,r19,2002ab70 <__umoddi3+0x2a8>
2002aa70:	00804034 	movhi	r2,256
2002aa74:	10bfffc4 	addi	r2,r2,-1
2002aa78:	14c0cd36 	bltu	r2,r19,2002adb0 <__umoddi3+0x4e8>
2002aa7c:	00800404 	movi	r2,16
2002aa80:	9886d83a 	srl	r3,r19,r2
2002aa84:	010800f4 	movhi	r4,8195
2002aa88:	2103ec04 	addi	r4,r4,4016
2002aa8c:	20c7883a 	add	r3,r4,r3
2002aa90:	18c00003 	ldbu	r3,0(r3)
2002aa94:	1887883a 	add	r3,r3,r2
2002aa98:	00800804 	movi	r2,32
2002aa9c:	10e5c83a 	sub	r18,r2,r3
2002aaa0:	9000901e 	bne	r18,zero,2002ace4 <__umoddi3+0x41c>
2002aaa4:	982cd43a 	srli	r22,r19,16
2002aaa8:	8ce3c83a 	sub	r17,r17,r19
2002aaac:	9d7fffcc 	andi	r21,r19,65535
2002aab0:	b00b883a 	mov	r5,r22
2002aab4:	8809883a 	mov	r4,r17
2002aab8:	002af5c0 	call	2002af5c <__umodsi3>
2002aabc:	8809883a 	mov	r4,r17
2002aac0:	b00b883a 	mov	r5,r22
2002aac4:	1021883a 	mov	r16,r2
2002aac8:	002aef80 	call	2002aef8 <__udivsi3>
2002aacc:	8006943a 	slli	r3,r16,16
2002aad0:	a008d43a 	srli	r4,r20,16
2002aad4:	1545383a 	mul	r2,r2,r21
2002aad8:	20c8b03a 	or	r4,r4,r3
2002aadc:	2080042e 	bgeu	r4,r2,2002aaf0 <__umoddi3+0x228>
2002aae0:	24c9883a 	add	r4,r4,r19
2002aae4:	24c00236 	bltu	r4,r19,2002aaf0 <__umoddi3+0x228>
2002aae8:	2080012e 	bgeu	r4,r2,2002aaf0 <__umoddi3+0x228>
2002aaec:	24c9883a 	add	r4,r4,r19
2002aaf0:	20a1c83a 	sub	r16,r4,r2
2002aaf4:	b00b883a 	mov	r5,r22
2002aaf8:	8009883a 	mov	r4,r16
2002aafc:	002af5c0 	call	2002af5c <__umodsi3>
2002ab00:	1023883a 	mov	r17,r2
2002ab04:	b00b883a 	mov	r5,r22
2002ab08:	8009883a 	mov	r4,r16
2002ab0c:	002aef80 	call	2002aef8 <__udivsi3>
2002ab10:	8822943a 	slli	r17,r17,16
2002ab14:	1545383a 	mul	r2,r2,r21
2002ab18:	a53fffcc 	andi	r20,r20,65535
2002ab1c:	a446b03a 	or	r3,r20,r17
2002ab20:	18bfb02e 	bgeu	r3,r2,2002a9e4 <__alt_data_end+0xfffec9e4>
2002ab24:	003fab06 	br	2002a9d4 <__alt_data_end+0xfffec9d4>
2002ab28:	2005883a 	mov	r2,r4
2002ab2c:	2807883a 	mov	r3,r5
2002ab30:	dfc00b17 	ldw	ra,44(sp)
2002ab34:	df000a17 	ldw	fp,40(sp)
2002ab38:	ddc00917 	ldw	r23,36(sp)
2002ab3c:	dd800817 	ldw	r22,32(sp)
2002ab40:	dd400717 	ldw	r21,28(sp)
2002ab44:	dd000617 	ldw	r20,24(sp)
2002ab48:	dcc00517 	ldw	r19,20(sp)
2002ab4c:	dc800417 	ldw	r18,16(sp)
2002ab50:	dc400317 	ldw	r17,12(sp)
2002ab54:	dc000217 	ldw	r16,8(sp)
2002ab58:	dec00c04 	addi	sp,sp,48
2002ab5c:	f800283a 	ret
2002ab60:	04c03fc4 	movi	r19,255
2002ab64:	99c9803a 	cmpltu	r4,r19,r7
2002ab68:	200890fa 	slli	r4,r4,3
2002ab6c:	003fa806 	br	2002aa10 <__alt_data_end+0xfffeca10>
2002ab70:	00803fc4 	movi	r2,255
2002ab74:	14c5803a 	cmpltu	r2,r2,r19
2002ab78:	100490fa 	slli	r2,r2,3
2002ab7c:	003fc006 	br	2002aa80 <__alt_data_end+0xfffeca80>
2002ab80:	00804034 	movhi	r2,256
2002ab84:	10bfffc4 	addi	r2,r2,-1
2002ab88:	11808b36 	bltu	r2,r6,2002adb8 <__umoddi3+0x4f0>
2002ab8c:	01000404 	movi	r4,16
2002ab90:	003f6406 	br	2002a924 <__alt_data_end+0xfffec924>
2002ab94:	34c4d83a 	srl	r2,r6,r19
2002ab98:	3d0e983a 	sll	r7,r7,r20
2002ab9c:	8cf8d83a 	srl	fp,r17,r19
2002aba0:	8d10983a 	sll	r8,r17,r20
2002aba4:	38aab03a 	or	r21,r7,r2
2002aba8:	a82cd43a 	srli	r22,r21,16
2002abac:	84e2d83a 	srl	r17,r16,r19
2002abb0:	e009883a 	mov	r4,fp
2002abb4:	b00b883a 	mov	r5,r22
2002abb8:	8a22b03a 	or	r17,r17,r8
2002abbc:	3524983a 	sll	r18,r6,r20
2002abc0:	002af5c0 	call	2002af5c <__umodsi3>
2002abc4:	e009883a 	mov	r4,fp
2002abc8:	b00b883a 	mov	r5,r22
2002abcc:	102f883a 	mov	r23,r2
2002abd0:	002aef80 	call	2002aef8 <__udivsi3>
2002abd4:	100d883a 	mov	r6,r2
2002abd8:	b808943a 	slli	r4,r23,16
2002abdc:	aa3fffcc 	andi	r8,r21,65535
2002abe0:	8804d43a 	srli	r2,r17,16
2002abe4:	41af383a 	mul	r23,r8,r6
2002abe8:	8520983a 	sll	r16,r16,r20
2002abec:	1104b03a 	or	r2,r2,r4
2002abf0:	15c0042e 	bgeu	r2,r23,2002ac04 <__umoddi3+0x33c>
2002abf4:	1545883a 	add	r2,r2,r21
2002abf8:	30ffffc4 	addi	r3,r6,-1
2002abfc:	1540742e 	bgeu	r2,r21,2002add0 <__umoddi3+0x508>
2002ac00:	180d883a 	mov	r6,r3
2002ac04:	15efc83a 	sub	r23,r2,r23
2002ac08:	b00b883a 	mov	r5,r22
2002ac0c:	b809883a 	mov	r4,r23
2002ac10:	d9800115 	stw	r6,4(sp)
2002ac14:	da000015 	stw	r8,0(sp)
2002ac18:	002af5c0 	call	2002af5c <__umodsi3>
2002ac1c:	b00b883a 	mov	r5,r22
2002ac20:	b809883a 	mov	r4,r23
2002ac24:	1039883a 	mov	fp,r2
2002ac28:	002aef80 	call	2002aef8 <__udivsi3>
2002ac2c:	da000017 	ldw	r8,0(sp)
2002ac30:	e038943a 	slli	fp,fp,16
2002ac34:	100b883a 	mov	r5,r2
2002ac38:	4089383a 	mul	r4,r8,r2
2002ac3c:	8a3fffcc 	andi	r8,r17,65535
2002ac40:	4710b03a 	or	r8,r8,fp
2002ac44:	d9800117 	ldw	r6,4(sp)
2002ac48:	4100042e 	bgeu	r8,r4,2002ac5c <__umoddi3+0x394>
2002ac4c:	4551883a 	add	r8,r8,r21
2002ac50:	10bfffc4 	addi	r2,r2,-1
2002ac54:	45405a2e 	bgeu	r8,r21,2002adc0 <__umoddi3+0x4f8>
2002ac58:	100b883a 	mov	r5,r2
2002ac5c:	300c943a 	slli	r6,r6,16
2002ac60:	91ffffcc 	andi	r7,r18,65535
2002ac64:	9004d43a 	srli	r2,r18,16
2002ac68:	314cb03a 	or	r6,r6,r5
2002ac6c:	317fffcc 	andi	r5,r6,65535
2002ac70:	300cd43a 	srli	r6,r6,16
2002ac74:	29d3383a 	mul	r9,r5,r7
2002ac78:	288b383a 	mul	r5,r5,r2
2002ac7c:	31cf383a 	mul	r7,r6,r7
2002ac80:	4806d43a 	srli	r3,r9,16
2002ac84:	4111c83a 	sub	r8,r8,r4
2002ac88:	29cb883a 	add	r5,r5,r7
2002ac8c:	194b883a 	add	r5,r3,r5
2002ac90:	3085383a 	mul	r2,r6,r2
2002ac94:	29c0022e 	bgeu	r5,r7,2002aca0 <__umoddi3+0x3d8>
2002ac98:	00c00074 	movhi	r3,1
2002ac9c:	10c5883a 	add	r2,r2,r3
2002aca0:	2808d43a 	srli	r4,r5,16
2002aca4:	280a943a 	slli	r5,r5,16
2002aca8:	4a7fffcc 	andi	r9,r9,65535
2002acac:	2085883a 	add	r2,r4,r2
2002acb0:	2a4b883a 	add	r5,r5,r9
2002acb4:	40803636 	bltu	r8,r2,2002ad90 <__umoddi3+0x4c8>
2002acb8:	40804d26 	beq	r8,r2,2002adf0 <__umoddi3+0x528>
2002acbc:	4089c83a 	sub	r4,r8,r2
2002acc0:	280f883a 	mov	r7,r5
2002acc4:	81cfc83a 	sub	r7,r16,r7
2002acc8:	81c7803a 	cmpltu	r3,r16,r7
2002accc:	20c7c83a 	sub	r3,r4,r3
2002acd0:	1cc4983a 	sll	r2,r3,r19
2002acd4:	3d0ed83a 	srl	r7,r7,r20
2002acd8:	1d06d83a 	srl	r3,r3,r20
2002acdc:	11c4b03a 	or	r2,r2,r7
2002ace0:	003f9306 	br	2002ab30 <__alt_data_end+0xfffecb30>
2002ace4:	9ca6983a 	sll	r19,r19,r18
2002ace8:	88e8d83a 	srl	r20,r17,r3
2002acec:	80c4d83a 	srl	r2,r16,r3
2002acf0:	982cd43a 	srli	r22,r19,16
2002acf4:	8ca2983a 	sll	r17,r17,r18
2002acf8:	a009883a 	mov	r4,r20
2002acfc:	b00b883a 	mov	r5,r22
2002ad00:	1478b03a 	or	fp,r2,r17
2002ad04:	002af5c0 	call	2002af5c <__umodsi3>
2002ad08:	a009883a 	mov	r4,r20
2002ad0c:	b00b883a 	mov	r5,r22
2002ad10:	1023883a 	mov	r17,r2
2002ad14:	002aef80 	call	2002aef8 <__udivsi3>
2002ad18:	9d7fffcc 	andi	r21,r19,65535
2002ad1c:	880a943a 	slli	r5,r17,16
2002ad20:	e008d43a 	srli	r4,fp,16
2002ad24:	a885383a 	mul	r2,r21,r2
2002ad28:	84a8983a 	sll	r20,r16,r18
2002ad2c:	2148b03a 	or	r4,r4,r5
2002ad30:	2080042e 	bgeu	r4,r2,2002ad44 <__umoddi3+0x47c>
2002ad34:	24c9883a 	add	r4,r4,r19
2002ad38:	24c00236 	bltu	r4,r19,2002ad44 <__umoddi3+0x47c>
2002ad3c:	2080012e 	bgeu	r4,r2,2002ad44 <__umoddi3+0x47c>
2002ad40:	24c9883a 	add	r4,r4,r19
2002ad44:	20a3c83a 	sub	r17,r4,r2
2002ad48:	b00b883a 	mov	r5,r22
2002ad4c:	8809883a 	mov	r4,r17
2002ad50:	002af5c0 	call	2002af5c <__umodsi3>
2002ad54:	102f883a 	mov	r23,r2
2002ad58:	8809883a 	mov	r4,r17
2002ad5c:	b00b883a 	mov	r5,r22
2002ad60:	002aef80 	call	2002aef8 <__udivsi3>
2002ad64:	b82e943a 	slli	r23,r23,16
2002ad68:	a885383a 	mul	r2,r21,r2
2002ad6c:	e13fffcc 	andi	r4,fp,65535
2002ad70:	25c8b03a 	or	r4,r4,r23
2002ad74:	2080042e 	bgeu	r4,r2,2002ad88 <__umoddi3+0x4c0>
2002ad78:	24c9883a 	add	r4,r4,r19
2002ad7c:	24c00236 	bltu	r4,r19,2002ad88 <__umoddi3+0x4c0>
2002ad80:	2080012e 	bgeu	r4,r2,2002ad88 <__umoddi3+0x4c0>
2002ad84:	24c9883a 	add	r4,r4,r19
2002ad88:	20a3c83a 	sub	r17,r4,r2
2002ad8c:	003f4806 	br	2002aab0 <__alt_data_end+0xfffecab0>
2002ad90:	2c8fc83a 	sub	r7,r5,r18
2002ad94:	1545c83a 	sub	r2,r2,r21
2002ad98:	29cb803a 	cmpltu	r5,r5,r7
2002ad9c:	1145c83a 	sub	r2,r2,r5
2002ada0:	4089c83a 	sub	r4,r8,r2
2002ada4:	003fc706 	br	2002acc4 <__alt_data_end+0xfffeccc4>
2002ada8:	01000604 	movi	r4,24
2002adac:	003f1806 	br	2002aa10 <__alt_data_end+0xfffeca10>
2002adb0:	00800604 	movi	r2,24
2002adb4:	003f3206 	br	2002aa80 <__alt_data_end+0xfffeca80>
2002adb8:	01000604 	movi	r4,24
2002adbc:	003ed906 	br	2002a924 <__alt_data_end+0xfffec924>
2002adc0:	413fa52e 	bgeu	r8,r4,2002ac58 <__alt_data_end+0xfffecc58>
2002adc4:	297fff84 	addi	r5,r5,-2
2002adc8:	4551883a 	add	r8,r8,r21
2002adcc:	003fa306 	br	2002ac5c <__alt_data_end+0xfffecc5c>
2002add0:	15ff8b2e 	bgeu	r2,r23,2002ac00 <__alt_data_end+0xfffecc00>
2002add4:	31bfff84 	addi	r6,r6,-2
2002add8:	1545883a 	add	r2,r2,r21
2002addc:	003f8906 	br	2002ac04 <__alt_data_end+0xfffecc04>
2002ade0:	24c9883a 	add	r4,r4,r19
2002ade4:	003eee06 	br	2002a9a0 <__alt_data_end+0xfffec9a0>
2002ade8:	8005883a 	mov	r2,r16
2002adec:	003f1706 	br	2002aa4c <__alt_data_end+0xfffeca4c>
2002adf0:	817fe736 	bltu	r16,r5,2002ad90 <__alt_data_end+0xfffecd90>
2002adf4:	280f883a 	mov	r7,r5
2002adf8:	0009883a 	mov	r4,zero
2002adfc:	003fb106 	br	2002acc4 <__alt_data_end+0xfffeccc4>

2002ae00 <__divsi3>:
2002ae00:	20001b16 	blt	r4,zero,2002ae70 <__divsi3+0x70>
2002ae04:	000f883a 	mov	r7,zero
2002ae08:	28001616 	blt	r5,zero,2002ae64 <__divsi3+0x64>
2002ae0c:	200d883a 	mov	r6,r4
2002ae10:	29001a2e 	bgeu	r5,r4,2002ae7c <__divsi3+0x7c>
2002ae14:	00800804 	movi	r2,32
2002ae18:	00c00044 	movi	r3,1
2002ae1c:	00000106 	br	2002ae24 <__divsi3+0x24>
2002ae20:	10000d26 	beq	r2,zero,2002ae58 <__divsi3+0x58>
2002ae24:	294b883a 	add	r5,r5,r5
2002ae28:	10bfffc4 	addi	r2,r2,-1
2002ae2c:	18c7883a 	add	r3,r3,r3
2002ae30:	293ffb36 	bltu	r5,r4,2002ae20 <__alt_data_end+0xfffece20>
2002ae34:	0005883a 	mov	r2,zero
2002ae38:	18000726 	beq	r3,zero,2002ae58 <__divsi3+0x58>
2002ae3c:	0005883a 	mov	r2,zero
2002ae40:	31400236 	bltu	r6,r5,2002ae4c <__divsi3+0x4c>
2002ae44:	314dc83a 	sub	r6,r6,r5
2002ae48:	10c4b03a 	or	r2,r2,r3
2002ae4c:	1806d07a 	srli	r3,r3,1
2002ae50:	280ad07a 	srli	r5,r5,1
2002ae54:	183ffa1e 	bne	r3,zero,2002ae40 <__alt_data_end+0xfffece40>
2002ae58:	38000126 	beq	r7,zero,2002ae60 <__divsi3+0x60>
2002ae5c:	0085c83a 	sub	r2,zero,r2
2002ae60:	f800283a 	ret
2002ae64:	014bc83a 	sub	r5,zero,r5
2002ae68:	39c0005c 	xori	r7,r7,1
2002ae6c:	003fe706 	br	2002ae0c <__alt_data_end+0xfffece0c>
2002ae70:	0109c83a 	sub	r4,zero,r4
2002ae74:	01c00044 	movi	r7,1
2002ae78:	003fe306 	br	2002ae08 <__alt_data_end+0xfffece08>
2002ae7c:	00c00044 	movi	r3,1
2002ae80:	003fee06 	br	2002ae3c <__alt_data_end+0xfffece3c>

2002ae84 <__modsi3>:
2002ae84:	20001716 	blt	r4,zero,2002aee4 <__modsi3+0x60>
2002ae88:	000f883a 	mov	r7,zero
2002ae8c:	2005883a 	mov	r2,r4
2002ae90:	28001216 	blt	r5,zero,2002aedc <__modsi3+0x58>
2002ae94:	2900162e 	bgeu	r5,r4,2002aef0 <__modsi3+0x6c>
2002ae98:	01800804 	movi	r6,32
2002ae9c:	00c00044 	movi	r3,1
2002aea0:	00000106 	br	2002aea8 <__modsi3+0x24>
2002aea4:	30000a26 	beq	r6,zero,2002aed0 <__modsi3+0x4c>
2002aea8:	294b883a 	add	r5,r5,r5
2002aeac:	31bfffc4 	addi	r6,r6,-1
2002aeb0:	18c7883a 	add	r3,r3,r3
2002aeb4:	293ffb36 	bltu	r5,r4,2002aea4 <__alt_data_end+0xfffecea4>
2002aeb8:	18000526 	beq	r3,zero,2002aed0 <__modsi3+0x4c>
2002aebc:	1806d07a 	srli	r3,r3,1
2002aec0:	11400136 	bltu	r2,r5,2002aec8 <__modsi3+0x44>
2002aec4:	1145c83a 	sub	r2,r2,r5
2002aec8:	280ad07a 	srli	r5,r5,1
2002aecc:	183ffb1e 	bne	r3,zero,2002aebc <__alt_data_end+0xfffecebc>
2002aed0:	38000126 	beq	r7,zero,2002aed8 <__modsi3+0x54>
2002aed4:	0085c83a 	sub	r2,zero,r2
2002aed8:	f800283a 	ret
2002aedc:	014bc83a 	sub	r5,zero,r5
2002aee0:	003fec06 	br	2002ae94 <__alt_data_end+0xfffece94>
2002aee4:	0109c83a 	sub	r4,zero,r4
2002aee8:	01c00044 	movi	r7,1
2002aeec:	003fe706 	br	2002ae8c <__alt_data_end+0xfffece8c>
2002aef0:	00c00044 	movi	r3,1
2002aef4:	003ff106 	br	2002aebc <__alt_data_end+0xfffecebc>

2002aef8 <__udivsi3>:
2002aef8:	200d883a 	mov	r6,r4
2002aefc:	2900152e 	bgeu	r5,r4,2002af54 <__udivsi3+0x5c>
2002af00:	28001416 	blt	r5,zero,2002af54 <__udivsi3+0x5c>
2002af04:	00800804 	movi	r2,32
2002af08:	00c00044 	movi	r3,1
2002af0c:	00000206 	br	2002af18 <__udivsi3+0x20>
2002af10:	10000e26 	beq	r2,zero,2002af4c <__udivsi3+0x54>
2002af14:	28000516 	blt	r5,zero,2002af2c <__udivsi3+0x34>
2002af18:	294b883a 	add	r5,r5,r5
2002af1c:	10bfffc4 	addi	r2,r2,-1
2002af20:	18c7883a 	add	r3,r3,r3
2002af24:	293ffa36 	bltu	r5,r4,2002af10 <__alt_data_end+0xfffecf10>
2002af28:	18000826 	beq	r3,zero,2002af4c <__udivsi3+0x54>
2002af2c:	0005883a 	mov	r2,zero
2002af30:	31400236 	bltu	r6,r5,2002af3c <__udivsi3+0x44>
2002af34:	314dc83a 	sub	r6,r6,r5
2002af38:	10c4b03a 	or	r2,r2,r3
2002af3c:	1806d07a 	srli	r3,r3,1
2002af40:	280ad07a 	srli	r5,r5,1
2002af44:	183ffa1e 	bne	r3,zero,2002af30 <__alt_data_end+0xfffecf30>
2002af48:	f800283a 	ret
2002af4c:	0005883a 	mov	r2,zero
2002af50:	f800283a 	ret
2002af54:	00c00044 	movi	r3,1
2002af58:	003ff406 	br	2002af2c <__alt_data_end+0xfffecf2c>

2002af5c <__umodsi3>:
2002af5c:	2005883a 	mov	r2,r4
2002af60:	2900122e 	bgeu	r5,r4,2002afac <__umodsi3+0x50>
2002af64:	28001116 	blt	r5,zero,2002afac <__umodsi3+0x50>
2002af68:	01800804 	movi	r6,32
2002af6c:	00c00044 	movi	r3,1
2002af70:	00000206 	br	2002af7c <__umodsi3+0x20>
2002af74:	30000c26 	beq	r6,zero,2002afa8 <__umodsi3+0x4c>
2002af78:	28000516 	blt	r5,zero,2002af90 <__umodsi3+0x34>
2002af7c:	294b883a 	add	r5,r5,r5
2002af80:	31bfffc4 	addi	r6,r6,-1
2002af84:	18c7883a 	add	r3,r3,r3
2002af88:	293ffa36 	bltu	r5,r4,2002af74 <__alt_data_end+0xfffecf74>
2002af8c:	18000626 	beq	r3,zero,2002afa8 <__umodsi3+0x4c>
2002af90:	1806d07a 	srli	r3,r3,1
2002af94:	11400136 	bltu	r2,r5,2002af9c <__umodsi3+0x40>
2002af98:	1145c83a 	sub	r2,r2,r5
2002af9c:	280ad07a 	srli	r5,r5,1
2002afa0:	183ffb1e 	bne	r3,zero,2002af90 <__alt_data_end+0xfffecf90>
2002afa4:	f800283a 	ret
2002afa8:	f800283a 	ret
2002afac:	00c00044 	movi	r3,1
2002afb0:	003ff706 	br	2002af90 <__alt_data_end+0xfffecf90>

2002afb4 <__adddf3>:
2002afb4:	02c00434 	movhi	r11,16
2002afb8:	5affffc4 	addi	r11,r11,-1
2002afbc:	2806d7fa 	srli	r3,r5,31
2002afc0:	2ad4703a 	and	r10,r5,r11
2002afc4:	3ad2703a 	and	r9,r7,r11
2002afc8:	3804d53a 	srli	r2,r7,20
2002afcc:	3018d77a 	srli	r12,r6,29
2002afd0:	280ad53a 	srli	r5,r5,20
2002afd4:	501490fa 	slli	r10,r10,3
2002afd8:	2010d77a 	srli	r8,r4,29
2002afdc:	481290fa 	slli	r9,r9,3
2002afe0:	380ed7fa 	srli	r7,r7,31
2002afe4:	defffb04 	addi	sp,sp,-20
2002afe8:	dc800215 	stw	r18,8(sp)
2002afec:	dc400115 	stw	r17,4(sp)
2002aff0:	dc000015 	stw	r16,0(sp)
2002aff4:	dfc00415 	stw	ra,16(sp)
2002aff8:	dcc00315 	stw	r19,12(sp)
2002affc:	1c803fcc 	andi	r18,r3,255
2002b000:	2c01ffcc 	andi	r16,r5,2047
2002b004:	5210b03a 	or	r8,r10,r8
2002b008:	202290fa 	slli	r17,r4,3
2002b00c:	1081ffcc 	andi	r2,r2,2047
2002b010:	4b12b03a 	or	r9,r9,r12
2002b014:	300c90fa 	slli	r6,r6,3
2002b018:	91c07526 	beq	r18,r7,2002b1f0 <__adddf3+0x23c>
2002b01c:	8087c83a 	sub	r3,r16,r2
2002b020:	00c0ab0e 	bge	zero,r3,2002b2d0 <__adddf3+0x31c>
2002b024:	10002a1e 	bne	r2,zero,2002b0d0 <__adddf3+0x11c>
2002b028:	4984b03a 	or	r2,r9,r6
2002b02c:	1000961e 	bne	r2,zero,2002b288 <__adddf3+0x2d4>
2002b030:	888001cc 	andi	r2,r17,7
2002b034:	10000726 	beq	r2,zero,2002b054 <__adddf3+0xa0>
2002b038:	888003cc 	andi	r2,r17,15
2002b03c:	00c00104 	movi	r3,4
2002b040:	10c00426 	beq	r2,r3,2002b054 <__adddf3+0xa0>
2002b044:	88c7883a 	add	r3,r17,r3
2002b048:	1c63803a 	cmpltu	r17,r3,r17
2002b04c:	4451883a 	add	r8,r8,r17
2002b050:	1823883a 	mov	r17,r3
2002b054:	4080202c 	andhi	r2,r8,128
2002b058:	10005926 	beq	r2,zero,2002b1c0 <__adddf3+0x20c>
2002b05c:	84000044 	addi	r16,r16,1
2002b060:	0081ffc4 	movi	r2,2047
2002b064:	8080ba26 	beq	r16,r2,2002b350 <__adddf3+0x39c>
2002b068:	00bfe034 	movhi	r2,65408
2002b06c:	10bfffc4 	addi	r2,r2,-1
2002b070:	4090703a 	and	r8,r8,r2
2002b074:	4004977a 	slli	r2,r8,29
2002b078:	4010927a 	slli	r8,r8,9
2002b07c:	8822d0fa 	srli	r17,r17,3
2002b080:	8401ffcc 	andi	r16,r16,2047
2002b084:	4010d33a 	srli	r8,r8,12
2002b088:	9007883a 	mov	r3,r18
2002b08c:	1444b03a 	or	r2,r2,r17
2002b090:	8401ffcc 	andi	r16,r16,2047
2002b094:	8020953a 	slli	r16,r16,20
2002b098:	18c03fcc 	andi	r3,r3,255
2002b09c:	01000434 	movhi	r4,16
2002b0a0:	213fffc4 	addi	r4,r4,-1
2002b0a4:	180697fa 	slli	r3,r3,31
2002b0a8:	4110703a 	and	r8,r8,r4
2002b0ac:	4410b03a 	or	r8,r8,r16
2002b0b0:	40c6b03a 	or	r3,r8,r3
2002b0b4:	dfc00417 	ldw	ra,16(sp)
2002b0b8:	dcc00317 	ldw	r19,12(sp)
2002b0bc:	dc800217 	ldw	r18,8(sp)
2002b0c0:	dc400117 	ldw	r17,4(sp)
2002b0c4:	dc000017 	ldw	r16,0(sp)
2002b0c8:	dec00504 	addi	sp,sp,20
2002b0cc:	f800283a 	ret
2002b0d0:	0081ffc4 	movi	r2,2047
2002b0d4:	80bfd626 	beq	r16,r2,2002b030 <__alt_data_end+0xfffed030>
2002b0d8:	4a402034 	orhi	r9,r9,128
2002b0dc:	00800e04 	movi	r2,56
2002b0e0:	10c09f16 	blt	r2,r3,2002b360 <__adddf3+0x3ac>
2002b0e4:	008007c4 	movi	r2,31
2002b0e8:	10c0c216 	blt	r2,r3,2002b3f4 <__adddf3+0x440>
2002b0ec:	00800804 	movi	r2,32
2002b0f0:	10c5c83a 	sub	r2,r2,r3
2002b0f4:	488a983a 	sll	r5,r9,r2
2002b0f8:	30c8d83a 	srl	r4,r6,r3
2002b0fc:	3084983a 	sll	r2,r6,r2
2002b100:	48c6d83a 	srl	r3,r9,r3
2002b104:	290cb03a 	or	r6,r5,r4
2002b108:	1004c03a 	cmpne	r2,r2,zero
2002b10c:	308cb03a 	or	r6,r6,r2
2002b110:	898dc83a 	sub	r6,r17,r6
2002b114:	89a3803a 	cmpltu	r17,r17,r6
2002b118:	40d1c83a 	sub	r8,r8,r3
2002b11c:	4451c83a 	sub	r8,r8,r17
2002b120:	3023883a 	mov	r17,r6
2002b124:	4080202c 	andhi	r2,r8,128
2002b128:	10002326 	beq	r2,zero,2002b1b8 <__adddf3+0x204>
2002b12c:	04c02034 	movhi	r19,128
2002b130:	9cffffc4 	addi	r19,r19,-1
2002b134:	44e6703a 	and	r19,r8,r19
2002b138:	98007626 	beq	r19,zero,2002b314 <__adddf3+0x360>
2002b13c:	9809883a 	mov	r4,r19
2002b140:	002d5b80 	call	2002d5b8 <__clzsi2>
2002b144:	10fffe04 	addi	r3,r2,-8
2002b148:	010007c4 	movi	r4,31
2002b14c:	20c07716 	blt	r4,r3,2002b32c <__adddf3+0x378>
2002b150:	00800804 	movi	r2,32
2002b154:	10c5c83a 	sub	r2,r2,r3
2002b158:	8884d83a 	srl	r2,r17,r2
2002b15c:	98d0983a 	sll	r8,r19,r3
2002b160:	88e2983a 	sll	r17,r17,r3
2002b164:	1204b03a 	or	r2,r2,r8
2002b168:	1c007416 	blt	r3,r16,2002b33c <__adddf3+0x388>
2002b16c:	1c21c83a 	sub	r16,r3,r16
2002b170:	82000044 	addi	r8,r16,1
2002b174:	00c007c4 	movi	r3,31
2002b178:	1a009116 	blt	r3,r8,2002b3c0 <__adddf3+0x40c>
2002b17c:	00c00804 	movi	r3,32
2002b180:	1a07c83a 	sub	r3,r3,r8
2002b184:	8a08d83a 	srl	r4,r17,r8
2002b188:	88e2983a 	sll	r17,r17,r3
2002b18c:	10c6983a 	sll	r3,r2,r3
2002b190:	1210d83a 	srl	r8,r2,r8
2002b194:	8804c03a 	cmpne	r2,r17,zero
2002b198:	1906b03a 	or	r3,r3,r4
2002b19c:	18a2b03a 	or	r17,r3,r2
2002b1a0:	0021883a 	mov	r16,zero
2002b1a4:	003fa206 	br	2002b030 <__alt_data_end+0xfffed030>
2002b1a8:	1890b03a 	or	r8,r3,r2
2002b1ac:	40017d26 	beq	r8,zero,2002b7a4 <__adddf3+0x7f0>
2002b1b0:	1011883a 	mov	r8,r2
2002b1b4:	1823883a 	mov	r17,r3
2002b1b8:	888001cc 	andi	r2,r17,7
2002b1bc:	103f9e1e 	bne	r2,zero,2002b038 <__alt_data_end+0xfffed038>
2002b1c0:	4004977a 	slli	r2,r8,29
2002b1c4:	8822d0fa 	srli	r17,r17,3
2002b1c8:	4010d0fa 	srli	r8,r8,3
2002b1cc:	9007883a 	mov	r3,r18
2002b1d0:	1444b03a 	or	r2,r2,r17
2002b1d4:	0101ffc4 	movi	r4,2047
2002b1d8:	81002426 	beq	r16,r4,2002b26c <__adddf3+0x2b8>
2002b1dc:	8120703a 	and	r16,r16,r4
2002b1e0:	01000434 	movhi	r4,16
2002b1e4:	213fffc4 	addi	r4,r4,-1
2002b1e8:	4110703a 	and	r8,r8,r4
2002b1ec:	003fa806 	br	2002b090 <__alt_data_end+0xfffed090>
2002b1f0:	8089c83a 	sub	r4,r16,r2
2002b1f4:	01005e0e 	bge	zero,r4,2002b370 <__adddf3+0x3bc>
2002b1f8:	10002b26 	beq	r2,zero,2002b2a8 <__adddf3+0x2f4>
2002b1fc:	0081ffc4 	movi	r2,2047
2002b200:	80bf8b26 	beq	r16,r2,2002b030 <__alt_data_end+0xfffed030>
2002b204:	4a402034 	orhi	r9,r9,128
2002b208:	00800e04 	movi	r2,56
2002b20c:	1100a40e 	bge	r2,r4,2002b4a0 <__adddf3+0x4ec>
2002b210:	498cb03a 	or	r6,r9,r6
2002b214:	300ac03a 	cmpne	r5,r6,zero
2002b218:	0013883a 	mov	r9,zero
2002b21c:	2c4b883a 	add	r5,r5,r17
2002b220:	2c63803a 	cmpltu	r17,r5,r17
2002b224:	4a11883a 	add	r8,r9,r8
2002b228:	8a11883a 	add	r8,r17,r8
2002b22c:	2823883a 	mov	r17,r5
2002b230:	4080202c 	andhi	r2,r8,128
2002b234:	103fe026 	beq	r2,zero,2002b1b8 <__alt_data_end+0xfffed1b8>
2002b238:	84000044 	addi	r16,r16,1
2002b23c:	0081ffc4 	movi	r2,2047
2002b240:	8080d226 	beq	r16,r2,2002b58c <__adddf3+0x5d8>
2002b244:	00bfe034 	movhi	r2,65408
2002b248:	10bfffc4 	addi	r2,r2,-1
2002b24c:	4090703a 	and	r8,r8,r2
2002b250:	880ad07a 	srli	r5,r17,1
2002b254:	400897fa 	slli	r4,r8,31
2002b258:	88c0004c 	andi	r3,r17,1
2002b25c:	28e2b03a 	or	r17,r5,r3
2002b260:	4010d07a 	srli	r8,r8,1
2002b264:	2462b03a 	or	r17,r4,r17
2002b268:	003f7106 	br	2002b030 <__alt_data_end+0xfffed030>
2002b26c:	4088b03a 	or	r4,r8,r2
2002b270:	20014526 	beq	r4,zero,2002b788 <__adddf3+0x7d4>
2002b274:	01000434 	movhi	r4,16
2002b278:	42000234 	orhi	r8,r8,8
2002b27c:	213fffc4 	addi	r4,r4,-1
2002b280:	4110703a 	and	r8,r8,r4
2002b284:	003f8206 	br	2002b090 <__alt_data_end+0xfffed090>
2002b288:	18ffffc4 	addi	r3,r3,-1
2002b28c:	1800491e 	bne	r3,zero,2002b3b4 <__adddf3+0x400>
2002b290:	898bc83a 	sub	r5,r17,r6
2002b294:	8963803a 	cmpltu	r17,r17,r5
2002b298:	4251c83a 	sub	r8,r8,r9
2002b29c:	4451c83a 	sub	r8,r8,r17
2002b2a0:	2823883a 	mov	r17,r5
2002b2a4:	003f9f06 	br	2002b124 <__alt_data_end+0xfffed124>
2002b2a8:	4984b03a 	or	r2,r9,r6
2002b2ac:	103f6026 	beq	r2,zero,2002b030 <__alt_data_end+0xfffed030>
2002b2b0:	213fffc4 	addi	r4,r4,-1
2002b2b4:	2000931e 	bne	r4,zero,2002b504 <__adddf3+0x550>
2002b2b8:	898d883a 	add	r6,r17,r6
2002b2bc:	3463803a 	cmpltu	r17,r6,r17
2002b2c0:	4251883a 	add	r8,r8,r9
2002b2c4:	8a11883a 	add	r8,r17,r8
2002b2c8:	3023883a 	mov	r17,r6
2002b2cc:	003fd806 	br	2002b230 <__alt_data_end+0xfffed230>
2002b2d0:	1800541e 	bne	r3,zero,2002b424 <__adddf3+0x470>
2002b2d4:	80800044 	addi	r2,r16,1
2002b2d8:	1081ffcc 	andi	r2,r2,2047
2002b2dc:	00c00044 	movi	r3,1
2002b2e0:	1880a00e 	bge	r3,r2,2002b564 <__adddf3+0x5b0>
2002b2e4:	8989c83a 	sub	r4,r17,r6
2002b2e8:	8905803a 	cmpltu	r2,r17,r4
2002b2ec:	4267c83a 	sub	r19,r8,r9
2002b2f0:	98a7c83a 	sub	r19,r19,r2
2002b2f4:	9880202c 	andhi	r2,r19,128
2002b2f8:	10006326 	beq	r2,zero,2002b488 <__adddf3+0x4d4>
2002b2fc:	3463c83a 	sub	r17,r6,r17
2002b300:	4a07c83a 	sub	r3,r9,r8
2002b304:	344d803a 	cmpltu	r6,r6,r17
2002b308:	19a7c83a 	sub	r19,r3,r6
2002b30c:	3825883a 	mov	r18,r7
2002b310:	983f8a1e 	bne	r19,zero,2002b13c <__alt_data_end+0xfffed13c>
2002b314:	8809883a 	mov	r4,r17
2002b318:	002d5b80 	call	2002d5b8 <__clzsi2>
2002b31c:	10800804 	addi	r2,r2,32
2002b320:	10fffe04 	addi	r3,r2,-8
2002b324:	010007c4 	movi	r4,31
2002b328:	20ff890e 	bge	r4,r3,2002b150 <__alt_data_end+0xfffed150>
2002b32c:	10bff604 	addi	r2,r2,-40
2002b330:	8884983a 	sll	r2,r17,r2
2002b334:	0023883a 	mov	r17,zero
2002b338:	1c3f8c0e 	bge	r3,r16,2002b16c <__alt_data_end+0xfffed16c>
2002b33c:	023fe034 	movhi	r8,65408
2002b340:	423fffc4 	addi	r8,r8,-1
2002b344:	80e1c83a 	sub	r16,r16,r3
2002b348:	1210703a 	and	r8,r2,r8
2002b34c:	003f3806 	br	2002b030 <__alt_data_end+0xfffed030>
2002b350:	9007883a 	mov	r3,r18
2002b354:	0011883a 	mov	r8,zero
2002b358:	0005883a 	mov	r2,zero
2002b35c:	003f4c06 	br	2002b090 <__alt_data_end+0xfffed090>
2002b360:	498cb03a 	or	r6,r9,r6
2002b364:	300cc03a 	cmpne	r6,r6,zero
2002b368:	0007883a 	mov	r3,zero
2002b36c:	003f6806 	br	2002b110 <__alt_data_end+0xfffed110>
2002b370:	20009c1e 	bne	r4,zero,2002b5e4 <__adddf3+0x630>
2002b374:	80800044 	addi	r2,r16,1
2002b378:	1141ffcc 	andi	r5,r2,2047
2002b37c:	01000044 	movi	r4,1
2002b380:	2140670e 	bge	r4,r5,2002b520 <__adddf3+0x56c>
2002b384:	0101ffc4 	movi	r4,2047
2002b388:	11007f26 	beq	r2,r4,2002b588 <__adddf3+0x5d4>
2002b38c:	898d883a 	add	r6,r17,r6
2002b390:	4247883a 	add	r3,r8,r9
2002b394:	3451803a 	cmpltu	r8,r6,r17
2002b398:	40d1883a 	add	r8,r8,r3
2002b39c:	402297fa 	slli	r17,r8,31
2002b3a0:	300cd07a 	srli	r6,r6,1
2002b3a4:	4010d07a 	srli	r8,r8,1
2002b3a8:	1021883a 	mov	r16,r2
2002b3ac:	89a2b03a 	or	r17,r17,r6
2002b3b0:	003f1f06 	br	2002b030 <__alt_data_end+0xfffed030>
2002b3b4:	0081ffc4 	movi	r2,2047
2002b3b8:	80bf481e 	bne	r16,r2,2002b0dc <__alt_data_end+0xfffed0dc>
2002b3bc:	003f1c06 	br	2002b030 <__alt_data_end+0xfffed030>
2002b3c0:	843ff844 	addi	r16,r16,-31
2002b3c4:	01000804 	movi	r4,32
2002b3c8:	1406d83a 	srl	r3,r2,r16
2002b3cc:	41005026 	beq	r8,r4,2002b510 <__adddf3+0x55c>
2002b3d0:	01001004 	movi	r4,64
2002b3d4:	2211c83a 	sub	r8,r4,r8
2002b3d8:	1204983a 	sll	r2,r2,r8
2002b3dc:	88a2b03a 	or	r17,r17,r2
2002b3e0:	8822c03a 	cmpne	r17,r17,zero
2002b3e4:	1c62b03a 	or	r17,r3,r17
2002b3e8:	0011883a 	mov	r8,zero
2002b3ec:	0021883a 	mov	r16,zero
2002b3f0:	003f7106 	br	2002b1b8 <__alt_data_end+0xfffed1b8>
2002b3f4:	193ff804 	addi	r4,r3,-32
2002b3f8:	00800804 	movi	r2,32
2002b3fc:	4908d83a 	srl	r4,r9,r4
2002b400:	18804526 	beq	r3,r2,2002b518 <__adddf3+0x564>
2002b404:	00801004 	movi	r2,64
2002b408:	10c5c83a 	sub	r2,r2,r3
2002b40c:	4886983a 	sll	r3,r9,r2
2002b410:	198cb03a 	or	r6,r3,r6
2002b414:	300cc03a 	cmpne	r6,r6,zero
2002b418:	218cb03a 	or	r6,r4,r6
2002b41c:	0007883a 	mov	r3,zero
2002b420:	003f3b06 	br	2002b110 <__alt_data_end+0xfffed110>
2002b424:	80002a26 	beq	r16,zero,2002b4d0 <__adddf3+0x51c>
2002b428:	0101ffc4 	movi	r4,2047
2002b42c:	11006826 	beq	r2,r4,2002b5d0 <__adddf3+0x61c>
2002b430:	00c7c83a 	sub	r3,zero,r3
2002b434:	42002034 	orhi	r8,r8,128
2002b438:	01000e04 	movi	r4,56
2002b43c:	20c07c16 	blt	r4,r3,2002b630 <__adddf3+0x67c>
2002b440:	010007c4 	movi	r4,31
2002b444:	20c0da16 	blt	r4,r3,2002b7b0 <__adddf3+0x7fc>
2002b448:	01000804 	movi	r4,32
2002b44c:	20c9c83a 	sub	r4,r4,r3
2002b450:	4114983a 	sll	r10,r8,r4
2002b454:	88cad83a 	srl	r5,r17,r3
2002b458:	8908983a 	sll	r4,r17,r4
2002b45c:	40c6d83a 	srl	r3,r8,r3
2002b460:	5162b03a 	or	r17,r10,r5
2002b464:	2008c03a 	cmpne	r4,r4,zero
2002b468:	8922b03a 	or	r17,r17,r4
2002b46c:	3463c83a 	sub	r17,r6,r17
2002b470:	48c7c83a 	sub	r3,r9,r3
2002b474:	344d803a 	cmpltu	r6,r6,r17
2002b478:	1991c83a 	sub	r8,r3,r6
2002b47c:	1021883a 	mov	r16,r2
2002b480:	3825883a 	mov	r18,r7
2002b484:	003f2706 	br	2002b124 <__alt_data_end+0xfffed124>
2002b488:	24d0b03a 	or	r8,r4,r19
2002b48c:	40001b1e 	bne	r8,zero,2002b4fc <__adddf3+0x548>
2002b490:	0005883a 	mov	r2,zero
2002b494:	0007883a 	mov	r3,zero
2002b498:	0021883a 	mov	r16,zero
2002b49c:	003f4d06 	br	2002b1d4 <__alt_data_end+0xfffed1d4>
2002b4a0:	008007c4 	movi	r2,31
2002b4a4:	11003c16 	blt	r2,r4,2002b598 <__adddf3+0x5e4>
2002b4a8:	00800804 	movi	r2,32
2002b4ac:	1105c83a 	sub	r2,r2,r4
2002b4b0:	488e983a 	sll	r7,r9,r2
2002b4b4:	310ad83a 	srl	r5,r6,r4
2002b4b8:	3084983a 	sll	r2,r6,r2
2002b4bc:	4912d83a 	srl	r9,r9,r4
2002b4c0:	394ab03a 	or	r5,r7,r5
2002b4c4:	1004c03a 	cmpne	r2,r2,zero
2002b4c8:	288ab03a 	or	r5,r5,r2
2002b4cc:	003f5306 	br	2002b21c <__alt_data_end+0xfffed21c>
2002b4d0:	4448b03a 	or	r4,r8,r17
2002b4d4:	20003e26 	beq	r4,zero,2002b5d0 <__adddf3+0x61c>
2002b4d8:	00c6303a 	nor	r3,zero,r3
2002b4dc:	18003a1e 	bne	r3,zero,2002b5c8 <__adddf3+0x614>
2002b4e0:	3463c83a 	sub	r17,r6,r17
2002b4e4:	4a07c83a 	sub	r3,r9,r8
2002b4e8:	344d803a 	cmpltu	r6,r6,r17
2002b4ec:	1991c83a 	sub	r8,r3,r6
2002b4f0:	1021883a 	mov	r16,r2
2002b4f4:	3825883a 	mov	r18,r7
2002b4f8:	003f0a06 	br	2002b124 <__alt_data_end+0xfffed124>
2002b4fc:	2023883a 	mov	r17,r4
2002b500:	003f0d06 	br	2002b138 <__alt_data_end+0xfffed138>
2002b504:	0081ffc4 	movi	r2,2047
2002b508:	80bf3f1e 	bne	r16,r2,2002b208 <__alt_data_end+0xfffed208>
2002b50c:	003ec806 	br	2002b030 <__alt_data_end+0xfffed030>
2002b510:	0005883a 	mov	r2,zero
2002b514:	003fb106 	br	2002b3dc <__alt_data_end+0xfffed3dc>
2002b518:	0007883a 	mov	r3,zero
2002b51c:	003fbc06 	br	2002b410 <__alt_data_end+0xfffed410>
2002b520:	4444b03a 	or	r2,r8,r17
2002b524:	8000871e 	bne	r16,zero,2002b744 <__adddf3+0x790>
2002b528:	1000ba26 	beq	r2,zero,2002b814 <__adddf3+0x860>
2002b52c:	4984b03a 	or	r2,r9,r6
2002b530:	103ebf26 	beq	r2,zero,2002b030 <__alt_data_end+0xfffed030>
2002b534:	8985883a 	add	r2,r17,r6
2002b538:	4247883a 	add	r3,r8,r9
2002b53c:	1451803a 	cmpltu	r8,r2,r17
2002b540:	40d1883a 	add	r8,r8,r3
2002b544:	40c0202c 	andhi	r3,r8,128
2002b548:	1023883a 	mov	r17,r2
2002b54c:	183f1a26 	beq	r3,zero,2002b1b8 <__alt_data_end+0xfffed1b8>
2002b550:	00bfe034 	movhi	r2,65408
2002b554:	10bfffc4 	addi	r2,r2,-1
2002b558:	2021883a 	mov	r16,r4
2002b55c:	4090703a 	and	r8,r8,r2
2002b560:	003eb306 	br	2002b030 <__alt_data_end+0xfffed030>
2002b564:	4444b03a 	or	r2,r8,r17
2002b568:	8000291e 	bne	r16,zero,2002b610 <__adddf3+0x65c>
2002b56c:	10004b1e 	bne	r2,zero,2002b69c <__adddf3+0x6e8>
2002b570:	4990b03a 	or	r8,r9,r6
2002b574:	40008b26 	beq	r8,zero,2002b7a4 <__adddf3+0x7f0>
2002b578:	4811883a 	mov	r8,r9
2002b57c:	3023883a 	mov	r17,r6
2002b580:	3825883a 	mov	r18,r7
2002b584:	003eaa06 	br	2002b030 <__alt_data_end+0xfffed030>
2002b588:	1021883a 	mov	r16,r2
2002b58c:	0011883a 	mov	r8,zero
2002b590:	0005883a 	mov	r2,zero
2002b594:	003f0f06 	br	2002b1d4 <__alt_data_end+0xfffed1d4>
2002b598:	217ff804 	addi	r5,r4,-32
2002b59c:	00800804 	movi	r2,32
2002b5a0:	494ad83a 	srl	r5,r9,r5
2002b5a4:	20807d26 	beq	r4,r2,2002b79c <__adddf3+0x7e8>
2002b5a8:	00801004 	movi	r2,64
2002b5ac:	1109c83a 	sub	r4,r2,r4
2002b5b0:	4912983a 	sll	r9,r9,r4
2002b5b4:	498cb03a 	or	r6,r9,r6
2002b5b8:	300cc03a 	cmpne	r6,r6,zero
2002b5bc:	298ab03a 	or	r5,r5,r6
2002b5c0:	0013883a 	mov	r9,zero
2002b5c4:	003f1506 	br	2002b21c <__alt_data_end+0xfffed21c>
2002b5c8:	0101ffc4 	movi	r4,2047
2002b5cc:	113f9a1e 	bne	r2,r4,2002b438 <__alt_data_end+0xfffed438>
2002b5d0:	4811883a 	mov	r8,r9
2002b5d4:	3023883a 	mov	r17,r6
2002b5d8:	1021883a 	mov	r16,r2
2002b5dc:	3825883a 	mov	r18,r7
2002b5e0:	003e9306 	br	2002b030 <__alt_data_end+0xfffed030>
2002b5e4:	8000161e 	bne	r16,zero,2002b640 <__adddf3+0x68c>
2002b5e8:	444ab03a 	or	r5,r8,r17
2002b5ec:	28005126 	beq	r5,zero,2002b734 <__adddf3+0x780>
2002b5f0:	0108303a 	nor	r4,zero,r4
2002b5f4:	20004d1e 	bne	r4,zero,2002b72c <__adddf3+0x778>
2002b5f8:	89a3883a 	add	r17,r17,r6
2002b5fc:	4253883a 	add	r9,r8,r9
2002b600:	898d803a 	cmpltu	r6,r17,r6
2002b604:	3251883a 	add	r8,r6,r9
2002b608:	1021883a 	mov	r16,r2
2002b60c:	003f0806 	br	2002b230 <__alt_data_end+0xfffed230>
2002b610:	1000301e 	bne	r2,zero,2002b6d4 <__adddf3+0x720>
2002b614:	4984b03a 	or	r2,r9,r6
2002b618:	10007126 	beq	r2,zero,2002b7e0 <__adddf3+0x82c>
2002b61c:	4811883a 	mov	r8,r9
2002b620:	3023883a 	mov	r17,r6
2002b624:	3825883a 	mov	r18,r7
2002b628:	0401ffc4 	movi	r16,2047
2002b62c:	003e8006 	br	2002b030 <__alt_data_end+0xfffed030>
2002b630:	4462b03a 	or	r17,r8,r17
2002b634:	8822c03a 	cmpne	r17,r17,zero
2002b638:	0007883a 	mov	r3,zero
2002b63c:	003f8b06 	br	2002b46c <__alt_data_end+0xfffed46c>
2002b640:	0141ffc4 	movi	r5,2047
2002b644:	11403b26 	beq	r2,r5,2002b734 <__adddf3+0x780>
2002b648:	0109c83a 	sub	r4,zero,r4
2002b64c:	42002034 	orhi	r8,r8,128
2002b650:	01400e04 	movi	r5,56
2002b654:	29006716 	blt	r5,r4,2002b7f4 <__adddf3+0x840>
2002b658:	014007c4 	movi	r5,31
2002b65c:	29007016 	blt	r5,r4,2002b820 <__adddf3+0x86c>
2002b660:	01400804 	movi	r5,32
2002b664:	290bc83a 	sub	r5,r5,r4
2002b668:	4154983a 	sll	r10,r8,r5
2002b66c:	890ed83a 	srl	r7,r17,r4
2002b670:	894a983a 	sll	r5,r17,r5
2002b674:	4108d83a 	srl	r4,r8,r4
2002b678:	51e2b03a 	or	r17,r10,r7
2002b67c:	280ac03a 	cmpne	r5,r5,zero
2002b680:	8962b03a 	or	r17,r17,r5
2002b684:	89a3883a 	add	r17,r17,r6
2002b688:	2253883a 	add	r9,r4,r9
2002b68c:	898d803a 	cmpltu	r6,r17,r6
2002b690:	3251883a 	add	r8,r6,r9
2002b694:	1021883a 	mov	r16,r2
2002b698:	003ee506 	br	2002b230 <__alt_data_end+0xfffed230>
2002b69c:	4984b03a 	or	r2,r9,r6
2002b6a0:	103e6326 	beq	r2,zero,2002b030 <__alt_data_end+0xfffed030>
2002b6a4:	8987c83a 	sub	r3,r17,r6
2002b6a8:	88c9803a 	cmpltu	r4,r17,r3
2002b6ac:	4245c83a 	sub	r2,r8,r9
2002b6b0:	1105c83a 	sub	r2,r2,r4
2002b6b4:	1100202c 	andhi	r4,r2,128
2002b6b8:	203ebb26 	beq	r4,zero,2002b1a8 <__alt_data_end+0xfffed1a8>
2002b6bc:	3463c83a 	sub	r17,r6,r17
2002b6c0:	4a07c83a 	sub	r3,r9,r8
2002b6c4:	344d803a 	cmpltu	r6,r6,r17
2002b6c8:	1991c83a 	sub	r8,r3,r6
2002b6cc:	3825883a 	mov	r18,r7
2002b6d0:	003e5706 	br	2002b030 <__alt_data_end+0xfffed030>
2002b6d4:	4984b03a 	or	r2,r9,r6
2002b6d8:	10002e26 	beq	r2,zero,2002b794 <__adddf3+0x7e0>
2002b6dc:	4004d0fa 	srli	r2,r8,3
2002b6e0:	8822d0fa 	srli	r17,r17,3
2002b6e4:	4010977a 	slli	r8,r8,29
2002b6e8:	10c0022c 	andhi	r3,r2,8
2002b6ec:	4462b03a 	or	r17,r8,r17
2002b6f0:	18000826 	beq	r3,zero,2002b714 <__adddf3+0x760>
2002b6f4:	4808d0fa 	srli	r4,r9,3
2002b6f8:	20c0022c 	andhi	r3,r4,8
2002b6fc:	1800051e 	bne	r3,zero,2002b714 <__adddf3+0x760>
2002b700:	300cd0fa 	srli	r6,r6,3
2002b704:	4806977a 	slli	r3,r9,29
2002b708:	2005883a 	mov	r2,r4
2002b70c:	3825883a 	mov	r18,r7
2002b710:	19a2b03a 	or	r17,r3,r6
2002b714:	8810d77a 	srli	r8,r17,29
2002b718:	100490fa 	slli	r2,r2,3
2002b71c:	882290fa 	slli	r17,r17,3
2002b720:	0401ffc4 	movi	r16,2047
2002b724:	4090b03a 	or	r8,r8,r2
2002b728:	003e4106 	br	2002b030 <__alt_data_end+0xfffed030>
2002b72c:	0141ffc4 	movi	r5,2047
2002b730:	117fc71e 	bne	r2,r5,2002b650 <__alt_data_end+0xfffed650>
2002b734:	4811883a 	mov	r8,r9
2002b738:	3023883a 	mov	r17,r6
2002b73c:	1021883a 	mov	r16,r2
2002b740:	003e3b06 	br	2002b030 <__alt_data_end+0xfffed030>
2002b744:	10002f26 	beq	r2,zero,2002b804 <__adddf3+0x850>
2002b748:	4984b03a 	or	r2,r9,r6
2002b74c:	10001126 	beq	r2,zero,2002b794 <__adddf3+0x7e0>
2002b750:	4004d0fa 	srli	r2,r8,3
2002b754:	8822d0fa 	srli	r17,r17,3
2002b758:	4010977a 	slli	r8,r8,29
2002b75c:	10c0022c 	andhi	r3,r2,8
2002b760:	4462b03a 	or	r17,r8,r17
2002b764:	183feb26 	beq	r3,zero,2002b714 <__alt_data_end+0xfffed714>
2002b768:	4808d0fa 	srli	r4,r9,3
2002b76c:	20c0022c 	andhi	r3,r4,8
2002b770:	183fe81e 	bne	r3,zero,2002b714 <__alt_data_end+0xfffed714>
2002b774:	300cd0fa 	srli	r6,r6,3
2002b778:	4806977a 	slli	r3,r9,29
2002b77c:	2005883a 	mov	r2,r4
2002b780:	19a2b03a 	or	r17,r3,r6
2002b784:	003fe306 	br	2002b714 <__alt_data_end+0xfffed714>
2002b788:	0011883a 	mov	r8,zero
2002b78c:	0005883a 	mov	r2,zero
2002b790:	003e3f06 	br	2002b090 <__alt_data_end+0xfffed090>
2002b794:	0401ffc4 	movi	r16,2047
2002b798:	003e2506 	br	2002b030 <__alt_data_end+0xfffed030>
2002b79c:	0013883a 	mov	r9,zero
2002b7a0:	003f8406 	br	2002b5b4 <__alt_data_end+0xfffed5b4>
2002b7a4:	0005883a 	mov	r2,zero
2002b7a8:	0007883a 	mov	r3,zero
2002b7ac:	003e8906 	br	2002b1d4 <__alt_data_end+0xfffed1d4>
2002b7b0:	197ff804 	addi	r5,r3,-32
2002b7b4:	01000804 	movi	r4,32
2002b7b8:	414ad83a 	srl	r5,r8,r5
2002b7bc:	19002426 	beq	r3,r4,2002b850 <__adddf3+0x89c>
2002b7c0:	01001004 	movi	r4,64
2002b7c4:	20c7c83a 	sub	r3,r4,r3
2002b7c8:	40c6983a 	sll	r3,r8,r3
2002b7cc:	1c46b03a 	or	r3,r3,r17
2002b7d0:	1806c03a 	cmpne	r3,r3,zero
2002b7d4:	28e2b03a 	or	r17,r5,r3
2002b7d8:	0007883a 	mov	r3,zero
2002b7dc:	003f2306 	br	2002b46c <__alt_data_end+0xfffed46c>
2002b7e0:	0007883a 	mov	r3,zero
2002b7e4:	5811883a 	mov	r8,r11
2002b7e8:	00bfffc4 	movi	r2,-1
2002b7ec:	0401ffc4 	movi	r16,2047
2002b7f0:	003e7806 	br	2002b1d4 <__alt_data_end+0xfffed1d4>
2002b7f4:	4462b03a 	or	r17,r8,r17
2002b7f8:	8822c03a 	cmpne	r17,r17,zero
2002b7fc:	0009883a 	mov	r4,zero
2002b800:	003fa006 	br	2002b684 <__alt_data_end+0xfffed684>
2002b804:	4811883a 	mov	r8,r9
2002b808:	3023883a 	mov	r17,r6
2002b80c:	0401ffc4 	movi	r16,2047
2002b810:	003e0706 	br	2002b030 <__alt_data_end+0xfffed030>
2002b814:	4811883a 	mov	r8,r9
2002b818:	3023883a 	mov	r17,r6
2002b81c:	003e0406 	br	2002b030 <__alt_data_end+0xfffed030>
2002b820:	21fff804 	addi	r7,r4,-32
2002b824:	01400804 	movi	r5,32
2002b828:	41ced83a 	srl	r7,r8,r7
2002b82c:	21400a26 	beq	r4,r5,2002b858 <__adddf3+0x8a4>
2002b830:	01401004 	movi	r5,64
2002b834:	2909c83a 	sub	r4,r5,r4
2002b838:	4108983a 	sll	r4,r8,r4
2002b83c:	2448b03a 	or	r4,r4,r17
2002b840:	2008c03a 	cmpne	r4,r4,zero
2002b844:	3922b03a 	or	r17,r7,r4
2002b848:	0009883a 	mov	r4,zero
2002b84c:	003f8d06 	br	2002b684 <__alt_data_end+0xfffed684>
2002b850:	0007883a 	mov	r3,zero
2002b854:	003fdd06 	br	2002b7cc <__alt_data_end+0xfffed7cc>
2002b858:	0009883a 	mov	r4,zero
2002b85c:	003ff706 	br	2002b83c <__alt_data_end+0xfffed83c>

2002b860 <__divdf3>:
2002b860:	defff204 	addi	sp,sp,-56
2002b864:	dd400915 	stw	r21,36(sp)
2002b868:	282ad53a 	srli	r21,r5,20
2002b86c:	dd000815 	stw	r20,32(sp)
2002b870:	2828d7fa 	srli	r20,r5,31
2002b874:	dc000415 	stw	r16,16(sp)
2002b878:	04000434 	movhi	r16,16
2002b87c:	df000c15 	stw	fp,48(sp)
2002b880:	843fffc4 	addi	r16,r16,-1
2002b884:	dfc00d15 	stw	ra,52(sp)
2002b888:	ddc00b15 	stw	r23,44(sp)
2002b88c:	dd800a15 	stw	r22,40(sp)
2002b890:	dcc00715 	stw	r19,28(sp)
2002b894:	dc800615 	stw	r18,24(sp)
2002b898:	dc400515 	stw	r17,20(sp)
2002b89c:	ad41ffcc 	andi	r21,r21,2047
2002b8a0:	2c20703a 	and	r16,r5,r16
2002b8a4:	a7003fcc 	andi	fp,r20,255
2002b8a8:	a8006126 	beq	r21,zero,2002ba30 <__divdf3+0x1d0>
2002b8ac:	0081ffc4 	movi	r2,2047
2002b8b0:	2025883a 	mov	r18,r4
2002b8b4:	a8803726 	beq	r21,r2,2002b994 <__divdf3+0x134>
2002b8b8:	80800434 	orhi	r2,r16,16
2002b8bc:	100490fa 	slli	r2,r2,3
2002b8c0:	2020d77a 	srli	r16,r4,29
2002b8c4:	202490fa 	slli	r18,r4,3
2002b8c8:	ad7f0044 	addi	r21,r21,-1023
2002b8cc:	80a0b03a 	or	r16,r16,r2
2002b8d0:	0027883a 	mov	r19,zero
2002b8d4:	0013883a 	mov	r9,zero
2002b8d8:	3804d53a 	srli	r2,r7,20
2002b8dc:	382cd7fa 	srli	r22,r7,31
2002b8e0:	04400434 	movhi	r17,16
2002b8e4:	8c7fffc4 	addi	r17,r17,-1
2002b8e8:	1081ffcc 	andi	r2,r2,2047
2002b8ec:	3011883a 	mov	r8,r6
2002b8f0:	3c62703a 	and	r17,r7,r17
2002b8f4:	b5c03fcc 	andi	r23,r22,255
2002b8f8:	10006c26 	beq	r2,zero,2002baac <__divdf3+0x24c>
2002b8fc:	00c1ffc4 	movi	r3,2047
2002b900:	10c06426 	beq	r2,r3,2002ba94 <__divdf3+0x234>
2002b904:	88c00434 	orhi	r3,r17,16
2002b908:	180690fa 	slli	r3,r3,3
2002b90c:	3022d77a 	srli	r17,r6,29
2002b910:	301090fa 	slli	r8,r6,3
2002b914:	10bf0044 	addi	r2,r2,-1023
2002b918:	88e2b03a 	or	r17,r17,r3
2002b91c:	000f883a 	mov	r7,zero
2002b920:	a58cf03a 	xor	r6,r20,r22
2002b924:	3cc8b03a 	or	r4,r7,r19
2002b928:	a8abc83a 	sub	r21,r21,r2
2002b92c:	008003c4 	movi	r2,15
2002b930:	3007883a 	mov	r3,r6
2002b934:	34c03fcc 	andi	r19,r6,255
2002b938:	11009036 	bltu	r2,r4,2002bb7c <__divdf3+0x31c>
2002b93c:	200890ba 	slli	r4,r4,2
2002b940:	008800f4 	movhi	r2,8195
2002b944:	10ae5504 	addi	r2,r2,-18092
2002b948:	2089883a 	add	r4,r4,r2
2002b94c:	20800017 	ldw	r2,0(r4)
2002b950:	1000683a 	jmp	r2
2002b954:	2002bb7c 	xorhi	zero,r4,2797
2002b958:	2002b9cc 	andi	zero,r4,2791
2002b95c:	2002bb6c 	andhi	zero,r4,2797
2002b960:	2002b9c0 	call	22002b9c <__alt_data_end+0x1fc4b9c>
2002b964:	2002bb6c 	andhi	zero,r4,2797
2002b968:	2002bb40 	call	22002bb4 <__alt_data_end+0x1fc4bb4>
2002b96c:	2002bb6c 	andhi	zero,r4,2797
2002b970:	2002b9c0 	call	22002b9c <__alt_data_end+0x1fc4b9c>
2002b974:	2002b9cc 	andi	zero,r4,2791
2002b978:	2002b9cc 	andi	zero,r4,2791
2002b97c:	2002bb40 	call	22002bb4 <__alt_data_end+0x1fc4bb4>
2002b980:	2002b9c0 	call	22002b9c <__alt_data_end+0x1fc4b9c>
2002b984:	2002b9b0 	cmpltui	zero,r4,2790
2002b988:	2002b9b0 	cmpltui	zero,r4,2790
2002b98c:	2002b9b0 	cmpltui	zero,r4,2790
2002b990:	2002be60 	cmpeqi	zero,r4,2809
2002b994:	2404b03a 	or	r2,r4,r16
2002b998:	1000661e 	bne	r2,zero,2002bb34 <__divdf3+0x2d4>
2002b99c:	04c00204 	movi	r19,8
2002b9a0:	0021883a 	mov	r16,zero
2002b9a4:	0025883a 	mov	r18,zero
2002b9a8:	02400084 	movi	r9,2
2002b9ac:	003fca06 	br	2002b8d8 <__alt_data_end+0xfffed8d8>
2002b9b0:	8023883a 	mov	r17,r16
2002b9b4:	9011883a 	mov	r8,r18
2002b9b8:	e02f883a 	mov	r23,fp
2002b9bc:	480f883a 	mov	r7,r9
2002b9c0:	00800084 	movi	r2,2
2002b9c4:	3881311e 	bne	r7,r2,2002be8c <__divdf3+0x62c>
2002b9c8:	b827883a 	mov	r19,r23
2002b9cc:	98c0004c 	andi	r3,r19,1
2002b9d0:	0081ffc4 	movi	r2,2047
2002b9d4:	000b883a 	mov	r5,zero
2002b9d8:	0025883a 	mov	r18,zero
2002b9dc:	1004953a 	slli	r2,r2,20
2002b9e0:	18c03fcc 	andi	r3,r3,255
2002b9e4:	04400434 	movhi	r17,16
2002b9e8:	8c7fffc4 	addi	r17,r17,-1
2002b9ec:	180697fa 	slli	r3,r3,31
2002b9f0:	2c4a703a 	and	r5,r5,r17
2002b9f4:	288ab03a 	or	r5,r5,r2
2002b9f8:	28c6b03a 	or	r3,r5,r3
2002b9fc:	9005883a 	mov	r2,r18
2002ba00:	dfc00d17 	ldw	ra,52(sp)
2002ba04:	df000c17 	ldw	fp,48(sp)
2002ba08:	ddc00b17 	ldw	r23,44(sp)
2002ba0c:	dd800a17 	ldw	r22,40(sp)
2002ba10:	dd400917 	ldw	r21,36(sp)
2002ba14:	dd000817 	ldw	r20,32(sp)
2002ba18:	dcc00717 	ldw	r19,28(sp)
2002ba1c:	dc800617 	ldw	r18,24(sp)
2002ba20:	dc400517 	ldw	r17,20(sp)
2002ba24:	dc000417 	ldw	r16,16(sp)
2002ba28:	dec00e04 	addi	sp,sp,56
2002ba2c:	f800283a 	ret
2002ba30:	2404b03a 	or	r2,r4,r16
2002ba34:	2027883a 	mov	r19,r4
2002ba38:	10003926 	beq	r2,zero,2002bb20 <__divdf3+0x2c0>
2002ba3c:	80012e26 	beq	r16,zero,2002bef8 <__divdf3+0x698>
2002ba40:	8009883a 	mov	r4,r16
2002ba44:	d9800315 	stw	r6,12(sp)
2002ba48:	d9c00215 	stw	r7,8(sp)
2002ba4c:	002d5b80 	call	2002d5b8 <__clzsi2>
2002ba50:	d9800317 	ldw	r6,12(sp)
2002ba54:	d9c00217 	ldw	r7,8(sp)
2002ba58:	113ffd44 	addi	r4,r2,-11
2002ba5c:	00c00704 	movi	r3,28
2002ba60:	19012116 	blt	r3,r4,2002bee8 <__divdf3+0x688>
2002ba64:	00c00744 	movi	r3,29
2002ba68:	147ffe04 	addi	r17,r2,-8
2002ba6c:	1907c83a 	sub	r3,r3,r4
2002ba70:	8460983a 	sll	r16,r16,r17
2002ba74:	98c6d83a 	srl	r3,r19,r3
2002ba78:	9c64983a 	sll	r18,r19,r17
2002ba7c:	1c20b03a 	or	r16,r3,r16
2002ba80:	1080fcc4 	addi	r2,r2,1011
2002ba84:	00abc83a 	sub	r21,zero,r2
2002ba88:	0027883a 	mov	r19,zero
2002ba8c:	0013883a 	mov	r9,zero
2002ba90:	003f9106 	br	2002b8d8 <__alt_data_end+0xfffed8d8>
2002ba94:	3446b03a 	or	r3,r6,r17
2002ba98:	18001f1e 	bne	r3,zero,2002bb18 <__divdf3+0x2b8>
2002ba9c:	0023883a 	mov	r17,zero
2002baa0:	0011883a 	mov	r8,zero
2002baa4:	01c00084 	movi	r7,2
2002baa8:	003f9d06 	br	2002b920 <__alt_data_end+0xfffed920>
2002baac:	3446b03a 	or	r3,r6,r17
2002bab0:	18001526 	beq	r3,zero,2002bb08 <__divdf3+0x2a8>
2002bab4:	88011b26 	beq	r17,zero,2002bf24 <__divdf3+0x6c4>
2002bab8:	8809883a 	mov	r4,r17
2002babc:	d9800315 	stw	r6,12(sp)
2002bac0:	da400115 	stw	r9,4(sp)
2002bac4:	002d5b80 	call	2002d5b8 <__clzsi2>
2002bac8:	d9800317 	ldw	r6,12(sp)
2002bacc:	da400117 	ldw	r9,4(sp)
2002bad0:	113ffd44 	addi	r4,r2,-11
2002bad4:	00c00704 	movi	r3,28
2002bad8:	19010e16 	blt	r3,r4,2002bf14 <__divdf3+0x6b4>
2002badc:	00c00744 	movi	r3,29
2002bae0:	123ffe04 	addi	r8,r2,-8
2002bae4:	1907c83a 	sub	r3,r3,r4
2002bae8:	8a22983a 	sll	r17,r17,r8
2002baec:	30c6d83a 	srl	r3,r6,r3
2002baf0:	3210983a 	sll	r8,r6,r8
2002baf4:	1c62b03a 	or	r17,r3,r17
2002baf8:	1080fcc4 	addi	r2,r2,1011
2002bafc:	0085c83a 	sub	r2,zero,r2
2002bb00:	000f883a 	mov	r7,zero
2002bb04:	003f8606 	br	2002b920 <__alt_data_end+0xfffed920>
2002bb08:	0023883a 	mov	r17,zero
2002bb0c:	0011883a 	mov	r8,zero
2002bb10:	01c00044 	movi	r7,1
2002bb14:	003f8206 	br	2002b920 <__alt_data_end+0xfffed920>
2002bb18:	01c000c4 	movi	r7,3
2002bb1c:	003f8006 	br	2002b920 <__alt_data_end+0xfffed920>
2002bb20:	04c00104 	movi	r19,4
2002bb24:	0021883a 	mov	r16,zero
2002bb28:	0025883a 	mov	r18,zero
2002bb2c:	02400044 	movi	r9,1
2002bb30:	003f6906 	br	2002b8d8 <__alt_data_end+0xfffed8d8>
2002bb34:	04c00304 	movi	r19,12
2002bb38:	024000c4 	movi	r9,3
2002bb3c:	003f6606 	br	2002b8d8 <__alt_data_end+0xfffed8d8>
2002bb40:	01400434 	movhi	r5,16
2002bb44:	0007883a 	mov	r3,zero
2002bb48:	297fffc4 	addi	r5,r5,-1
2002bb4c:	04bfffc4 	movi	r18,-1
2002bb50:	0081ffc4 	movi	r2,2047
2002bb54:	003fa106 	br	2002b9dc <__alt_data_end+0xfffed9dc>
2002bb58:	00c00044 	movi	r3,1
2002bb5c:	1887c83a 	sub	r3,r3,r2
2002bb60:	01000e04 	movi	r4,56
2002bb64:	20c1210e 	bge	r4,r3,2002bfec <__divdf3+0x78c>
2002bb68:	98c0004c 	andi	r3,r19,1
2002bb6c:	0005883a 	mov	r2,zero
2002bb70:	000b883a 	mov	r5,zero
2002bb74:	0025883a 	mov	r18,zero
2002bb78:	003f9806 	br	2002b9dc <__alt_data_end+0xfffed9dc>
2002bb7c:	8c00fd36 	bltu	r17,r16,2002bf74 <__divdf3+0x714>
2002bb80:	8440fb26 	beq	r16,r17,2002bf70 <__divdf3+0x710>
2002bb84:	8007883a 	mov	r3,r16
2002bb88:	ad7fffc4 	addi	r21,r21,-1
2002bb8c:	0021883a 	mov	r16,zero
2002bb90:	4004d63a 	srli	r2,r8,24
2002bb94:	8822923a 	slli	r17,r17,8
2002bb98:	1809883a 	mov	r4,r3
2002bb9c:	402c923a 	slli	r22,r8,8
2002bba0:	88b8b03a 	or	fp,r17,r2
2002bba4:	e028d43a 	srli	r20,fp,16
2002bba8:	d8c00015 	stw	r3,0(sp)
2002bbac:	e5ffffcc 	andi	r23,fp,65535
2002bbb0:	a00b883a 	mov	r5,r20
2002bbb4:	002aef80 	call	2002aef8 <__udivsi3>
2002bbb8:	d8c00017 	ldw	r3,0(sp)
2002bbbc:	a00b883a 	mov	r5,r20
2002bbc0:	d8800315 	stw	r2,12(sp)
2002bbc4:	1809883a 	mov	r4,r3
2002bbc8:	002af5c0 	call	2002af5c <__umodsi3>
2002bbcc:	d9800317 	ldw	r6,12(sp)
2002bbd0:	1006943a 	slli	r3,r2,16
2002bbd4:	9004d43a 	srli	r2,r18,16
2002bbd8:	b9a3383a 	mul	r17,r23,r6
2002bbdc:	10c4b03a 	or	r2,r2,r3
2002bbe0:	1440062e 	bgeu	r2,r17,2002bbfc <__divdf3+0x39c>
2002bbe4:	1705883a 	add	r2,r2,fp
2002bbe8:	30ffffc4 	addi	r3,r6,-1
2002bbec:	1700ee36 	bltu	r2,fp,2002bfa8 <__divdf3+0x748>
2002bbf0:	1440ed2e 	bgeu	r2,r17,2002bfa8 <__divdf3+0x748>
2002bbf4:	31bfff84 	addi	r6,r6,-2
2002bbf8:	1705883a 	add	r2,r2,fp
2002bbfc:	1463c83a 	sub	r17,r2,r17
2002bc00:	a00b883a 	mov	r5,r20
2002bc04:	8809883a 	mov	r4,r17
2002bc08:	d9800315 	stw	r6,12(sp)
2002bc0c:	002aef80 	call	2002aef8 <__udivsi3>
2002bc10:	a00b883a 	mov	r5,r20
2002bc14:	8809883a 	mov	r4,r17
2002bc18:	d8800215 	stw	r2,8(sp)
2002bc1c:	002af5c0 	call	2002af5c <__umodsi3>
2002bc20:	d9c00217 	ldw	r7,8(sp)
2002bc24:	1004943a 	slli	r2,r2,16
2002bc28:	94bfffcc 	andi	r18,r18,65535
2002bc2c:	b9d1383a 	mul	r8,r23,r7
2002bc30:	90a4b03a 	or	r18,r18,r2
2002bc34:	d9800317 	ldw	r6,12(sp)
2002bc38:	9200062e 	bgeu	r18,r8,2002bc54 <__divdf3+0x3f4>
2002bc3c:	9725883a 	add	r18,r18,fp
2002bc40:	38bfffc4 	addi	r2,r7,-1
2002bc44:	9700d636 	bltu	r18,fp,2002bfa0 <__divdf3+0x740>
2002bc48:	9200d52e 	bgeu	r18,r8,2002bfa0 <__divdf3+0x740>
2002bc4c:	39ffff84 	addi	r7,r7,-2
2002bc50:	9725883a 	add	r18,r18,fp
2002bc54:	3004943a 	slli	r2,r6,16
2002bc58:	b012d43a 	srli	r9,r22,16
2002bc5c:	b1bfffcc 	andi	r6,r22,65535
2002bc60:	11e2b03a 	or	r17,r2,r7
2002bc64:	8806d43a 	srli	r3,r17,16
2002bc68:	893fffcc 	andi	r4,r17,65535
2002bc6c:	218b383a 	mul	r5,r4,r6
2002bc70:	30c5383a 	mul	r2,r6,r3
2002bc74:	2249383a 	mul	r4,r4,r9
2002bc78:	280ed43a 	srli	r7,r5,16
2002bc7c:	9225c83a 	sub	r18,r18,r8
2002bc80:	2089883a 	add	r4,r4,r2
2002bc84:	3909883a 	add	r4,r7,r4
2002bc88:	1a47383a 	mul	r3,r3,r9
2002bc8c:	2080022e 	bgeu	r4,r2,2002bc98 <__divdf3+0x438>
2002bc90:	00800074 	movhi	r2,1
2002bc94:	1887883a 	add	r3,r3,r2
2002bc98:	2004d43a 	srli	r2,r4,16
2002bc9c:	2008943a 	slli	r4,r4,16
2002bca0:	297fffcc 	andi	r5,r5,65535
2002bca4:	10c7883a 	add	r3,r2,r3
2002bca8:	2149883a 	add	r4,r4,r5
2002bcac:	90c0a536 	bltu	r18,r3,2002bf44 <__divdf3+0x6e4>
2002bcb0:	90c0bf26 	beq	r18,r3,2002bfb0 <__divdf3+0x750>
2002bcb4:	90c7c83a 	sub	r3,r18,r3
2002bcb8:	810fc83a 	sub	r7,r16,r4
2002bcbc:	81e5803a 	cmpltu	r18,r16,r7
2002bcc0:	1ca5c83a 	sub	r18,r3,r18
2002bcc4:	e480c126 	beq	fp,r18,2002bfcc <__divdf3+0x76c>
2002bcc8:	a00b883a 	mov	r5,r20
2002bccc:	9009883a 	mov	r4,r18
2002bcd0:	d9800315 	stw	r6,12(sp)
2002bcd4:	d9c00215 	stw	r7,8(sp)
2002bcd8:	da400115 	stw	r9,4(sp)
2002bcdc:	002aef80 	call	2002aef8 <__udivsi3>
2002bce0:	a00b883a 	mov	r5,r20
2002bce4:	9009883a 	mov	r4,r18
2002bce8:	d8800015 	stw	r2,0(sp)
2002bcec:	002af5c0 	call	2002af5c <__umodsi3>
2002bcf0:	d9c00217 	ldw	r7,8(sp)
2002bcf4:	da000017 	ldw	r8,0(sp)
2002bcf8:	1006943a 	slli	r3,r2,16
2002bcfc:	3804d43a 	srli	r2,r7,16
2002bd00:	ba21383a 	mul	r16,r23,r8
2002bd04:	d9800317 	ldw	r6,12(sp)
2002bd08:	10c4b03a 	or	r2,r2,r3
2002bd0c:	da400117 	ldw	r9,4(sp)
2002bd10:	1400062e 	bgeu	r2,r16,2002bd2c <__divdf3+0x4cc>
2002bd14:	1705883a 	add	r2,r2,fp
2002bd18:	40ffffc4 	addi	r3,r8,-1
2002bd1c:	1700ad36 	bltu	r2,fp,2002bfd4 <__divdf3+0x774>
2002bd20:	1400ac2e 	bgeu	r2,r16,2002bfd4 <__divdf3+0x774>
2002bd24:	423fff84 	addi	r8,r8,-2
2002bd28:	1705883a 	add	r2,r2,fp
2002bd2c:	1421c83a 	sub	r16,r2,r16
2002bd30:	a00b883a 	mov	r5,r20
2002bd34:	8009883a 	mov	r4,r16
2002bd38:	d9800315 	stw	r6,12(sp)
2002bd3c:	d9c00215 	stw	r7,8(sp)
2002bd40:	da000015 	stw	r8,0(sp)
2002bd44:	da400115 	stw	r9,4(sp)
2002bd48:	002aef80 	call	2002aef8 <__udivsi3>
2002bd4c:	8009883a 	mov	r4,r16
2002bd50:	a00b883a 	mov	r5,r20
2002bd54:	1025883a 	mov	r18,r2
2002bd58:	002af5c0 	call	2002af5c <__umodsi3>
2002bd5c:	d9c00217 	ldw	r7,8(sp)
2002bd60:	1004943a 	slli	r2,r2,16
2002bd64:	bcaf383a 	mul	r23,r23,r18
2002bd68:	393fffcc 	andi	r4,r7,65535
2002bd6c:	2088b03a 	or	r4,r4,r2
2002bd70:	d9800317 	ldw	r6,12(sp)
2002bd74:	da000017 	ldw	r8,0(sp)
2002bd78:	da400117 	ldw	r9,4(sp)
2002bd7c:	25c0062e 	bgeu	r4,r23,2002bd98 <__divdf3+0x538>
2002bd80:	2709883a 	add	r4,r4,fp
2002bd84:	90bfffc4 	addi	r2,r18,-1
2002bd88:	27009436 	bltu	r4,fp,2002bfdc <__divdf3+0x77c>
2002bd8c:	25c0932e 	bgeu	r4,r23,2002bfdc <__divdf3+0x77c>
2002bd90:	94bfff84 	addi	r18,r18,-2
2002bd94:	2709883a 	add	r4,r4,fp
2002bd98:	4004943a 	slli	r2,r8,16
2002bd9c:	25efc83a 	sub	r23,r4,r23
2002bda0:	1490b03a 	or	r8,r2,r18
2002bda4:	4008d43a 	srli	r4,r8,16
2002bda8:	40ffffcc 	andi	r3,r8,65535
2002bdac:	30c5383a 	mul	r2,r6,r3
2002bdb0:	1a47383a 	mul	r3,r3,r9
2002bdb4:	310d383a 	mul	r6,r6,r4
2002bdb8:	100ad43a 	srli	r5,r2,16
2002bdbc:	4913383a 	mul	r9,r9,r4
2002bdc0:	1987883a 	add	r3,r3,r6
2002bdc4:	28c7883a 	add	r3,r5,r3
2002bdc8:	1980022e 	bgeu	r3,r6,2002bdd4 <__divdf3+0x574>
2002bdcc:	01000074 	movhi	r4,1
2002bdd0:	4913883a 	add	r9,r9,r4
2002bdd4:	1808d43a 	srli	r4,r3,16
2002bdd8:	1806943a 	slli	r3,r3,16
2002bddc:	10bfffcc 	andi	r2,r2,65535
2002bde0:	2253883a 	add	r9,r4,r9
2002bde4:	1887883a 	add	r3,r3,r2
2002bde8:	ba403836 	bltu	r23,r9,2002becc <__divdf3+0x66c>
2002bdec:	ba403626 	beq	r23,r9,2002bec8 <__divdf3+0x668>
2002bdf0:	42000054 	ori	r8,r8,1
2002bdf4:	a880ffc4 	addi	r2,r21,1023
2002bdf8:	00bf570e 	bge	zero,r2,2002bb58 <__alt_data_end+0xfffedb58>
2002bdfc:	40c001cc 	andi	r3,r8,7
2002be00:	18000726 	beq	r3,zero,2002be20 <__divdf3+0x5c0>
2002be04:	40c003cc 	andi	r3,r8,15
2002be08:	01000104 	movi	r4,4
2002be0c:	19000426 	beq	r3,r4,2002be20 <__divdf3+0x5c0>
2002be10:	4107883a 	add	r3,r8,r4
2002be14:	1a11803a 	cmpltu	r8,r3,r8
2002be18:	8a23883a 	add	r17,r17,r8
2002be1c:	1811883a 	mov	r8,r3
2002be20:	88c0402c 	andhi	r3,r17,256
2002be24:	18000426 	beq	r3,zero,2002be38 <__divdf3+0x5d8>
2002be28:	00ffc034 	movhi	r3,65280
2002be2c:	18ffffc4 	addi	r3,r3,-1
2002be30:	a8810004 	addi	r2,r21,1024
2002be34:	88e2703a 	and	r17,r17,r3
2002be38:	00c1ff84 	movi	r3,2046
2002be3c:	18bee316 	blt	r3,r2,2002b9cc <__alt_data_end+0xfffed9cc>
2002be40:	8824977a 	slli	r18,r17,29
2002be44:	4010d0fa 	srli	r8,r8,3
2002be48:	8822927a 	slli	r17,r17,9
2002be4c:	1081ffcc 	andi	r2,r2,2047
2002be50:	9224b03a 	or	r18,r18,r8
2002be54:	880ad33a 	srli	r5,r17,12
2002be58:	98c0004c 	andi	r3,r19,1
2002be5c:	003edf06 	br	2002b9dc <__alt_data_end+0xfffed9dc>
2002be60:	8080022c 	andhi	r2,r16,8
2002be64:	10001226 	beq	r2,zero,2002beb0 <__divdf3+0x650>
2002be68:	8880022c 	andhi	r2,r17,8
2002be6c:	1000101e 	bne	r2,zero,2002beb0 <__divdf3+0x650>
2002be70:	00800434 	movhi	r2,16
2002be74:	89400234 	orhi	r5,r17,8
2002be78:	10bfffc4 	addi	r2,r2,-1
2002be7c:	b007883a 	mov	r3,r22
2002be80:	288a703a 	and	r5,r5,r2
2002be84:	4025883a 	mov	r18,r8
2002be88:	003f3106 	br	2002bb50 <__alt_data_end+0xfffedb50>
2002be8c:	008000c4 	movi	r2,3
2002be90:	3880a626 	beq	r7,r2,2002c12c <__divdf3+0x8cc>
2002be94:	00800044 	movi	r2,1
2002be98:	3880521e 	bne	r7,r2,2002bfe4 <__divdf3+0x784>
2002be9c:	b807883a 	mov	r3,r23
2002bea0:	0005883a 	mov	r2,zero
2002bea4:	000b883a 	mov	r5,zero
2002bea8:	0025883a 	mov	r18,zero
2002beac:	003ecb06 	br	2002b9dc <__alt_data_end+0xfffed9dc>
2002beb0:	00800434 	movhi	r2,16
2002beb4:	81400234 	orhi	r5,r16,8
2002beb8:	10bfffc4 	addi	r2,r2,-1
2002bebc:	a007883a 	mov	r3,r20
2002bec0:	288a703a 	and	r5,r5,r2
2002bec4:	003f2206 	br	2002bb50 <__alt_data_end+0xfffedb50>
2002bec8:	183fca26 	beq	r3,zero,2002bdf4 <__alt_data_end+0xfffeddf4>
2002becc:	e5ef883a 	add	r23,fp,r23
2002bed0:	40bfffc4 	addi	r2,r8,-1
2002bed4:	bf00392e 	bgeu	r23,fp,2002bfbc <__divdf3+0x75c>
2002bed8:	1011883a 	mov	r8,r2
2002bedc:	ba7fc41e 	bne	r23,r9,2002bdf0 <__alt_data_end+0xfffeddf0>
2002bee0:	b0ffc31e 	bne	r22,r3,2002bdf0 <__alt_data_end+0xfffeddf0>
2002bee4:	003fc306 	br	2002bdf4 <__alt_data_end+0xfffeddf4>
2002bee8:	143ff604 	addi	r16,r2,-40
2002beec:	9c20983a 	sll	r16,r19,r16
2002bef0:	0025883a 	mov	r18,zero
2002bef4:	003ee206 	br	2002ba80 <__alt_data_end+0xfffeda80>
2002bef8:	d9800315 	stw	r6,12(sp)
2002befc:	d9c00215 	stw	r7,8(sp)
2002bf00:	002d5b80 	call	2002d5b8 <__clzsi2>
2002bf04:	10800804 	addi	r2,r2,32
2002bf08:	d9c00217 	ldw	r7,8(sp)
2002bf0c:	d9800317 	ldw	r6,12(sp)
2002bf10:	003ed106 	br	2002ba58 <__alt_data_end+0xfffeda58>
2002bf14:	147ff604 	addi	r17,r2,-40
2002bf18:	3462983a 	sll	r17,r6,r17
2002bf1c:	0011883a 	mov	r8,zero
2002bf20:	003ef506 	br	2002baf8 <__alt_data_end+0xfffedaf8>
2002bf24:	3009883a 	mov	r4,r6
2002bf28:	d9800315 	stw	r6,12(sp)
2002bf2c:	da400115 	stw	r9,4(sp)
2002bf30:	002d5b80 	call	2002d5b8 <__clzsi2>
2002bf34:	10800804 	addi	r2,r2,32
2002bf38:	da400117 	ldw	r9,4(sp)
2002bf3c:	d9800317 	ldw	r6,12(sp)
2002bf40:	003ee306 	br	2002bad0 <__alt_data_end+0xfffedad0>
2002bf44:	85a1883a 	add	r16,r16,r22
2002bf48:	8585803a 	cmpltu	r2,r16,r22
2002bf4c:	1705883a 	add	r2,r2,fp
2002bf50:	14a5883a 	add	r18,r2,r18
2002bf54:	88bfffc4 	addi	r2,r17,-1
2002bf58:	e4800c2e 	bgeu	fp,r18,2002bf8c <__divdf3+0x72c>
2002bf5c:	90c03e36 	bltu	r18,r3,2002c058 <__divdf3+0x7f8>
2002bf60:	1c806926 	beq	r3,r18,2002c108 <__divdf3+0x8a8>
2002bf64:	90c7c83a 	sub	r3,r18,r3
2002bf68:	1023883a 	mov	r17,r2
2002bf6c:	003f5206 	br	2002bcb8 <__alt_data_end+0xfffedcb8>
2002bf70:	923f0436 	bltu	r18,r8,2002bb84 <__alt_data_end+0xfffedb84>
2002bf74:	800897fa 	slli	r4,r16,31
2002bf78:	9004d07a 	srli	r2,r18,1
2002bf7c:	8006d07a 	srli	r3,r16,1
2002bf80:	902097fa 	slli	r16,r18,31
2002bf84:	20a4b03a 	or	r18,r4,r2
2002bf88:	003f0106 	br	2002bb90 <__alt_data_end+0xfffedb90>
2002bf8c:	e4bff51e 	bne	fp,r18,2002bf64 <__alt_data_end+0xfffedf64>
2002bf90:	85bff22e 	bgeu	r16,r22,2002bf5c <__alt_data_end+0xfffedf5c>
2002bf94:	e0c7c83a 	sub	r3,fp,r3
2002bf98:	1023883a 	mov	r17,r2
2002bf9c:	003f4606 	br	2002bcb8 <__alt_data_end+0xfffedcb8>
2002bfa0:	100f883a 	mov	r7,r2
2002bfa4:	003f2b06 	br	2002bc54 <__alt_data_end+0xfffedc54>
2002bfa8:	180d883a 	mov	r6,r3
2002bfac:	003f1306 	br	2002bbfc <__alt_data_end+0xfffedbfc>
2002bfb0:	813fe436 	bltu	r16,r4,2002bf44 <__alt_data_end+0xfffedf44>
2002bfb4:	0007883a 	mov	r3,zero
2002bfb8:	003f3f06 	br	2002bcb8 <__alt_data_end+0xfffedcb8>
2002bfbc:	ba402c36 	bltu	r23,r9,2002c070 <__divdf3+0x810>
2002bfc0:	4dc05426 	beq	r9,r23,2002c114 <__divdf3+0x8b4>
2002bfc4:	1011883a 	mov	r8,r2
2002bfc8:	003f8906 	br	2002bdf0 <__alt_data_end+0xfffeddf0>
2002bfcc:	023fffc4 	movi	r8,-1
2002bfd0:	003f8806 	br	2002bdf4 <__alt_data_end+0xfffeddf4>
2002bfd4:	1811883a 	mov	r8,r3
2002bfd8:	003f5406 	br	2002bd2c <__alt_data_end+0xfffedd2c>
2002bfdc:	1025883a 	mov	r18,r2
2002bfe0:	003f6d06 	br	2002bd98 <__alt_data_end+0xfffedd98>
2002bfe4:	b827883a 	mov	r19,r23
2002bfe8:	003f8206 	br	2002bdf4 <__alt_data_end+0xfffeddf4>
2002bfec:	010007c4 	movi	r4,31
2002bff0:	20c02616 	blt	r4,r3,2002c08c <__divdf3+0x82c>
2002bff4:	00800804 	movi	r2,32
2002bff8:	10c5c83a 	sub	r2,r2,r3
2002bffc:	888a983a 	sll	r5,r17,r2
2002c000:	40c8d83a 	srl	r4,r8,r3
2002c004:	4084983a 	sll	r2,r8,r2
2002c008:	88e2d83a 	srl	r17,r17,r3
2002c00c:	2906b03a 	or	r3,r5,r4
2002c010:	1004c03a 	cmpne	r2,r2,zero
2002c014:	1886b03a 	or	r3,r3,r2
2002c018:	188001cc 	andi	r2,r3,7
2002c01c:	10000726 	beq	r2,zero,2002c03c <__divdf3+0x7dc>
2002c020:	188003cc 	andi	r2,r3,15
2002c024:	01000104 	movi	r4,4
2002c028:	11000426 	beq	r2,r4,2002c03c <__divdf3+0x7dc>
2002c02c:	1805883a 	mov	r2,r3
2002c030:	10c00104 	addi	r3,r2,4
2002c034:	1885803a 	cmpltu	r2,r3,r2
2002c038:	88a3883a 	add	r17,r17,r2
2002c03c:	8880202c 	andhi	r2,r17,128
2002c040:	10002726 	beq	r2,zero,2002c0e0 <__divdf3+0x880>
2002c044:	98c0004c 	andi	r3,r19,1
2002c048:	00800044 	movi	r2,1
2002c04c:	000b883a 	mov	r5,zero
2002c050:	0025883a 	mov	r18,zero
2002c054:	003e6106 	br	2002b9dc <__alt_data_end+0xfffed9dc>
2002c058:	85a1883a 	add	r16,r16,r22
2002c05c:	8585803a 	cmpltu	r2,r16,r22
2002c060:	1705883a 	add	r2,r2,fp
2002c064:	14a5883a 	add	r18,r2,r18
2002c068:	8c7fff84 	addi	r17,r17,-2
2002c06c:	003f1106 	br	2002bcb4 <__alt_data_end+0xfffedcb4>
2002c070:	b589883a 	add	r4,r22,r22
2002c074:	25ad803a 	cmpltu	r22,r4,r22
2002c078:	b739883a 	add	fp,r22,fp
2002c07c:	40bfff84 	addi	r2,r8,-2
2002c080:	bf2f883a 	add	r23,r23,fp
2002c084:	202d883a 	mov	r22,r4
2002c088:	003f9306 	br	2002bed8 <__alt_data_end+0xfffeded8>
2002c08c:	013ff844 	movi	r4,-31
2002c090:	2085c83a 	sub	r2,r4,r2
2002c094:	8888d83a 	srl	r4,r17,r2
2002c098:	00800804 	movi	r2,32
2002c09c:	18802126 	beq	r3,r2,2002c124 <__divdf3+0x8c4>
2002c0a0:	00801004 	movi	r2,64
2002c0a4:	10c5c83a 	sub	r2,r2,r3
2002c0a8:	8884983a 	sll	r2,r17,r2
2002c0ac:	1204b03a 	or	r2,r2,r8
2002c0b0:	1004c03a 	cmpne	r2,r2,zero
2002c0b4:	2084b03a 	or	r2,r4,r2
2002c0b8:	144001cc 	andi	r17,r2,7
2002c0bc:	88000d1e 	bne	r17,zero,2002c0f4 <__divdf3+0x894>
2002c0c0:	000b883a 	mov	r5,zero
2002c0c4:	1024d0fa 	srli	r18,r2,3
2002c0c8:	98c0004c 	andi	r3,r19,1
2002c0cc:	0005883a 	mov	r2,zero
2002c0d0:	9464b03a 	or	r18,r18,r17
2002c0d4:	003e4106 	br	2002b9dc <__alt_data_end+0xfffed9dc>
2002c0d8:	1007883a 	mov	r3,r2
2002c0dc:	0023883a 	mov	r17,zero
2002c0e0:	880a927a 	slli	r5,r17,9
2002c0e4:	1805883a 	mov	r2,r3
2002c0e8:	8822977a 	slli	r17,r17,29
2002c0ec:	280ad33a 	srli	r5,r5,12
2002c0f0:	003ff406 	br	2002c0c4 <__alt_data_end+0xfffee0c4>
2002c0f4:	10c003cc 	andi	r3,r2,15
2002c0f8:	01000104 	movi	r4,4
2002c0fc:	193ff626 	beq	r3,r4,2002c0d8 <__alt_data_end+0xfffee0d8>
2002c100:	0023883a 	mov	r17,zero
2002c104:	003fca06 	br	2002c030 <__alt_data_end+0xfffee030>
2002c108:	813fd336 	bltu	r16,r4,2002c058 <__alt_data_end+0xfffee058>
2002c10c:	1023883a 	mov	r17,r2
2002c110:	003fa806 	br	2002bfb4 <__alt_data_end+0xfffedfb4>
2002c114:	b0ffd636 	bltu	r22,r3,2002c070 <__alt_data_end+0xfffee070>
2002c118:	1011883a 	mov	r8,r2
2002c11c:	b0ff341e 	bne	r22,r3,2002bdf0 <__alt_data_end+0xfffeddf0>
2002c120:	003f3406 	br	2002bdf4 <__alt_data_end+0xfffeddf4>
2002c124:	0005883a 	mov	r2,zero
2002c128:	003fe006 	br	2002c0ac <__alt_data_end+0xfffee0ac>
2002c12c:	00800434 	movhi	r2,16
2002c130:	89400234 	orhi	r5,r17,8
2002c134:	10bfffc4 	addi	r2,r2,-1
2002c138:	b807883a 	mov	r3,r23
2002c13c:	288a703a 	and	r5,r5,r2
2002c140:	4025883a 	mov	r18,r8
2002c144:	003e8206 	br	2002bb50 <__alt_data_end+0xfffedb50>

2002c148 <__eqdf2>:
2002c148:	2804d53a 	srli	r2,r5,20
2002c14c:	3806d53a 	srli	r3,r7,20
2002c150:	02000434 	movhi	r8,16
2002c154:	423fffc4 	addi	r8,r8,-1
2002c158:	1081ffcc 	andi	r2,r2,2047
2002c15c:	0281ffc4 	movi	r10,2047
2002c160:	2a12703a 	and	r9,r5,r8
2002c164:	18c1ffcc 	andi	r3,r3,2047
2002c168:	3a10703a 	and	r8,r7,r8
2002c16c:	280ad7fa 	srli	r5,r5,31
2002c170:	380ed7fa 	srli	r7,r7,31
2002c174:	12801026 	beq	r2,r10,2002c1b8 <__eqdf2+0x70>
2002c178:	0281ffc4 	movi	r10,2047
2002c17c:	1a800a26 	beq	r3,r10,2002c1a8 <__eqdf2+0x60>
2002c180:	10c00226 	beq	r2,r3,2002c18c <__eqdf2+0x44>
2002c184:	00800044 	movi	r2,1
2002c188:	f800283a 	ret
2002c18c:	4a3ffd1e 	bne	r9,r8,2002c184 <__alt_data_end+0xfffee184>
2002c190:	21bffc1e 	bne	r4,r6,2002c184 <__alt_data_end+0xfffee184>
2002c194:	29c00c26 	beq	r5,r7,2002c1c8 <__eqdf2+0x80>
2002c198:	103ffa1e 	bne	r2,zero,2002c184 <__alt_data_end+0xfffee184>
2002c19c:	2244b03a 	or	r2,r4,r9
2002c1a0:	1004c03a 	cmpne	r2,r2,zero
2002c1a4:	f800283a 	ret
2002c1a8:	3214b03a 	or	r10,r6,r8
2002c1ac:	503ff426 	beq	r10,zero,2002c180 <__alt_data_end+0xfffee180>
2002c1b0:	00800044 	movi	r2,1
2002c1b4:	f800283a 	ret
2002c1b8:	2254b03a 	or	r10,r4,r9
2002c1bc:	503fee26 	beq	r10,zero,2002c178 <__alt_data_end+0xfffee178>
2002c1c0:	00800044 	movi	r2,1
2002c1c4:	f800283a 	ret
2002c1c8:	0005883a 	mov	r2,zero
2002c1cc:	f800283a 	ret

2002c1d0 <__gedf2>:
2002c1d0:	2804d53a 	srli	r2,r5,20
2002c1d4:	3806d53a 	srli	r3,r7,20
2002c1d8:	02000434 	movhi	r8,16
2002c1dc:	423fffc4 	addi	r8,r8,-1
2002c1e0:	1081ffcc 	andi	r2,r2,2047
2002c1e4:	0241ffc4 	movi	r9,2047
2002c1e8:	2a14703a 	and	r10,r5,r8
2002c1ec:	18c1ffcc 	andi	r3,r3,2047
2002c1f0:	3a10703a 	and	r8,r7,r8
2002c1f4:	280ad7fa 	srli	r5,r5,31
2002c1f8:	380ed7fa 	srli	r7,r7,31
2002c1fc:	12401d26 	beq	r2,r9,2002c274 <__gedf2+0xa4>
2002c200:	0241ffc4 	movi	r9,2047
2002c204:	1a401226 	beq	r3,r9,2002c250 <__gedf2+0x80>
2002c208:	1000081e 	bne	r2,zero,2002c22c <__gedf2+0x5c>
2002c20c:	2296b03a 	or	r11,r4,r10
2002c210:	5813003a 	cmpeq	r9,r11,zero
2002c214:	1800091e 	bne	r3,zero,2002c23c <__gedf2+0x6c>
2002c218:	3218b03a 	or	r12,r6,r8
2002c21c:	6000071e 	bne	r12,zero,2002c23c <__gedf2+0x6c>
2002c220:	0005883a 	mov	r2,zero
2002c224:	5800101e 	bne	r11,zero,2002c268 <__gedf2+0x98>
2002c228:	f800283a 	ret
2002c22c:	18000c1e 	bne	r3,zero,2002c260 <__gedf2+0x90>
2002c230:	3212b03a 	or	r9,r6,r8
2002c234:	48000c26 	beq	r9,zero,2002c268 <__gedf2+0x98>
2002c238:	0013883a 	mov	r9,zero
2002c23c:	39c03fcc 	andi	r7,r7,255
2002c240:	48000826 	beq	r9,zero,2002c264 <__gedf2+0x94>
2002c244:	38000926 	beq	r7,zero,2002c26c <__gedf2+0x9c>
2002c248:	00800044 	movi	r2,1
2002c24c:	f800283a 	ret
2002c250:	3212b03a 	or	r9,r6,r8
2002c254:	483fec26 	beq	r9,zero,2002c208 <__alt_data_end+0xfffee208>
2002c258:	00bfff84 	movi	r2,-2
2002c25c:	f800283a 	ret
2002c260:	39c03fcc 	andi	r7,r7,255
2002c264:	29c00626 	beq	r5,r7,2002c280 <__gedf2+0xb0>
2002c268:	283ff726 	beq	r5,zero,2002c248 <__alt_data_end+0xfffee248>
2002c26c:	00bfffc4 	movi	r2,-1
2002c270:	f800283a 	ret
2002c274:	2292b03a 	or	r9,r4,r10
2002c278:	483fe126 	beq	r9,zero,2002c200 <__alt_data_end+0xfffee200>
2002c27c:	003ff606 	br	2002c258 <__alt_data_end+0xfffee258>
2002c280:	18bff916 	blt	r3,r2,2002c268 <__alt_data_end+0xfffee268>
2002c284:	10c00316 	blt	r2,r3,2002c294 <__gedf2+0xc4>
2002c288:	42bff736 	bltu	r8,r10,2002c268 <__alt_data_end+0xfffee268>
2002c28c:	52000326 	beq	r10,r8,2002c29c <__gedf2+0xcc>
2002c290:	5200042e 	bgeu	r10,r8,2002c2a4 <__gedf2+0xd4>
2002c294:	283fec1e 	bne	r5,zero,2002c248 <__alt_data_end+0xfffee248>
2002c298:	003ff406 	br	2002c26c <__alt_data_end+0xfffee26c>
2002c29c:	313ff236 	bltu	r6,r4,2002c268 <__alt_data_end+0xfffee268>
2002c2a0:	21bffc36 	bltu	r4,r6,2002c294 <__alt_data_end+0xfffee294>
2002c2a4:	0005883a 	mov	r2,zero
2002c2a8:	f800283a 	ret

2002c2ac <__ledf2>:
2002c2ac:	2804d53a 	srli	r2,r5,20
2002c2b0:	3810d53a 	srli	r8,r7,20
2002c2b4:	00c00434 	movhi	r3,16
2002c2b8:	18ffffc4 	addi	r3,r3,-1
2002c2bc:	1081ffcc 	andi	r2,r2,2047
2002c2c0:	0241ffc4 	movi	r9,2047
2002c2c4:	28d4703a 	and	r10,r5,r3
2002c2c8:	4201ffcc 	andi	r8,r8,2047
2002c2cc:	38c6703a 	and	r3,r7,r3
2002c2d0:	280ad7fa 	srli	r5,r5,31
2002c2d4:	380ed7fa 	srli	r7,r7,31
2002c2d8:	12401f26 	beq	r2,r9,2002c358 <__ledf2+0xac>
2002c2dc:	0241ffc4 	movi	r9,2047
2002c2e0:	42401426 	beq	r8,r9,2002c334 <__ledf2+0x88>
2002c2e4:	1000091e 	bne	r2,zero,2002c30c <__ledf2+0x60>
2002c2e8:	2296b03a 	or	r11,r4,r10
2002c2ec:	5813003a 	cmpeq	r9,r11,zero
2002c2f0:	29403fcc 	andi	r5,r5,255
2002c2f4:	40000a1e 	bne	r8,zero,2002c320 <__ledf2+0x74>
2002c2f8:	30d8b03a 	or	r12,r6,r3
2002c2fc:	6000081e 	bne	r12,zero,2002c320 <__ledf2+0x74>
2002c300:	0005883a 	mov	r2,zero
2002c304:	5800111e 	bne	r11,zero,2002c34c <__ledf2+0xa0>
2002c308:	f800283a 	ret
2002c30c:	29403fcc 	andi	r5,r5,255
2002c310:	40000c1e 	bne	r8,zero,2002c344 <__ledf2+0x98>
2002c314:	30d2b03a 	or	r9,r6,r3
2002c318:	48000c26 	beq	r9,zero,2002c34c <__ledf2+0xa0>
2002c31c:	0013883a 	mov	r9,zero
2002c320:	39c03fcc 	andi	r7,r7,255
2002c324:	48000826 	beq	r9,zero,2002c348 <__ledf2+0x9c>
2002c328:	38001126 	beq	r7,zero,2002c370 <__ledf2+0xc4>
2002c32c:	00800044 	movi	r2,1
2002c330:	f800283a 	ret
2002c334:	30d2b03a 	or	r9,r6,r3
2002c338:	483fea26 	beq	r9,zero,2002c2e4 <__alt_data_end+0xfffee2e4>
2002c33c:	00800084 	movi	r2,2
2002c340:	f800283a 	ret
2002c344:	39c03fcc 	andi	r7,r7,255
2002c348:	39400726 	beq	r7,r5,2002c368 <__ledf2+0xbc>
2002c34c:	2800081e 	bne	r5,zero,2002c370 <__ledf2+0xc4>
2002c350:	00800044 	movi	r2,1
2002c354:	f800283a 	ret
2002c358:	2292b03a 	or	r9,r4,r10
2002c35c:	483fdf26 	beq	r9,zero,2002c2dc <__alt_data_end+0xfffee2dc>
2002c360:	00800084 	movi	r2,2
2002c364:	f800283a 	ret
2002c368:	4080030e 	bge	r8,r2,2002c378 <__ledf2+0xcc>
2002c36c:	383fef26 	beq	r7,zero,2002c32c <__alt_data_end+0xfffee32c>
2002c370:	00bfffc4 	movi	r2,-1
2002c374:	f800283a 	ret
2002c378:	123feb16 	blt	r2,r8,2002c328 <__alt_data_end+0xfffee328>
2002c37c:	1abff336 	bltu	r3,r10,2002c34c <__alt_data_end+0xfffee34c>
2002c380:	50c00326 	beq	r10,r3,2002c390 <__ledf2+0xe4>
2002c384:	50c0042e 	bgeu	r10,r3,2002c398 <__ledf2+0xec>
2002c388:	283fe81e 	bne	r5,zero,2002c32c <__alt_data_end+0xfffee32c>
2002c38c:	003ff806 	br	2002c370 <__alt_data_end+0xfffee370>
2002c390:	313fee36 	bltu	r6,r4,2002c34c <__alt_data_end+0xfffee34c>
2002c394:	21bffc36 	bltu	r4,r6,2002c388 <__alt_data_end+0xfffee388>
2002c398:	0005883a 	mov	r2,zero
2002c39c:	f800283a 	ret

2002c3a0 <__muldf3>:
2002c3a0:	defff304 	addi	sp,sp,-52
2002c3a4:	2804d53a 	srli	r2,r5,20
2002c3a8:	dd800915 	stw	r22,36(sp)
2002c3ac:	282cd7fa 	srli	r22,r5,31
2002c3b0:	dc000315 	stw	r16,12(sp)
2002c3b4:	04000434 	movhi	r16,16
2002c3b8:	dd400815 	stw	r21,32(sp)
2002c3bc:	dc800515 	stw	r18,20(sp)
2002c3c0:	843fffc4 	addi	r16,r16,-1
2002c3c4:	dfc00c15 	stw	ra,48(sp)
2002c3c8:	df000b15 	stw	fp,44(sp)
2002c3cc:	ddc00a15 	stw	r23,40(sp)
2002c3d0:	dd000715 	stw	r20,28(sp)
2002c3d4:	dcc00615 	stw	r19,24(sp)
2002c3d8:	dc400415 	stw	r17,16(sp)
2002c3dc:	1481ffcc 	andi	r18,r2,2047
2002c3e0:	2c20703a 	and	r16,r5,r16
2002c3e4:	b02b883a 	mov	r21,r22
2002c3e8:	b2403fcc 	andi	r9,r22,255
2002c3ec:	90006026 	beq	r18,zero,2002c570 <__muldf3+0x1d0>
2002c3f0:	0081ffc4 	movi	r2,2047
2002c3f4:	2029883a 	mov	r20,r4
2002c3f8:	90803626 	beq	r18,r2,2002c4d4 <__muldf3+0x134>
2002c3fc:	80800434 	orhi	r2,r16,16
2002c400:	100490fa 	slli	r2,r2,3
2002c404:	2020d77a 	srli	r16,r4,29
2002c408:	202890fa 	slli	r20,r4,3
2002c40c:	94bf0044 	addi	r18,r18,-1023
2002c410:	80a0b03a 	or	r16,r16,r2
2002c414:	0027883a 	mov	r19,zero
2002c418:	0039883a 	mov	fp,zero
2002c41c:	3804d53a 	srli	r2,r7,20
2002c420:	382ed7fa 	srli	r23,r7,31
2002c424:	04400434 	movhi	r17,16
2002c428:	8c7fffc4 	addi	r17,r17,-1
2002c42c:	1081ffcc 	andi	r2,r2,2047
2002c430:	3011883a 	mov	r8,r6
2002c434:	3c62703a 	and	r17,r7,r17
2002c438:	ba803fcc 	andi	r10,r23,255
2002c43c:	10006d26 	beq	r2,zero,2002c5f4 <__muldf3+0x254>
2002c440:	00c1ffc4 	movi	r3,2047
2002c444:	10c06526 	beq	r2,r3,2002c5dc <__muldf3+0x23c>
2002c448:	88c00434 	orhi	r3,r17,16
2002c44c:	180690fa 	slli	r3,r3,3
2002c450:	3022d77a 	srli	r17,r6,29
2002c454:	301090fa 	slli	r8,r6,3
2002c458:	10bf0044 	addi	r2,r2,-1023
2002c45c:	88e2b03a 	or	r17,r17,r3
2002c460:	000b883a 	mov	r5,zero
2002c464:	9085883a 	add	r2,r18,r2
2002c468:	2cc8b03a 	or	r4,r5,r19
2002c46c:	00c003c4 	movi	r3,15
2002c470:	bdacf03a 	xor	r22,r23,r22
2002c474:	12c00044 	addi	r11,r2,1
2002c478:	19009936 	bltu	r3,r4,2002c6e0 <__muldf3+0x340>
2002c47c:	200890ba 	slli	r4,r4,2
2002c480:	00c800f4 	movhi	r3,8195
2002c484:	18f12504 	addi	r3,r3,-15212
2002c488:	20c9883a 	add	r4,r4,r3
2002c48c:	20c00017 	ldw	r3,0(r4)
2002c490:	1800683a 	jmp	r3
2002c494:	2002c6e0 	cmpeqi	zero,r4,2843
2002c498:	2002c4f4 	orhi	zero,r4,2835
2002c49c:	2002c4f4 	orhi	zero,r4,2835
2002c4a0:	2002c4f0 	cmpltui	zero,r4,2835
2002c4a4:	2002c6bc 	xorhi	zero,r4,2842
2002c4a8:	2002c6bc 	xorhi	zero,r4,2842
2002c4ac:	2002c6a4 	muli	zero,r4,2842
2002c4b0:	2002c4f0 	cmpltui	zero,r4,2835
2002c4b4:	2002c6bc 	xorhi	zero,r4,2842
2002c4b8:	2002c6a4 	muli	zero,r4,2842
2002c4bc:	2002c6bc 	xorhi	zero,r4,2842
2002c4c0:	2002c4f0 	cmpltui	zero,r4,2835
2002c4c4:	2002c6cc 	andi	zero,r4,2843
2002c4c8:	2002c6cc 	andi	zero,r4,2843
2002c4cc:	2002c6cc 	andi	zero,r4,2843
2002c4d0:	2002c8e8 	cmpgeui	zero,r4,2851
2002c4d4:	2404b03a 	or	r2,r4,r16
2002c4d8:	10006f1e 	bne	r2,zero,2002c698 <__muldf3+0x2f8>
2002c4dc:	04c00204 	movi	r19,8
2002c4e0:	0021883a 	mov	r16,zero
2002c4e4:	0029883a 	mov	r20,zero
2002c4e8:	07000084 	movi	fp,2
2002c4ec:	003fcb06 	br	2002c41c <__alt_data_end+0xfffee41c>
2002c4f0:	502d883a 	mov	r22,r10
2002c4f4:	00800084 	movi	r2,2
2002c4f8:	28805726 	beq	r5,r2,2002c658 <__muldf3+0x2b8>
2002c4fc:	008000c4 	movi	r2,3
2002c500:	28816626 	beq	r5,r2,2002ca9c <__muldf3+0x6fc>
2002c504:	00800044 	movi	r2,1
2002c508:	2881411e 	bne	r5,r2,2002ca10 <__muldf3+0x670>
2002c50c:	b02b883a 	mov	r21,r22
2002c510:	0005883a 	mov	r2,zero
2002c514:	000b883a 	mov	r5,zero
2002c518:	0029883a 	mov	r20,zero
2002c51c:	1004953a 	slli	r2,r2,20
2002c520:	a8c03fcc 	andi	r3,r21,255
2002c524:	04400434 	movhi	r17,16
2002c528:	8c7fffc4 	addi	r17,r17,-1
2002c52c:	180697fa 	slli	r3,r3,31
2002c530:	2c4a703a 	and	r5,r5,r17
2002c534:	288ab03a 	or	r5,r5,r2
2002c538:	28c6b03a 	or	r3,r5,r3
2002c53c:	a005883a 	mov	r2,r20
2002c540:	dfc00c17 	ldw	ra,48(sp)
2002c544:	df000b17 	ldw	fp,44(sp)
2002c548:	ddc00a17 	ldw	r23,40(sp)
2002c54c:	dd800917 	ldw	r22,36(sp)
2002c550:	dd400817 	ldw	r21,32(sp)
2002c554:	dd000717 	ldw	r20,28(sp)
2002c558:	dcc00617 	ldw	r19,24(sp)
2002c55c:	dc800517 	ldw	r18,20(sp)
2002c560:	dc400417 	ldw	r17,16(sp)
2002c564:	dc000317 	ldw	r16,12(sp)
2002c568:	dec00d04 	addi	sp,sp,52
2002c56c:	f800283a 	ret
2002c570:	2404b03a 	or	r2,r4,r16
2002c574:	2027883a 	mov	r19,r4
2002c578:	10004226 	beq	r2,zero,2002c684 <__muldf3+0x2e4>
2002c57c:	8000fc26 	beq	r16,zero,2002c970 <__muldf3+0x5d0>
2002c580:	8009883a 	mov	r4,r16
2002c584:	d9800215 	stw	r6,8(sp)
2002c588:	d9c00015 	stw	r7,0(sp)
2002c58c:	da400115 	stw	r9,4(sp)
2002c590:	002d5b80 	call	2002d5b8 <__clzsi2>
2002c594:	d9800217 	ldw	r6,8(sp)
2002c598:	d9c00017 	ldw	r7,0(sp)
2002c59c:	da400117 	ldw	r9,4(sp)
2002c5a0:	113ffd44 	addi	r4,r2,-11
2002c5a4:	00c00704 	movi	r3,28
2002c5a8:	1900ed16 	blt	r3,r4,2002c960 <__muldf3+0x5c0>
2002c5ac:	00c00744 	movi	r3,29
2002c5b0:	147ffe04 	addi	r17,r2,-8
2002c5b4:	1907c83a 	sub	r3,r3,r4
2002c5b8:	8460983a 	sll	r16,r16,r17
2002c5bc:	98c6d83a 	srl	r3,r19,r3
2002c5c0:	9c68983a 	sll	r20,r19,r17
2002c5c4:	1c20b03a 	or	r16,r3,r16
2002c5c8:	1080fcc4 	addi	r2,r2,1011
2002c5cc:	00a5c83a 	sub	r18,zero,r2
2002c5d0:	0027883a 	mov	r19,zero
2002c5d4:	0039883a 	mov	fp,zero
2002c5d8:	003f9006 	br	2002c41c <__alt_data_end+0xfffee41c>
2002c5dc:	3446b03a 	or	r3,r6,r17
2002c5e0:	1800261e 	bne	r3,zero,2002c67c <__muldf3+0x2dc>
2002c5e4:	0023883a 	mov	r17,zero
2002c5e8:	0011883a 	mov	r8,zero
2002c5ec:	01400084 	movi	r5,2
2002c5f0:	003f9c06 	br	2002c464 <__alt_data_end+0xfffee464>
2002c5f4:	3446b03a 	or	r3,r6,r17
2002c5f8:	18001c26 	beq	r3,zero,2002c66c <__muldf3+0x2cc>
2002c5fc:	8800ce26 	beq	r17,zero,2002c938 <__muldf3+0x598>
2002c600:	8809883a 	mov	r4,r17
2002c604:	d9800215 	stw	r6,8(sp)
2002c608:	da400115 	stw	r9,4(sp)
2002c60c:	da800015 	stw	r10,0(sp)
2002c610:	002d5b80 	call	2002d5b8 <__clzsi2>
2002c614:	d9800217 	ldw	r6,8(sp)
2002c618:	da400117 	ldw	r9,4(sp)
2002c61c:	da800017 	ldw	r10,0(sp)
2002c620:	113ffd44 	addi	r4,r2,-11
2002c624:	00c00704 	movi	r3,28
2002c628:	1900bf16 	blt	r3,r4,2002c928 <__muldf3+0x588>
2002c62c:	00c00744 	movi	r3,29
2002c630:	123ffe04 	addi	r8,r2,-8
2002c634:	1907c83a 	sub	r3,r3,r4
2002c638:	8a22983a 	sll	r17,r17,r8
2002c63c:	30c6d83a 	srl	r3,r6,r3
2002c640:	3210983a 	sll	r8,r6,r8
2002c644:	1c62b03a 	or	r17,r3,r17
2002c648:	1080fcc4 	addi	r2,r2,1011
2002c64c:	0085c83a 	sub	r2,zero,r2
2002c650:	000b883a 	mov	r5,zero
2002c654:	003f8306 	br	2002c464 <__alt_data_end+0xfffee464>
2002c658:	b02b883a 	mov	r21,r22
2002c65c:	0081ffc4 	movi	r2,2047
2002c660:	000b883a 	mov	r5,zero
2002c664:	0029883a 	mov	r20,zero
2002c668:	003fac06 	br	2002c51c <__alt_data_end+0xfffee51c>
2002c66c:	0023883a 	mov	r17,zero
2002c670:	0011883a 	mov	r8,zero
2002c674:	01400044 	movi	r5,1
2002c678:	003f7a06 	br	2002c464 <__alt_data_end+0xfffee464>
2002c67c:	014000c4 	movi	r5,3
2002c680:	003f7806 	br	2002c464 <__alt_data_end+0xfffee464>
2002c684:	04c00104 	movi	r19,4
2002c688:	0021883a 	mov	r16,zero
2002c68c:	0029883a 	mov	r20,zero
2002c690:	07000044 	movi	fp,1
2002c694:	003f6106 	br	2002c41c <__alt_data_end+0xfffee41c>
2002c698:	04c00304 	movi	r19,12
2002c69c:	070000c4 	movi	fp,3
2002c6a0:	003f5e06 	br	2002c41c <__alt_data_end+0xfffee41c>
2002c6a4:	01400434 	movhi	r5,16
2002c6a8:	002b883a 	mov	r21,zero
2002c6ac:	297fffc4 	addi	r5,r5,-1
2002c6b0:	053fffc4 	movi	r20,-1
2002c6b4:	0081ffc4 	movi	r2,2047
2002c6b8:	003f9806 	br	2002c51c <__alt_data_end+0xfffee51c>
2002c6bc:	8023883a 	mov	r17,r16
2002c6c0:	a011883a 	mov	r8,r20
2002c6c4:	e00b883a 	mov	r5,fp
2002c6c8:	003f8a06 	br	2002c4f4 <__alt_data_end+0xfffee4f4>
2002c6cc:	8023883a 	mov	r17,r16
2002c6d0:	a011883a 	mov	r8,r20
2002c6d4:	482d883a 	mov	r22,r9
2002c6d8:	e00b883a 	mov	r5,fp
2002c6dc:	003f8506 	br	2002c4f4 <__alt_data_end+0xfffee4f4>
2002c6e0:	a00ad43a 	srli	r5,r20,16
2002c6e4:	401ad43a 	srli	r13,r8,16
2002c6e8:	a53fffcc 	andi	r20,r20,65535
2002c6ec:	423fffcc 	andi	r8,r8,65535
2002c6f0:	4519383a 	mul	r12,r8,r20
2002c6f4:	4147383a 	mul	r3,r8,r5
2002c6f8:	6d09383a 	mul	r4,r13,r20
2002c6fc:	600cd43a 	srli	r6,r12,16
2002c700:	2b5d383a 	mul	r14,r5,r13
2002c704:	20c9883a 	add	r4,r4,r3
2002c708:	310d883a 	add	r6,r6,r4
2002c70c:	30c0022e 	bgeu	r6,r3,2002c718 <__muldf3+0x378>
2002c710:	00c00074 	movhi	r3,1
2002c714:	70dd883a 	add	r14,r14,r3
2002c718:	8826d43a 	srli	r19,r17,16
2002c71c:	8bffffcc 	andi	r15,r17,65535
2002c720:	7d23383a 	mul	r17,r15,r20
2002c724:	7949383a 	mul	r4,r15,r5
2002c728:	9d29383a 	mul	r20,r19,r20
2002c72c:	8814d43a 	srli	r10,r17,16
2002c730:	3012943a 	slli	r9,r6,16
2002c734:	a129883a 	add	r20,r20,r4
2002c738:	633fffcc 	andi	r12,r12,65535
2002c73c:	5515883a 	add	r10,r10,r20
2002c740:	3006d43a 	srli	r3,r6,16
2002c744:	4b13883a 	add	r9,r9,r12
2002c748:	2ccb383a 	mul	r5,r5,r19
2002c74c:	5100022e 	bgeu	r10,r4,2002c758 <__muldf3+0x3b8>
2002c750:	01000074 	movhi	r4,1
2002c754:	290b883a 	add	r5,r5,r4
2002c758:	802ad43a 	srli	r21,r16,16
2002c75c:	843fffcc 	andi	r16,r16,65535
2002c760:	440d383a 	mul	r6,r8,r16
2002c764:	4565383a 	mul	r18,r8,r21
2002c768:	8349383a 	mul	r4,r16,r13
2002c76c:	500e943a 	slli	r7,r10,16
2002c770:	3010d43a 	srli	r8,r6,16
2002c774:	5028d43a 	srli	r20,r10,16
2002c778:	2489883a 	add	r4,r4,r18
2002c77c:	8abfffcc 	andi	r10,r17,65535
2002c780:	3a95883a 	add	r10,r7,r10
2002c784:	4119883a 	add	r12,r8,r4
2002c788:	a169883a 	add	r20,r20,r5
2002c78c:	1a87883a 	add	r3,r3,r10
2002c790:	6d5b383a 	mul	r13,r13,r21
2002c794:	6480022e 	bgeu	r12,r18,2002c7a0 <__muldf3+0x400>
2002c798:	01000074 	movhi	r4,1
2002c79c:	691b883a 	add	r13,r13,r4
2002c7a0:	7c25383a 	mul	r18,r15,r16
2002c7a4:	7d4b383a 	mul	r5,r15,r21
2002c7a8:	84cf383a 	mul	r7,r16,r19
2002c7ac:	901ed43a 	srli	r15,r18,16
2002c7b0:	6008d43a 	srli	r4,r12,16
2002c7b4:	6010943a 	slli	r8,r12,16
2002c7b8:	394f883a 	add	r7,r7,r5
2002c7bc:	333fffcc 	andi	r12,r6,65535
2002c7c0:	79df883a 	add	r15,r15,r7
2002c7c4:	235b883a 	add	r13,r4,r13
2002c7c8:	9d63383a 	mul	r17,r19,r21
2002c7cc:	4309883a 	add	r4,r8,r12
2002c7d0:	7940022e 	bgeu	r15,r5,2002c7dc <__muldf3+0x43c>
2002c7d4:	01400074 	movhi	r5,1
2002c7d8:	8963883a 	add	r17,r17,r5
2002c7dc:	780a943a 	slli	r5,r15,16
2002c7e0:	91bfffcc 	andi	r6,r18,65535
2002c7e4:	70c7883a 	add	r3,r14,r3
2002c7e8:	298d883a 	add	r6,r5,r6
2002c7ec:	1a8f803a 	cmpltu	r7,r3,r10
2002c7f0:	350b883a 	add	r5,r6,r20
2002c7f4:	20c7883a 	add	r3,r4,r3
2002c7f8:	3955883a 	add	r10,r7,r5
2002c7fc:	1909803a 	cmpltu	r4,r3,r4
2002c800:	6a91883a 	add	r8,r13,r10
2002c804:	780cd43a 	srli	r6,r15,16
2002c808:	2219883a 	add	r12,r4,r8
2002c80c:	2d0b803a 	cmpltu	r5,r5,r20
2002c810:	51cf803a 	cmpltu	r7,r10,r7
2002c814:	29ceb03a 	or	r7,r5,r7
2002c818:	4351803a 	cmpltu	r8,r8,r13
2002c81c:	610b803a 	cmpltu	r5,r12,r4
2002c820:	4148b03a 	or	r4,r8,r5
2002c824:	398f883a 	add	r7,r7,r6
2002c828:	3909883a 	add	r4,r7,r4
2002c82c:	1810927a 	slli	r8,r3,9
2002c830:	2449883a 	add	r4,r4,r17
2002c834:	2008927a 	slli	r4,r4,9
2002c838:	6022d5fa 	srli	r17,r12,23
2002c83c:	1806d5fa 	srli	r3,r3,23
2002c840:	4252b03a 	or	r9,r8,r9
2002c844:	600a927a 	slli	r5,r12,9
2002c848:	4810c03a 	cmpne	r8,r9,zero
2002c84c:	2462b03a 	or	r17,r4,r17
2002c850:	40c6b03a 	or	r3,r8,r3
2002c854:	8900402c 	andhi	r4,r17,256
2002c858:	1950b03a 	or	r8,r3,r5
2002c85c:	20000726 	beq	r4,zero,2002c87c <__muldf3+0x4dc>
2002c860:	4006d07a 	srli	r3,r8,1
2002c864:	880497fa 	slli	r2,r17,31
2002c868:	4200004c 	andi	r8,r8,1
2002c86c:	8822d07a 	srli	r17,r17,1
2002c870:	1a10b03a 	or	r8,r3,r8
2002c874:	1210b03a 	or	r8,r2,r8
2002c878:	5805883a 	mov	r2,r11
2002c87c:	1140ffc4 	addi	r5,r2,1023
2002c880:	0140440e 	bge	zero,r5,2002c994 <__muldf3+0x5f4>
2002c884:	40c001cc 	andi	r3,r8,7
2002c888:	18000726 	beq	r3,zero,2002c8a8 <__muldf3+0x508>
2002c88c:	40c003cc 	andi	r3,r8,15
2002c890:	01000104 	movi	r4,4
2002c894:	19000426 	beq	r3,r4,2002c8a8 <__muldf3+0x508>
2002c898:	4107883a 	add	r3,r8,r4
2002c89c:	1a11803a 	cmpltu	r8,r3,r8
2002c8a0:	8a23883a 	add	r17,r17,r8
2002c8a4:	1811883a 	mov	r8,r3
2002c8a8:	88c0402c 	andhi	r3,r17,256
2002c8ac:	18000426 	beq	r3,zero,2002c8c0 <__muldf3+0x520>
2002c8b0:	11410004 	addi	r5,r2,1024
2002c8b4:	00bfc034 	movhi	r2,65280
2002c8b8:	10bfffc4 	addi	r2,r2,-1
2002c8bc:	88a2703a 	and	r17,r17,r2
2002c8c0:	0081ff84 	movi	r2,2046
2002c8c4:	117f6416 	blt	r2,r5,2002c658 <__alt_data_end+0xfffee658>
2002c8c8:	8828977a 	slli	r20,r17,29
2002c8cc:	4010d0fa 	srli	r8,r8,3
2002c8d0:	8822927a 	slli	r17,r17,9
2002c8d4:	2881ffcc 	andi	r2,r5,2047
2002c8d8:	a228b03a 	or	r20,r20,r8
2002c8dc:	880ad33a 	srli	r5,r17,12
2002c8e0:	b02b883a 	mov	r21,r22
2002c8e4:	003f0d06 	br	2002c51c <__alt_data_end+0xfffee51c>
2002c8e8:	8080022c 	andhi	r2,r16,8
2002c8ec:	10000926 	beq	r2,zero,2002c914 <__muldf3+0x574>
2002c8f0:	8880022c 	andhi	r2,r17,8
2002c8f4:	1000071e 	bne	r2,zero,2002c914 <__muldf3+0x574>
2002c8f8:	00800434 	movhi	r2,16
2002c8fc:	89400234 	orhi	r5,r17,8
2002c900:	10bfffc4 	addi	r2,r2,-1
2002c904:	b82b883a 	mov	r21,r23
2002c908:	288a703a 	and	r5,r5,r2
2002c90c:	4029883a 	mov	r20,r8
2002c910:	003f6806 	br	2002c6b4 <__alt_data_end+0xfffee6b4>
2002c914:	00800434 	movhi	r2,16
2002c918:	81400234 	orhi	r5,r16,8
2002c91c:	10bfffc4 	addi	r2,r2,-1
2002c920:	288a703a 	and	r5,r5,r2
2002c924:	003f6306 	br	2002c6b4 <__alt_data_end+0xfffee6b4>
2002c928:	147ff604 	addi	r17,r2,-40
2002c92c:	3462983a 	sll	r17,r6,r17
2002c930:	0011883a 	mov	r8,zero
2002c934:	003f4406 	br	2002c648 <__alt_data_end+0xfffee648>
2002c938:	3009883a 	mov	r4,r6
2002c93c:	d9800215 	stw	r6,8(sp)
2002c940:	da400115 	stw	r9,4(sp)
2002c944:	da800015 	stw	r10,0(sp)
2002c948:	002d5b80 	call	2002d5b8 <__clzsi2>
2002c94c:	10800804 	addi	r2,r2,32
2002c950:	da800017 	ldw	r10,0(sp)
2002c954:	da400117 	ldw	r9,4(sp)
2002c958:	d9800217 	ldw	r6,8(sp)
2002c95c:	003f3006 	br	2002c620 <__alt_data_end+0xfffee620>
2002c960:	143ff604 	addi	r16,r2,-40
2002c964:	9c20983a 	sll	r16,r19,r16
2002c968:	0029883a 	mov	r20,zero
2002c96c:	003f1606 	br	2002c5c8 <__alt_data_end+0xfffee5c8>
2002c970:	d9800215 	stw	r6,8(sp)
2002c974:	d9c00015 	stw	r7,0(sp)
2002c978:	da400115 	stw	r9,4(sp)
2002c97c:	002d5b80 	call	2002d5b8 <__clzsi2>
2002c980:	10800804 	addi	r2,r2,32
2002c984:	da400117 	ldw	r9,4(sp)
2002c988:	d9c00017 	ldw	r7,0(sp)
2002c98c:	d9800217 	ldw	r6,8(sp)
2002c990:	003f0306 	br	2002c5a0 <__alt_data_end+0xfffee5a0>
2002c994:	00c00044 	movi	r3,1
2002c998:	1947c83a 	sub	r3,r3,r5
2002c99c:	00800e04 	movi	r2,56
2002c9a0:	10feda16 	blt	r2,r3,2002c50c <__alt_data_end+0xfffee50c>
2002c9a4:	008007c4 	movi	r2,31
2002c9a8:	10c01b16 	blt	r2,r3,2002ca18 <__muldf3+0x678>
2002c9ac:	00800804 	movi	r2,32
2002c9b0:	10c5c83a 	sub	r2,r2,r3
2002c9b4:	888a983a 	sll	r5,r17,r2
2002c9b8:	40c8d83a 	srl	r4,r8,r3
2002c9bc:	4084983a 	sll	r2,r8,r2
2002c9c0:	88e2d83a 	srl	r17,r17,r3
2002c9c4:	2906b03a 	or	r3,r5,r4
2002c9c8:	1004c03a 	cmpne	r2,r2,zero
2002c9cc:	1886b03a 	or	r3,r3,r2
2002c9d0:	188001cc 	andi	r2,r3,7
2002c9d4:	10000726 	beq	r2,zero,2002c9f4 <__muldf3+0x654>
2002c9d8:	188003cc 	andi	r2,r3,15
2002c9dc:	01000104 	movi	r4,4
2002c9e0:	11000426 	beq	r2,r4,2002c9f4 <__muldf3+0x654>
2002c9e4:	1805883a 	mov	r2,r3
2002c9e8:	10c00104 	addi	r3,r2,4
2002c9ec:	1885803a 	cmpltu	r2,r3,r2
2002c9f0:	88a3883a 	add	r17,r17,r2
2002c9f4:	8880202c 	andhi	r2,r17,128
2002c9f8:	10001c26 	beq	r2,zero,2002ca6c <__muldf3+0x6cc>
2002c9fc:	b02b883a 	mov	r21,r22
2002ca00:	00800044 	movi	r2,1
2002ca04:	000b883a 	mov	r5,zero
2002ca08:	0029883a 	mov	r20,zero
2002ca0c:	003ec306 	br	2002c51c <__alt_data_end+0xfffee51c>
2002ca10:	5805883a 	mov	r2,r11
2002ca14:	003f9906 	br	2002c87c <__alt_data_end+0xfffee87c>
2002ca18:	00bff844 	movi	r2,-31
2002ca1c:	1145c83a 	sub	r2,r2,r5
2002ca20:	8888d83a 	srl	r4,r17,r2
2002ca24:	00800804 	movi	r2,32
2002ca28:	18801a26 	beq	r3,r2,2002ca94 <__muldf3+0x6f4>
2002ca2c:	00801004 	movi	r2,64
2002ca30:	10c5c83a 	sub	r2,r2,r3
2002ca34:	8884983a 	sll	r2,r17,r2
2002ca38:	1204b03a 	or	r2,r2,r8
2002ca3c:	1004c03a 	cmpne	r2,r2,zero
2002ca40:	2084b03a 	or	r2,r4,r2
2002ca44:	144001cc 	andi	r17,r2,7
2002ca48:	88000d1e 	bne	r17,zero,2002ca80 <__muldf3+0x6e0>
2002ca4c:	000b883a 	mov	r5,zero
2002ca50:	1028d0fa 	srli	r20,r2,3
2002ca54:	b02b883a 	mov	r21,r22
2002ca58:	0005883a 	mov	r2,zero
2002ca5c:	a468b03a 	or	r20,r20,r17
2002ca60:	003eae06 	br	2002c51c <__alt_data_end+0xfffee51c>
2002ca64:	1007883a 	mov	r3,r2
2002ca68:	0023883a 	mov	r17,zero
2002ca6c:	880a927a 	slli	r5,r17,9
2002ca70:	1805883a 	mov	r2,r3
2002ca74:	8822977a 	slli	r17,r17,29
2002ca78:	280ad33a 	srli	r5,r5,12
2002ca7c:	003ff406 	br	2002ca50 <__alt_data_end+0xfffeea50>
2002ca80:	10c003cc 	andi	r3,r2,15
2002ca84:	01000104 	movi	r4,4
2002ca88:	193ff626 	beq	r3,r4,2002ca64 <__alt_data_end+0xfffeea64>
2002ca8c:	0023883a 	mov	r17,zero
2002ca90:	003fd506 	br	2002c9e8 <__alt_data_end+0xfffee9e8>
2002ca94:	0005883a 	mov	r2,zero
2002ca98:	003fe706 	br	2002ca38 <__alt_data_end+0xfffeea38>
2002ca9c:	00800434 	movhi	r2,16
2002caa0:	89400234 	orhi	r5,r17,8
2002caa4:	10bfffc4 	addi	r2,r2,-1
2002caa8:	b02b883a 	mov	r21,r22
2002caac:	288a703a 	and	r5,r5,r2
2002cab0:	4029883a 	mov	r20,r8
2002cab4:	003eff06 	br	2002c6b4 <__alt_data_end+0xfffee6b4>

2002cab8 <__subdf3>:
2002cab8:	02000434 	movhi	r8,16
2002cabc:	423fffc4 	addi	r8,r8,-1
2002cac0:	defffb04 	addi	sp,sp,-20
2002cac4:	2a14703a 	and	r10,r5,r8
2002cac8:	3812d53a 	srli	r9,r7,20
2002cacc:	3a10703a 	and	r8,r7,r8
2002cad0:	2006d77a 	srli	r3,r4,29
2002cad4:	3004d77a 	srli	r2,r6,29
2002cad8:	dc000015 	stw	r16,0(sp)
2002cadc:	501490fa 	slli	r10,r10,3
2002cae0:	2820d53a 	srli	r16,r5,20
2002cae4:	401090fa 	slli	r8,r8,3
2002cae8:	dc800215 	stw	r18,8(sp)
2002caec:	dc400115 	stw	r17,4(sp)
2002caf0:	dfc00415 	stw	ra,16(sp)
2002caf4:	202290fa 	slli	r17,r4,3
2002caf8:	dcc00315 	stw	r19,12(sp)
2002cafc:	4a41ffcc 	andi	r9,r9,2047
2002cb00:	0101ffc4 	movi	r4,2047
2002cb04:	2824d7fa 	srli	r18,r5,31
2002cb08:	8401ffcc 	andi	r16,r16,2047
2002cb0c:	50c6b03a 	or	r3,r10,r3
2002cb10:	380ed7fa 	srli	r7,r7,31
2002cb14:	408ab03a 	or	r5,r8,r2
2002cb18:	300c90fa 	slli	r6,r6,3
2002cb1c:	49009626 	beq	r9,r4,2002cd78 <__subdf3+0x2c0>
2002cb20:	39c0005c 	xori	r7,r7,1
2002cb24:	8245c83a 	sub	r2,r16,r9
2002cb28:	3c807426 	beq	r7,r18,2002ccfc <__subdf3+0x244>
2002cb2c:	0080af0e 	bge	zero,r2,2002cdec <__subdf3+0x334>
2002cb30:	48002a1e 	bne	r9,zero,2002cbdc <__subdf3+0x124>
2002cb34:	2988b03a 	or	r4,r5,r6
2002cb38:	20009a1e 	bne	r4,zero,2002cda4 <__subdf3+0x2ec>
2002cb3c:	888001cc 	andi	r2,r17,7
2002cb40:	10000726 	beq	r2,zero,2002cb60 <__subdf3+0xa8>
2002cb44:	888003cc 	andi	r2,r17,15
2002cb48:	01000104 	movi	r4,4
2002cb4c:	11000426 	beq	r2,r4,2002cb60 <__subdf3+0xa8>
2002cb50:	890b883a 	add	r5,r17,r4
2002cb54:	2c63803a 	cmpltu	r17,r5,r17
2002cb58:	1c47883a 	add	r3,r3,r17
2002cb5c:	2823883a 	mov	r17,r5
2002cb60:	1880202c 	andhi	r2,r3,128
2002cb64:	10005926 	beq	r2,zero,2002cccc <__subdf3+0x214>
2002cb68:	84000044 	addi	r16,r16,1
2002cb6c:	0081ffc4 	movi	r2,2047
2002cb70:	8080be26 	beq	r16,r2,2002ce6c <__subdf3+0x3b4>
2002cb74:	017fe034 	movhi	r5,65408
2002cb78:	297fffc4 	addi	r5,r5,-1
2002cb7c:	1946703a 	and	r3,r3,r5
2002cb80:	1804977a 	slli	r2,r3,29
2002cb84:	1806927a 	slli	r3,r3,9
2002cb88:	8822d0fa 	srli	r17,r17,3
2002cb8c:	8401ffcc 	andi	r16,r16,2047
2002cb90:	180ad33a 	srli	r5,r3,12
2002cb94:	9100004c 	andi	r4,r18,1
2002cb98:	1444b03a 	or	r2,r2,r17
2002cb9c:	80c1ffcc 	andi	r3,r16,2047
2002cba0:	1820953a 	slli	r16,r3,20
2002cba4:	20c03fcc 	andi	r3,r4,255
2002cba8:	180897fa 	slli	r4,r3,31
2002cbac:	00c00434 	movhi	r3,16
2002cbb0:	18ffffc4 	addi	r3,r3,-1
2002cbb4:	28c6703a 	and	r3,r5,r3
2002cbb8:	1c06b03a 	or	r3,r3,r16
2002cbbc:	1906b03a 	or	r3,r3,r4
2002cbc0:	dfc00417 	ldw	ra,16(sp)
2002cbc4:	dcc00317 	ldw	r19,12(sp)
2002cbc8:	dc800217 	ldw	r18,8(sp)
2002cbcc:	dc400117 	ldw	r17,4(sp)
2002cbd0:	dc000017 	ldw	r16,0(sp)
2002cbd4:	dec00504 	addi	sp,sp,20
2002cbd8:	f800283a 	ret
2002cbdc:	0101ffc4 	movi	r4,2047
2002cbe0:	813fd626 	beq	r16,r4,2002cb3c <__alt_data_end+0xfffeeb3c>
2002cbe4:	29402034 	orhi	r5,r5,128
2002cbe8:	01000e04 	movi	r4,56
2002cbec:	2080a316 	blt	r4,r2,2002ce7c <__subdf3+0x3c4>
2002cbf0:	010007c4 	movi	r4,31
2002cbf4:	2080c616 	blt	r4,r2,2002cf10 <__subdf3+0x458>
2002cbf8:	01000804 	movi	r4,32
2002cbfc:	2089c83a 	sub	r4,r4,r2
2002cc00:	2910983a 	sll	r8,r5,r4
2002cc04:	308ed83a 	srl	r7,r6,r2
2002cc08:	3108983a 	sll	r4,r6,r4
2002cc0c:	2884d83a 	srl	r2,r5,r2
2002cc10:	41ccb03a 	or	r6,r8,r7
2002cc14:	2008c03a 	cmpne	r4,r4,zero
2002cc18:	310cb03a 	or	r6,r6,r4
2002cc1c:	898dc83a 	sub	r6,r17,r6
2002cc20:	89a3803a 	cmpltu	r17,r17,r6
2002cc24:	1887c83a 	sub	r3,r3,r2
2002cc28:	1c47c83a 	sub	r3,r3,r17
2002cc2c:	3023883a 	mov	r17,r6
2002cc30:	1880202c 	andhi	r2,r3,128
2002cc34:	10002326 	beq	r2,zero,2002ccc4 <__subdf3+0x20c>
2002cc38:	04c02034 	movhi	r19,128
2002cc3c:	9cffffc4 	addi	r19,r19,-1
2002cc40:	1ce6703a 	and	r19,r3,r19
2002cc44:	98007a26 	beq	r19,zero,2002ce30 <__subdf3+0x378>
2002cc48:	9809883a 	mov	r4,r19
2002cc4c:	002d5b80 	call	2002d5b8 <__clzsi2>
2002cc50:	113ffe04 	addi	r4,r2,-8
2002cc54:	00c007c4 	movi	r3,31
2002cc58:	19007b16 	blt	r3,r4,2002ce48 <__subdf3+0x390>
2002cc5c:	00800804 	movi	r2,32
2002cc60:	1105c83a 	sub	r2,r2,r4
2002cc64:	8884d83a 	srl	r2,r17,r2
2002cc68:	9906983a 	sll	r3,r19,r4
2002cc6c:	8922983a 	sll	r17,r17,r4
2002cc70:	10c4b03a 	or	r2,r2,r3
2002cc74:	24007816 	blt	r4,r16,2002ce58 <__subdf3+0x3a0>
2002cc78:	2421c83a 	sub	r16,r4,r16
2002cc7c:	80c00044 	addi	r3,r16,1
2002cc80:	010007c4 	movi	r4,31
2002cc84:	20c09516 	blt	r4,r3,2002cedc <__subdf3+0x424>
2002cc88:	01400804 	movi	r5,32
2002cc8c:	28cbc83a 	sub	r5,r5,r3
2002cc90:	88c8d83a 	srl	r4,r17,r3
2002cc94:	8962983a 	sll	r17,r17,r5
2002cc98:	114a983a 	sll	r5,r2,r5
2002cc9c:	10c6d83a 	srl	r3,r2,r3
2002cca0:	8804c03a 	cmpne	r2,r17,zero
2002cca4:	290ab03a 	or	r5,r5,r4
2002cca8:	28a2b03a 	or	r17,r5,r2
2002ccac:	0021883a 	mov	r16,zero
2002ccb0:	003fa206 	br	2002cb3c <__alt_data_end+0xfffeeb3c>
2002ccb4:	2090b03a 	or	r8,r4,r2
2002ccb8:	40018e26 	beq	r8,zero,2002d2f4 <__subdf3+0x83c>
2002ccbc:	1007883a 	mov	r3,r2
2002ccc0:	2023883a 	mov	r17,r4
2002ccc4:	888001cc 	andi	r2,r17,7
2002ccc8:	103f9e1e 	bne	r2,zero,2002cb44 <__alt_data_end+0xfffeeb44>
2002cccc:	1804977a 	slli	r2,r3,29
2002ccd0:	8822d0fa 	srli	r17,r17,3
2002ccd4:	1810d0fa 	srli	r8,r3,3
2002ccd8:	9100004c 	andi	r4,r18,1
2002ccdc:	1444b03a 	or	r2,r2,r17
2002cce0:	00c1ffc4 	movi	r3,2047
2002cce4:	80c02826 	beq	r16,r3,2002cd88 <__subdf3+0x2d0>
2002cce8:	01400434 	movhi	r5,16
2002ccec:	297fffc4 	addi	r5,r5,-1
2002ccf0:	80e0703a 	and	r16,r16,r3
2002ccf4:	414a703a 	and	r5,r8,r5
2002ccf8:	003fa806 	br	2002cb9c <__alt_data_end+0xfffeeb9c>
2002ccfc:	0080630e 	bge	zero,r2,2002ce8c <__subdf3+0x3d4>
2002cd00:	48003026 	beq	r9,zero,2002cdc4 <__subdf3+0x30c>
2002cd04:	0101ffc4 	movi	r4,2047
2002cd08:	813f8c26 	beq	r16,r4,2002cb3c <__alt_data_end+0xfffeeb3c>
2002cd0c:	29402034 	orhi	r5,r5,128
2002cd10:	01000e04 	movi	r4,56
2002cd14:	2080a90e 	bge	r4,r2,2002cfbc <__subdf3+0x504>
2002cd18:	298cb03a 	or	r6,r5,r6
2002cd1c:	3012c03a 	cmpne	r9,r6,zero
2002cd20:	0005883a 	mov	r2,zero
2002cd24:	4c53883a 	add	r9,r9,r17
2002cd28:	4c63803a 	cmpltu	r17,r9,r17
2002cd2c:	10c7883a 	add	r3,r2,r3
2002cd30:	88c7883a 	add	r3,r17,r3
2002cd34:	4823883a 	mov	r17,r9
2002cd38:	1880202c 	andhi	r2,r3,128
2002cd3c:	1000d026 	beq	r2,zero,2002d080 <__subdf3+0x5c8>
2002cd40:	84000044 	addi	r16,r16,1
2002cd44:	0081ffc4 	movi	r2,2047
2002cd48:	8080fe26 	beq	r16,r2,2002d144 <__subdf3+0x68c>
2002cd4c:	00bfe034 	movhi	r2,65408
2002cd50:	10bfffc4 	addi	r2,r2,-1
2002cd54:	1886703a 	and	r3,r3,r2
2002cd58:	880ad07a 	srli	r5,r17,1
2002cd5c:	180497fa 	slli	r2,r3,31
2002cd60:	8900004c 	andi	r4,r17,1
2002cd64:	2922b03a 	or	r17,r5,r4
2002cd68:	1806d07a 	srli	r3,r3,1
2002cd6c:	1462b03a 	or	r17,r2,r17
2002cd70:	3825883a 	mov	r18,r7
2002cd74:	003f7106 	br	2002cb3c <__alt_data_end+0xfffeeb3c>
2002cd78:	2984b03a 	or	r2,r5,r6
2002cd7c:	103f6826 	beq	r2,zero,2002cb20 <__alt_data_end+0xfffeeb20>
2002cd80:	39c03fcc 	andi	r7,r7,255
2002cd84:	003f6706 	br	2002cb24 <__alt_data_end+0xfffeeb24>
2002cd88:	4086b03a 	or	r3,r8,r2
2002cd8c:	18015226 	beq	r3,zero,2002d2d8 <__subdf3+0x820>
2002cd90:	00c00434 	movhi	r3,16
2002cd94:	41400234 	orhi	r5,r8,8
2002cd98:	18ffffc4 	addi	r3,r3,-1
2002cd9c:	28ca703a 	and	r5,r5,r3
2002cda0:	003f7e06 	br	2002cb9c <__alt_data_end+0xfffeeb9c>
2002cda4:	10bfffc4 	addi	r2,r2,-1
2002cda8:	1000491e 	bne	r2,zero,2002ced0 <__subdf3+0x418>
2002cdac:	898fc83a 	sub	r7,r17,r6
2002cdb0:	89e3803a 	cmpltu	r17,r17,r7
2002cdb4:	1947c83a 	sub	r3,r3,r5
2002cdb8:	1c47c83a 	sub	r3,r3,r17
2002cdbc:	3823883a 	mov	r17,r7
2002cdc0:	003f9b06 	br	2002cc30 <__alt_data_end+0xfffeec30>
2002cdc4:	2988b03a 	or	r4,r5,r6
2002cdc8:	203f5c26 	beq	r4,zero,2002cb3c <__alt_data_end+0xfffeeb3c>
2002cdcc:	10bfffc4 	addi	r2,r2,-1
2002cdd0:	1000931e 	bne	r2,zero,2002d020 <__subdf3+0x568>
2002cdd4:	898d883a 	add	r6,r17,r6
2002cdd8:	3463803a 	cmpltu	r17,r6,r17
2002cddc:	1947883a 	add	r3,r3,r5
2002cde0:	88c7883a 	add	r3,r17,r3
2002cde4:	3023883a 	mov	r17,r6
2002cde8:	003fd306 	br	2002cd38 <__alt_data_end+0xfffeed38>
2002cdec:	1000541e 	bne	r2,zero,2002cf40 <__subdf3+0x488>
2002cdf0:	80800044 	addi	r2,r16,1
2002cdf4:	1081ffcc 	andi	r2,r2,2047
2002cdf8:	01000044 	movi	r4,1
2002cdfc:	2080a20e 	bge	r4,r2,2002d088 <__subdf3+0x5d0>
2002ce00:	8989c83a 	sub	r4,r17,r6
2002ce04:	8905803a 	cmpltu	r2,r17,r4
2002ce08:	1967c83a 	sub	r19,r3,r5
2002ce0c:	98a7c83a 	sub	r19,r19,r2
2002ce10:	9880202c 	andhi	r2,r19,128
2002ce14:	10006326 	beq	r2,zero,2002cfa4 <__subdf3+0x4ec>
2002ce18:	3463c83a 	sub	r17,r6,r17
2002ce1c:	28c7c83a 	sub	r3,r5,r3
2002ce20:	344d803a 	cmpltu	r6,r6,r17
2002ce24:	19a7c83a 	sub	r19,r3,r6
2002ce28:	3825883a 	mov	r18,r7
2002ce2c:	983f861e 	bne	r19,zero,2002cc48 <__alt_data_end+0xfffeec48>
2002ce30:	8809883a 	mov	r4,r17
2002ce34:	002d5b80 	call	2002d5b8 <__clzsi2>
2002ce38:	10800804 	addi	r2,r2,32
2002ce3c:	113ffe04 	addi	r4,r2,-8
2002ce40:	00c007c4 	movi	r3,31
2002ce44:	193f850e 	bge	r3,r4,2002cc5c <__alt_data_end+0xfffeec5c>
2002ce48:	10bff604 	addi	r2,r2,-40
2002ce4c:	8884983a 	sll	r2,r17,r2
2002ce50:	0023883a 	mov	r17,zero
2002ce54:	243f880e 	bge	r4,r16,2002cc78 <__alt_data_end+0xfffeec78>
2002ce58:	00ffe034 	movhi	r3,65408
2002ce5c:	18ffffc4 	addi	r3,r3,-1
2002ce60:	8121c83a 	sub	r16,r16,r4
2002ce64:	10c6703a 	and	r3,r2,r3
2002ce68:	003f3406 	br	2002cb3c <__alt_data_end+0xfffeeb3c>
2002ce6c:	9100004c 	andi	r4,r18,1
2002ce70:	000b883a 	mov	r5,zero
2002ce74:	0005883a 	mov	r2,zero
2002ce78:	003f4806 	br	2002cb9c <__alt_data_end+0xfffeeb9c>
2002ce7c:	298cb03a 	or	r6,r5,r6
2002ce80:	300cc03a 	cmpne	r6,r6,zero
2002ce84:	0005883a 	mov	r2,zero
2002ce88:	003f6406 	br	2002cc1c <__alt_data_end+0xfffeec1c>
2002ce8c:	10009a1e 	bne	r2,zero,2002d0f8 <__subdf3+0x640>
2002ce90:	82400044 	addi	r9,r16,1
2002ce94:	4881ffcc 	andi	r2,r9,2047
2002ce98:	02800044 	movi	r10,1
2002ce9c:	5080670e 	bge	r10,r2,2002d03c <__subdf3+0x584>
2002cea0:	0081ffc4 	movi	r2,2047
2002cea4:	4880af26 	beq	r9,r2,2002d164 <__subdf3+0x6ac>
2002cea8:	898d883a 	add	r6,r17,r6
2002ceac:	1945883a 	add	r2,r3,r5
2002ceb0:	3447803a 	cmpltu	r3,r6,r17
2002ceb4:	1887883a 	add	r3,r3,r2
2002ceb8:	182297fa 	slli	r17,r3,31
2002cebc:	300cd07a 	srli	r6,r6,1
2002cec0:	1806d07a 	srli	r3,r3,1
2002cec4:	4821883a 	mov	r16,r9
2002cec8:	89a2b03a 	or	r17,r17,r6
2002cecc:	003f1b06 	br	2002cb3c <__alt_data_end+0xfffeeb3c>
2002ced0:	0101ffc4 	movi	r4,2047
2002ced4:	813f441e 	bne	r16,r4,2002cbe8 <__alt_data_end+0xfffeebe8>
2002ced8:	003f1806 	br	2002cb3c <__alt_data_end+0xfffeeb3c>
2002cedc:	843ff844 	addi	r16,r16,-31
2002cee0:	01400804 	movi	r5,32
2002cee4:	1408d83a 	srl	r4,r2,r16
2002cee8:	19405026 	beq	r3,r5,2002d02c <__subdf3+0x574>
2002ceec:	01401004 	movi	r5,64
2002cef0:	28c7c83a 	sub	r3,r5,r3
2002cef4:	10c4983a 	sll	r2,r2,r3
2002cef8:	88a2b03a 	or	r17,r17,r2
2002cefc:	8822c03a 	cmpne	r17,r17,zero
2002cf00:	2462b03a 	or	r17,r4,r17
2002cf04:	0007883a 	mov	r3,zero
2002cf08:	0021883a 	mov	r16,zero
2002cf0c:	003f6d06 	br	2002ccc4 <__alt_data_end+0xfffeecc4>
2002cf10:	11fff804 	addi	r7,r2,-32
2002cf14:	01000804 	movi	r4,32
2002cf18:	29ced83a 	srl	r7,r5,r7
2002cf1c:	11004526 	beq	r2,r4,2002d034 <__subdf3+0x57c>
2002cf20:	01001004 	movi	r4,64
2002cf24:	2089c83a 	sub	r4,r4,r2
2002cf28:	2904983a 	sll	r2,r5,r4
2002cf2c:	118cb03a 	or	r6,r2,r6
2002cf30:	300cc03a 	cmpne	r6,r6,zero
2002cf34:	398cb03a 	or	r6,r7,r6
2002cf38:	0005883a 	mov	r2,zero
2002cf3c:	003f3706 	br	2002cc1c <__alt_data_end+0xfffeec1c>
2002cf40:	80002a26 	beq	r16,zero,2002cfec <__subdf3+0x534>
2002cf44:	0101ffc4 	movi	r4,2047
2002cf48:	49006626 	beq	r9,r4,2002d0e4 <__subdf3+0x62c>
2002cf4c:	0085c83a 	sub	r2,zero,r2
2002cf50:	18c02034 	orhi	r3,r3,128
2002cf54:	01000e04 	movi	r4,56
2002cf58:	20807e16 	blt	r4,r2,2002d154 <__subdf3+0x69c>
2002cf5c:	010007c4 	movi	r4,31
2002cf60:	2080e716 	blt	r4,r2,2002d300 <__subdf3+0x848>
2002cf64:	01000804 	movi	r4,32
2002cf68:	2089c83a 	sub	r4,r4,r2
2002cf6c:	1914983a 	sll	r10,r3,r4
2002cf70:	8890d83a 	srl	r8,r17,r2
2002cf74:	8908983a 	sll	r4,r17,r4
2002cf78:	1884d83a 	srl	r2,r3,r2
2002cf7c:	5222b03a 	or	r17,r10,r8
2002cf80:	2006c03a 	cmpne	r3,r4,zero
2002cf84:	88e2b03a 	or	r17,r17,r3
2002cf88:	3463c83a 	sub	r17,r6,r17
2002cf8c:	2885c83a 	sub	r2,r5,r2
2002cf90:	344d803a 	cmpltu	r6,r6,r17
2002cf94:	1187c83a 	sub	r3,r2,r6
2002cf98:	4821883a 	mov	r16,r9
2002cf9c:	3825883a 	mov	r18,r7
2002cfa0:	003f2306 	br	2002cc30 <__alt_data_end+0xfffeec30>
2002cfa4:	24d0b03a 	or	r8,r4,r19
2002cfa8:	40001b1e 	bne	r8,zero,2002d018 <__subdf3+0x560>
2002cfac:	0005883a 	mov	r2,zero
2002cfb0:	0009883a 	mov	r4,zero
2002cfb4:	0021883a 	mov	r16,zero
2002cfb8:	003f4906 	br	2002cce0 <__alt_data_end+0xfffeece0>
2002cfbc:	010007c4 	movi	r4,31
2002cfc0:	20803a16 	blt	r4,r2,2002d0ac <__subdf3+0x5f4>
2002cfc4:	01000804 	movi	r4,32
2002cfc8:	2089c83a 	sub	r4,r4,r2
2002cfcc:	2912983a 	sll	r9,r5,r4
2002cfd0:	3090d83a 	srl	r8,r6,r2
2002cfd4:	3108983a 	sll	r4,r6,r4
2002cfd8:	2884d83a 	srl	r2,r5,r2
2002cfdc:	4a12b03a 	or	r9,r9,r8
2002cfe0:	2008c03a 	cmpne	r4,r4,zero
2002cfe4:	4912b03a 	or	r9,r9,r4
2002cfe8:	003f4e06 	br	2002cd24 <__alt_data_end+0xfffeed24>
2002cfec:	1c48b03a 	or	r4,r3,r17
2002cff0:	20003c26 	beq	r4,zero,2002d0e4 <__subdf3+0x62c>
2002cff4:	0084303a 	nor	r2,zero,r2
2002cff8:	1000381e 	bne	r2,zero,2002d0dc <__subdf3+0x624>
2002cffc:	3463c83a 	sub	r17,r6,r17
2002d000:	28c5c83a 	sub	r2,r5,r3
2002d004:	344d803a 	cmpltu	r6,r6,r17
2002d008:	1187c83a 	sub	r3,r2,r6
2002d00c:	4821883a 	mov	r16,r9
2002d010:	3825883a 	mov	r18,r7
2002d014:	003f0606 	br	2002cc30 <__alt_data_end+0xfffeec30>
2002d018:	2023883a 	mov	r17,r4
2002d01c:	003f0906 	br	2002cc44 <__alt_data_end+0xfffeec44>
2002d020:	0101ffc4 	movi	r4,2047
2002d024:	813f3a1e 	bne	r16,r4,2002cd10 <__alt_data_end+0xfffeed10>
2002d028:	003ec406 	br	2002cb3c <__alt_data_end+0xfffeeb3c>
2002d02c:	0005883a 	mov	r2,zero
2002d030:	003fb106 	br	2002cef8 <__alt_data_end+0xfffeeef8>
2002d034:	0005883a 	mov	r2,zero
2002d038:	003fbc06 	br	2002cf2c <__alt_data_end+0xfffeef2c>
2002d03c:	1c44b03a 	or	r2,r3,r17
2002d040:	80008e1e 	bne	r16,zero,2002d27c <__subdf3+0x7c4>
2002d044:	1000c826 	beq	r2,zero,2002d368 <__subdf3+0x8b0>
2002d048:	2984b03a 	or	r2,r5,r6
2002d04c:	103ebb26 	beq	r2,zero,2002cb3c <__alt_data_end+0xfffeeb3c>
2002d050:	8989883a 	add	r4,r17,r6
2002d054:	1945883a 	add	r2,r3,r5
2002d058:	2447803a 	cmpltu	r3,r4,r17
2002d05c:	1887883a 	add	r3,r3,r2
2002d060:	1880202c 	andhi	r2,r3,128
2002d064:	2023883a 	mov	r17,r4
2002d068:	103f1626 	beq	r2,zero,2002ccc4 <__alt_data_end+0xfffeecc4>
2002d06c:	00bfe034 	movhi	r2,65408
2002d070:	10bfffc4 	addi	r2,r2,-1
2002d074:	5021883a 	mov	r16,r10
2002d078:	1886703a 	and	r3,r3,r2
2002d07c:	003eaf06 	br	2002cb3c <__alt_data_end+0xfffeeb3c>
2002d080:	3825883a 	mov	r18,r7
2002d084:	003f0f06 	br	2002ccc4 <__alt_data_end+0xfffeecc4>
2002d088:	1c44b03a 	or	r2,r3,r17
2002d08c:	8000251e 	bne	r16,zero,2002d124 <__subdf3+0x66c>
2002d090:	1000661e 	bne	r2,zero,2002d22c <__subdf3+0x774>
2002d094:	2990b03a 	or	r8,r5,r6
2002d098:	40009626 	beq	r8,zero,2002d2f4 <__subdf3+0x83c>
2002d09c:	2807883a 	mov	r3,r5
2002d0a0:	3023883a 	mov	r17,r6
2002d0a4:	3825883a 	mov	r18,r7
2002d0a8:	003ea406 	br	2002cb3c <__alt_data_end+0xfffeeb3c>
2002d0ac:	127ff804 	addi	r9,r2,-32
2002d0b0:	01000804 	movi	r4,32
2002d0b4:	2a52d83a 	srl	r9,r5,r9
2002d0b8:	11008c26 	beq	r2,r4,2002d2ec <__subdf3+0x834>
2002d0bc:	01001004 	movi	r4,64
2002d0c0:	2085c83a 	sub	r2,r4,r2
2002d0c4:	2884983a 	sll	r2,r5,r2
2002d0c8:	118cb03a 	or	r6,r2,r6
2002d0cc:	300cc03a 	cmpne	r6,r6,zero
2002d0d0:	4992b03a 	or	r9,r9,r6
2002d0d4:	0005883a 	mov	r2,zero
2002d0d8:	003f1206 	br	2002cd24 <__alt_data_end+0xfffeed24>
2002d0dc:	0101ffc4 	movi	r4,2047
2002d0e0:	493f9c1e 	bne	r9,r4,2002cf54 <__alt_data_end+0xfffeef54>
2002d0e4:	2807883a 	mov	r3,r5
2002d0e8:	3023883a 	mov	r17,r6
2002d0ec:	4821883a 	mov	r16,r9
2002d0f0:	3825883a 	mov	r18,r7
2002d0f4:	003e9106 	br	2002cb3c <__alt_data_end+0xfffeeb3c>
2002d0f8:	80001f1e 	bne	r16,zero,2002d178 <__subdf3+0x6c0>
2002d0fc:	1c48b03a 	or	r4,r3,r17
2002d100:	20005a26 	beq	r4,zero,2002d26c <__subdf3+0x7b4>
2002d104:	0084303a 	nor	r2,zero,r2
2002d108:	1000561e 	bne	r2,zero,2002d264 <__subdf3+0x7ac>
2002d10c:	89a3883a 	add	r17,r17,r6
2002d110:	1945883a 	add	r2,r3,r5
2002d114:	898d803a 	cmpltu	r6,r17,r6
2002d118:	3087883a 	add	r3,r6,r2
2002d11c:	4821883a 	mov	r16,r9
2002d120:	003f0506 	br	2002cd38 <__alt_data_end+0xfffeed38>
2002d124:	10002b1e 	bne	r2,zero,2002d1d4 <__subdf3+0x71c>
2002d128:	2984b03a 	or	r2,r5,r6
2002d12c:	10008026 	beq	r2,zero,2002d330 <__subdf3+0x878>
2002d130:	2807883a 	mov	r3,r5
2002d134:	3023883a 	mov	r17,r6
2002d138:	3825883a 	mov	r18,r7
2002d13c:	0401ffc4 	movi	r16,2047
2002d140:	003e7e06 	br	2002cb3c <__alt_data_end+0xfffeeb3c>
2002d144:	3809883a 	mov	r4,r7
2002d148:	0011883a 	mov	r8,zero
2002d14c:	0005883a 	mov	r2,zero
2002d150:	003ee306 	br	2002cce0 <__alt_data_end+0xfffeece0>
2002d154:	1c62b03a 	or	r17,r3,r17
2002d158:	8822c03a 	cmpne	r17,r17,zero
2002d15c:	0005883a 	mov	r2,zero
2002d160:	003f8906 	br	2002cf88 <__alt_data_end+0xfffeef88>
2002d164:	3809883a 	mov	r4,r7
2002d168:	4821883a 	mov	r16,r9
2002d16c:	0011883a 	mov	r8,zero
2002d170:	0005883a 	mov	r2,zero
2002d174:	003eda06 	br	2002cce0 <__alt_data_end+0xfffeece0>
2002d178:	0101ffc4 	movi	r4,2047
2002d17c:	49003b26 	beq	r9,r4,2002d26c <__subdf3+0x7b4>
2002d180:	0085c83a 	sub	r2,zero,r2
2002d184:	18c02034 	orhi	r3,r3,128
2002d188:	01000e04 	movi	r4,56
2002d18c:	20806e16 	blt	r4,r2,2002d348 <__subdf3+0x890>
2002d190:	010007c4 	movi	r4,31
2002d194:	20807716 	blt	r4,r2,2002d374 <__subdf3+0x8bc>
2002d198:	01000804 	movi	r4,32
2002d19c:	2089c83a 	sub	r4,r4,r2
2002d1a0:	1914983a 	sll	r10,r3,r4
2002d1a4:	8890d83a 	srl	r8,r17,r2
2002d1a8:	8908983a 	sll	r4,r17,r4
2002d1ac:	1884d83a 	srl	r2,r3,r2
2002d1b0:	5222b03a 	or	r17,r10,r8
2002d1b4:	2006c03a 	cmpne	r3,r4,zero
2002d1b8:	88e2b03a 	or	r17,r17,r3
2002d1bc:	89a3883a 	add	r17,r17,r6
2002d1c0:	1145883a 	add	r2,r2,r5
2002d1c4:	898d803a 	cmpltu	r6,r17,r6
2002d1c8:	3087883a 	add	r3,r6,r2
2002d1cc:	4821883a 	mov	r16,r9
2002d1d0:	003ed906 	br	2002cd38 <__alt_data_end+0xfffeed38>
2002d1d4:	2984b03a 	or	r2,r5,r6
2002d1d8:	10004226 	beq	r2,zero,2002d2e4 <__subdf3+0x82c>
2002d1dc:	1808d0fa 	srli	r4,r3,3
2002d1e0:	8822d0fa 	srli	r17,r17,3
2002d1e4:	1806977a 	slli	r3,r3,29
2002d1e8:	2080022c 	andhi	r2,r4,8
2002d1ec:	1c62b03a 	or	r17,r3,r17
2002d1f0:	10000826 	beq	r2,zero,2002d214 <__subdf3+0x75c>
2002d1f4:	2812d0fa 	srli	r9,r5,3
2002d1f8:	4880022c 	andhi	r2,r9,8
2002d1fc:	1000051e 	bne	r2,zero,2002d214 <__subdf3+0x75c>
2002d200:	300cd0fa 	srli	r6,r6,3
2002d204:	2804977a 	slli	r2,r5,29
2002d208:	4809883a 	mov	r4,r9
2002d20c:	3825883a 	mov	r18,r7
2002d210:	11a2b03a 	or	r17,r2,r6
2002d214:	8806d77a 	srli	r3,r17,29
2002d218:	200890fa 	slli	r4,r4,3
2002d21c:	882290fa 	slli	r17,r17,3
2002d220:	0401ffc4 	movi	r16,2047
2002d224:	1906b03a 	or	r3,r3,r4
2002d228:	003e4406 	br	2002cb3c <__alt_data_end+0xfffeeb3c>
2002d22c:	2984b03a 	or	r2,r5,r6
2002d230:	103e4226 	beq	r2,zero,2002cb3c <__alt_data_end+0xfffeeb3c>
2002d234:	8989c83a 	sub	r4,r17,r6
2002d238:	8911803a 	cmpltu	r8,r17,r4
2002d23c:	1945c83a 	sub	r2,r3,r5
2002d240:	1205c83a 	sub	r2,r2,r8
2002d244:	1200202c 	andhi	r8,r2,128
2002d248:	403e9a26 	beq	r8,zero,2002ccb4 <__alt_data_end+0xfffeecb4>
2002d24c:	3463c83a 	sub	r17,r6,r17
2002d250:	28c5c83a 	sub	r2,r5,r3
2002d254:	344d803a 	cmpltu	r6,r6,r17
2002d258:	1187c83a 	sub	r3,r2,r6
2002d25c:	3825883a 	mov	r18,r7
2002d260:	003e3606 	br	2002cb3c <__alt_data_end+0xfffeeb3c>
2002d264:	0101ffc4 	movi	r4,2047
2002d268:	493fc71e 	bne	r9,r4,2002d188 <__alt_data_end+0xfffef188>
2002d26c:	2807883a 	mov	r3,r5
2002d270:	3023883a 	mov	r17,r6
2002d274:	4821883a 	mov	r16,r9
2002d278:	003e3006 	br	2002cb3c <__alt_data_end+0xfffeeb3c>
2002d27c:	10003626 	beq	r2,zero,2002d358 <__subdf3+0x8a0>
2002d280:	2984b03a 	or	r2,r5,r6
2002d284:	10001726 	beq	r2,zero,2002d2e4 <__subdf3+0x82c>
2002d288:	1808d0fa 	srli	r4,r3,3
2002d28c:	8822d0fa 	srli	r17,r17,3
2002d290:	1806977a 	slli	r3,r3,29
2002d294:	2080022c 	andhi	r2,r4,8
2002d298:	1c62b03a 	or	r17,r3,r17
2002d29c:	10000726 	beq	r2,zero,2002d2bc <__subdf3+0x804>
2002d2a0:	2812d0fa 	srli	r9,r5,3
2002d2a4:	4880022c 	andhi	r2,r9,8
2002d2a8:	1000041e 	bne	r2,zero,2002d2bc <__subdf3+0x804>
2002d2ac:	300cd0fa 	srli	r6,r6,3
2002d2b0:	2804977a 	slli	r2,r5,29
2002d2b4:	4809883a 	mov	r4,r9
2002d2b8:	11a2b03a 	or	r17,r2,r6
2002d2bc:	8806d77a 	srli	r3,r17,29
2002d2c0:	200890fa 	slli	r4,r4,3
2002d2c4:	882290fa 	slli	r17,r17,3
2002d2c8:	3825883a 	mov	r18,r7
2002d2cc:	1906b03a 	or	r3,r3,r4
2002d2d0:	0401ffc4 	movi	r16,2047
2002d2d4:	003e1906 	br	2002cb3c <__alt_data_end+0xfffeeb3c>
2002d2d8:	000b883a 	mov	r5,zero
2002d2dc:	0005883a 	mov	r2,zero
2002d2e0:	003e2e06 	br	2002cb9c <__alt_data_end+0xfffeeb9c>
2002d2e4:	0401ffc4 	movi	r16,2047
2002d2e8:	003e1406 	br	2002cb3c <__alt_data_end+0xfffeeb3c>
2002d2ec:	0005883a 	mov	r2,zero
2002d2f0:	003f7506 	br	2002d0c8 <__alt_data_end+0xfffef0c8>
2002d2f4:	0005883a 	mov	r2,zero
2002d2f8:	0009883a 	mov	r4,zero
2002d2fc:	003e7806 	br	2002cce0 <__alt_data_end+0xfffeece0>
2002d300:	123ff804 	addi	r8,r2,-32
2002d304:	01000804 	movi	r4,32
2002d308:	1a10d83a 	srl	r8,r3,r8
2002d30c:	11002526 	beq	r2,r4,2002d3a4 <__subdf3+0x8ec>
2002d310:	01001004 	movi	r4,64
2002d314:	2085c83a 	sub	r2,r4,r2
2002d318:	1884983a 	sll	r2,r3,r2
2002d31c:	1444b03a 	or	r2,r2,r17
2002d320:	1004c03a 	cmpne	r2,r2,zero
2002d324:	40a2b03a 	or	r17,r8,r2
2002d328:	0005883a 	mov	r2,zero
2002d32c:	003f1606 	br	2002cf88 <__alt_data_end+0xfffeef88>
2002d330:	02000434 	movhi	r8,16
2002d334:	0009883a 	mov	r4,zero
2002d338:	423fffc4 	addi	r8,r8,-1
2002d33c:	00bfffc4 	movi	r2,-1
2002d340:	0401ffc4 	movi	r16,2047
2002d344:	003e6606 	br	2002cce0 <__alt_data_end+0xfffeece0>
2002d348:	1c62b03a 	or	r17,r3,r17
2002d34c:	8822c03a 	cmpne	r17,r17,zero
2002d350:	0005883a 	mov	r2,zero
2002d354:	003f9906 	br	2002d1bc <__alt_data_end+0xfffef1bc>
2002d358:	2807883a 	mov	r3,r5
2002d35c:	3023883a 	mov	r17,r6
2002d360:	0401ffc4 	movi	r16,2047
2002d364:	003df506 	br	2002cb3c <__alt_data_end+0xfffeeb3c>
2002d368:	2807883a 	mov	r3,r5
2002d36c:	3023883a 	mov	r17,r6
2002d370:	003df206 	br	2002cb3c <__alt_data_end+0xfffeeb3c>
2002d374:	123ff804 	addi	r8,r2,-32
2002d378:	01000804 	movi	r4,32
2002d37c:	1a10d83a 	srl	r8,r3,r8
2002d380:	11000a26 	beq	r2,r4,2002d3ac <__subdf3+0x8f4>
2002d384:	01001004 	movi	r4,64
2002d388:	2085c83a 	sub	r2,r4,r2
2002d38c:	1884983a 	sll	r2,r3,r2
2002d390:	1444b03a 	or	r2,r2,r17
2002d394:	1004c03a 	cmpne	r2,r2,zero
2002d398:	40a2b03a 	or	r17,r8,r2
2002d39c:	0005883a 	mov	r2,zero
2002d3a0:	003f8606 	br	2002d1bc <__alt_data_end+0xfffef1bc>
2002d3a4:	0005883a 	mov	r2,zero
2002d3a8:	003fdc06 	br	2002d31c <__alt_data_end+0xfffef31c>
2002d3ac:	0005883a 	mov	r2,zero
2002d3b0:	003ff706 	br	2002d390 <__alt_data_end+0xfffef390>

2002d3b4 <__fixdfsi>:
2002d3b4:	280cd53a 	srli	r6,r5,20
2002d3b8:	00c00434 	movhi	r3,16
2002d3bc:	18ffffc4 	addi	r3,r3,-1
2002d3c0:	3181ffcc 	andi	r6,r6,2047
2002d3c4:	01c0ff84 	movi	r7,1022
2002d3c8:	28c6703a 	and	r3,r5,r3
2002d3cc:	280ad7fa 	srli	r5,r5,31
2002d3d0:	3980120e 	bge	r7,r6,2002d41c <__fixdfsi+0x68>
2002d3d4:	00810744 	movi	r2,1053
2002d3d8:	11800c16 	blt	r2,r6,2002d40c <__fixdfsi+0x58>
2002d3dc:	00810cc4 	movi	r2,1075
2002d3e0:	1185c83a 	sub	r2,r2,r6
2002d3e4:	01c007c4 	movi	r7,31
2002d3e8:	18c00434 	orhi	r3,r3,16
2002d3ec:	38800d16 	blt	r7,r2,2002d424 <__fixdfsi+0x70>
2002d3f0:	31befb44 	addi	r6,r6,-1043
2002d3f4:	2084d83a 	srl	r2,r4,r2
2002d3f8:	1986983a 	sll	r3,r3,r6
2002d3fc:	1884b03a 	or	r2,r3,r2
2002d400:	28000726 	beq	r5,zero,2002d420 <__fixdfsi+0x6c>
2002d404:	0085c83a 	sub	r2,zero,r2
2002d408:	f800283a 	ret
2002d40c:	00a00034 	movhi	r2,32768
2002d410:	10bfffc4 	addi	r2,r2,-1
2002d414:	2885883a 	add	r2,r5,r2
2002d418:	f800283a 	ret
2002d41c:	0005883a 	mov	r2,zero
2002d420:	f800283a 	ret
2002d424:	008104c4 	movi	r2,1043
2002d428:	1185c83a 	sub	r2,r2,r6
2002d42c:	1884d83a 	srl	r2,r3,r2
2002d430:	003ff306 	br	2002d400 <__alt_data_end+0xfffef400>

2002d434 <__floatsidf>:
2002d434:	defffd04 	addi	sp,sp,-12
2002d438:	dfc00215 	stw	ra,8(sp)
2002d43c:	dc400115 	stw	r17,4(sp)
2002d440:	dc000015 	stw	r16,0(sp)
2002d444:	20002b26 	beq	r4,zero,2002d4f4 <__floatsidf+0xc0>
2002d448:	2023883a 	mov	r17,r4
2002d44c:	2020d7fa 	srli	r16,r4,31
2002d450:	20002d16 	blt	r4,zero,2002d508 <__floatsidf+0xd4>
2002d454:	8809883a 	mov	r4,r17
2002d458:	002d5b80 	call	2002d5b8 <__clzsi2>
2002d45c:	01410784 	movi	r5,1054
2002d460:	288bc83a 	sub	r5,r5,r2
2002d464:	01010cc4 	movi	r4,1075
2002d468:	2149c83a 	sub	r4,r4,r5
2002d46c:	00c007c4 	movi	r3,31
2002d470:	1900160e 	bge	r3,r4,2002d4cc <__floatsidf+0x98>
2002d474:	00c104c4 	movi	r3,1043
2002d478:	1947c83a 	sub	r3,r3,r5
2002d47c:	88c6983a 	sll	r3,r17,r3
2002d480:	00800434 	movhi	r2,16
2002d484:	10bfffc4 	addi	r2,r2,-1
2002d488:	1886703a 	and	r3,r3,r2
2002d48c:	2941ffcc 	andi	r5,r5,2047
2002d490:	800d883a 	mov	r6,r16
2002d494:	0005883a 	mov	r2,zero
2002d498:	280a953a 	slli	r5,r5,20
2002d49c:	31803fcc 	andi	r6,r6,255
2002d4a0:	01000434 	movhi	r4,16
2002d4a4:	300c97fa 	slli	r6,r6,31
2002d4a8:	213fffc4 	addi	r4,r4,-1
2002d4ac:	1906703a 	and	r3,r3,r4
2002d4b0:	1946b03a 	or	r3,r3,r5
2002d4b4:	1986b03a 	or	r3,r3,r6
2002d4b8:	dfc00217 	ldw	ra,8(sp)
2002d4bc:	dc400117 	ldw	r17,4(sp)
2002d4c0:	dc000017 	ldw	r16,0(sp)
2002d4c4:	dec00304 	addi	sp,sp,12
2002d4c8:	f800283a 	ret
2002d4cc:	00c002c4 	movi	r3,11
2002d4d0:	1887c83a 	sub	r3,r3,r2
2002d4d4:	88c6d83a 	srl	r3,r17,r3
2002d4d8:	8904983a 	sll	r2,r17,r4
2002d4dc:	01000434 	movhi	r4,16
2002d4e0:	213fffc4 	addi	r4,r4,-1
2002d4e4:	2941ffcc 	andi	r5,r5,2047
2002d4e8:	1906703a 	and	r3,r3,r4
2002d4ec:	800d883a 	mov	r6,r16
2002d4f0:	003fe906 	br	2002d498 <__alt_data_end+0xfffef498>
2002d4f4:	000d883a 	mov	r6,zero
2002d4f8:	000b883a 	mov	r5,zero
2002d4fc:	0007883a 	mov	r3,zero
2002d500:	0005883a 	mov	r2,zero
2002d504:	003fe406 	br	2002d498 <__alt_data_end+0xfffef498>
2002d508:	0123c83a 	sub	r17,zero,r4
2002d50c:	003fd106 	br	2002d454 <__alt_data_end+0xfffef454>

2002d510 <__floatunsidf>:
2002d510:	defffe04 	addi	sp,sp,-8
2002d514:	dc000015 	stw	r16,0(sp)
2002d518:	dfc00115 	stw	ra,4(sp)
2002d51c:	2021883a 	mov	r16,r4
2002d520:	20002226 	beq	r4,zero,2002d5ac <__floatunsidf+0x9c>
2002d524:	002d5b80 	call	2002d5b8 <__clzsi2>
2002d528:	01010784 	movi	r4,1054
2002d52c:	2089c83a 	sub	r4,r4,r2
2002d530:	01810cc4 	movi	r6,1075
2002d534:	310dc83a 	sub	r6,r6,r4
2002d538:	00c007c4 	movi	r3,31
2002d53c:	1980120e 	bge	r3,r6,2002d588 <__floatunsidf+0x78>
2002d540:	00c104c4 	movi	r3,1043
2002d544:	1907c83a 	sub	r3,r3,r4
2002d548:	80ca983a 	sll	r5,r16,r3
2002d54c:	00800434 	movhi	r2,16
2002d550:	10bfffc4 	addi	r2,r2,-1
2002d554:	2101ffcc 	andi	r4,r4,2047
2002d558:	0021883a 	mov	r16,zero
2002d55c:	288a703a 	and	r5,r5,r2
2002d560:	2008953a 	slli	r4,r4,20
2002d564:	00c00434 	movhi	r3,16
2002d568:	18ffffc4 	addi	r3,r3,-1
2002d56c:	28c6703a 	and	r3,r5,r3
2002d570:	8005883a 	mov	r2,r16
2002d574:	1906b03a 	or	r3,r3,r4
2002d578:	dfc00117 	ldw	ra,4(sp)
2002d57c:	dc000017 	ldw	r16,0(sp)
2002d580:	dec00204 	addi	sp,sp,8
2002d584:	f800283a 	ret
2002d588:	00c002c4 	movi	r3,11
2002d58c:	188bc83a 	sub	r5,r3,r2
2002d590:	814ad83a 	srl	r5,r16,r5
2002d594:	00c00434 	movhi	r3,16
2002d598:	18ffffc4 	addi	r3,r3,-1
2002d59c:	81a0983a 	sll	r16,r16,r6
2002d5a0:	2101ffcc 	andi	r4,r4,2047
2002d5a4:	28ca703a 	and	r5,r5,r3
2002d5a8:	003fed06 	br	2002d560 <__alt_data_end+0xfffef560>
2002d5ac:	0009883a 	mov	r4,zero
2002d5b0:	000b883a 	mov	r5,zero
2002d5b4:	003fea06 	br	2002d560 <__alt_data_end+0xfffef560>

2002d5b8 <__clzsi2>:
2002d5b8:	00bfffd4 	movui	r2,65535
2002d5bc:	11000536 	bltu	r2,r4,2002d5d4 <__clzsi2+0x1c>
2002d5c0:	00803fc4 	movi	r2,255
2002d5c4:	11000f36 	bltu	r2,r4,2002d604 <__clzsi2+0x4c>
2002d5c8:	00800804 	movi	r2,32
2002d5cc:	0007883a 	mov	r3,zero
2002d5d0:	00000506 	br	2002d5e8 <__clzsi2+0x30>
2002d5d4:	00804034 	movhi	r2,256
2002d5d8:	10bfffc4 	addi	r2,r2,-1
2002d5dc:	11000c2e 	bgeu	r2,r4,2002d610 <__clzsi2+0x58>
2002d5e0:	00800204 	movi	r2,8
2002d5e4:	00c00604 	movi	r3,24
2002d5e8:	20c8d83a 	srl	r4,r4,r3
2002d5ec:	00c800f4 	movhi	r3,8195
2002d5f0:	18c3ec04 	addi	r3,r3,4016
2002d5f4:	1909883a 	add	r4,r3,r4
2002d5f8:	20c00003 	ldbu	r3,0(r4)
2002d5fc:	10c5c83a 	sub	r2,r2,r3
2002d600:	f800283a 	ret
2002d604:	00800604 	movi	r2,24
2002d608:	00c00204 	movi	r3,8
2002d60c:	003ff606 	br	2002d5e8 <__alt_data_end+0xfffef5e8>
2002d610:	00800404 	movi	r2,16
2002d614:	1007883a 	mov	r3,r2
2002d618:	003ff306 	br	2002d5e8 <__alt_data_end+0xfffef5e8>

2002d61c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2002d61c:	defffe04 	addi	sp,sp,-8
2002d620:	dfc00115 	stw	ra,4(sp)
2002d624:	df000015 	stw	fp,0(sp)
2002d628:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2002d62c:	d0a00b17 	ldw	r2,-32724(gp)
2002d630:	10000326 	beq	r2,zero,2002d640 <alt_get_errno+0x24>
2002d634:	d0a00b17 	ldw	r2,-32724(gp)
2002d638:	103ee83a 	callr	r2
2002d63c:	00000106 	br	2002d644 <alt_get_errno+0x28>
2002d640:	d0a6ec04 	addi	r2,gp,-25680
}
2002d644:	e037883a 	mov	sp,fp
2002d648:	dfc00117 	ldw	ra,4(sp)
2002d64c:	df000017 	ldw	fp,0(sp)
2002d650:	dec00204 	addi	sp,sp,8
2002d654:	f800283a 	ret

2002d658 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
2002d658:	defffb04 	addi	sp,sp,-20
2002d65c:	dfc00415 	stw	ra,16(sp)
2002d660:	df000315 	stw	fp,12(sp)
2002d664:	df000304 	addi	fp,sp,12
2002d668:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
2002d66c:	e0bfff17 	ldw	r2,-4(fp)
2002d670:	10000616 	blt	r2,zero,2002d68c <close+0x34>
2002d674:	e0bfff17 	ldw	r2,-4(fp)
2002d678:	10c00324 	muli	r3,r2,12
2002d67c:	008800f4 	movhi	r2,8195
2002d680:	10867b04 	addi	r2,r2,6636
2002d684:	1885883a 	add	r2,r3,r2
2002d688:	00000106 	br	2002d690 <close+0x38>
2002d68c:	0005883a 	mov	r2,zero
2002d690:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
2002d694:	e0bffd17 	ldw	r2,-12(fp)
2002d698:	10001926 	beq	r2,zero,2002d700 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
2002d69c:	e0bffd17 	ldw	r2,-12(fp)
2002d6a0:	10800017 	ldw	r2,0(r2)
2002d6a4:	10800417 	ldw	r2,16(r2)
2002d6a8:	10000626 	beq	r2,zero,2002d6c4 <close+0x6c>
2002d6ac:	e0bffd17 	ldw	r2,-12(fp)
2002d6b0:	10800017 	ldw	r2,0(r2)
2002d6b4:	10800417 	ldw	r2,16(r2)
2002d6b8:	e13ffd17 	ldw	r4,-12(fp)
2002d6bc:	103ee83a 	callr	r2
2002d6c0:	00000106 	br	2002d6c8 <close+0x70>
2002d6c4:	0005883a 	mov	r2,zero
2002d6c8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
2002d6cc:	e13fff17 	ldw	r4,-4(fp)
2002d6d0:	002dd600 	call	2002dd60 <alt_release_fd>
    if (rval < 0)
2002d6d4:	e0bffe17 	ldw	r2,-8(fp)
2002d6d8:	1000070e 	bge	r2,zero,2002d6f8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
2002d6dc:	002d61c0 	call	2002d61c <alt_get_errno>
2002d6e0:	1007883a 	mov	r3,r2
2002d6e4:	e0bffe17 	ldw	r2,-8(fp)
2002d6e8:	0085c83a 	sub	r2,zero,r2
2002d6ec:	18800015 	stw	r2,0(r3)
      return -1;
2002d6f0:	00bfffc4 	movi	r2,-1
2002d6f4:	00000706 	br	2002d714 <close+0xbc>
    }
    return 0;
2002d6f8:	0005883a 	mov	r2,zero
2002d6fc:	00000506 	br	2002d714 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
2002d700:	002d61c0 	call	2002d61c <alt_get_errno>
2002d704:	1007883a 	mov	r3,r2
2002d708:	00801444 	movi	r2,81
2002d70c:	18800015 	stw	r2,0(r3)
    return -1;
2002d710:	00bfffc4 	movi	r2,-1
  }
}
2002d714:	e037883a 	mov	sp,fp
2002d718:	dfc00117 	ldw	ra,4(sp)
2002d71c:	df000017 	ldw	fp,0(sp)
2002d720:	dec00204 	addi	sp,sp,8
2002d724:	f800283a 	ret

2002d728 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
2002d728:	defffe04 	addi	sp,sp,-8
2002d72c:	df000115 	stw	fp,4(sp)
2002d730:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
2002d734:	e03fff15 	stw	zero,-4(fp)
2002d738:	00000506 	br	2002d750 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
2002d73c:	e0bfff17 	ldw	r2,-4(fp)
2002d740:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
2002d744:	e0bfff17 	ldw	r2,-4(fp)
2002d748:	10800804 	addi	r2,r2,32
2002d74c:	e0bfff15 	stw	r2,-4(fp)
2002d750:	e0bfff17 	ldw	r2,-4(fp)
2002d754:	10820030 	cmpltui	r2,r2,2048
2002d758:	103ff81e 	bne	r2,zero,2002d73c <__alt_data_end+0xfffef73c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
2002d75c:	0001883a 	nop
2002d760:	e037883a 	mov	sp,fp
2002d764:	df000017 	ldw	fp,0(sp)
2002d768:	dec00104 	addi	sp,sp,4
2002d76c:	f800283a 	ret

2002d770 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
2002d770:	defffc04 	addi	sp,sp,-16
2002d774:	df000315 	stw	fp,12(sp)
2002d778:	df000304 	addi	fp,sp,12
2002d77c:	e13ffd15 	stw	r4,-12(fp)
2002d780:	e17ffe15 	stw	r5,-8(fp)
2002d784:	e1bfff15 	stw	r6,-4(fp)
  return len;
2002d788:	e0bfff17 	ldw	r2,-4(fp)
}
2002d78c:	e037883a 	mov	sp,fp
2002d790:	df000017 	ldw	fp,0(sp)
2002d794:	dec00104 	addi	sp,sp,4
2002d798:	f800283a 	ret

2002d79c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2002d79c:	defffe04 	addi	sp,sp,-8
2002d7a0:	dfc00115 	stw	ra,4(sp)
2002d7a4:	df000015 	stw	fp,0(sp)
2002d7a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2002d7ac:	d0a00b17 	ldw	r2,-32724(gp)
2002d7b0:	10000326 	beq	r2,zero,2002d7c0 <alt_get_errno+0x24>
2002d7b4:	d0a00b17 	ldw	r2,-32724(gp)
2002d7b8:	103ee83a 	callr	r2
2002d7bc:	00000106 	br	2002d7c4 <alt_get_errno+0x28>
2002d7c0:	d0a6ec04 	addi	r2,gp,-25680
}
2002d7c4:	e037883a 	mov	sp,fp
2002d7c8:	dfc00117 	ldw	ra,4(sp)
2002d7cc:	df000017 	ldw	fp,0(sp)
2002d7d0:	dec00204 	addi	sp,sp,8
2002d7d4:	f800283a 	ret

2002d7d8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
2002d7d8:	defffb04 	addi	sp,sp,-20
2002d7dc:	dfc00415 	stw	ra,16(sp)
2002d7e0:	df000315 	stw	fp,12(sp)
2002d7e4:	df000304 	addi	fp,sp,12
2002d7e8:	e13ffe15 	stw	r4,-8(fp)
2002d7ec:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
2002d7f0:	e0bffe17 	ldw	r2,-8(fp)
2002d7f4:	10000616 	blt	r2,zero,2002d810 <fstat+0x38>
2002d7f8:	e0bffe17 	ldw	r2,-8(fp)
2002d7fc:	10c00324 	muli	r3,r2,12
2002d800:	008800f4 	movhi	r2,8195
2002d804:	10867b04 	addi	r2,r2,6636
2002d808:	1885883a 	add	r2,r3,r2
2002d80c:	00000106 	br	2002d814 <fstat+0x3c>
2002d810:	0005883a 	mov	r2,zero
2002d814:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
2002d818:	e0bffd17 	ldw	r2,-12(fp)
2002d81c:	10001026 	beq	r2,zero,2002d860 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
2002d820:	e0bffd17 	ldw	r2,-12(fp)
2002d824:	10800017 	ldw	r2,0(r2)
2002d828:	10800817 	ldw	r2,32(r2)
2002d82c:	10000726 	beq	r2,zero,2002d84c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
2002d830:	e0bffd17 	ldw	r2,-12(fp)
2002d834:	10800017 	ldw	r2,0(r2)
2002d838:	10800817 	ldw	r2,32(r2)
2002d83c:	e17fff17 	ldw	r5,-4(fp)
2002d840:	e13ffd17 	ldw	r4,-12(fp)
2002d844:	103ee83a 	callr	r2
2002d848:	00000a06 	br	2002d874 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
2002d84c:	e0bfff17 	ldw	r2,-4(fp)
2002d850:	00c80004 	movi	r3,8192
2002d854:	10c00115 	stw	r3,4(r2)
      return 0;
2002d858:	0005883a 	mov	r2,zero
2002d85c:	00000506 	br	2002d874 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
2002d860:	002d79c0 	call	2002d79c <alt_get_errno>
2002d864:	1007883a 	mov	r3,r2
2002d868:	00801444 	movi	r2,81
2002d86c:	18800015 	stw	r2,0(r3)
    return -1;
2002d870:	00bfffc4 	movi	r2,-1
  }
}
2002d874:	e037883a 	mov	sp,fp
2002d878:	dfc00117 	ldw	ra,4(sp)
2002d87c:	df000017 	ldw	fp,0(sp)
2002d880:	dec00204 	addi	sp,sp,8
2002d884:	f800283a 	ret

2002d888 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2002d888:	defffe04 	addi	sp,sp,-8
2002d88c:	dfc00115 	stw	ra,4(sp)
2002d890:	df000015 	stw	fp,0(sp)
2002d894:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2002d898:	d0a00b17 	ldw	r2,-32724(gp)
2002d89c:	10000326 	beq	r2,zero,2002d8ac <alt_get_errno+0x24>
2002d8a0:	d0a00b17 	ldw	r2,-32724(gp)
2002d8a4:	103ee83a 	callr	r2
2002d8a8:	00000106 	br	2002d8b0 <alt_get_errno+0x28>
2002d8ac:	d0a6ec04 	addi	r2,gp,-25680
}
2002d8b0:	e037883a 	mov	sp,fp
2002d8b4:	dfc00117 	ldw	ra,4(sp)
2002d8b8:	df000017 	ldw	fp,0(sp)
2002d8bc:	dec00204 	addi	sp,sp,8
2002d8c0:	f800283a 	ret

2002d8c4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
2002d8c4:	deffed04 	addi	sp,sp,-76
2002d8c8:	dfc01215 	stw	ra,72(sp)
2002d8cc:	df001115 	stw	fp,68(sp)
2002d8d0:	df001104 	addi	fp,sp,68
2002d8d4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
2002d8d8:	e0bfff17 	ldw	r2,-4(fp)
2002d8dc:	10000616 	blt	r2,zero,2002d8f8 <isatty+0x34>
2002d8e0:	e0bfff17 	ldw	r2,-4(fp)
2002d8e4:	10c00324 	muli	r3,r2,12
2002d8e8:	008800f4 	movhi	r2,8195
2002d8ec:	10867b04 	addi	r2,r2,6636
2002d8f0:	1885883a 	add	r2,r3,r2
2002d8f4:	00000106 	br	2002d8fc <isatty+0x38>
2002d8f8:	0005883a 	mov	r2,zero
2002d8fc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
2002d900:	e0bfef17 	ldw	r2,-68(fp)
2002d904:	10000e26 	beq	r2,zero,2002d940 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
2002d908:	e0bfef17 	ldw	r2,-68(fp)
2002d90c:	10800017 	ldw	r2,0(r2)
2002d910:	10800817 	ldw	r2,32(r2)
2002d914:	1000021e 	bne	r2,zero,2002d920 <isatty+0x5c>
    {
      return 1;
2002d918:	00800044 	movi	r2,1
2002d91c:	00000d06 	br	2002d954 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
2002d920:	e0bff004 	addi	r2,fp,-64
2002d924:	100b883a 	mov	r5,r2
2002d928:	e13fff17 	ldw	r4,-4(fp)
2002d92c:	002d7d80 	call	2002d7d8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
2002d930:	e0bff117 	ldw	r2,-60(fp)
2002d934:	10880020 	cmpeqi	r2,r2,8192
2002d938:	10803fcc 	andi	r2,r2,255
2002d93c:	00000506 	br	2002d954 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
2002d940:	002d8880 	call	2002d888 <alt_get_errno>
2002d944:	1007883a 	mov	r3,r2
2002d948:	00801444 	movi	r2,81
2002d94c:	18800015 	stw	r2,0(r3)
    return 0;
2002d950:	0005883a 	mov	r2,zero
  }
}
2002d954:	e037883a 	mov	sp,fp
2002d958:	dfc00117 	ldw	ra,4(sp)
2002d95c:	df000017 	ldw	fp,0(sp)
2002d960:	dec00204 	addi	sp,sp,8
2002d964:	f800283a 	ret

2002d968 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
2002d968:	defffc04 	addi	sp,sp,-16
2002d96c:	df000315 	stw	fp,12(sp)
2002d970:	df000304 	addi	fp,sp,12
2002d974:	e13ffd15 	stw	r4,-12(fp)
2002d978:	e17ffe15 	stw	r5,-8(fp)
2002d97c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
2002d980:	e0fffe17 	ldw	r3,-8(fp)
2002d984:	e0bffd17 	ldw	r2,-12(fp)
2002d988:	18800c26 	beq	r3,r2,2002d9bc <alt_load_section+0x54>
  {
    while( to != end )
2002d98c:	00000806 	br	2002d9b0 <alt_load_section+0x48>
    {
      *to++ = *from++;
2002d990:	e0bffe17 	ldw	r2,-8(fp)
2002d994:	10c00104 	addi	r3,r2,4
2002d998:	e0fffe15 	stw	r3,-8(fp)
2002d99c:	e0fffd17 	ldw	r3,-12(fp)
2002d9a0:	19000104 	addi	r4,r3,4
2002d9a4:	e13ffd15 	stw	r4,-12(fp)
2002d9a8:	18c00017 	ldw	r3,0(r3)
2002d9ac:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
2002d9b0:	e0fffe17 	ldw	r3,-8(fp)
2002d9b4:	e0bfff17 	ldw	r2,-4(fp)
2002d9b8:	18bff51e 	bne	r3,r2,2002d990 <__alt_data_end+0xfffef990>
    {
      *to++ = *from++;
    }
  }
}
2002d9bc:	0001883a 	nop
2002d9c0:	e037883a 	mov	sp,fp
2002d9c4:	df000017 	ldw	fp,0(sp)
2002d9c8:	dec00104 	addi	sp,sp,4
2002d9cc:	f800283a 	ret

2002d9d0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
2002d9d0:	defffe04 	addi	sp,sp,-8
2002d9d4:	dfc00115 	stw	ra,4(sp)
2002d9d8:	df000015 	stw	fp,0(sp)
2002d9dc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
2002d9e0:	018800f4 	movhi	r6,8195
2002d9e4:	318b1d04 	addi	r6,r6,11380
2002d9e8:	014800f4 	movhi	r5,8195
2002d9ec:	29444804 	addi	r5,r5,4384
2002d9f0:	010800f4 	movhi	r4,8195
2002d9f4:	210b1d04 	addi	r4,r4,11380
2002d9f8:	002d9680 	call	2002d968 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
2002d9fc:	018800b4 	movhi	r6,8194
2002da00:	31809104 	addi	r6,r6,580
2002da04:	014800b4 	movhi	r5,8194
2002da08:	29400804 	addi	r5,r5,32
2002da0c:	010800b4 	movhi	r4,8194
2002da10:	21000804 	addi	r4,r4,32
2002da14:	002d9680 	call	2002d968 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
2002da18:	018800f4 	movhi	r6,8195
2002da1c:	31844804 	addi	r6,r6,4384
2002da20:	014800f4 	movhi	r5,8195
2002da24:	29431504 	addi	r5,r5,3156
2002da28:	010800f4 	movhi	r4,8195
2002da2c:	21031504 	addi	r4,r4,3156
2002da30:	002d9680 	call	2002d968 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
2002da34:	002d7280 	call	2002d728 <alt_dcache_flush_all>
  alt_icache_flush_all();
2002da38:	002fdb80 	call	2002fdb8 <alt_icache_flush_all>
}
2002da3c:	0001883a 	nop
2002da40:	e037883a 	mov	sp,fp
2002da44:	dfc00117 	ldw	ra,4(sp)
2002da48:	df000017 	ldw	fp,0(sp)
2002da4c:	dec00204 	addi	sp,sp,8
2002da50:	f800283a 	ret

2002da54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2002da54:	defffe04 	addi	sp,sp,-8
2002da58:	dfc00115 	stw	ra,4(sp)
2002da5c:	df000015 	stw	fp,0(sp)
2002da60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2002da64:	d0a00b17 	ldw	r2,-32724(gp)
2002da68:	10000326 	beq	r2,zero,2002da78 <alt_get_errno+0x24>
2002da6c:	d0a00b17 	ldw	r2,-32724(gp)
2002da70:	103ee83a 	callr	r2
2002da74:	00000106 	br	2002da7c <alt_get_errno+0x28>
2002da78:	d0a6ec04 	addi	r2,gp,-25680
}
2002da7c:	e037883a 	mov	sp,fp
2002da80:	dfc00117 	ldw	ra,4(sp)
2002da84:	df000017 	ldw	fp,0(sp)
2002da88:	dec00204 	addi	sp,sp,8
2002da8c:	f800283a 	ret

2002da90 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
2002da90:	defff904 	addi	sp,sp,-28
2002da94:	dfc00615 	stw	ra,24(sp)
2002da98:	df000515 	stw	fp,20(sp)
2002da9c:	df000504 	addi	fp,sp,20
2002daa0:	e13ffd15 	stw	r4,-12(fp)
2002daa4:	e17ffe15 	stw	r5,-8(fp)
2002daa8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
2002daac:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
2002dab0:	e0bffd17 	ldw	r2,-12(fp)
2002dab4:	10000616 	blt	r2,zero,2002dad0 <lseek+0x40>
2002dab8:	e0bffd17 	ldw	r2,-12(fp)
2002dabc:	10c00324 	muli	r3,r2,12
2002dac0:	008800f4 	movhi	r2,8195
2002dac4:	10867b04 	addi	r2,r2,6636
2002dac8:	1885883a 	add	r2,r3,r2
2002dacc:	00000106 	br	2002dad4 <lseek+0x44>
2002dad0:	0005883a 	mov	r2,zero
2002dad4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
2002dad8:	e0bffc17 	ldw	r2,-16(fp)
2002dadc:	10001026 	beq	r2,zero,2002db20 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
2002dae0:	e0bffc17 	ldw	r2,-16(fp)
2002dae4:	10800017 	ldw	r2,0(r2)
2002dae8:	10800717 	ldw	r2,28(r2)
2002daec:	10000926 	beq	r2,zero,2002db14 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
2002daf0:	e0bffc17 	ldw	r2,-16(fp)
2002daf4:	10800017 	ldw	r2,0(r2)
2002daf8:	10800717 	ldw	r2,28(r2)
2002dafc:	e1bfff17 	ldw	r6,-4(fp)
2002db00:	e17ffe17 	ldw	r5,-8(fp)
2002db04:	e13ffc17 	ldw	r4,-16(fp)
2002db08:	103ee83a 	callr	r2
2002db0c:	e0bffb15 	stw	r2,-20(fp)
2002db10:	00000506 	br	2002db28 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
2002db14:	00bfde84 	movi	r2,-134
2002db18:	e0bffb15 	stw	r2,-20(fp)
2002db1c:	00000206 	br	2002db28 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
2002db20:	00bfebc4 	movi	r2,-81
2002db24:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
2002db28:	e0bffb17 	ldw	r2,-20(fp)
2002db2c:	1000070e 	bge	r2,zero,2002db4c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
2002db30:	002da540 	call	2002da54 <alt_get_errno>
2002db34:	1007883a 	mov	r3,r2
2002db38:	e0bffb17 	ldw	r2,-20(fp)
2002db3c:	0085c83a 	sub	r2,zero,r2
2002db40:	18800015 	stw	r2,0(r3)
    rc = -1;
2002db44:	00bfffc4 	movi	r2,-1
2002db48:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
2002db4c:	e0bffb17 	ldw	r2,-20(fp)
}
2002db50:	e037883a 	mov	sp,fp
2002db54:	dfc00117 	ldw	ra,4(sp)
2002db58:	df000017 	ldw	fp,0(sp)
2002db5c:	dec00204 	addi	sp,sp,8
2002db60:	f800283a 	ret

2002db64 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
2002db64:	defffd04 	addi	sp,sp,-12
2002db68:	dfc00215 	stw	ra,8(sp)
2002db6c:	df000115 	stw	fp,4(sp)
2002db70:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
2002db74:	0009883a 	mov	r4,zero
2002db78:	002e0b00 	call	2002e0b0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
2002db7c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
2002db80:	002e0e80 	call	2002e0e8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
2002db84:	018800f4 	movhi	r6,8195
2002db88:	31842f04 	addi	r6,r6,4284
2002db8c:	014800f4 	movhi	r5,8195
2002db90:	29442f04 	addi	r5,r5,4284
2002db94:	010800f4 	movhi	r4,8195
2002db98:	21042f04 	addi	r4,r4,4284
2002db9c:	00301500 	call	20030150 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
2002dba0:	002fc680 	call	2002fc68 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
2002dba4:	010800f4 	movhi	r4,8195
2002dba8:	213f3204 	addi	r4,r4,-824
2002dbac:	00308c00 	call	200308c0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
2002dbb0:	d0a6f017 	ldw	r2,-25664(gp)
2002dbb4:	d0e6f117 	ldw	r3,-25660(gp)
2002dbb8:	d126f217 	ldw	r4,-25656(gp)
2002dbbc:	200d883a 	mov	r6,r4
2002dbc0:	180b883a 	mov	r5,r3
2002dbc4:	1009883a 	mov	r4,r2
2002dbc8:	00207f80 	call	200207f8 <main>
2002dbcc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
2002dbd0:	01000044 	movi	r4,1
2002dbd4:	002d6580 	call	2002d658 <close>
  exit (result);
2002dbd8:	e13fff17 	ldw	r4,-4(fp)
2002dbdc:	00308d40 	call	200308d4 <exit>

2002dbe0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
2002dbe0:	defffe04 	addi	sp,sp,-8
2002dbe4:	df000115 	stw	fp,4(sp)
2002dbe8:	df000104 	addi	fp,sp,4
2002dbec:	e13fff15 	stw	r4,-4(fp)
}
2002dbf0:	0001883a 	nop
2002dbf4:	e037883a 	mov	sp,fp
2002dbf8:	df000017 	ldw	fp,0(sp)
2002dbfc:	dec00104 	addi	sp,sp,4
2002dc00:	f800283a 	ret

2002dc04 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
2002dc04:	defffe04 	addi	sp,sp,-8
2002dc08:	df000115 	stw	fp,4(sp)
2002dc0c:	df000104 	addi	fp,sp,4
2002dc10:	e13fff15 	stw	r4,-4(fp)
}
2002dc14:	0001883a 	nop
2002dc18:	e037883a 	mov	sp,fp
2002dc1c:	df000017 	ldw	fp,0(sp)
2002dc20:	dec00104 	addi	sp,sp,4
2002dc24:	f800283a 	ret

2002dc28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2002dc28:	defffe04 	addi	sp,sp,-8
2002dc2c:	dfc00115 	stw	ra,4(sp)
2002dc30:	df000015 	stw	fp,0(sp)
2002dc34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2002dc38:	d0a00b17 	ldw	r2,-32724(gp)
2002dc3c:	10000326 	beq	r2,zero,2002dc4c <alt_get_errno+0x24>
2002dc40:	d0a00b17 	ldw	r2,-32724(gp)
2002dc44:	103ee83a 	callr	r2
2002dc48:	00000106 	br	2002dc50 <alt_get_errno+0x28>
2002dc4c:	d0a6ec04 	addi	r2,gp,-25680
}
2002dc50:	e037883a 	mov	sp,fp
2002dc54:	dfc00117 	ldw	ra,4(sp)
2002dc58:	df000017 	ldw	fp,0(sp)
2002dc5c:	dec00204 	addi	sp,sp,8
2002dc60:	f800283a 	ret

2002dc64 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
2002dc64:	defff904 	addi	sp,sp,-28
2002dc68:	dfc00615 	stw	ra,24(sp)
2002dc6c:	df000515 	stw	fp,20(sp)
2002dc70:	df000504 	addi	fp,sp,20
2002dc74:	e13ffd15 	stw	r4,-12(fp)
2002dc78:	e17ffe15 	stw	r5,-8(fp)
2002dc7c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
2002dc80:	e0bffd17 	ldw	r2,-12(fp)
2002dc84:	10000616 	blt	r2,zero,2002dca0 <read+0x3c>
2002dc88:	e0bffd17 	ldw	r2,-12(fp)
2002dc8c:	10c00324 	muli	r3,r2,12
2002dc90:	008800f4 	movhi	r2,8195
2002dc94:	10867b04 	addi	r2,r2,6636
2002dc98:	1885883a 	add	r2,r3,r2
2002dc9c:	00000106 	br	2002dca4 <read+0x40>
2002dca0:	0005883a 	mov	r2,zero
2002dca4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
2002dca8:	e0bffb17 	ldw	r2,-20(fp)
2002dcac:	10002226 	beq	r2,zero,2002dd38 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
2002dcb0:	e0bffb17 	ldw	r2,-20(fp)
2002dcb4:	10800217 	ldw	r2,8(r2)
2002dcb8:	108000cc 	andi	r2,r2,3
2002dcbc:	10800060 	cmpeqi	r2,r2,1
2002dcc0:	1000181e 	bne	r2,zero,2002dd24 <read+0xc0>
        (fd->dev->read))
2002dcc4:	e0bffb17 	ldw	r2,-20(fp)
2002dcc8:	10800017 	ldw	r2,0(r2)
2002dccc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
2002dcd0:	10001426 	beq	r2,zero,2002dd24 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
2002dcd4:	e0bffb17 	ldw	r2,-20(fp)
2002dcd8:	10800017 	ldw	r2,0(r2)
2002dcdc:	10800517 	ldw	r2,20(r2)
2002dce0:	e0ffff17 	ldw	r3,-4(fp)
2002dce4:	180d883a 	mov	r6,r3
2002dce8:	e17ffe17 	ldw	r5,-8(fp)
2002dcec:	e13ffb17 	ldw	r4,-20(fp)
2002dcf0:	103ee83a 	callr	r2
2002dcf4:	e0bffc15 	stw	r2,-16(fp)
2002dcf8:	e0bffc17 	ldw	r2,-16(fp)
2002dcfc:	1000070e 	bge	r2,zero,2002dd1c <read+0xb8>
        {
          ALT_ERRNO = -rval;
2002dd00:	002dc280 	call	2002dc28 <alt_get_errno>
2002dd04:	1007883a 	mov	r3,r2
2002dd08:	e0bffc17 	ldw	r2,-16(fp)
2002dd0c:	0085c83a 	sub	r2,zero,r2
2002dd10:	18800015 	stw	r2,0(r3)
          return -1;
2002dd14:	00bfffc4 	movi	r2,-1
2002dd18:	00000c06 	br	2002dd4c <read+0xe8>
        }
        return rval;
2002dd1c:	e0bffc17 	ldw	r2,-16(fp)
2002dd20:	00000a06 	br	2002dd4c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
2002dd24:	002dc280 	call	2002dc28 <alt_get_errno>
2002dd28:	1007883a 	mov	r3,r2
2002dd2c:	00800344 	movi	r2,13
2002dd30:	18800015 	stw	r2,0(r3)
2002dd34:	00000406 	br	2002dd48 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
2002dd38:	002dc280 	call	2002dc28 <alt_get_errno>
2002dd3c:	1007883a 	mov	r3,r2
2002dd40:	00801444 	movi	r2,81
2002dd44:	18800015 	stw	r2,0(r3)
  }
  return -1;
2002dd48:	00bfffc4 	movi	r2,-1
}
2002dd4c:	e037883a 	mov	sp,fp
2002dd50:	dfc00117 	ldw	ra,4(sp)
2002dd54:	df000017 	ldw	fp,0(sp)
2002dd58:	dec00204 	addi	sp,sp,8
2002dd5c:	f800283a 	ret

2002dd60 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
2002dd60:	defffe04 	addi	sp,sp,-8
2002dd64:	df000115 	stw	fp,4(sp)
2002dd68:	df000104 	addi	fp,sp,4
2002dd6c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
2002dd70:	e0bfff17 	ldw	r2,-4(fp)
2002dd74:	108000d0 	cmplti	r2,r2,3
2002dd78:	10000d1e 	bne	r2,zero,2002ddb0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
2002dd7c:	008800f4 	movhi	r2,8195
2002dd80:	10867b04 	addi	r2,r2,6636
2002dd84:	e0ffff17 	ldw	r3,-4(fp)
2002dd88:	18c00324 	muli	r3,r3,12
2002dd8c:	10c5883a 	add	r2,r2,r3
2002dd90:	10800204 	addi	r2,r2,8
2002dd94:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
2002dd98:	008800f4 	movhi	r2,8195
2002dd9c:	10867b04 	addi	r2,r2,6636
2002dda0:	e0ffff17 	ldw	r3,-4(fp)
2002dda4:	18c00324 	muli	r3,r3,12
2002dda8:	10c5883a 	add	r2,r2,r3
2002ddac:	10000015 	stw	zero,0(r2)
  }
}
2002ddb0:	0001883a 	nop
2002ddb4:	e037883a 	mov	sp,fp
2002ddb8:	df000017 	ldw	fp,0(sp)
2002ddbc:	dec00104 	addi	sp,sp,4
2002ddc0:	f800283a 	ret

2002ddc4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
2002ddc4:	defff904 	addi	sp,sp,-28
2002ddc8:	df000615 	stw	fp,24(sp)
2002ddcc:	df000604 	addi	fp,sp,24
2002ddd0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002ddd4:	0005303a 	rdctl	r2,status
2002ddd8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002dddc:	e0fffe17 	ldw	r3,-8(fp)
2002dde0:	00bfff84 	movi	r2,-2
2002dde4:	1884703a 	and	r2,r3,r2
2002dde8:	1001703a 	wrctl	status,r2
  
  return context;
2002ddec:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
2002ddf0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
2002ddf4:	d0a00c17 	ldw	r2,-32720(gp)
2002ddf8:	10c000c4 	addi	r3,r2,3
2002ddfc:	00bfff04 	movi	r2,-4
2002de00:	1884703a 	and	r2,r3,r2
2002de04:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
2002de08:	d0e00c17 	ldw	r3,-32720(gp)
2002de0c:	e0bfff17 	ldw	r2,-4(fp)
2002de10:	1887883a 	add	r3,r3,r2
2002de14:	00880134 	movhi	r2,8196
2002de18:	10b80004 	addi	r2,r2,-8192
2002de1c:	10c0062e 	bgeu	r2,r3,2002de38 <sbrk+0x74>
2002de20:	e0bffb17 	ldw	r2,-20(fp)
2002de24:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002de28:	e0bffa17 	ldw	r2,-24(fp)
2002de2c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
2002de30:	00bfffc4 	movi	r2,-1
2002de34:	00000b06 	br	2002de64 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
2002de38:	d0a00c17 	ldw	r2,-32720(gp)
2002de3c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
2002de40:	d0e00c17 	ldw	r3,-32720(gp)
2002de44:	e0bfff17 	ldw	r2,-4(fp)
2002de48:	1885883a 	add	r2,r3,r2
2002de4c:	d0a00c15 	stw	r2,-32720(gp)
2002de50:	e0bffb17 	ldw	r2,-20(fp)
2002de54:	e0bffc15 	stw	r2,-16(fp)
2002de58:	e0bffc17 	ldw	r2,-16(fp)
2002de5c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
2002de60:	e0bffd17 	ldw	r2,-12(fp)
} 
2002de64:	e037883a 	mov	sp,fp
2002de68:	df000017 	ldw	fp,0(sp)
2002de6c:	dec00104 	addi	sp,sp,4
2002de70:	f800283a 	ret

2002de74 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
2002de74:	defffd04 	addi	sp,sp,-12
2002de78:	dfc00215 	stw	ra,8(sp)
2002de7c:	df000115 	stw	fp,4(sp)
2002de80:	df000104 	addi	fp,sp,4
2002de84:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
2002de88:	e13fff17 	ldw	r4,-4(fp)
2002de8c:	002fa300 	call	2002fa30 <alt_busy_sleep>
}
2002de90:	e037883a 	mov	sp,fp
2002de94:	dfc00117 	ldw	ra,4(sp)
2002de98:	df000017 	ldw	fp,0(sp)
2002de9c:	dec00204 	addi	sp,sp,8
2002dea0:	f800283a 	ret

2002dea4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2002dea4:	defffe04 	addi	sp,sp,-8
2002dea8:	dfc00115 	stw	ra,4(sp)
2002deac:	df000015 	stw	fp,0(sp)
2002deb0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2002deb4:	d0a00b17 	ldw	r2,-32724(gp)
2002deb8:	10000326 	beq	r2,zero,2002dec8 <alt_get_errno+0x24>
2002debc:	d0a00b17 	ldw	r2,-32724(gp)
2002dec0:	103ee83a 	callr	r2
2002dec4:	00000106 	br	2002decc <alt_get_errno+0x28>
2002dec8:	d0a6ec04 	addi	r2,gp,-25680
}
2002decc:	e037883a 	mov	sp,fp
2002ded0:	dfc00117 	ldw	ra,4(sp)
2002ded4:	df000017 	ldw	fp,0(sp)
2002ded8:	dec00204 	addi	sp,sp,8
2002dedc:	f800283a 	ret

2002dee0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
2002dee0:	defff904 	addi	sp,sp,-28
2002dee4:	dfc00615 	stw	ra,24(sp)
2002dee8:	df000515 	stw	fp,20(sp)
2002deec:	df000504 	addi	fp,sp,20
2002def0:	e13ffd15 	stw	r4,-12(fp)
2002def4:	e17ffe15 	stw	r5,-8(fp)
2002def8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
2002defc:	e0bffd17 	ldw	r2,-12(fp)
2002df00:	10000616 	blt	r2,zero,2002df1c <write+0x3c>
2002df04:	e0bffd17 	ldw	r2,-12(fp)
2002df08:	10c00324 	muli	r3,r2,12
2002df0c:	008800f4 	movhi	r2,8195
2002df10:	10867b04 	addi	r2,r2,6636
2002df14:	1885883a 	add	r2,r3,r2
2002df18:	00000106 	br	2002df20 <write+0x40>
2002df1c:	0005883a 	mov	r2,zero
2002df20:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
2002df24:	e0bffb17 	ldw	r2,-20(fp)
2002df28:	10002126 	beq	r2,zero,2002dfb0 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
2002df2c:	e0bffb17 	ldw	r2,-20(fp)
2002df30:	10800217 	ldw	r2,8(r2)
2002df34:	108000cc 	andi	r2,r2,3
2002df38:	10001826 	beq	r2,zero,2002df9c <write+0xbc>
2002df3c:	e0bffb17 	ldw	r2,-20(fp)
2002df40:	10800017 	ldw	r2,0(r2)
2002df44:	10800617 	ldw	r2,24(r2)
2002df48:	10001426 	beq	r2,zero,2002df9c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
2002df4c:	e0bffb17 	ldw	r2,-20(fp)
2002df50:	10800017 	ldw	r2,0(r2)
2002df54:	10800617 	ldw	r2,24(r2)
2002df58:	e0ffff17 	ldw	r3,-4(fp)
2002df5c:	180d883a 	mov	r6,r3
2002df60:	e17ffe17 	ldw	r5,-8(fp)
2002df64:	e13ffb17 	ldw	r4,-20(fp)
2002df68:	103ee83a 	callr	r2
2002df6c:	e0bffc15 	stw	r2,-16(fp)
2002df70:	e0bffc17 	ldw	r2,-16(fp)
2002df74:	1000070e 	bge	r2,zero,2002df94 <write+0xb4>
      {
        ALT_ERRNO = -rval;
2002df78:	002dea40 	call	2002dea4 <alt_get_errno>
2002df7c:	1007883a 	mov	r3,r2
2002df80:	e0bffc17 	ldw	r2,-16(fp)
2002df84:	0085c83a 	sub	r2,zero,r2
2002df88:	18800015 	stw	r2,0(r3)
        return -1;
2002df8c:	00bfffc4 	movi	r2,-1
2002df90:	00000c06 	br	2002dfc4 <write+0xe4>
      }
      return rval;
2002df94:	e0bffc17 	ldw	r2,-16(fp)
2002df98:	00000a06 	br	2002dfc4 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
2002df9c:	002dea40 	call	2002dea4 <alt_get_errno>
2002dfa0:	1007883a 	mov	r3,r2
2002dfa4:	00800344 	movi	r2,13
2002dfa8:	18800015 	stw	r2,0(r3)
2002dfac:	00000406 	br	2002dfc0 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
2002dfb0:	002dea40 	call	2002dea4 <alt_get_errno>
2002dfb4:	1007883a 	mov	r3,r2
2002dfb8:	00801444 	movi	r2,81
2002dfbc:	18800015 	stw	r2,0(r3)
  }
  return -1;
2002dfc0:	00bfffc4 	movi	r2,-1
}
2002dfc4:	e037883a 	mov	sp,fp
2002dfc8:	dfc00117 	ldw	ra,4(sp)
2002dfcc:	df000017 	ldw	fp,0(sp)
2002dfd0:	dec00204 	addi	sp,sp,8
2002dfd4:	f800283a 	ret

2002dfd8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
2002dfd8:	defffd04 	addi	sp,sp,-12
2002dfdc:	dfc00215 	stw	ra,8(sp)
2002dfe0:	df000115 	stw	fp,4(sp)
2002dfe4:	df000104 	addi	fp,sp,4
2002dfe8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
2002dfec:	d1600804 	addi	r5,gp,-32736
2002dff0:	e13fff17 	ldw	r4,-4(fp)
2002dff4:	002fbc40 	call	2002fbc4 <alt_dev_llist_insert>
}
2002dff8:	e037883a 	mov	sp,fp
2002dffc:	dfc00117 	ldw	ra,4(sp)
2002e000:	df000017 	ldw	fp,0(sp)
2002e004:	dec00204 	addi	sp,sp,8
2002e008:	f800283a 	ret

2002e00c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2002e00c:	defffe04 	addi	sp,sp,-8
2002e010:	dfc00115 	stw	ra,4(sp)
2002e014:	df000015 	stw	fp,0(sp)
2002e018:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2002e01c:	d0a00b17 	ldw	r2,-32724(gp)
2002e020:	10000326 	beq	r2,zero,2002e030 <alt_get_errno+0x24>
2002e024:	d0a00b17 	ldw	r2,-32724(gp)
2002e028:	103ee83a 	callr	r2
2002e02c:	00000106 	br	2002e034 <alt_get_errno+0x28>
2002e030:	d0a6ec04 	addi	r2,gp,-25680
}
2002e034:	e037883a 	mov	sp,fp
2002e038:	dfc00117 	ldw	ra,4(sp)
2002e03c:	df000017 	ldw	fp,0(sp)
2002e040:	dec00204 	addi	sp,sp,8
2002e044:	f800283a 	ret

2002e048 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
2002e048:	defffc04 	addi	sp,sp,-16
2002e04c:	dfc00315 	stw	ra,12(sp)
2002e050:	df000215 	stw	fp,8(sp)
2002e054:	df000204 	addi	fp,sp,8
2002e058:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
2002e05c:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
2002e060:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
2002e064:	e0bffe17 	ldw	r2,-8(fp)
2002e068:	1000051e 	bne	r2,zero,2002e080 <alt_avalon_mutex_reg+0x38>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
2002e06c:	d1600f04 	addi	r5,gp,-32708
2002e070:	e13fff17 	ldw	r4,-4(fp)
2002e074:	002fbc40 	call	2002fbc4 <alt_dev_llist_insert>
2002e078:	e0bffe15 	stw	r2,-8(fp)
2002e07c:	00000606 	br	2002e098 <alt_avalon_mutex_reg+0x50>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
2002e080:	002e00c0 	call	2002e00c <alt_get_errno>
2002e084:	1007883a 	mov	r3,r2
2002e088:	00800304 	movi	r2,12
2002e08c:	18800015 	stw	r2,0(r3)
    ret_code = -ENOMEM;
2002e090:	00bffd04 	movi	r2,-12
2002e094:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
2002e098:	e0bffe17 	ldw	r2,-8(fp)
}
2002e09c:	e037883a 	mov	sp,fp
2002e0a0:	dfc00117 	ldw	ra,4(sp)
2002e0a4:	df000017 	ldw	fp,0(sp)
2002e0a8:	dec00204 	addi	sp,sp,8
2002e0ac:	f800283a 	ret

2002e0b0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
2002e0b0:	defffd04 	addi	sp,sp,-12
2002e0b4:	dfc00215 	stw	ra,8(sp)
2002e0b8:	df000115 	stw	fp,4(sp)
2002e0bc:	df000104 	addi	fp,sp,4
2002e0c0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU_0_0_NIOS2_GEN2_0, cpu_0_0_nios2_gen2_0);
2002e0c4:	00305c40 	call	200305c4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
2002e0c8:	00800044 	movi	r2,1
2002e0cc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
2002e0d0:	0001883a 	nop
2002e0d4:	e037883a 	mov	sp,fp
2002e0d8:	dfc00117 	ldw	ra,4(sp)
2002e0dc:	df000017 	ldw	fp,0(sp)
2002e0e0:	dec00204 	addi	sp,sp,8
2002e0e4:	f800283a 	ret

2002e0e8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
2002e0e8:	defffe04 	addi	sp,sp,-8
2002e0ec:	dfc00115 	stw	ra,4(sp)
2002e0f0:	df000015 	stw	fp,0(sp)
2002e0f4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( CPU_0_0_TIMER_0, cpu_0_0_timer_0);
2002e0f8:	01c9c404 	movi	r7,10000
2002e0fc:	01800044 	movi	r6,1
2002e100:	000b883a 	mov	r5,zero
2002e104:	01080134 	movhi	r4,8196
2002e108:	21041804 	addi	r4,r4,4192
2002e10c:	002f8880 	call	2002f888 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( CPU_0_0_JTAG_UART_0, cpu_0_0_jtag_uart_0);
2002e110:	01800084 	movi	r6,2
2002e114:	000b883a 	mov	r5,zero
2002e118:	010800f4 	movhi	r4,8195
2002e11c:	2106e504 	addi	r4,r4,7060
2002e120:	002e2e00 	call	2002e2e0 <altera_avalon_jtag_uart_init>
2002e124:	010800f4 	movhi	r4,8195
2002e128:	2106db04 	addi	r4,r4,7020
2002e12c:	002dfd80 	call	2002dfd8 <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( SHARED_MAILBOX, shared_mailbox);
2002e130:	01bfffc4 	movi	r6,-1
2002e134:	000b883a 	mov	r5,zero
2002e138:	010800f4 	movhi	r4,8195
2002e13c:	210af304 	addi	r4,r4,11212
2002e140:	002eecc0 	call	2002eecc <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MUTEX_INIT ( SHARED_MUTEX_PIO, shared_mutex_PIO);
2002e144:	010800f4 	movhi	r4,8195
2002e148:	210b0504 	addi	r4,r4,11284
2002e14c:	002e0480 	call	2002e048 <alt_avalon_mutex_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( CPU_0_0_PERC_0, cpu_0_0_PERC_0);
2002e150:	00c00044 	movi	r3,1
2002e154:	00880134 	movhi	r2,8196
2002e158:	10840004 	addi	r2,r2,4096
2002e15c:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
2002e160:	0001883a 	nop
}
2002e164:	0001883a 	nop
2002e168:	e037883a 	mov	sp,fp
2002e16c:	dfc00117 	ldw	ra,4(sp)
2002e170:	df000017 	ldw	fp,0(sp)
2002e174:	dec00204 	addi	sp,sp,8
2002e178:	f800283a 	ret

2002e17c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
2002e17c:	defffa04 	addi	sp,sp,-24
2002e180:	dfc00515 	stw	ra,20(sp)
2002e184:	df000415 	stw	fp,16(sp)
2002e188:	df000404 	addi	fp,sp,16
2002e18c:	e13ffd15 	stw	r4,-12(fp)
2002e190:	e17ffe15 	stw	r5,-8(fp)
2002e194:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
2002e198:	e0bffd17 	ldw	r2,-12(fp)
2002e19c:	10800017 	ldw	r2,0(r2)
2002e1a0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
2002e1a4:	e0bffc17 	ldw	r2,-16(fp)
2002e1a8:	10c00a04 	addi	r3,r2,40
2002e1ac:	e0bffd17 	ldw	r2,-12(fp)
2002e1b0:	10800217 	ldw	r2,8(r2)
2002e1b4:	100f883a 	mov	r7,r2
2002e1b8:	e1bfff17 	ldw	r6,-4(fp)
2002e1bc:	e17ffe17 	ldw	r5,-8(fp)
2002e1c0:	1809883a 	mov	r4,r3
2002e1c4:	002e7a40 	call	2002e7a4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
2002e1c8:	e037883a 	mov	sp,fp
2002e1cc:	dfc00117 	ldw	ra,4(sp)
2002e1d0:	df000017 	ldw	fp,0(sp)
2002e1d4:	dec00204 	addi	sp,sp,8
2002e1d8:	f800283a 	ret

2002e1dc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
2002e1dc:	defffa04 	addi	sp,sp,-24
2002e1e0:	dfc00515 	stw	ra,20(sp)
2002e1e4:	df000415 	stw	fp,16(sp)
2002e1e8:	df000404 	addi	fp,sp,16
2002e1ec:	e13ffd15 	stw	r4,-12(fp)
2002e1f0:	e17ffe15 	stw	r5,-8(fp)
2002e1f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
2002e1f8:	e0bffd17 	ldw	r2,-12(fp)
2002e1fc:	10800017 	ldw	r2,0(r2)
2002e200:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
2002e204:	e0bffc17 	ldw	r2,-16(fp)
2002e208:	10c00a04 	addi	r3,r2,40
2002e20c:	e0bffd17 	ldw	r2,-12(fp)
2002e210:	10800217 	ldw	r2,8(r2)
2002e214:	100f883a 	mov	r7,r2
2002e218:	e1bfff17 	ldw	r6,-4(fp)
2002e21c:	e17ffe17 	ldw	r5,-8(fp)
2002e220:	1809883a 	mov	r4,r3
2002e224:	002e9c00 	call	2002e9c0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
2002e228:	e037883a 	mov	sp,fp
2002e22c:	dfc00117 	ldw	ra,4(sp)
2002e230:	df000017 	ldw	fp,0(sp)
2002e234:	dec00204 	addi	sp,sp,8
2002e238:	f800283a 	ret

2002e23c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
2002e23c:	defffc04 	addi	sp,sp,-16
2002e240:	dfc00315 	stw	ra,12(sp)
2002e244:	df000215 	stw	fp,8(sp)
2002e248:	df000204 	addi	fp,sp,8
2002e24c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
2002e250:	e0bfff17 	ldw	r2,-4(fp)
2002e254:	10800017 	ldw	r2,0(r2)
2002e258:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
2002e25c:	e0bffe17 	ldw	r2,-8(fp)
2002e260:	10c00a04 	addi	r3,r2,40
2002e264:	e0bfff17 	ldw	r2,-4(fp)
2002e268:	10800217 	ldw	r2,8(r2)
2002e26c:	100b883a 	mov	r5,r2
2002e270:	1809883a 	mov	r4,r3
2002e274:	002e64c0 	call	2002e64c <altera_avalon_jtag_uart_close>
}
2002e278:	e037883a 	mov	sp,fp
2002e27c:	dfc00117 	ldw	ra,4(sp)
2002e280:	df000017 	ldw	fp,0(sp)
2002e284:	dec00204 	addi	sp,sp,8
2002e288:	f800283a 	ret

2002e28c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
2002e28c:	defffa04 	addi	sp,sp,-24
2002e290:	dfc00515 	stw	ra,20(sp)
2002e294:	df000415 	stw	fp,16(sp)
2002e298:	df000404 	addi	fp,sp,16
2002e29c:	e13ffd15 	stw	r4,-12(fp)
2002e2a0:	e17ffe15 	stw	r5,-8(fp)
2002e2a4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
2002e2a8:	e0bffd17 	ldw	r2,-12(fp)
2002e2ac:	10800017 	ldw	r2,0(r2)
2002e2b0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
2002e2b4:	e0bffc17 	ldw	r2,-16(fp)
2002e2b8:	10800a04 	addi	r2,r2,40
2002e2bc:	e1bfff17 	ldw	r6,-4(fp)
2002e2c0:	e17ffe17 	ldw	r5,-8(fp)
2002e2c4:	1009883a 	mov	r4,r2
2002e2c8:	002e6b40 	call	2002e6b4 <altera_avalon_jtag_uart_ioctl>
}
2002e2cc:	e037883a 	mov	sp,fp
2002e2d0:	dfc00117 	ldw	ra,4(sp)
2002e2d4:	df000017 	ldw	fp,0(sp)
2002e2d8:	dec00204 	addi	sp,sp,8
2002e2dc:	f800283a 	ret

2002e2e0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
2002e2e0:	defffa04 	addi	sp,sp,-24
2002e2e4:	dfc00515 	stw	ra,20(sp)
2002e2e8:	df000415 	stw	fp,16(sp)
2002e2ec:	df000404 	addi	fp,sp,16
2002e2f0:	e13ffd15 	stw	r4,-12(fp)
2002e2f4:	e17ffe15 	stw	r5,-8(fp)
2002e2f8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
2002e2fc:	e0bffd17 	ldw	r2,-12(fp)
2002e300:	00c00044 	movi	r3,1
2002e304:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
2002e308:	e0bffd17 	ldw	r2,-12(fp)
2002e30c:	10800017 	ldw	r2,0(r2)
2002e310:	10800104 	addi	r2,r2,4
2002e314:	1007883a 	mov	r3,r2
2002e318:	e0bffd17 	ldw	r2,-12(fp)
2002e31c:	10800817 	ldw	r2,32(r2)
2002e320:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
2002e324:	e0bffe17 	ldw	r2,-8(fp)
2002e328:	e0ffff17 	ldw	r3,-4(fp)
2002e32c:	d8000015 	stw	zero,0(sp)
2002e330:	e1fffd17 	ldw	r7,-12(fp)
2002e334:	018800f4 	movhi	r6,8195
2002e338:	31b8e804 	addi	r6,r6,-7264
2002e33c:	180b883a 	mov	r5,r3
2002e340:	1009883a 	mov	r4,r2
2002e344:	002fdec0 	call	2002fdec <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
2002e348:	e0bffd17 	ldw	r2,-12(fp)
2002e34c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
2002e350:	e0bffd17 	ldw	r2,-12(fp)
2002e354:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
2002e358:	d0e6f417 	ldw	r3,-25648(gp)
2002e35c:	e1fffd17 	ldw	r7,-12(fp)
2002e360:	018800f4 	movhi	r6,8195
2002e364:	31b96b04 	addi	r6,r6,-6740
2002e368:	180b883a 	mov	r5,r3
2002e36c:	1009883a 	mov	r4,r2
2002e370:	002f9040 	call	2002f904 <alt_alarm_start>
2002e374:	1000040e 	bge	r2,zero,2002e388 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
2002e378:	e0fffd17 	ldw	r3,-12(fp)
2002e37c:	00a00034 	movhi	r2,32768
2002e380:	10bfffc4 	addi	r2,r2,-1
2002e384:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
2002e388:	0001883a 	nop
2002e38c:	e037883a 	mov	sp,fp
2002e390:	dfc00117 	ldw	ra,4(sp)
2002e394:	df000017 	ldw	fp,0(sp)
2002e398:	dec00204 	addi	sp,sp,8
2002e39c:	f800283a 	ret

2002e3a0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
2002e3a0:	defff804 	addi	sp,sp,-32
2002e3a4:	df000715 	stw	fp,28(sp)
2002e3a8:	df000704 	addi	fp,sp,28
2002e3ac:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
2002e3b0:	e0bfff17 	ldw	r2,-4(fp)
2002e3b4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
2002e3b8:	e0bffb17 	ldw	r2,-20(fp)
2002e3bc:	10800017 	ldw	r2,0(r2)
2002e3c0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
2002e3c4:	e0bffc17 	ldw	r2,-16(fp)
2002e3c8:	10800104 	addi	r2,r2,4
2002e3cc:	10800037 	ldwio	r2,0(r2)
2002e3d0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
2002e3d4:	e0bffd17 	ldw	r2,-12(fp)
2002e3d8:	1080c00c 	andi	r2,r2,768
2002e3dc:	10006d26 	beq	r2,zero,2002e594 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
2002e3e0:	e0bffd17 	ldw	r2,-12(fp)
2002e3e4:	1080400c 	andi	r2,r2,256
2002e3e8:	10003526 	beq	r2,zero,2002e4c0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
2002e3ec:	00800074 	movhi	r2,1
2002e3f0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2002e3f4:	e0bffb17 	ldw	r2,-20(fp)
2002e3f8:	10800a17 	ldw	r2,40(r2)
2002e3fc:	10800044 	addi	r2,r2,1
2002e400:	1081ffcc 	andi	r2,r2,2047
2002e404:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
2002e408:	e0bffb17 	ldw	r2,-20(fp)
2002e40c:	10c00b17 	ldw	r3,44(r2)
2002e410:	e0bffe17 	ldw	r2,-8(fp)
2002e414:	18801526 	beq	r3,r2,2002e46c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
2002e418:	e0bffc17 	ldw	r2,-16(fp)
2002e41c:	10800037 	ldwio	r2,0(r2)
2002e420:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
2002e424:	e0bff917 	ldw	r2,-28(fp)
2002e428:	10a0000c 	andi	r2,r2,32768
2002e42c:	10001126 	beq	r2,zero,2002e474 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
2002e430:	e0bffb17 	ldw	r2,-20(fp)
2002e434:	10800a17 	ldw	r2,40(r2)
2002e438:	e0fff917 	ldw	r3,-28(fp)
2002e43c:	1809883a 	mov	r4,r3
2002e440:	e0fffb17 	ldw	r3,-20(fp)
2002e444:	1885883a 	add	r2,r3,r2
2002e448:	10800e04 	addi	r2,r2,56
2002e44c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2002e450:	e0bffb17 	ldw	r2,-20(fp)
2002e454:	10800a17 	ldw	r2,40(r2)
2002e458:	10800044 	addi	r2,r2,1
2002e45c:	10c1ffcc 	andi	r3,r2,2047
2002e460:	e0bffb17 	ldw	r2,-20(fp)
2002e464:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
2002e468:	003fe206 	br	2002e3f4 <__alt_data_end+0xffff03f4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
2002e46c:	0001883a 	nop
2002e470:	00000106 	br	2002e478 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
2002e474:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
2002e478:	e0bff917 	ldw	r2,-28(fp)
2002e47c:	10bfffec 	andhi	r2,r2,65535
2002e480:	10000f26 	beq	r2,zero,2002e4c0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
2002e484:	e0bffb17 	ldw	r2,-20(fp)
2002e488:	10c00817 	ldw	r3,32(r2)
2002e48c:	00bfff84 	movi	r2,-2
2002e490:	1886703a 	and	r3,r3,r2
2002e494:	e0bffb17 	ldw	r2,-20(fp)
2002e498:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
2002e49c:	e0bffc17 	ldw	r2,-16(fp)
2002e4a0:	10800104 	addi	r2,r2,4
2002e4a4:	1007883a 	mov	r3,r2
2002e4a8:	e0bffb17 	ldw	r2,-20(fp)
2002e4ac:	10800817 	ldw	r2,32(r2)
2002e4b0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
2002e4b4:	e0bffc17 	ldw	r2,-16(fp)
2002e4b8:	10800104 	addi	r2,r2,4
2002e4bc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
2002e4c0:	e0bffd17 	ldw	r2,-12(fp)
2002e4c4:	1080800c 	andi	r2,r2,512
2002e4c8:	103fbe26 	beq	r2,zero,2002e3c4 <__alt_data_end+0xffff03c4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
2002e4cc:	e0bffd17 	ldw	r2,-12(fp)
2002e4d0:	1004d43a 	srli	r2,r2,16
2002e4d4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
2002e4d8:	00001406 	br	2002e52c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
2002e4dc:	e0bffc17 	ldw	r2,-16(fp)
2002e4e0:	e0fffb17 	ldw	r3,-20(fp)
2002e4e4:	18c00d17 	ldw	r3,52(r3)
2002e4e8:	e13ffb17 	ldw	r4,-20(fp)
2002e4ec:	20c7883a 	add	r3,r4,r3
2002e4f0:	18c20e04 	addi	r3,r3,2104
2002e4f4:	18c00003 	ldbu	r3,0(r3)
2002e4f8:	18c03fcc 	andi	r3,r3,255
2002e4fc:	18c0201c 	xori	r3,r3,128
2002e500:	18ffe004 	addi	r3,r3,-128
2002e504:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2002e508:	e0bffb17 	ldw	r2,-20(fp)
2002e50c:	10800d17 	ldw	r2,52(r2)
2002e510:	10800044 	addi	r2,r2,1
2002e514:	10c1ffcc 	andi	r3,r2,2047
2002e518:	e0bffb17 	ldw	r2,-20(fp)
2002e51c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
2002e520:	e0bffa17 	ldw	r2,-24(fp)
2002e524:	10bfffc4 	addi	r2,r2,-1
2002e528:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
2002e52c:	e0bffa17 	ldw	r2,-24(fp)
2002e530:	10000526 	beq	r2,zero,2002e548 <altera_avalon_jtag_uart_irq+0x1a8>
2002e534:	e0bffb17 	ldw	r2,-20(fp)
2002e538:	10c00d17 	ldw	r3,52(r2)
2002e53c:	e0bffb17 	ldw	r2,-20(fp)
2002e540:	10800c17 	ldw	r2,48(r2)
2002e544:	18bfe51e 	bne	r3,r2,2002e4dc <__alt_data_end+0xffff04dc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
2002e548:	e0bffa17 	ldw	r2,-24(fp)
2002e54c:	103f9d26 	beq	r2,zero,2002e3c4 <__alt_data_end+0xffff03c4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
2002e550:	e0bffb17 	ldw	r2,-20(fp)
2002e554:	10c00817 	ldw	r3,32(r2)
2002e558:	00bfff44 	movi	r2,-3
2002e55c:	1886703a 	and	r3,r3,r2
2002e560:	e0bffb17 	ldw	r2,-20(fp)
2002e564:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
2002e568:	e0bffb17 	ldw	r2,-20(fp)
2002e56c:	10800017 	ldw	r2,0(r2)
2002e570:	10800104 	addi	r2,r2,4
2002e574:	1007883a 	mov	r3,r2
2002e578:	e0bffb17 	ldw	r2,-20(fp)
2002e57c:	10800817 	ldw	r2,32(r2)
2002e580:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
2002e584:	e0bffc17 	ldw	r2,-16(fp)
2002e588:	10800104 	addi	r2,r2,4
2002e58c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
2002e590:	003f8c06 	br	2002e3c4 <__alt_data_end+0xffff03c4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
2002e594:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
2002e598:	0001883a 	nop
2002e59c:	e037883a 	mov	sp,fp
2002e5a0:	df000017 	ldw	fp,0(sp)
2002e5a4:	dec00104 	addi	sp,sp,4
2002e5a8:	f800283a 	ret

2002e5ac <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
2002e5ac:	defff804 	addi	sp,sp,-32
2002e5b0:	df000715 	stw	fp,28(sp)
2002e5b4:	df000704 	addi	fp,sp,28
2002e5b8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
2002e5bc:	e0bffb17 	ldw	r2,-20(fp)
2002e5c0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
2002e5c4:	e0bff917 	ldw	r2,-28(fp)
2002e5c8:	10800017 	ldw	r2,0(r2)
2002e5cc:	10800104 	addi	r2,r2,4
2002e5d0:	10800037 	ldwio	r2,0(r2)
2002e5d4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
2002e5d8:	e0bffa17 	ldw	r2,-24(fp)
2002e5dc:	1081000c 	andi	r2,r2,1024
2002e5e0:	10000b26 	beq	r2,zero,2002e610 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
2002e5e4:	e0bff917 	ldw	r2,-28(fp)
2002e5e8:	10800017 	ldw	r2,0(r2)
2002e5ec:	10800104 	addi	r2,r2,4
2002e5f0:	1007883a 	mov	r3,r2
2002e5f4:	e0bff917 	ldw	r2,-28(fp)
2002e5f8:	10800817 	ldw	r2,32(r2)
2002e5fc:	10810014 	ori	r2,r2,1024
2002e600:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
2002e604:	e0bff917 	ldw	r2,-28(fp)
2002e608:	10000915 	stw	zero,36(r2)
2002e60c:	00000a06 	br	2002e638 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
2002e610:	e0bff917 	ldw	r2,-28(fp)
2002e614:	10c00917 	ldw	r3,36(r2)
2002e618:	00a00034 	movhi	r2,32768
2002e61c:	10bfff04 	addi	r2,r2,-4
2002e620:	10c00536 	bltu	r2,r3,2002e638 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
2002e624:	e0bff917 	ldw	r2,-28(fp)
2002e628:	10800917 	ldw	r2,36(r2)
2002e62c:	10c00044 	addi	r3,r2,1
2002e630:	e0bff917 	ldw	r2,-28(fp)
2002e634:	10c00915 	stw	r3,36(r2)
2002e638:	d0a6f417 	ldw	r2,-25648(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
2002e63c:	e037883a 	mov	sp,fp
2002e640:	df000017 	ldw	fp,0(sp)
2002e644:	dec00104 	addi	sp,sp,4
2002e648:	f800283a 	ret

2002e64c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
2002e64c:	defffd04 	addi	sp,sp,-12
2002e650:	df000215 	stw	fp,8(sp)
2002e654:	df000204 	addi	fp,sp,8
2002e658:	e13ffe15 	stw	r4,-8(fp)
2002e65c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
2002e660:	00000506 	br	2002e678 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
2002e664:	e0bfff17 	ldw	r2,-4(fp)
2002e668:	1090000c 	andi	r2,r2,16384
2002e66c:	10000226 	beq	r2,zero,2002e678 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
2002e670:	00bffd44 	movi	r2,-11
2002e674:	00000b06 	br	2002e6a4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
2002e678:	e0bffe17 	ldw	r2,-8(fp)
2002e67c:	10c00d17 	ldw	r3,52(r2)
2002e680:	e0bffe17 	ldw	r2,-8(fp)
2002e684:	10800c17 	ldw	r2,48(r2)
2002e688:	18800526 	beq	r3,r2,2002e6a0 <altera_avalon_jtag_uart_close+0x54>
2002e68c:	e0bffe17 	ldw	r2,-8(fp)
2002e690:	10c00917 	ldw	r3,36(r2)
2002e694:	e0bffe17 	ldw	r2,-8(fp)
2002e698:	10800117 	ldw	r2,4(r2)
2002e69c:	18bff136 	bltu	r3,r2,2002e664 <__alt_data_end+0xffff0664>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
2002e6a0:	0005883a 	mov	r2,zero
}
2002e6a4:	e037883a 	mov	sp,fp
2002e6a8:	df000017 	ldw	fp,0(sp)
2002e6ac:	dec00104 	addi	sp,sp,4
2002e6b0:	f800283a 	ret

2002e6b4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
2002e6b4:	defffa04 	addi	sp,sp,-24
2002e6b8:	df000515 	stw	fp,20(sp)
2002e6bc:	df000504 	addi	fp,sp,20
2002e6c0:	e13ffd15 	stw	r4,-12(fp)
2002e6c4:	e17ffe15 	stw	r5,-8(fp)
2002e6c8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
2002e6cc:	00bff9c4 	movi	r2,-25
2002e6d0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
2002e6d4:	e0bffe17 	ldw	r2,-8(fp)
2002e6d8:	10da8060 	cmpeqi	r3,r2,27137
2002e6dc:	1800031e 	bne	r3,zero,2002e6ec <altera_avalon_jtag_uart_ioctl+0x38>
2002e6e0:	109a80a0 	cmpeqi	r2,r2,27138
2002e6e4:	1000181e 	bne	r2,zero,2002e748 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
2002e6e8:	00002906 	br	2002e790 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
2002e6ec:	e0bffd17 	ldw	r2,-12(fp)
2002e6f0:	10c00117 	ldw	r3,4(r2)
2002e6f4:	00a00034 	movhi	r2,32768
2002e6f8:	10bfffc4 	addi	r2,r2,-1
2002e6fc:	18802126 	beq	r3,r2,2002e784 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
2002e700:	e0bfff17 	ldw	r2,-4(fp)
2002e704:	10800017 	ldw	r2,0(r2)
2002e708:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
2002e70c:	e0bffc17 	ldw	r2,-16(fp)
2002e710:	10800090 	cmplti	r2,r2,2
2002e714:	1000061e 	bne	r2,zero,2002e730 <altera_avalon_jtag_uart_ioctl+0x7c>
2002e718:	e0fffc17 	ldw	r3,-16(fp)
2002e71c:	00a00034 	movhi	r2,32768
2002e720:	10bfffc4 	addi	r2,r2,-1
2002e724:	18800226 	beq	r3,r2,2002e730 <altera_avalon_jtag_uart_ioctl+0x7c>
2002e728:	e0bffc17 	ldw	r2,-16(fp)
2002e72c:	00000206 	br	2002e738 <altera_avalon_jtag_uart_ioctl+0x84>
2002e730:	00a00034 	movhi	r2,32768
2002e734:	10bfff84 	addi	r2,r2,-2
2002e738:	e0fffd17 	ldw	r3,-12(fp)
2002e73c:	18800115 	stw	r2,4(r3)
      rc = 0;
2002e740:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
2002e744:	00000f06 	br	2002e784 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
2002e748:	e0bffd17 	ldw	r2,-12(fp)
2002e74c:	10c00117 	ldw	r3,4(r2)
2002e750:	00a00034 	movhi	r2,32768
2002e754:	10bfffc4 	addi	r2,r2,-1
2002e758:	18800c26 	beq	r3,r2,2002e78c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
2002e75c:	e0bffd17 	ldw	r2,-12(fp)
2002e760:	10c00917 	ldw	r3,36(r2)
2002e764:	e0bffd17 	ldw	r2,-12(fp)
2002e768:	10800117 	ldw	r2,4(r2)
2002e76c:	1885803a 	cmpltu	r2,r3,r2
2002e770:	10c03fcc 	andi	r3,r2,255
2002e774:	e0bfff17 	ldw	r2,-4(fp)
2002e778:	10c00015 	stw	r3,0(r2)
      rc = 0;
2002e77c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
2002e780:	00000206 	br	2002e78c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
2002e784:	0001883a 	nop
2002e788:	00000106 	br	2002e790 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
2002e78c:	0001883a 	nop

  default:
    break;
  }

  return rc;
2002e790:	e0bffb17 	ldw	r2,-20(fp)
}
2002e794:	e037883a 	mov	sp,fp
2002e798:	df000017 	ldw	fp,0(sp)
2002e79c:	dec00104 	addi	sp,sp,4
2002e7a0:	f800283a 	ret

2002e7a4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
2002e7a4:	defff304 	addi	sp,sp,-52
2002e7a8:	dfc00c15 	stw	ra,48(sp)
2002e7ac:	df000b15 	stw	fp,44(sp)
2002e7b0:	df000b04 	addi	fp,sp,44
2002e7b4:	e13ffc15 	stw	r4,-16(fp)
2002e7b8:	e17ffd15 	stw	r5,-12(fp)
2002e7bc:	e1bffe15 	stw	r6,-8(fp)
2002e7c0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
2002e7c4:	e0bffd17 	ldw	r2,-12(fp)
2002e7c8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
2002e7cc:	00004706 	br	2002e8ec <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
2002e7d0:	e0bffc17 	ldw	r2,-16(fp)
2002e7d4:	10800a17 	ldw	r2,40(r2)
2002e7d8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
2002e7dc:	e0bffc17 	ldw	r2,-16(fp)
2002e7e0:	10800b17 	ldw	r2,44(r2)
2002e7e4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
2002e7e8:	e0fff717 	ldw	r3,-36(fp)
2002e7ec:	e0bff817 	ldw	r2,-32(fp)
2002e7f0:	18800536 	bltu	r3,r2,2002e808 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
2002e7f4:	e0fff717 	ldw	r3,-36(fp)
2002e7f8:	e0bff817 	ldw	r2,-32(fp)
2002e7fc:	1885c83a 	sub	r2,r3,r2
2002e800:	e0bff615 	stw	r2,-40(fp)
2002e804:	00000406 	br	2002e818 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
2002e808:	00c20004 	movi	r3,2048
2002e80c:	e0bff817 	ldw	r2,-32(fp)
2002e810:	1885c83a 	sub	r2,r3,r2
2002e814:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
2002e818:	e0bff617 	ldw	r2,-40(fp)
2002e81c:	10001e26 	beq	r2,zero,2002e898 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
2002e820:	e0fffe17 	ldw	r3,-8(fp)
2002e824:	e0bff617 	ldw	r2,-40(fp)
2002e828:	1880022e 	bgeu	r3,r2,2002e834 <altera_avalon_jtag_uart_read+0x90>
        n = space;
2002e82c:	e0bffe17 	ldw	r2,-8(fp)
2002e830:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
2002e834:	e0bffc17 	ldw	r2,-16(fp)
2002e838:	10c00e04 	addi	r3,r2,56
2002e83c:	e0bff817 	ldw	r2,-32(fp)
2002e840:	1885883a 	add	r2,r3,r2
2002e844:	e1bff617 	ldw	r6,-40(fp)
2002e848:	100b883a 	mov	r5,r2
2002e84c:	e13ff517 	ldw	r4,-44(fp)
2002e850:	002179c0 	call	2002179c <memcpy>
      ptr   += n;
2002e854:	e0fff517 	ldw	r3,-44(fp)
2002e858:	e0bff617 	ldw	r2,-40(fp)
2002e85c:	1885883a 	add	r2,r3,r2
2002e860:	e0bff515 	stw	r2,-44(fp)
      space -= n;
2002e864:	e0fffe17 	ldw	r3,-8(fp)
2002e868:	e0bff617 	ldw	r2,-40(fp)
2002e86c:	1885c83a 	sub	r2,r3,r2
2002e870:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2002e874:	e0fff817 	ldw	r3,-32(fp)
2002e878:	e0bff617 	ldw	r2,-40(fp)
2002e87c:	1885883a 	add	r2,r3,r2
2002e880:	10c1ffcc 	andi	r3,r2,2047
2002e884:	e0bffc17 	ldw	r2,-16(fp)
2002e888:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
2002e88c:	e0bffe17 	ldw	r2,-8(fp)
2002e890:	00bfcf16 	blt	zero,r2,2002e7d0 <__alt_data_end+0xffff07d0>
2002e894:	00000106 	br	2002e89c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
2002e898:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
2002e89c:	e0fff517 	ldw	r3,-44(fp)
2002e8a0:	e0bffd17 	ldw	r2,-12(fp)
2002e8a4:	1880141e 	bne	r3,r2,2002e8f8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
2002e8a8:	e0bfff17 	ldw	r2,-4(fp)
2002e8ac:	1090000c 	andi	r2,r2,16384
2002e8b0:	1000131e 	bne	r2,zero,2002e900 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
2002e8b4:	0001883a 	nop
2002e8b8:	e0bffc17 	ldw	r2,-16(fp)
2002e8bc:	10c00a17 	ldw	r3,40(r2)
2002e8c0:	e0bff717 	ldw	r2,-36(fp)
2002e8c4:	1880051e 	bne	r3,r2,2002e8dc <altera_avalon_jtag_uart_read+0x138>
2002e8c8:	e0bffc17 	ldw	r2,-16(fp)
2002e8cc:	10c00917 	ldw	r3,36(r2)
2002e8d0:	e0bffc17 	ldw	r2,-16(fp)
2002e8d4:	10800117 	ldw	r2,4(r2)
2002e8d8:	18bff736 	bltu	r3,r2,2002e8b8 <__alt_data_end+0xffff08b8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
2002e8dc:	e0bffc17 	ldw	r2,-16(fp)
2002e8e0:	10c00a17 	ldw	r3,40(r2)
2002e8e4:	e0bff717 	ldw	r2,-36(fp)
2002e8e8:	18800726 	beq	r3,r2,2002e908 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
2002e8ec:	e0bffe17 	ldw	r2,-8(fp)
2002e8f0:	00bfb716 	blt	zero,r2,2002e7d0 <__alt_data_end+0xffff07d0>
2002e8f4:	00000506 	br	2002e90c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
2002e8f8:	0001883a 	nop
2002e8fc:	00000306 	br	2002e90c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
2002e900:	0001883a 	nop
2002e904:	00000106 	br	2002e90c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
2002e908:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
2002e90c:	e0fff517 	ldw	r3,-44(fp)
2002e910:	e0bffd17 	ldw	r2,-12(fp)
2002e914:	18801826 	beq	r3,r2,2002e978 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002e918:	0005303a 	rdctl	r2,status
2002e91c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002e920:	e0fffb17 	ldw	r3,-20(fp)
2002e924:	00bfff84 	movi	r2,-2
2002e928:	1884703a 	and	r2,r3,r2
2002e92c:	1001703a 	wrctl	status,r2
  
  return context;
2002e930:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
2002e934:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
2002e938:	e0bffc17 	ldw	r2,-16(fp)
2002e93c:	10800817 	ldw	r2,32(r2)
2002e940:	10c00054 	ori	r3,r2,1
2002e944:	e0bffc17 	ldw	r2,-16(fp)
2002e948:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
2002e94c:	e0bffc17 	ldw	r2,-16(fp)
2002e950:	10800017 	ldw	r2,0(r2)
2002e954:	10800104 	addi	r2,r2,4
2002e958:	1007883a 	mov	r3,r2
2002e95c:	e0bffc17 	ldw	r2,-16(fp)
2002e960:	10800817 	ldw	r2,32(r2)
2002e964:	18800035 	stwio	r2,0(r3)
2002e968:	e0bffa17 	ldw	r2,-24(fp)
2002e96c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002e970:	e0bff917 	ldw	r2,-28(fp)
2002e974:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
2002e978:	e0fff517 	ldw	r3,-44(fp)
2002e97c:	e0bffd17 	ldw	r2,-12(fp)
2002e980:	18800426 	beq	r3,r2,2002e994 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
2002e984:	e0fff517 	ldw	r3,-44(fp)
2002e988:	e0bffd17 	ldw	r2,-12(fp)
2002e98c:	1885c83a 	sub	r2,r3,r2
2002e990:	00000606 	br	2002e9ac <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
2002e994:	e0bfff17 	ldw	r2,-4(fp)
2002e998:	1090000c 	andi	r2,r2,16384
2002e99c:	10000226 	beq	r2,zero,2002e9a8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
2002e9a0:	00bffd44 	movi	r2,-11
2002e9a4:	00000106 	br	2002e9ac <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
2002e9a8:	00bffec4 	movi	r2,-5
}
2002e9ac:	e037883a 	mov	sp,fp
2002e9b0:	dfc00117 	ldw	ra,4(sp)
2002e9b4:	df000017 	ldw	fp,0(sp)
2002e9b8:	dec00204 	addi	sp,sp,8
2002e9bc:	f800283a 	ret

2002e9c0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
2002e9c0:	defff304 	addi	sp,sp,-52
2002e9c4:	dfc00c15 	stw	ra,48(sp)
2002e9c8:	df000b15 	stw	fp,44(sp)
2002e9cc:	df000b04 	addi	fp,sp,44
2002e9d0:	e13ffc15 	stw	r4,-16(fp)
2002e9d4:	e17ffd15 	stw	r5,-12(fp)
2002e9d8:	e1bffe15 	stw	r6,-8(fp)
2002e9dc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
2002e9e0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
2002e9e4:	e0bffd17 	ldw	r2,-12(fp)
2002e9e8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
2002e9ec:	00003706 	br	2002eacc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
2002e9f0:	e0bffc17 	ldw	r2,-16(fp)
2002e9f4:	10800c17 	ldw	r2,48(r2)
2002e9f8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
2002e9fc:	e0bffc17 	ldw	r2,-16(fp)
2002ea00:	10800d17 	ldw	r2,52(r2)
2002ea04:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
2002ea08:	e0fff917 	ldw	r3,-28(fp)
2002ea0c:	e0bff517 	ldw	r2,-44(fp)
2002ea10:	1880062e 	bgeu	r3,r2,2002ea2c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
2002ea14:	e0fff517 	ldw	r3,-44(fp)
2002ea18:	e0bff917 	ldw	r2,-28(fp)
2002ea1c:	1885c83a 	sub	r2,r3,r2
2002ea20:	10bfffc4 	addi	r2,r2,-1
2002ea24:	e0bff615 	stw	r2,-40(fp)
2002ea28:	00000b06 	br	2002ea58 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
2002ea2c:	e0bff517 	ldw	r2,-44(fp)
2002ea30:	10000526 	beq	r2,zero,2002ea48 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
2002ea34:	00c20004 	movi	r3,2048
2002ea38:	e0bff917 	ldw	r2,-28(fp)
2002ea3c:	1885c83a 	sub	r2,r3,r2
2002ea40:	e0bff615 	stw	r2,-40(fp)
2002ea44:	00000406 	br	2002ea58 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
2002ea48:	00c1ffc4 	movi	r3,2047
2002ea4c:	e0bff917 	ldw	r2,-28(fp)
2002ea50:	1885c83a 	sub	r2,r3,r2
2002ea54:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
2002ea58:	e0bff617 	ldw	r2,-40(fp)
2002ea5c:	10001e26 	beq	r2,zero,2002ead8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
2002ea60:	e0fffe17 	ldw	r3,-8(fp)
2002ea64:	e0bff617 	ldw	r2,-40(fp)
2002ea68:	1880022e 	bgeu	r3,r2,2002ea74 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
2002ea6c:	e0bffe17 	ldw	r2,-8(fp)
2002ea70:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
2002ea74:	e0bffc17 	ldw	r2,-16(fp)
2002ea78:	10c20e04 	addi	r3,r2,2104
2002ea7c:	e0bff917 	ldw	r2,-28(fp)
2002ea80:	1885883a 	add	r2,r3,r2
2002ea84:	e1bff617 	ldw	r6,-40(fp)
2002ea88:	e17ffd17 	ldw	r5,-12(fp)
2002ea8c:	1009883a 	mov	r4,r2
2002ea90:	002179c0 	call	2002179c <memcpy>
      ptr   += n;
2002ea94:	e0fffd17 	ldw	r3,-12(fp)
2002ea98:	e0bff617 	ldw	r2,-40(fp)
2002ea9c:	1885883a 	add	r2,r3,r2
2002eaa0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
2002eaa4:	e0fffe17 	ldw	r3,-8(fp)
2002eaa8:	e0bff617 	ldw	r2,-40(fp)
2002eaac:	1885c83a 	sub	r2,r3,r2
2002eab0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2002eab4:	e0fff917 	ldw	r3,-28(fp)
2002eab8:	e0bff617 	ldw	r2,-40(fp)
2002eabc:	1885883a 	add	r2,r3,r2
2002eac0:	10c1ffcc 	andi	r3,r2,2047
2002eac4:	e0bffc17 	ldw	r2,-16(fp)
2002eac8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
2002eacc:	e0bffe17 	ldw	r2,-8(fp)
2002ead0:	00bfc716 	blt	zero,r2,2002e9f0 <__alt_data_end+0xffff09f0>
2002ead4:	00000106 	br	2002eadc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
2002ead8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002eadc:	0005303a 	rdctl	r2,status
2002eae0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002eae4:	e0fffb17 	ldw	r3,-20(fp)
2002eae8:	00bfff84 	movi	r2,-2
2002eaec:	1884703a 	and	r2,r3,r2
2002eaf0:	1001703a 	wrctl	status,r2
  
  return context;
2002eaf4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
2002eaf8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
2002eafc:	e0bffc17 	ldw	r2,-16(fp)
2002eb00:	10800817 	ldw	r2,32(r2)
2002eb04:	10c00094 	ori	r3,r2,2
2002eb08:	e0bffc17 	ldw	r2,-16(fp)
2002eb0c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
2002eb10:	e0bffc17 	ldw	r2,-16(fp)
2002eb14:	10800017 	ldw	r2,0(r2)
2002eb18:	10800104 	addi	r2,r2,4
2002eb1c:	1007883a 	mov	r3,r2
2002eb20:	e0bffc17 	ldw	r2,-16(fp)
2002eb24:	10800817 	ldw	r2,32(r2)
2002eb28:	18800035 	stwio	r2,0(r3)
2002eb2c:	e0bffa17 	ldw	r2,-24(fp)
2002eb30:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002eb34:	e0bff817 	ldw	r2,-32(fp)
2002eb38:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
2002eb3c:	e0bffe17 	ldw	r2,-8(fp)
2002eb40:	0080100e 	bge	zero,r2,2002eb84 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
2002eb44:	e0bfff17 	ldw	r2,-4(fp)
2002eb48:	1090000c 	andi	r2,r2,16384
2002eb4c:	1000101e 	bne	r2,zero,2002eb90 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
2002eb50:	0001883a 	nop
2002eb54:	e0bffc17 	ldw	r2,-16(fp)
2002eb58:	10c00d17 	ldw	r3,52(r2)
2002eb5c:	e0bff517 	ldw	r2,-44(fp)
2002eb60:	1880051e 	bne	r3,r2,2002eb78 <altera_avalon_jtag_uart_write+0x1b8>
2002eb64:	e0bffc17 	ldw	r2,-16(fp)
2002eb68:	10c00917 	ldw	r3,36(r2)
2002eb6c:	e0bffc17 	ldw	r2,-16(fp)
2002eb70:	10800117 	ldw	r2,4(r2)
2002eb74:	18bff736 	bltu	r3,r2,2002eb54 <__alt_data_end+0xffff0b54>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
2002eb78:	e0bffc17 	ldw	r2,-16(fp)
2002eb7c:	10800917 	ldw	r2,36(r2)
2002eb80:	1000051e 	bne	r2,zero,2002eb98 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
2002eb84:	e0bffe17 	ldw	r2,-8(fp)
2002eb88:	00bfd016 	blt	zero,r2,2002eacc <__alt_data_end+0xffff0acc>
2002eb8c:	00000306 	br	2002eb9c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
2002eb90:	0001883a 	nop
2002eb94:	00000106 	br	2002eb9c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
2002eb98:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
2002eb9c:	e0fffd17 	ldw	r3,-12(fp)
2002eba0:	e0bff717 	ldw	r2,-36(fp)
2002eba4:	18800426 	beq	r3,r2,2002ebb8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
2002eba8:	e0fffd17 	ldw	r3,-12(fp)
2002ebac:	e0bff717 	ldw	r2,-36(fp)
2002ebb0:	1885c83a 	sub	r2,r3,r2
2002ebb4:	00000606 	br	2002ebd0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
2002ebb8:	e0bfff17 	ldw	r2,-4(fp)
2002ebbc:	1090000c 	andi	r2,r2,16384
2002ebc0:	10000226 	beq	r2,zero,2002ebcc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
2002ebc4:	00bffd44 	movi	r2,-11
2002ebc8:	00000106 	br	2002ebd0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
2002ebcc:	00bffec4 	movi	r2,-5
}
2002ebd0:	e037883a 	mov	sp,fp
2002ebd4:	dfc00117 	ldw	ra,4(sp)
2002ebd8:	df000017 	ldw	fp,0(sp)
2002ebdc:	dec00204 	addi	sp,sp,8
2002ebe0:	f800283a 	ret

2002ebe4 <altera_avalon_mailbox_identify>:
 * Check an instance open match
 * with the callback register
 */

static void altera_avalon_mailbox_identify (altera_avalon_mailbox_dev *dev)
{
2002ebe4:	defffd04 	addi	sp,sp,-12
2002ebe8:	df000215 	stw	fp,8(sp)
2002ebec:	df000204 	addi	fp,sp,8
2002ebf0:	e13fff15 	stw	r4,-4(fp)
    /* Random signature to test mailbox ownership */
    alt_u32 magic_num = 0x3A11B045;
2002ebf4:	008e84b4 	movhi	r2,14866
2002ebf8:	10ac1144 	addi	r2,r2,-20411
2002ebfc:	e0bffe15 	stw	r2,-8(fp)

    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, magic_num);
2002ec00:	e0bfff17 	ldw	r2,-4(fp)
2002ec04:	10800a17 	ldw	r2,40(r2)
2002ec08:	10800104 	addi	r2,r2,4
2002ec0c:	1007883a 	mov	r3,r2
2002ec10:	e0bffe17 	ldw	r2,-8(fp)
2002ec14:	18800035 	stwio	r2,0(r3)
    if((IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST)) == magic_num)
2002ec18:	e0bfff17 	ldw	r2,-4(fp)
2002ec1c:	10800a17 	ldw	r2,40(r2)
2002ec20:	10800104 	addi	r2,r2,4
2002ec24:	10800037 	ldwio	r2,0(r2)
2002ec28:	1007883a 	mov	r3,r2
2002ec2c:	e0bffe17 	ldw	r2,-8(fp)
2002ec30:	1880081e 	bne	r3,r2,2002ec54 <altera_avalon_mailbox_identify+0x70>
    {
        dev-> mbox_type = MBOX_TX;
2002ec34:	e0bfff17 	ldw	r2,-4(fp)
2002ec38:	10000f15 	stw	zero,60(r2)
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
2002ec3c:	e0bfff17 	ldw	r2,-4(fp)
2002ec40:	10800a17 	ldw	r2,40(r2)
2002ec44:	10800104 	addi	r2,r2,4
2002ec48:	0007883a 	mov	r3,zero
2002ec4c:	10c00035 	stwio	r3,0(r2)
    } else
    {
	    dev->mbox_type = MBOX_RX;
    }
}
2002ec50:	00000306 	br	2002ec60 <altera_avalon_mailbox_identify+0x7c>
        dev-> mbox_type = MBOX_TX;
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
    } else
    {
	    dev->mbox_type = MBOX_RX;
2002ec54:	e0bfff17 	ldw	r2,-4(fp)
2002ec58:	00c00044 	movi	r3,1
2002ec5c:	10c00f15 	stw	r3,60(r2)
    }
}
2002ec60:	0001883a 	nop
2002ec64:	e037883a 	mov	sp,fp
2002ec68:	df000017 	ldw	fp,0(sp)
2002ec6c:	dec00104 	addi	sp,sp,4
2002ec70:	f800283a 	ret

2002ec74 <altera_avalon_mailbox_post>:
/*
 *   altera_avalon_mailbox_post
 *   This function post message out through sender mailbox
 */
static alt_32 altera_avalon_mailbox_post (altera_avalon_mailbox_dev *dev,  void *message)
{
2002ec74:	defffc04 	addi	sp,sp,-16
2002ec78:	df000315 	stw	fp,12(sp)
2002ec7c:	df000304 	addi	fp,sp,12
2002ec80:	e13ffe15 	stw	r4,-8(fp)
2002ec84:	e17fff15 	stw	r5,-4(fp)
    alt_u32 *mbox_msg = (alt_u32*) message ;
2002ec88:	e0bfff17 	ldw	r2,-4(fp)
2002ec8c:	e0bffd15 	stw	r2,-12(fp)

    if (mbox_msg != NULL) {
2002ec90:	e0bffd17 	ldw	r2,-12(fp)
2002ec94:	10001026 	beq	r2,zero,2002ecd8 <altera_avalon_mailbox_post+0x64>
        /* When message space available, post the message out */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, mbox_msg[1]);
2002ec98:	e0bffe17 	ldw	r2,-8(fp)
2002ec9c:	10800a17 	ldw	r2,40(r2)
2002eca0:	10800104 	addi	r2,r2,4
2002eca4:	1007883a 	mov	r3,r2
2002eca8:	e0bffd17 	ldw	r2,-12(fp)
2002ecac:	10800104 	addi	r2,r2,4
2002ecb0:	10800017 	ldw	r2,0(r2)
2002ecb4:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, mbox_msg[0]);
2002ecb8:	e0bffe17 	ldw	r2,-8(fp)
2002ecbc:	10800a17 	ldw	r2,40(r2)
2002ecc0:	1007883a 	mov	r3,r2
2002ecc4:	e0bffd17 	ldw	r2,-12(fp)
2002ecc8:	10800017 	ldw	r2,0(r2)
2002eccc:	18800035 	stwio	r2,0(r3)
        return 0;
2002ecd0:	0005883a 	mov	r2,zero
2002ecd4:	00000106 	br	2002ecdc <altera_avalon_mailbox_post+0x68>
    }
    /* Invalid NULL message received */
    return -EINVAL;
2002ecd8:	00bffa84 	movi	r2,-22
}
2002ecdc:	e037883a 	mov	sp,fp
2002ece0:	df000017 	ldw	fp,0(sp)
2002ece4:	dec00104 	addi	sp,sp,4
2002ece8:	f800283a 	ret

2002ecec <altera_avalon_mailbox_simple_tx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_tx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_tx_isr(void *context, alt_u32 id)
#endif
{
2002ecec:	defff604 	addi	sp,sp,-40
2002ecf0:	dfc00915 	stw	ra,36(sp)
2002ecf4:	df000815 	stw	fp,32(sp)
2002ecf8:	df000804 	addi	fp,sp,32
2002ecfc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
2002ed00:	e0bfff17 	ldw	r2,-4(fp)
2002ed04:	e0bff815 	stw	r2,-32(fp)
    int status = 0;
2002ed08:	e03ff915 	stw	zero,-28(fp)
    alt_u32 data;
    alt_irq_context cpu_sr;
    alt_u32 *message = dev->mbox_msg;
2002ed0c:	e0bff817 	ldw	r2,-32(fp)
2002ed10:	10801017 	ldw	r2,64(r2)
2002ed14:	e0bffa15 	stw	r2,-24(fp)

    /* Mask mailbox interrupt */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
2002ed18:	e0bff817 	ldw	r2,-32(fp)
2002ed1c:	10800a17 	ldw	r2,40(r2)
2002ed20:	10800304 	addi	r2,r2,12
2002ed24:	10800037 	ldwio	r2,0(r2)
2002ed28:	1007883a 	mov	r3,r2
2002ed2c:	00bfff44 	movi	r2,-3
2002ed30:	1884703a 	and	r2,r3,r2
2002ed34:	e0bffb15 	stw	r2,-20(fp)
               (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
2002ed38:	e0bff817 	ldw	r2,-32(fp)
2002ed3c:	10800a17 	ldw	r2,40(r2)
2002ed40:	10800304 	addi	r2,r2,12
2002ed44:	1007883a 	mov	r3,r2
2002ed48:	e0bffb17 	ldw	r2,-20(fp)
2002ed4c:	18800035 	stwio	r2,0(r3)

    if (message != NULL)
2002ed50:	e0bffa17 	ldw	r2,-24(fp)
2002ed54:	10002d26 	beq	r2,zero,2002ee0c <altera_avalon_mailbox_simple_tx_isr+0x120>
    {
        /* Post out message requested */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, message[1]);
2002ed58:	e0bff817 	ldw	r2,-32(fp)
2002ed5c:	10800a17 	ldw	r2,40(r2)
2002ed60:	10800104 	addi	r2,r2,4
2002ed64:	1007883a 	mov	r3,r2
2002ed68:	e0bffa17 	ldw	r2,-24(fp)
2002ed6c:	10800104 	addi	r2,r2,4
2002ed70:	10800017 	ldw	r2,0(r2)
2002ed74:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
2002ed78:	e0bff817 	ldw	r2,-32(fp)
2002ed7c:	10800a17 	ldw	r2,40(r2)
2002ed80:	1007883a 	mov	r3,r2
2002ed84:	e0bffa17 	ldw	r2,-24(fp)
2002ed88:	10800017 	ldw	r2,0(r2)
2002ed8c:	18800035 	stwio	r2,0(r3)
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
2002ed90:	e0bff817 	ldw	r2,-32(fp)
2002ed94:	10800a17 	ldw	r2,40(r2)
2002ed98:	10800204 	addi	r2,r2,8
2002ed9c:	10800037 	ldwio	r2,0(r2)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
2002eda0:	1080008c 	andi	r2,r2,2
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
2002eda4:	1005d07a 	srai	r2,r2,1
2002eda8:	e0bff915 	stw	r2,-28(fp)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
        if (dev->tx_cb)
2002edac:	e0bff817 	ldw	r2,-32(fp)
2002edb0:	10800d17 	ldw	r2,52(r2)
2002edb4:	10001126 	beq	r2,zero,2002edfc <altera_avalon_mailbox_simple_tx_isr+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002edb8:	0005303a 	rdctl	r2,status
2002edbc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002edc0:	e0fffd17 	ldw	r3,-12(fp)
2002edc4:	00bfff84 	movi	r2,-2
2002edc8:	1884703a 	and	r2,r3,r2
2002edcc:	1001703a 	wrctl	status,r2
  
  return context;
2002edd0:	e0bffd17 	ldw	r2,-12(fp)
        {
            cpu_sr = alt_irq_disable_all();
2002edd4:	e0bffc15 	stw	r2,-16(fp)
  	        (dev->tx_cb)(message, status);
2002edd8:	e0bff817 	ldw	r2,-32(fp)
2002eddc:	10800d17 	ldw	r2,52(r2)
2002ede0:	e17ff917 	ldw	r5,-28(fp)
2002ede4:	e13ffa17 	ldw	r4,-24(fp)
2002ede8:	103ee83a 	callr	r2
2002edec:	e0bffc17 	ldw	r2,-16(fp)
2002edf0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002edf4:	e0bffe17 	ldw	r2,-8(fp)
2002edf8:	1001703a 	wrctl	status,r2
            alt_irq_enable_all(cpu_sr);
        }
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
2002edfc:	e0bff817 	ldw	r2,-32(fp)
2002ee00:	10001015 	stw	zero,64(r2)
        dev->lock = 0;
2002ee04:	e0bff817 	ldw	r2,-32(fp)
2002ee08:	10001105 	stb	zero,68(r2)
    }
}
2002ee0c:	0001883a 	nop
2002ee10:	e037883a 	mov	sp,fp
2002ee14:	dfc00117 	ldw	ra,4(sp)
2002ee18:	df000017 	ldw	fp,0(sp)
2002ee1c:	dec00204 	addi	sp,sp,8
2002ee20:	f800283a 	ret

2002ee24 <altera_avalon_mailbox_simple_rx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_rx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_rx_isr(void *context, alt_u32 id)
#endif
{
2002ee24:	defff704 	addi	sp,sp,-36
2002ee28:	dfc00815 	stw	ra,32(sp)
2002ee2c:	df000715 	stw	fp,28(sp)
2002ee30:	df000704 	addi	fp,sp,28
2002ee34:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
2002ee38:	e0bfff17 	ldw	r2,-4(fp)
2002ee3c:	e0bff915 	stw	r2,-28(fp)
    alt_irq_context cpu_sr;
    alt_u32 inbox[2];

    inbox[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
2002ee40:	e0bff917 	ldw	r2,-28(fp)
2002ee44:	10800a17 	ldw	r2,40(r2)
2002ee48:	10800104 	addi	r2,r2,4
2002ee4c:	10800037 	ldwio	r2,0(r2)
2002ee50:	e0bffe15 	stw	r2,-8(fp)
    inbox[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
2002ee54:	e0bff917 	ldw	r2,-28(fp)
2002ee58:	10800a17 	ldw	r2,40(r2)
2002ee5c:	10800037 	ldwio	r2,0(r2)
2002ee60:	e0bffd15 	stw	r2,-12(fp)

    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
    if (dev->rx_cb)
2002ee64:	e0bff917 	ldw	r2,-28(fp)
2002ee68:	10800e17 	ldw	r2,56(r2)
2002ee6c:	10001126 	beq	r2,zero,2002eeb4 <altera_avalon_mailbox_simple_rx_isr+0x90>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002ee70:	0005303a 	rdctl	r2,status
2002ee74:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002ee78:	e0fffb17 	ldw	r3,-20(fp)
2002ee7c:	00bfff84 	movi	r2,-2
2002ee80:	1884703a 	and	r2,r3,r2
2002ee84:	1001703a 	wrctl	status,r2
  
  return context;
2002ee88:	e0bffb17 	ldw	r2,-20(fp)
    {
        cpu_sr = alt_irq_disable_all();
2002ee8c:	e0bffa15 	stw	r2,-24(fp)
        (dev->rx_cb)(inbox);
2002ee90:	e0bff917 	ldw	r2,-28(fp)
2002ee94:	10800e17 	ldw	r2,56(r2)
2002ee98:	e0fffd04 	addi	r3,fp,-12
2002ee9c:	1809883a 	mov	r4,r3
2002eea0:	103ee83a 	callr	r2
2002eea4:	e0bffa17 	ldw	r2,-24(fp)
2002eea8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002eeac:	e0bffc17 	ldw	r2,-16(fp)
2002eeb0:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }
}
2002eeb4:	0001883a 	nop
2002eeb8:	e037883a 	mov	sp,fp
2002eebc:	dfc00117 	ldw	ra,4(sp)
2002eec0:	df000017 	ldw	fp,0(sp)
2002eec4:	dec00204 	addi	sp,sp,8
2002eec8:	f800283a 	ret

2002eecc <altera_avalon_mailbox_simple_init>:
 * Altera avalon mailbox init
 * Initialize mailbox device and identify sender/receiver mailbox
 */
void altera_avalon_mailbox_simple_init (altera_avalon_mailbox_dev *dev,
		                               int intr_id, int irq)
{
2002eecc:	defffb04 	addi	sp,sp,-20
2002eed0:	dfc00415 	stw	ra,16(sp)
2002eed4:	df000315 	stw	fp,12(sp)
2002eed8:	df000304 	addi	fp,sp,12
2002eedc:	e13ffd15 	stw	r4,-12(fp)
2002eee0:	e17ffe15 	stw	r5,-8(fp)
2002eee4:	e1bfff15 	stw	r6,-4(fp)
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_simple_list);
2002eee8:	d1600d04 	addi	r5,gp,-32716
2002eeec:	e13ffd17 	ldw	r4,-12(fp)
2002eef0:	002fbc40 	call	2002fbc4 <alt_dev_llist_insert>
    
    dev->mailbox_irq    = irq;
2002eef4:	e0ffff17 	ldw	r3,-4(fp)
2002eef8:	e0bffd17 	ldw	r2,-12(fp)
2002eefc:	10c00b15 	stw	r3,44(r2)
    dev->mailbox_intr_ctrl_id = intr_id;
2002ef00:	e0fffe17 	ldw	r3,-8(fp)
2002ef04:	e0bffd17 	ldw	r2,-12(fp)
2002ef08:	10c00c15 	stw	r3,48(r2)
    dev->rx_cb = NULL;
2002ef0c:	e0bffd17 	ldw	r2,-12(fp)
2002ef10:	10000e15 	stw	zero,56(r2)
    dev->tx_cb = NULL;
2002ef14:	e0bffd17 	ldw	r2,-12(fp)
2002ef18:	10000d15 	stw	zero,52(r2)
    dev->mbox_msg = NULL;
2002ef1c:	e0bffd17 	ldw	r2,-12(fp)
2002ef20:	10001015 	stw	zero,64(r2)
    
    ALT_SEM_CREATE (&dev->write_lock, 1);

    altera_avalon_mailbox_identify(dev);
2002ef24:	e13ffd17 	ldw	r4,-12(fp)
2002ef28:	002ebe40 	call	2002ebe4 <altera_avalon_mailbox_identify>
}
2002ef2c:	0001883a 	nop
2002ef30:	e037883a 	mov	sp,fp
2002ef34:	dfc00117 	ldw	ra,4(sp)
2002ef38:	df000017 	ldw	fp,0(sp)
2002ef3c:	dec00204 	addi	sp,sp,8
2002ef40:	f800283a 	ret

2002ef44 <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
altera_avalon_mailbox_dev* altera_avalon_mailbox_open (const char *name,
		altera_mailbox_tx_cb tx_callback, altera_mailbox_rx_cb rx_callback)
{
2002ef44:	defff804 	addi	sp,sp,-32
2002ef48:	dfc00715 	stw	ra,28(sp)
2002ef4c:	df000615 	stw	fp,24(sp)
2002ef50:	df000604 	addi	fp,sp,24
2002ef54:	e13ffd15 	stw	r4,-12(fp)
2002ef58:	e17ffe15 	stw	r5,-8(fp)
2002ef5c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_mailbox_dev *dev;
    alt_u32 data;

    /* Find requested device */
    dev = (altera_avalon_mailbox_dev*) alt_find_dev (name, &alt_mailbox_simple_list);
2002ef60:	d1600d04 	addi	r5,gp,-32716
2002ef64:	e13ffd17 	ldw	r4,-12(fp)
2002ef68:	002fd280 	call	2002fd28 <alt_find_dev>
2002ef6c:	e0bffb15 	stw	r2,-20(fp)
    if (dev == NULL)
2002ef70:	e0bffb17 	ldw	r2,-20(fp)
2002ef74:	1000021e 	bne	r2,zero,2002ef80 <altera_avalon_mailbox_open+0x3c>
    {
        return NULL;
2002ef78:	0005883a 	mov	r2,zero
2002ef7c:	00006506 	br	2002f114 <altera_avalon_mailbox_open+0x1d0>
    }

    /* Mask mailbox interrupt before ISR is being registered. */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
2002ef80:	e0bffb17 	ldw	r2,-20(fp)
2002ef84:	10800a17 	ldw	r2,40(r2)
2002ef88:	10800304 	addi	r2,r2,12
2002ef8c:	10800037 	ldwio	r2,0(r2)
2002ef90:	e0bffc15 	stw	r2,-16(fp)
    if (dev->mbox_type == MBOX_TX) {
2002ef94:	e0bffb17 	ldw	r2,-20(fp)
2002ef98:	10800f17 	ldw	r2,60(r2)
2002ef9c:	1000081e 	bne	r2,zero,2002efc0 <altera_avalon_mailbox_open+0x7c>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
2002efa0:	e0bffb17 	ldw	r2,-20(fp)
2002efa4:	10800a17 	ldw	r2,40(r2)
2002efa8:	10800304 	addi	r2,r2,12
2002efac:	1009883a 	mov	r4,r2
2002efb0:	e0fffc17 	ldw	r3,-16(fp)
2002efb4:	00bfff44 	movi	r2,-3
2002efb8:	1884703a 	and	r2,r3,r2
2002efbc:	20800035 	stwio	r2,0(r4)
            (data & ~(ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK)));
    }
    if (dev->mbox_type == MBOX_RX) {
2002efc0:	e0bffb17 	ldw	r2,-20(fp)
2002efc4:	10800f17 	ldw	r2,60(r2)
2002efc8:	10800058 	cmpnei	r2,r2,1
2002efcc:	1000081e 	bne	r2,zero,2002eff0 <altera_avalon_mailbox_open+0xac>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
2002efd0:	e0bffb17 	ldw	r2,-20(fp)
2002efd4:	10800a17 	ldw	r2,40(r2)
2002efd8:	10800304 	addi	r2,r2,12
2002efdc:	1009883a 	mov	r4,r2
2002efe0:	e0fffc17 	ldw	r3,-16(fp)
2002efe4:	00bfff84 	movi	r2,-2
2002efe8:	1884703a 	and	r2,r3,r2
2002efec:	20800035 	stwio	r2,0(r4)
    }

    /* If IRQ not connected, return device pointer without ISR register,
     * in polling mode.
     */
    if (dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED)
2002eff0:	e0bffb17 	ldw	r2,-20(fp)
2002eff4:	10800b17 	ldw	r2,44(r2)
2002eff8:	10bfffd8 	cmpnei	r2,r2,-1
2002effc:	1000021e 	bne	r2,zero,2002f008 <altera_avalon_mailbox_open+0xc4>
        return dev;
2002f000:	e0bffb17 	ldw	r2,-20(fp)
2002f004:	00004306 	br	2002f114 <altera_avalon_mailbox_open+0x1d0>

    /* For IRQ connected case */

    if ((tx_callback == NULL) && (rx_callback == NULL))
2002f008:	e0bffe17 	ldw	r2,-8(fp)
2002f00c:	1000041e 	bne	r2,zero,2002f020 <altera_avalon_mailbox_open+0xdc>
2002f010:	e0bfff17 	ldw	r2,-4(fp)
2002f014:	1000021e 	bne	r2,zero,2002f020 <altera_avalon_mailbox_open+0xdc>
    {
    /* No callback, polling mode */
        return dev;
2002f018:	e0bffb17 	ldw	r2,-20(fp)
2002f01c:	00003d06 	br	2002f114 <altera_avalon_mailbox_open+0x1d0>
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
2002f020:	e0bffb17 	ldw	r2,-20(fp)
2002f024:	10800f17 	ldw	r2,60(r2)
2002f028:	1000021e 	bne	r2,zero,2002f034 <altera_avalon_mailbox_open+0xf0>
2002f02c:	e0bfff17 	ldw	r2,-4(fp)
2002f030:	1000061e 	bne	r2,zero,2002f04c <altera_avalon_mailbox_open+0x108>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
2002f034:	e0bffb17 	ldw	r2,-20(fp)
2002f038:	10800f17 	ldw	r2,60(r2)
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
2002f03c:	10800058 	cmpnei	r2,r2,1
2002f040:	1000041e 	bne	r2,zero,2002f054 <altera_avalon_mailbox_open+0x110>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
2002f044:	e0bffe17 	ldw	r2,-8(fp)
2002f048:	10000226 	beq	r2,zero,2002f054 <altera_avalon_mailbox_open+0x110>
  	  /* Invalid callback  */
        return NULL;
2002f04c:	0005883a 	mov	r2,zero
2002f050:	00003006 	br	2002f114 <altera_avalon_mailbox_open+0x1d0>

    /* IRQ is valid register callback
     * to current mailbox device
     */
    dev->tx_cb  = tx_callback;
2002f054:	e0bffb17 	ldw	r2,-20(fp)
2002f058:	e0fffe17 	ldw	r3,-8(fp)
2002f05c:	10c00d15 	stw	r3,52(r2)
    dev->rx_cb  = rx_callback;
2002f060:	e0bffb17 	ldw	r2,-20(fp)
2002f064:	e0ffff17 	ldw	r3,-4(fp)
2002f068:	10c00e15 	stw	r3,56(r2)

    /* Register Mailbox's ISR */
    if (dev->mbox_type == MBOX_TX)
2002f06c:	e0bffb17 	ldw	r2,-20(fp)
2002f070:	10800f17 	ldw	r2,60(r2)
2002f074:	10000b1e 	bne	r2,zero,2002f0a4 <altera_avalon_mailbox_open+0x160>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_tx_isr,
2002f078:	e0bffb17 	ldw	r2,-20(fp)
2002f07c:	10c00c17 	ldw	r3,48(r2)
2002f080:	e0bffb17 	ldw	r2,-20(fp)
2002f084:	10800b17 	ldw	r2,44(r2)
2002f088:	d8000015 	stw	zero,0(sp)
2002f08c:	e1fffb17 	ldw	r7,-20(fp)
2002f090:	018800f4 	movhi	r6,8195
2002f094:	31bb3b04 	addi	r6,r6,-4884
2002f098:	100b883a 	mov	r5,r2
2002f09c:	1809883a 	mov	r4,r3
2002f0a0:	002fdec0 	call	2002fdec <alt_ic_isr_register>
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_tx_isr);
    #endif
    }
  
    if (dev->mbox_type == MBOX_RX)
2002f0a4:	e0bffb17 	ldw	r2,-20(fp)
2002f0a8:	10800f17 	ldw	r2,60(r2)
2002f0ac:	10800058 	cmpnei	r2,r2,1
2002f0b0:	1000171e 	bne	r2,zero,2002f110 <altera_avalon_mailbox_open+0x1cc>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_rx_isr,
2002f0b4:	e0bffb17 	ldw	r2,-20(fp)
2002f0b8:	10c00c17 	ldw	r3,48(r2)
2002f0bc:	e0bffb17 	ldw	r2,-20(fp)
2002f0c0:	10800b17 	ldw	r2,44(r2)
2002f0c4:	d8000015 	stw	zero,0(sp)
2002f0c8:	e1fffb17 	ldw	r7,-20(fp)
2002f0cc:	018800f4 	movhi	r6,8195
2002f0d0:	31bb8904 	addi	r6,r6,-4572
2002f0d4:	100b883a 	mov	r5,r2
2002f0d8:	1809883a 	mov	r4,r3
2002f0dc:	002fdec0 	call	2002fdec <alt_ic_isr_register>
                            dev, NULL);
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_rx_isr);
    #endif
        /* Enable Receiver interrupt to listen mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
2002f0e0:	e0bffb17 	ldw	r2,-20(fp)
2002f0e4:	10800a17 	ldw	r2,40(r2)
2002f0e8:	10800304 	addi	r2,r2,12
2002f0ec:	10800037 	ldwio	r2,0(r2)
2002f0f0:	10800054 	ori	r2,r2,1
2002f0f4:	e0bffc15 	stw	r2,-16(fp)
  	             (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
2002f0f8:	e0bffb17 	ldw	r2,-20(fp)
2002f0fc:	10800a17 	ldw	r2,40(r2)
2002f100:	10800304 	addi	r2,r2,12
2002f104:	1007883a 	mov	r3,r2
2002f108:	e0bffc17 	ldw	r2,-16(fp)
2002f10c:	18800035 	stwio	r2,0(r3)
    }
    return dev;
2002f110:	e0bffb17 	ldw	r2,-20(fp)
}
2002f114:	e037883a 	mov	sp,fp
2002f118:	dfc00117 	ldw	ra,4(sp)
2002f11c:	df000017 	ldw	fp,0(sp)
2002f120:	dec00204 	addi	sp,sp,8
2002f124:	f800283a 	ret

2002f128 <altera_avalon_mailbox_close>:
/*
 * altera_avalon_mailbox_close
 * Disable mailbox interrupt and irq
 */
void altera_avalon_mailbox_close (altera_avalon_mailbox_dev *dev)
{
2002f128:	defffb04 	addi	sp,sp,-20
2002f12c:	dfc00415 	stw	ra,16(sp)
2002f130:	df000315 	stw	fp,12(sp)
2002f134:	df000304 	addi	fp,sp,12
2002f138:	e13fff15 	stw	r4,-4(fp)
    alt_u32 data;
    if ((dev != NULL) && (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED))
2002f13c:	e0bfff17 	ldw	r2,-4(fp)
2002f140:	10003926 	beq	r2,zero,2002f228 <altera_avalon_mailbox_close+0x100>
2002f144:	e0bfff17 	ldw	r2,-4(fp)
2002f148:	10800b17 	ldw	r2,44(r2)
2002f14c:	10bfffe0 	cmpeqi	r2,r2,-1
2002f150:	1000351e 	bne	r2,zero,2002f228 <altera_avalon_mailbox_close+0x100>
    {
        /* Mask interrupt */
        if (dev->mbox_type == MBOX_TX)
2002f154:	e0bfff17 	ldw	r2,-4(fp)
2002f158:	10800f17 	ldw	r2,60(r2)
2002f15c:	10000e1e 	bne	r2,zero,2002f198 <altera_avalon_mailbox_close+0x70>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
2002f160:	e0bfff17 	ldw	r2,-4(fp)
2002f164:	10800a17 	ldw	r2,40(r2)
2002f168:	10800304 	addi	r2,r2,12
2002f16c:	10800037 	ldwio	r2,0(r2)
2002f170:	1007883a 	mov	r3,r2
2002f174:	00bfff44 	movi	r2,-3
2002f178:	1884703a 	and	r2,r3,r2
2002f17c:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
2002f180:	e0bfff17 	ldw	r2,-4(fp)
2002f184:	10800a17 	ldw	r2,40(r2)
2002f188:	10800304 	addi	r2,r2,12
2002f18c:	1007883a 	mov	r3,r2
2002f190:	e0bffe17 	ldw	r2,-8(fp)
2002f194:	18800035 	stwio	r2,0(r3)
        }
        if (dev->mbox_type == MBOX_RX)
2002f198:	e0bfff17 	ldw	r2,-4(fp)
2002f19c:	10800f17 	ldw	r2,60(r2)
2002f1a0:	10800058 	cmpnei	r2,r2,1
2002f1a4:	10000e1e 	bne	r2,zero,2002f1e0 <altera_avalon_mailbox_close+0xb8>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
2002f1a8:	e0bfff17 	ldw	r2,-4(fp)
2002f1ac:	10800a17 	ldw	r2,40(r2)
2002f1b0:	10800304 	addi	r2,r2,12
2002f1b4:	10800037 	ldwio	r2,0(r2)
2002f1b8:	1007883a 	mov	r3,r2
2002f1bc:	00bfff84 	movi	r2,-2
2002f1c0:	1884703a 	and	r2,r3,r2
2002f1c4:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
2002f1c8:	e0bfff17 	ldw	r2,-4(fp)
2002f1cc:	10800a17 	ldw	r2,40(r2)
2002f1d0:	10800304 	addi	r2,r2,12
2002f1d4:	1007883a 	mov	r3,r2
2002f1d8:	e0bffe17 	ldw	r2,-8(fp)
2002f1dc:	18800035 	stwio	r2,0(r3)
        }
  
        /* De-register mailbox irq) */
        if (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED)
2002f1e0:	e0bfff17 	ldw	r2,-4(fp)
2002f1e4:	10800b17 	ldw	r2,44(r2)
2002f1e8:	10bfffe0 	cmpeqi	r2,r2,-1
2002f1ec:	10000a1e 	bne	r2,zero,2002f218 <altera_avalon_mailbox_close+0xf0>
        {
        #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
            alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, NULL,
2002f1f0:	e0bfff17 	ldw	r2,-4(fp)
2002f1f4:	10c00c17 	ldw	r3,48(r2)
2002f1f8:	e0bfff17 	ldw	r2,-4(fp)
2002f1fc:	10800b17 	ldw	r2,44(r2)
2002f200:	d8000015 	stw	zero,0(sp)
2002f204:	e1ffff17 	ldw	r7,-4(fp)
2002f208:	000d883a 	mov	r6,zero
2002f20c:	100b883a 	mov	r5,r2
2002f210:	1809883a 	mov	r4,r3
2002f214:	002fdec0 	call	2002fdec <alt_ic_isr_register>
        #else
            alt_irq_register(dev->mailbox_irq, dev, NULL);
        #endif
        }
        /* De-registering callback to mailbox */
        dev->tx_cb  = NULL;
2002f218:	e0bfff17 	ldw	r2,-4(fp)
2002f21c:	10000d15 	stw	zero,52(r2)
        dev->rx_cb  = NULL;
2002f220:	e0bfff17 	ldw	r2,-4(fp)
2002f224:	10000e15 	stw	zero,56(r2)
    }
}
2002f228:	0001883a 	nop
2002f22c:	e037883a 	mov	sp,fp
2002f230:	dfc00117 	ldw	ra,4(sp)
2002f234:	df000017 	ldw	fp,0(sp)
2002f238:	dec00204 	addi	sp,sp,8
2002f23c:	f800283a 	ret

2002f240 <altera_avalon_mailbox_status>:
 *   Return 0 when mailbox is empty or no pending message
 *   Return 1 when mailbox space is full or there is a message pending
 */

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
2002f240:	defffd04 	addi	sp,sp,-12
2002f244:	df000215 	stw	fp,8(sp)
2002f248:	df000204 	addi	fp,sp,8
2002f24c:	e13fff15 	stw	r4,-4(fp)
    alt_u32 mailbox_sts = 0;
2002f250:	e03ffe15 	stw	zero,-8(fp)

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
2002f254:	e0bfff17 	ldw	r2,-4(fp)
2002f258:	10800a17 	ldw	r2,40(r2)
2002f25c:	10800204 	addi	r2,r2,8
2002f260:	10800037 	ldwio	r2,0(r2)
2002f264:	108000cc 	andi	r2,r2,3
2002f268:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_TX)
2002f26c:	e0bfff17 	ldw	r2,-4(fp)
2002f270:	10800f17 	ldw	r2,60(r2)
2002f274:	1000041e 	bne	r2,zero,2002f288 <altera_avalon_mailbox_status+0x48>
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
2002f278:	e0bffe17 	ldw	r2,-8(fp)
2002f27c:	1080008c 	andi	r2,r2,2
2002f280:	1004d07a 	srli	r2,r2,1
2002f284:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_RX)
2002f288:	e0bfff17 	ldw	r2,-4(fp)
2002f28c:	10800f17 	ldw	r2,60(r2)
2002f290:	10800058 	cmpnei	r2,r2,1
2002f294:	1000031e 	bne	r2,zero,2002f2a4 <altera_avalon_mailbox_status+0x64>
        mailbox_sts = mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_PENDING_MSK;
2002f298:	e0bffe17 	ldw	r2,-8(fp)
2002f29c:	1080004c 	andi	r2,r2,1
2002f2a0:	e0bffe15 	stw	r2,-8(fp)

    return mailbox_sts;
2002f2a4:	e0bffe17 	ldw	r2,-8(fp)
}
2002f2a8:	e037883a 	mov	sp,fp
2002f2ac:	df000017 	ldw	fp,0(sp)
2002f2b0:	dec00104 	addi	sp,sp,4
2002f2b4:	f800283a 	ret

2002f2b8 <altera_avalon_mailbox_send>:
 * For polling mode, '0' timeout value for infinite polling
 * otherwise timeout when expired
 */
int altera_avalon_mailbox_send
(altera_avalon_mailbox_dev *dev, void *message, int timeout, EventType event)
{
2002f2b8:	defff704 	addi	sp,sp,-36
2002f2bc:	dfc00815 	stw	ra,32(sp)
2002f2c0:	df000715 	stw	fp,28(sp)
2002f2c4:	df000704 	addi	fp,sp,28
2002f2c8:	e13ffc15 	stw	r4,-16(fp)
2002f2cc:	e17ffd15 	stw	r5,-12(fp)
2002f2d0:	e1bffe15 	stw	r6,-8(fp)
2002f2d4:	e1ffff15 	stw	r7,-4(fp)
    int status = 0;
2002f2d8:	e03ff915 	stw	zero,-28(fp)
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
2002f2dc:	e0bffc17 	ldw	r2,-16(fp)
2002f2e0:	10801103 	ldbu	r2,68(r2)
2002f2e4:	10803fcc 	andi	r2,r2,255
2002f2e8:	1000061e 	bne	r2,zero,2002f304 <altera_avalon_mailbox_send+0x4c>
2002f2ec:	e0bffc17 	ldw	r2,-16(fp)
2002f2f0:	10800a17 	ldw	r2,40(r2)
2002f2f4:	10800204 	addi	r2,r2,8
2002f2f8:	10800037 	ldwio	r2,0(r2)
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
2002f2fc:	1080008c 	andi	r2,r2,2
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
2002f300:	10000226 	beq	r2,zero,2002f30c <altera_avalon_mailbox_send+0x54>
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
    {
    	/* dev is lock or no free space to send */
    	return -1;
2002f304:	00bfffc4 	movi	r2,-1
2002f308:	00003a06 	br	2002f3f4 <altera_avalon_mailbox_send+0x13c>
    }
    else
    {
        dev->mbox_msg = message;
2002f30c:	e0bffc17 	ldw	r2,-16(fp)
2002f310:	e0fffd17 	ldw	r3,-12(fp)
2002f314:	10c01015 	stw	r3,64(r2)
        dev->lock = 1;
2002f318:	e0bffc17 	ldw	r2,-16(fp)
2002f31c:	00c00044 	movi	r3,1
2002f320:	10c01105 	stb	r3,68(r2)
     */
    ALT_SEM_POST (dev->write_lock);



    if ((dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED) || (event==POLL))
2002f324:	e0bffc17 	ldw	r2,-16(fp)
2002f328:	10800b17 	ldw	r2,44(r2)
2002f32c:	10bfffe0 	cmpeqi	r2,r2,-1
2002f330:	1000031e 	bne	r2,zero,2002f340 <altera_avalon_mailbox_send+0x88>
2002f334:	e0bfff17 	ldw	r2,-4(fp)
2002f338:	10800058 	cmpnei	r2,r2,1
2002f33c:	1000201e 	bne	r2,zero,2002f3c0 <altera_avalon_mailbox_send+0x108>
    {
        /* Polling mode */
        if (timeout ==0)
2002f340:	e0bffe17 	ldw	r2,-8(fp)
2002f344:	1000061e 	bne	r2,zero,2002f360 <altera_avalon_mailbox_send+0xa8>
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
2002f348:	e13ffc17 	ldw	r4,-16(fp)
2002f34c:	002f2400 	call	2002f240 <altera_avalon_mailbox_status>
2002f350:	e0bffb15 	stw	r2,-20(fp)
            } while (mbox_status);
2002f354:	e0bffb17 	ldw	r2,-20(fp)
2002f358:	103ffb1e 	bne	r2,zero,2002f348 <__alt_data_end+0xffff1348>
2002f35c:	00000e06 	br	2002f398 <altera_avalon_mailbox_send+0xe0>
        } else
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
2002f360:	e13ffc17 	ldw	r4,-16(fp)
2002f364:	002f2400 	call	2002f240 <altera_avalon_mailbox_status>
2002f368:	e0bffb15 	stw	r2,-20(fp)
                timeout--;
2002f36c:	e0bffe17 	ldw	r2,-8(fp)
2002f370:	10bfffc4 	addi	r2,r2,-1
2002f374:	e0bffe15 	stw	r2,-8(fp)
            } while (mbox_status && (timeout != 0));
2002f378:	e0bffb17 	ldw	r2,-20(fp)
2002f37c:	10000226 	beq	r2,zero,2002f388 <altera_avalon_mailbox_send+0xd0>
2002f380:	e0bffe17 	ldw	r2,-8(fp)
2002f384:	103ff61e 	bne	r2,zero,2002f360 <__alt_data_end+0xffff1360>
            if (timeout == 0)
2002f388:	e0bffe17 	ldw	r2,-8(fp)
2002f38c:	1000021e 	bne	r2,zero,2002f398 <altera_avalon_mailbox_send+0xe0>
            {    /* Timeout occur or fail sending */
                return -ETIME;
2002f390:	00bff084 	movi	r2,-62
2002f394:	00001706 	br	2002f3f4 <altera_avalon_mailbox_send+0x13c>
            }
        }
        status = altera_avalon_mailbox_post (dev, message);
2002f398:	e17ffd17 	ldw	r5,-12(fp)
2002f39c:	e13ffc17 	ldw	r4,-16(fp)
2002f3a0:	002ec740 	call	2002ec74 <altera_avalon_mailbox_post>
2002f3a4:	e0bff915 	stw	r2,-28(fp)
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
2002f3a8:	e0bffc17 	ldw	r2,-16(fp)
2002f3ac:	10001015 	stw	zero,64(r2)
        /* Release lock when message posted */
        dev->lock =0;
2002f3b0:	e0bffc17 	ldw	r2,-16(fp)
2002f3b4:	10001105 	stb	zero,68(r2)
        return status;
2002f3b8:	e0bff917 	ldw	r2,-28(fp)
2002f3bc:	00000d06 	br	2002f3f4 <altera_avalon_mailbox_send+0x13c>
    } else
    {
        /* Enable Sender interrupt */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
2002f3c0:	e0bffc17 	ldw	r2,-16(fp)
2002f3c4:	10800a17 	ldw	r2,40(r2)
2002f3c8:	10800304 	addi	r2,r2,12
2002f3cc:	10800037 	ldwio	r2,0(r2)
2002f3d0:	10800094 	ori	r2,r2,2
2002f3d4:	e0bffa15 	stw	r2,-24(fp)
                   (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
2002f3d8:	e0bffc17 	ldw	r2,-16(fp)
2002f3dc:	10800a17 	ldw	r2,40(r2)
2002f3e0:	10800304 	addi	r2,r2,12
2002f3e4:	1007883a 	mov	r3,r2
2002f3e8:	e0bffa17 	ldw	r2,-24(fp)
2002f3ec:	18800035 	stwio	r2,0(r3)
    }
  return 0;
2002f3f0:	0005883a 	mov	r2,zero
}
2002f3f4:	e037883a 	mov	sp,fp
2002f3f8:	dfc00117 	ldw	ra,4(sp)
2002f3fc:	df000017 	ldw	fp,0(sp)
2002f400:	dec00204 	addi	sp,sp,8
2002f404:	f800283a 	ret

2002f408 <altera_avalon_mailbox_retrieve_poll>:
 * If a message is available in the mailbox return it otherwise return NULL
 * This function is blocking
 *
 */
int altera_avalon_mailbox_retrieve_poll (altera_avalon_mailbox_dev *dev, alt_u32 *message, alt_u32 timeout)
{
2002f408:	defff904 	addi	sp,sp,-28
2002f40c:	dfc00615 	stw	ra,24(sp)
2002f410:	df000515 	stw	fp,20(sp)
2002f414:	df000504 	addi	fp,sp,20
2002f418:	e13ffd15 	stw	r4,-12(fp)
2002f41c:	e17ffe15 	stw	r5,-8(fp)
2002f420:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 status = 0;
2002f424:	e03ffb15 	stw	zero,-20(fp)
    alt_u32 data;

    if (dev != NULL && message != NULL)
2002f428:	e0bffd17 	ldw	r2,-12(fp)
2002f42c:	10003a26 	beq	r2,zero,2002f518 <altera_avalon_mailbox_retrieve_poll+0x110>
2002f430:	e0bffe17 	ldw	r2,-8(fp)
2002f434:	10003826 	beq	r2,zero,2002f518 <altera_avalon_mailbox_retrieve_poll+0x110>
    {
        /* Mask receiver mailbox interrupt when in polling mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
2002f438:	e0bffd17 	ldw	r2,-12(fp)
2002f43c:	10800a17 	ldw	r2,40(r2)
2002f440:	10800304 	addi	r2,r2,12
2002f444:	10800037 	ldwio	r2,0(r2)
2002f448:	e0bffc15 	stw	r2,-16(fp)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST,
2002f44c:	e0bffd17 	ldw	r2,-12(fp)
2002f450:	10800a17 	ldw	r2,40(r2)
2002f454:	10800304 	addi	r2,r2,12
2002f458:	1009883a 	mov	r4,r2
2002f45c:	e0fffc17 	ldw	r3,-16(fp)
2002f460:	00bfff84 	movi	r2,-2
2002f464:	1884703a 	and	r2,r3,r2
2002f468:	20800035 	stwio	r2,0(r4)
            (data & (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK)));


        /* If timeout is '0', poll till message availabe in mailbox */
        if (timeout == 0)
2002f46c:	e0bfff17 	ldw	r2,-4(fp)
2002f470:	1000061e 	bne	r2,zero,2002f48c <altera_avalon_mailbox_retrieve_poll+0x84>
        {
            do
            {
                status = altera_avalon_mailbox_status (dev);
2002f474:	e13ffd17 	ldw	r4,-12(fp)
2002f478:	002f2400 	call	2002f240 <altera_avalon_mailbox_status>
2002f47c:	e0bffb15 	stw	r2,-20(fp)
            } while (status == 0);
2002f480:	e0bffb17 	ldw	r2,-20(fp)
2002f484:	103ffb26 	beq	r2,zero,2002f474 <__alt_data_end+0xffff1474>
2002f488:	00000a06 	br	2002f4b4 <altera_avalon_mailbox_retrieve_poll+0xac>
        } else
        {
            do
            {
                 status = altera_avalon_mailbox_status (dev);
2002f48c:	e13ffd17 	ldw	r4,-12(fp)
2002f490:	002f2400 	call	2002f240 <altera_avalon_mailbox_status>
2002f494:	e0bffb15 	stw	r2,-20(fp)
                 timeout-- ;
2002f498:	e0bfff17 	ldw	r2,-4(fp)
2002f49c:	10bfffc4 	addi	r2,r2,-1
2002f4a0:	e0bfff15 	stw	r2,-4(fp)
            } while ((status == 0) && timeout);
2002f4a4:	e0bffb17 	ldw	r2,-20(fp)
2002f4a8:	1000021e 	bne	r2,zero,2002f4b4 <altera_avalon_mailbox_retrieve_poll+0xac>
2002f4ac:	e0bfff17 	ldw	r2,-4(fp)
2002f4b0:	103ff61e 	bne	r2,zero,2002f48c <__alt_data_end+0xffff148c>
        }

        /* if timeout, status remain 0 */
        if (status)
2002f4b4:	e0bffb17 	ldw	r2,-20(fp)
2002f4b8:	10000d26 	beq	r2,zero,2002f4f0 <altera_avalon_mailbox_retrieve_poll+0xe8>
        {
            message[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
2002f4bc:	e0bffe17 	ldw	r2,-8(fp)
2002f4c0:	10800104 	addi	r2,r2,4
2002f4c4:	e0fffd17 	ldw	r3,-12(fp)
2002f4c8:	18c00a17 	ldw	r3,40(r3)
2002f4cc:	18c00104 	addi	r3,r3,4
2002f4d0:	18c00037 	ldwio	r3,0(r3)
2002f4d4:	10c00015 	stw	r3,0(r2)
            message[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
2002f4d8:	e0bffd17 	ldw	r2,-12(fp)
2002f4dc:	10800a17 	ldw	r2,40(r2)
2002f4e0:	10800037 	ldwio	r2,0(r2)
2002f4e4:	1007883a 	mov	r3,r2
2002f4e8:	e0bffe17 	ldw	r2,-8(fp)
2002f4ec:	10c00015 	stw	r3,0(r2)
        }
        /* Restore original state of interrupt mask */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
2002f4f0:	e0bffd17 	ldw	r2,-12(fp)
2002f4f4:	10800a17 	ldw	r2,40(r2)
2002f4f8:	10800304 	addi	r2,r2,12
2002f4fc:	1007883a 	mov	r3,r2
2002f500:	e0bffc17 	ldw	r2,-16(fp)
2002f504:	18800035 	stwio	r2,0(r3)

        /* Return success on complete retrieve message
         * otherwise timeout and exit with error
         */
        if (status)
2002f508:	e0bffb17 	ldw	r2,-20(fp)
2002f50c:	10000226 	beq	r2,zero,2002f518 <altera_avalon_mailbox_retrieve_poll+0x110>
          return 0;
2002f510:	0005883a 	mov	r2,zero
2002f514:	00000606 	br	2002f530 <altera_avalon_mailbox_retrieve_poll+0x128>
      }
      /* Invalid Null dev and message */
      message[1] = 0;
2002f518:	e0bffe17 	ldw	r2,-8(fp)
2002f51c:	10800104 	addi	r2,r2,4
2002f520:	10000015 	stw	zero,0(r2)
      message[0] = 0;
2002f524:	e0bffe17 	ldw	r2,-8(fp)
2002f528:	10000015 	stw	zero,0(r2)
      return -EINVAL;
2002f52c:	00bffa84 	movi	r2,-22
}
2002f530:	e037883a 	mov	sp,fp
2002f534:	dfc00117 	ldw	ra,4(sp)
2002f538:	df000017 	ldw	fp,0(sp)
2002f53c:	dec00204 	addi	sp,sp,8
2002f540:	f800283a 	ret

2002f544 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2002f544:	defffe04 	addi	sp,sp,-8
2002f548:	dfc00115 	stw	ra,4(sp)
2002f54c:	df000015 	stw	fp,0(sp)
2002f550:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2002f554:	d0a00b17 	ldw	r2,-32724(gp)
2002f558:	10000326 	beq	r2,zero,2002f568 <alt_get_errno+0x24>
2002f55c:	d0a00b17 	ldw	r2,-32724(gp)
2002f560:	103ee83a 	callr	r2
2002f564:	00000106 	br	2002f56c <alt_get_errno+0x28>
2002f568:	d0a6ec04 	addi	r2,gp,-25680
}
2002f56c:	e037883a 	mov	sp,fp
2002f570:	dfc00117 	ldw	ra,4(sp)
2002f574:	df000017 	ldw	fp,0(sp)
2002f578:	dec00204 	addi	sp,sp,8
2002f57c:	f800283a 	ret

2002f580 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
2002f580:	defff904 	addi	sp,sp,-28
2002f584:	df000615 	stw	fp,24(sp)
2002f588:	df000604 	addi	fp,sp,24
2002f58c:	e13ffe15 	stw	r4,-8(fp)
2002f590:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
2002f594:	00bfffc4 	movi	r2,-1
2002f598:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
2002f59c:	0005317a 	rdctl	r2,cpuid
2002f5a0:	e0bffb15 	stw	r2,-20(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
2002f5a4:	e0bffb17 	ldw	r2,-20(fp)
2002f5a8:	1006943a 	slli	r3,r2,16
2002f5ac:	e0bfff17 	ldw	r2,-4(fp)
2002f5b0:	1884b03a 	or	r2,r3,r2
2002f5b4:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
2002f5b8:	e0bffe17 	ldw	r2,-8(fp)
2002f5bc:	10800317 	ldw	r2,12(r2)
2002f5c0:	e0fffc17 	ldw	r3,-16(fp)
2002f5c4:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
2002f5c8:	e0bffe17 	ldw	r2,-8(fp)
2002f5cc:	10800317 	ldw	r2,12(r2)
2002f5d0:	10800037 	ldwio	r2,0(r2)
2002f5d4:	e0bffd15 	stw	r2,-12(fp)

  if ( check == data)
2002f5d8:	e0fffd17 	ldw	r3,-12(fp)
2002f5dc:	e0bffc17 	ldw	r2,-16(fp)
2002f5e0:	1880011e 	bne	r3,r2,2002f5e8 <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
2002f5e4:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
2002f5e8:	e0bffa17 	ldw	r2,-24(fp)
}
2002f5ec:	e037883a 	mov	sp,fp
2002f5f0:	df000017 	ldw	fp,0(sp)
2002f5f4:	dec00104 	addi	sp,sp,4
2002f5f8:	f800283a 	ret

2002f5fc <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
2002f5fc:	defffc04 	addi	sp,sp,-16
2002f600:	dfc00315 	stw	ra,12(sp)
2002f604:	df000215 	stw	fp,8(sp)
2002f608:	df000204 	addi	fp,sp,8
2002f60c:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
2002f610:	d1600f04 	addi	r5,gp,-32708
2002f614:	e13fff17 	ldw	r4,-4(fp)
2002f618:	002fd280 	call	2002fd28 <alt_find_dev>
2002f61c:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
2002f620:	e0bffe17 	ldw	r2,-8(fp)
2002f624:	1000041e 	bne	r2,zero,2002f638 <altera_avalon_mutex_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
2002f628:	002f5440 	call	2002f544 <alt_get_errno>
2002f62c:	1007883a 	mov	r3,r2
2002f630:	008004c4 	movi	r2,19
2002f634:	18800015 	stw	r2,0(r3)
  }

  return dev;
2002f638:	e0bffe17 	ldw	r2,-8(fp)
}
2002f63c:	e037883a 	mov	sp,fp
2002f640:	dfc00117 	ldw	ra,4(sp)
2002f644:	df000017 	ldw	fp,0(sp)
2002f648:	dec00204 	addi	sp,sp,8
2002f64c:	f800283a 	ret

2002f650 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
2002f650:	defffe04 	addi	sp,sp,-8
2002f654:	df000115 	stw	fp,4(sp)
2002f658:	df000104 	addi	fp,sp,4
2002f65c:	e13fff15 	stw	r4,-4(fp)
  return;
2002f660:	0001883a 	nop
}
2002f664:	e037883a 	mov	sp,fp
2002f668:	df000017 	ldw	fp,0(sp)
2002f66c:	dec00104 	addi	sp,sp,4
2002f670:	f800283a 	ret

2002f674 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
2002f674:	defffc04 	addi	sp,sp,-16
2002f678:	dfc00315 	stw	ra,12(sp)
2002f67c:	df000215 	stw	fp,8(sp)
2002f680:	df000204 	addi	fp,sp,8
2002f684:	e13ffe15 	stw	r4,-8(fp)
2002f688:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
2002f68c:	0001883a 	nop
2002f690:	e17fff17 	ldw	r5,-4(fp)
2002f694:	e13ffe17 	ldw	r4,-8(fp)
2002f698:	002f5800 	call	2002f580 <alt_mutex_trylock>
2002f69c:	103ffc1e 	bne	r2,zero,2002f690 <__alt_data_end+0xffff1690>
}
2002f6a0:	0001883a 	nop
2002f6a4:	e037883a 	mov	sp,fp
2002f6a8:	dfc00117 	ldw	ra,4(sp)
2002f6ac:	df000017 	ldw	fp,0(sp)
2002f6b0:	dec00204 	addi	sp,sp,8
2002f6b4:	f800283a 	ret

2002f6b8 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
2002f6b8:	defffa04 	addi	sp,sp,-24
2002f6bc:	dfc00515 	stw	ra,20(sp)
2002f6c0:	df000415 	stw	fp,16(sp)
2002f6c4:	df000404 	addi	fp,sp,16
2002f6c8:	e13ffd15 	stw	r4,-12(fp)
2002f6cc:	e17ffe15 	stw	r5,-8(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
2002f6d0:	e17ffe17 	ldw	r5,-8(fp)
2002f6d4:	e13ffd17 	ldw	r4,-12(fp)
2002f6d8:	002f5800 	call	2002f580 <alt_mutex_trylock>
2002f6dc:	e0bffc15 	stw	r2,-16(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
2002f6e0:	e0bffc17 	ldw	r2,-16(fp)
}
2002f6e4:	e037883a 	mov	sp,fp
2002f6e8:	dfc00117 	ldw	ra,4(sp)
2002f6ec:	df000017 	ldw	fp,0(sp)
2002f6f0:	dec00204 	addi	sp,sp,8
2002f6f4:	f800283a 	ret

2002f6f8 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
2002f6f8:	defffd04 	addi	sp,sp,-12
2002f6fc:	df000215 	stw	fp,8(sp)
2002f700:	df000204 	addi	fp,sp,8
2002f704:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
2002f708:	0005317a 	rdctl	r2,cpuid
2002f70c:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
2002f710:	e0bfff17 	ldw	r2,-4(fp)
2002f714:	10800317 	ldw	r2,12(r2)
2002f718:	10800104 	addi	r2,r2,4
2002f71c:	00c00044 	movi	r3,1
2002f720:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
2002f724:	e0bfff17 	ldw	r2,-4(fp)
2002f728:	10800317 	ldw	r2,12(r2)
2002f72c:	e0fffe17 	ldw	r3,-8(fp)
2002f730:	1806943a 	slli	r3,r3,16
2002f734:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
2002f738:	0001883a 	nop
2002f73c:	e037883a 	mov	sp,fp
2002f740:	df000017 	ldw	fp,0(sp)
2002f744:	dec00104 	addi	sp,sp,4
2002f748:	f800283a 	ret

2002f74c <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
2002f74c:	defff904 	addi	sp,sp,-28
2002f750:	df000615 	stw	fp,24(sp)
2002f754:	df000604 	addi	fp,sp,24
2002f758:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
2002f75c:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
2002f760:	0005317a 	rdctl	r2,cpuid
2002f764:	e0bffb15 	stw	r2,-20(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
2002f768:	e0bfff17 	ldw	r2,-4(fp)
2002f76c:	10800317 	ldw	r2,12(r2)
2002f770:	10800037 	ldwio	r2,0(r2)
2002f774:	e0bffc15 	stw	r2,-16(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
2002f778:	e0bffc17 	ldw	r2,-16(fp)
2002f77c:	1004d43a 	srli	r2,r2,16
2002f780:	e0bffd15 	stw	r2,-12(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
2002f784:	e0fffd17 	ldw	r3,-12(fp)
2002f788:	e0bffb17 	ldw	r2,-20(fp)
2002f78c:	1880071e 	bne	r3,r2,2002f7ac <altera_avalon_mutex_is_mine+0x60>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
2002f790:	e0bffc17 	ldw	r2,-16(fp)
2002f794:	10bfffcc 	andi	r2,r2,65535
2002f798:	e0bffe15 	stw	r2,-8(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
2002f79c:	e0bffe17 	ldw	r2,-8(fp)
2002f7a0:	10000226 	beq	r2,zero,2002f7ac <altera_avalon_mutex_is_mine+0x60>
    {
      ret_code = 1;
2002f7a4:	00800044 	movi	r2,1
2002f7a8:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
2002f7ac:	e0bffa17 	ldw	r2,-24(fp)
}
2002f7b0:	e037883a 	mov	sp,fp
2002f7b4:	df000017 	ldw	fp,0(sp)
2002f7b8:	dec00104 	addi	sp,sp,4
2002f7bc:	f800283a 	ret

2002f7c0 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
2002f7c0:	defffc04 	addi	sp,sp,-16
2002f7c4:	df000315 	stw	fp,12(sp)
2002f7c8:	df000304 	addi	fp,sp,12
2002f7cc:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
2002f7d0:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
2002f7d4:	e0bfff17 	ldw	r2,-4(fp)
2002f7d8:	10800317 	ldw	r2,12(r2)
2002f7dc:	10800104 	addi	r2,r2,4
2002f7e0:	10800037 	ldwio	r2,0(r2)
2002f7e4:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
2002f7e8:	e0bffe17 	ldw	r2,-8(fp)
2002f7ec:	1080004c 	andi	r2,r2,1
2002f7f0:	10000226 	beq	r2,zero,2002f7fc <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
2002f7f4:	00800044 	movi	r2,1
2002f7f8:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
2002f7fc:	e0bffd17 	ldw	r2,-12(fp)
}
2002f800:	e037883a 	mov	sp,fp
2002f804:	df000017 	ldw	fp,0(sp)
2002f808:	dec00104 	addi	sp,sp,4
2002f80c:	f800283a 	ret

2002f810 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
2002f810:	defffa04 	addi	sp,sp,-24
2002f814:	dfc00515 	stw	ra,20(sp)
2002f818:	df000415 	stw	fp,16(sp)
2002f81c:	df000404 	addi	fp,sp,16
2002f820:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
2002f824:	0007883a 	mov	r3,zero
2002f828:	e0bfff17 	ldw	r2,-4(fp)
2002f82c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
2002f830:	e0bfff17 	ldw	r2,-4(fp)
2002f834:	10800104 	addi	r2,r2,4
2002f838:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002f83c:	0005303a 	rdctl	r2,status
2002f840:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002f844:	e0fffd17 	ldw	r3,-12(fp)
2002f848:	00bfff84 	movi	r2,-2
2002f84c:	1884703a 	and	r2,r3,r2
2002f850:	1001703a 	wrctl	status,r2
  
  return context;
2002f854:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
2002f858:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
2002f85c:	00304bc0 	call	200304bc <alt_tick>
2002f860:	e0bffc17 	ldw	r2,-16(fp)
2002f864:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002f868:	e0bffe17 	ldw	r2,-8(fp)
2002f86c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
2002f870:	0001883a 	nop
2002f874:	e037883a 	mov	sp,fp
2002f878:	dfc00117 	ldw	ra,4(sp)
2002f87c:	df000017 	ldw	fp,0(sp)
2002f880:	dec00204 	addi	sp,sp,8
2002f884:	f800283a 	ret

2002f888 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
2002f888:	defff804 	addi	sp,sp,-32
2002f88c:	dfc00715 	stw	ra,28(sp)
2002f890:	df000615 	stw	fp,24(sp)
2002f894:	df000604 	addi	fp,sp,24
2002f898:	e13ffc15 	stw	r4,-16(fp)
2002f89c:	e17ffd15 	stw	r5,-12(fp)
2002f8a0:	e1bffe15 	stw	r6,-8(fp)
2002f8a4:	e1ffff15 	stw	r7,-4(fp)
2002f8a8:	e0bfff17 	ldw	r2,-4(fp)
2002f8ac:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
2002f8b0:	d0a6f417 	ldw	r2,-25648(gp)
2002f8b4:	1000021e 	bne	r2,zero,2002f8c0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
2002f8b8:	e0bffb17 	ldw	r2,-20(fp)
2002f8bc:	d0a6f415 	stw	r2,-25648(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
2002f8c0:	e0bffc17 	ldw	r2,-16(fp)
2002f8c4:	10800104 	addi	r2,r2,4
2002f8c8:	00c001c4 	movi	r3,7
2002f8cc:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
2002f8d0:	d8000015 	stw	zero,0(sp)
2002f8d4:	e1fffc17 	ldw	r7,-16(fp)
2002f8d8:	018800f4 	movhi	r6,8195
2002f8dc:	31be0404 	addi	r6,r6,-2032
2002f8e0:	e17ffe17 	ldw	r5,-8(fp)
2002f8e4:	e13ffd17 	ldw	r4,-12(fp)
2002f8e8:	002fdec0 	call	2002fdec <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
2002f8ec:	0001883a 	nop
2002f8f0:	e037883a 	mov	sp,fp
2002f8f4:	dfc00117 	ldw	ra,4(sp)
2002f8f8:	df000017 	ldw	fp,0(sp)
2002f8fc:	dec00204 	addi	sp,sp,8
2002f900:	f800283a 	ret

2002f904 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
2002f904:	defff504 	addi	sp,sp,-44
2002f908:	df000a15 	stw	fp,40(sp)
2002f90c:	df000a04 	addi	fp,sp,40
2002f910:	e13ffc15 	stw	r4,-16(fp)
2002f914:	e17ffd15 	stw	r5,-12(fp)
2002f918:	e1bffe15 	stw	r6,-8(fp)
2002f91c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
2002f920:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
2002f924:	d0a6f417 	ldw	r2,-25648(gp)
  
  if (alt_ticks_per_second ())
2002f928:	10003c26 	beq	r2,zero,2002fa1c <alt_alarm_start+0x118>
  {
    if (alarm)
2002f92c:	e0bffc17 	ldw	r2,-16(fp)
2002f930:	10003826 	beq	r2,zero,2002fa14 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
2002f934:	e0bffc17 	ldw	r2,-16(fp)
2002f938:	e0fffe17 	ldw	r3,-8(fp)
2002f93c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
2002f940:	e0bffc17 	ldw	r2,-16(fp)
2002f944:	e0ffff17 	ldw	r3,-4(fp)
2002f948:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002f94c:	0005303a 	rdctl	r2,status
2002f950:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002f954:	e0fff917 	ldw	r3,-28(fp)
2002f958:	00bfff84 	movi	r2,-2
2002f95c:	1884703a 	and	r2,r3,r2
2002f960:	1001703a 	wrctl	status,r2
  
  return context;
2002f964:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
2002f968:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
2002f96c:	d0a6f517 	ldw	r2,-25644(gp)
      
      current_nticks = alt_nticks();
2002f970:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
2002f974:	e0fffd17 	ldw	r3,-12(fp)
2002f978:	e0bff617 	ldw	r2,-40(fp)
2002f97c:	1885883a 	add	r2,r3,r2
2002f980:	10c00044 	addi	r3,r2,1
2002f984:	e0bffc17 	ldw	r2,-16(fp)
2002f988:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
2002f98c:	e0bffc17 	ldw	r2,-16(fp)
2002f990:	10c00217 	ldw	r3,8(r2)
2002f994:	e0bff617 	ldw	r2,-40(fp)
2002f998:	1880042e 	bgeu	r3,r2,2002f9ac <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
2002f99c:	e0bffc17 	ldw	r2,-16(fp)
2002f9a0:	00c00044 	movi	r3,1
2002f9a4:	10c00405 	stb	r3,16(r2)
2002f9a8:	00000206 	br	2002f9b4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
2002f9ac:	e0bffc17 	ldw	r2,-16(fp)
2002f9b0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
2002f9b4:	e0bffc17 	ldw	r2,-16(fp)
2002f9b8:	d0e01204 	addi	r3,gp,-32696
2002f9bc:	e0fffa15 	stw	r3,-24(fp)
2002f9c0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
2002f9c4:	e0bffb17 	ldw	r2,-20(fp)
2002f9c8:	e0fffa17 	ldw	r3,-24(fp)
2002f9cc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
2002f9d0:	e0bffa17 	ldw	r2,-24(fp)
2002f9d4:	10c00017 	ldw	r3,0(r2)
2002f9d8:	e0bffb17 	ldw	r2,-20(fp)
2002f9dc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
2002f9e0:	e0bffa17 	ldw	r2,-24(fp)
2002f9e4:	10800017 	ldw	r2,0(r2)
2002f9e8:	e0fffb17 	ldw	r3,-20(fp)
2002f9ec:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
2002f9f0:	e0bffa17 	ldw	r2,-24(fp)
2002f9f4:	e0fffb17 	ldw	r3,-20(fp)
2002f9f8:	10c00015 	stw	r3,0(r2)
2002f9fc:	e0bff817 	ldw	r2,-32(fp)
2002fa00:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002fa04:	e0bff717 	ldw	r2,-36(fp)
2002fa08:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
2002fa0c:	0005883a 	mov	r2,zero
2002fa10:	00000306 	br	2002fa20 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
2002fa14:	00bffa84 	movi	r2,-22
2002fa18:	00000106 	br	2002fa20 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
2002fa1c:	00bfde84 	movi	r2,-134
  }
}
2002fa20:	e037883a 	mov	sp,fp
2002fa24:	df000017 	ldw	fp,0(sp)
2002fa28:	dec00104 	addi	sp,sp,4
2002fa2c:	f800283a 	ret

2002fa30 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
2002fa30:	defffa04 	addi	sp,sp,-24
2002fa34:	dfc00515 	stw	ra,20(sp)
2002fa38:	df000415 	stw	fp,16(sp)
2002fa3c:	df000404 	addi	fp,sp,16
2002fa40:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
2002fa44:	008000c4 	movi	r2,3
2002fa48:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
2002fa4c:	e0fffd17 	ldw	r3,-12(fp)
2002fa50:	008003f4 	movhi	r2,15
2002fa54:	10909004 	addi	r2,r2,16960
2002fa58:	1885383a 	mul	r2,r3,r2
2002fa5c:	100b883a 	mov	r5,r2
2002fa60:	0100bef4 	movhi	r4,763
2002fa64:	213c2004 	addi	r4,r4,-3968
2002fa68:	002aef80 	call	2002aef8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
2002fa6c:	100b883a 	mov	r5,r2
2002fa70:	01200034 	movhi	r4,32768
2002fa74:	213fffc4 	addi	r4,r4,-1
2002fa78:	002aef80 	call	2002aef8 <__udivsi3>
2002fa7c:	100b883a 	mov	r5,r2
2002fa80:	e13fff17 	ldw	r4,-4(fp)
2002fa84:	002aef80 	call	2002aef8 <__udivsi3>
2002fa88:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
2002fa8c:	e0bffe17 	ldw	r2,-8(fp)
2002fa90:	10002a26 	beq	r2,zero,2002fb3c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
2002fa94:	e03ffc15 	stw	zero,-16(fp)
2002fa98:	00001706 	br	2002faf8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
2002fa9c:	00a00034 	movhi	r2,32768
2002faa0:	10bfffc4 	addi	r2,r2,-1
2002faa4:	10bfffc4 	addi	r2,r2,-1
2002faa8:	103ffe1e 	bne	r2,zero,2002faa4 <__alt_data_end+0xffff1aa4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
2002faac:	e0fffd17 	ldw	r3,-12(fp)
2002fab0:	008003f4 	movhi	r2,15
2002fab4:	10909004 	addi	r2,r2,16960
2002fab8:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
2002fabc:	100b883a 	mov	r5,r2
2002fac0:	0100bef4 	movhi	r4,763
2002fac4:	213c2004 	addi	r4,r4,-3968
2002fac8:	002aef80 	call	2002aef8 <__udivsi3>
2002facc:	100b883a 	mov	r5,r2
2002fad0:	01200034 	movhi	r4,32768
2002fad4:	213fffc4 	addi	r4,r4,-1
2002fad8:	002aef80 	call	2002aef8 <__udivsi3>
2002fadc:	1007883a 	mov	r3,r2
2002fae0:	e0bfff17 	ldw	r2,-4(fp)
2002fae4:	10c5c83a 	sub	r2,r2,r3
2002fae8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
2002faec:	e0bffc17 	ldw	r2,-16(fp)
2002faf0:	10800044 	addi	r2,r2,1
2002faf4:	e0bffc15 	stw	r2,-16(fp)
2002faf8:	e0fffc17 	ldw	r3,-16(fp)
2002fafc:	e0bffe17 	ldw	r2,-8(fp)
2002fb00:	18bfe616 	blt	r3,r2,2002fa9c <__alt_data_end+0xffff1a9c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
2002fb04:	e0fffd17 	ldw	r3,-12(fp)
2002fb08:	008003f4 	movhi	r2,15
2002fb0c:	10909004 	addi	r2,r2,16960
2002fb10:	1885383a 	mul	r2,r3,r2
2002fb14:	100b883a 	mov	r5,r2
2002fb18:	0100bef4 	movhi	r4,763
2002fb1c:	213c2004 	addi	r4,r4,-3968
2002fb20:	002aef80 	call	2002aef8 <__udivsi3>
2002fb24:	1007883a 	mov	r3,r2
2002fb28:	e0bfff17 	ldw	r2,-4(fp)
2002fb2c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
2002fb30:	10bfffc4 	addi	r2,r2,-1
2002fb34:	103ffe1e 	bne	r2,zero,2002fb30 <__alt_data_end+0xffff1b30>
2002fb38:	00000d06 	br	2002fb70 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
2002fb3c:	e0fffd17 	ldw	r3,-12(fp)
2002fb40:	008003f4 	movhi	r2,15
2002fb44:	10909004 	addi	r2,r2,16960
2002fb48:	1885383a 	mul	r2,r3,r2
2002fb4c:	100b883a 	mov	r5,r2
2002fb50:	0100bef4 	movhi	r4,763
2002fb54:	213c2004 	addi	r4,r4,-3968
2002fb58:	002aef80 	call	2002aef8 <__udivsi3>
2002fb5c:	1007883a 	mov	r3,r2
2002fb60:	e0bfff17 	ldw	r2,-4(fp)
2002fb64:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
2002fb68:	10bfffc4 	addi	r2,r2,-1
2002fb6c:	00bffe16 	blt	zero,r2,2002fb68 <__alt_data_end+0xffff1b68>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
2002fb70:	0005883a 	mov	r2,zero
}
2002fb74:	e037883a 	mov	sp,fp
2002fb78:	dfc00117 	ldw	ra,4(sp)
2002fb7c:	df000017 	ldw	fp,0(sp)
2002fb80:	dec00204 	addi	sp,sp,8
2002fb84:	f800283a 	ret

2002fb88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2002fb88:	defffe04 	addi	sp,sp,-8
2002fb8c:	dfc00115 	stw	ra,4(sp)
2002fb90:	df000015 	stw	fp,0(sp)
2002fb94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2002fb98:	d0a00b17 	ldw	r2,-32724(gp)
2002fb9c:	10000326 	beq	r2,zero,2002fbac <alt_get_errno+0x24>
2002fba0:	d0a00b17 	ldw	r2,-32724(gp)
2002fba4:	103ee83a 	callr	r2
2002fba8:	00000106 	br	2002fbb0 <alt_get_errno+0x28>
2002fbac:	d0a6ec04 	addi	r2,gp,-25680
}
2002fbb0:	e037883a 	mov	sp,fp
2002fbb4:	dfc00117 	ldw	ra,4(sp)
2002fbb8:	df000017 	ldw	fp,0(sp)
2002fbbc:	dec00204 	addi	sp,sp,8
2002fbc0:	f800283a 	ret

2002fbc4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
2002fbc4:	defffa04 	addi	sp,sp,-24
2002fbc8:	dfc00515 	stw	ra,20(sp)
2002fbcc:	df000415 	stw	fp,16(sp)
2002fbd0:	df000404 	addi	fp,sp,16
2002fbd4:	e13ffe15 	stw	r4,-8(fp)
2002fbd8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
2002fbdc:	e0bffe17 	ldw	r2,-8(fp)
2002fbe0:	10000326 	beq	r2,zero,2002fbf0 <alt_dev_llist_insert+0x2c>
2002fbe4:	e0bffe17 	ldw	r2,-8(fp)
2002fbe8:	10800217 	ldw	r2,8(r2)
2002fbec:	1000061e 	bne	r2,zero,2002fc08 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
2002fbf0:	002fb880 	call	2002fb88 <alt_get_errno>
2002fbf4:	1007883a 	mov	r3,r2
2002fbf8:	00800584 	movi	r2,22
2002fbfc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
2002fc00:	00bffa84 	movi	r2,-22
2002fc04:	00001306 	br	2002fc54 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
2002fc08:	e0bffe17 	ldw	r2,-8(fp)
2002fc0c:	e0ffff17 	ldw	r3,-4(fp)
2002fc10:	e0fffc15 	stw	r3,-16(fp)
2002fc14:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
2002fc18:	e0bffd17 	ldw	r2,-12(fp)
2002fc1c:	e0fffc17 	ldw	r3,-16(fp)
2002fc20:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
2002fc24:	e0bffc17 	ldw	r2,-16(fp)
2002fc28:	10c00017 	ldw	r3,0(r2)
2002fc2c:	e0bffd17 	ldw	r2,-12(fp)
2002fc30:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
2002fc34:	e0bffc17 	ldw	r2,-16(fp)
2002fc38:	10800017 	ldw	r2,0(r2)
2002fc3c:	e0fffd17 	ldw	r3,-12(fp)
2002fc40:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
2002fc44:	e0bffc17 	ldw	r2,-16(fp)
2002fc48:	e0fffd17 	ldw	r3,-12(fp)
2002fc4c:	10c00015 	stw	r3,0(r2)

  return 0;  
2002fc50:	0005883a 	mov	r2,zero
}
2002fc54:	e037883a 	mov	sp,fp
2002fc58:	dfc00117 	ldw	ra,4(sp)
2002fc5c:	df000017 	ldw	fp,0(sp)
2002fc60:	dec00204 	addi	sp,sp,8
2002fc64:	f800283a 	ret

2002fc68 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
2002fc68:	defffd04 	addi	sp,sp,-12
2002fc6c:	dfc00215 	stw	ra,8(sp)
2002fc70:	df000115 	stw	fp,4(sp)
2002fc74:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
2002fc78:	008800f4 	movhi	r2,8195
2002fc7c:	10831404 	addi	r2,r2,3152
2002fc80:	e0bfff15 	stw	r2,-4(fp)
2002fc84:	00000606 	br	2002fca0 <_do_ctors+0x38>
        (*ctor) (); 
2002fc88:	e0bfff17 	ldw	r2,-4(fp)
2002fc8c:	10800017 	ldw	r2,0(r2)
2002fc90:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
2002fc94:	e0bfff17 	ldw	r2,-4(fp)
2002fc98:	10bfff04 	addi	r2,r2,-4
2002fc9c:	e0bfff15 	stw	r2,-4(fp)
2002fca0:	e0ffff17 	ldw	r3,-4(fp)
2002fca4:	008800f4 	movhi	r2,8195
2002fca8:	10831504 	addi	r2,r2,3156
2002fcac:	18bff62e 	bgeu	r3,r2,2002fc88 <__alt_data_end+0xffff1c88>
        (*ctor) (); 
}
2002fcb0:	0001883a 	nop
2002fcb4:	e037883a 	mov	sp,fp
2002fcb8:	dfc00117 	ldw	ra,4(sp)
2002fcbc:	df000017 	ldw	fp,0(sp)
2002fcc0:	dec00204 	addi	sp,sp,8
2002fcc4:	f800283a 	ret

2002fcc8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
2002fcc8:	defffd04 	addi	sp,sp,-12
2002fccc:	dfc00215 	stw	ra,8(sp)
2002fcd0:	df000115 	stw	fp,4(sp)
2002fcd4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
2002fcd8:	008800f4 	movhi	r2,8195
2002fcdc:	10831404 	addi	r2,r2,3152
2002fce0:	e0bfff15 	stw	r2,-4(fp)
2002fce4:	00000606 	br	2002fd00 <_do_dtors+0x38>
        (*dtor) (); 
2002fce8:	e0bfff17 	ldw	r2,-4(fp)
2002fcec:	10800017 	ldw	r2,0(r2)
2002fcf0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
2002fcf4:	e0bfff17 	ldw	r2,-4(fp)
2002fcf8:	10bfff04 	addi	r2,r2,-4
2002fcfc:	e0bfff15 	stw	r2,-4(fp)
2002fd00:	e0ffff17 	ldw	r3,-4(fp)
2002fd04:	008800f4 	movhi	r2,8195
2002fd08:	10831504 	addi	r2,r2,3156
2002fd0c:	18bff62e 	bgeu	r3,r2,2002fce8 <__alt_data_end+0xffff1ce8>
        (*dtor) (); 
}
2002fd10:	0001883a 	nop
2002fd14:	e037883a 	mov	sp,fp
2002fd18:	dfc00117 	ldw	ra,4(sp)
2002fd1c:	df000017 	ldw	fp,0(sp)
2002fd20:	dec00204 	addi	sp,sp,8
2002fd24:	f800283a 	ret

2002fd28 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
2002fd28:	defffa04 	addi	sp,sp,-24
2002fd2c:	dfc00515 	stw	ra,20(sp)
2002fd30:	df000415 	stw	fp,16(sp)
2002fd34:	df000404 	addi	fp,sp,16
2002fd38:	e13ffe15 	stw	r4,-8(fp)
2002fd3c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
2002fd40:	e0bfff17 	ldw	r2,-4(fp)
2002fd44:	10800017 	ldw	r2,0(r2)
2002fd48:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
2002fd4c:	e13ffe17 	ldw	r4,-8(fp)
2002fd50:	0021eec0 	call	20021eec <strlen>
2002fd54:	10800044 	addi	r2,r2,1
2002fd58:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
2002fd5c:	00000d06 	br	2002fd94 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
2002fd60:	e0bffc17 	ldw	r2,-16(fp)
2002fd64:	10800217 	ldw	r2,8(r2)
2002fd68:	e0fffd17 	ldw	r3,-12(fp)
2002fd6c:	180d883a 	mov	r6,r3
2002fd70:	e17ffe17 	ldw	r5,-8(fp)
2002fd74:	1009883a 	mov	r4,r2
2002fd78:	003090c0 	call	2003090c <memcmp>
2002fd7c:	1000021e 	bne	r2,zero,2002fd88 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
2002fd80:	e0bffc17 	ldw	r2,-16(fp)
2002fd84:	00000706 	br	2002fda4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
2002fd88:	e0bffc17 	ldw	r2,-16(fp)
2002fd8c:	10800017 	ldw	r2,0(r2)
2002fd90:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
2002fd94:	e0fffc17 	ldw	r3,-16(fp)
2002fd98:	e0bfff17 	ldw	r2,-4(fp)
2002fd9c:	18bff01e 	bne	r3,r2,2002fd60 <__alt_data_end+0xffff1d60>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
2002fda0:	0005883a 	mov	r2,zero
}
2002fda4:	e037883a 	mov	sp,fp
2002fda8:	dfc00117 	ldw	ra,4(sp)
2002fdac:	df000017 	ldw	fp,0(sp)
2002fdb0:	dec00204 	addi	sp,sp,8
2002fdb4:	f800283a 	ret

2002fdb8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
2002fdb8:	defffe04 	addi	sp,sp,-8
2002fdbc:	dfc00115 	stw	ra,4(sp)
2002fdc0:	df000015 	stw	fp,0(sp)
2002fdc4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
2002fdc8:	01440004 	movi	r5,4096
2002fdcc:	0009883a 	mov	r4,zero
2002fdd0:	00307940 	call	20030794 <alt_icache_flush>
#endif
}
2002fdd4:	0001883a 	nop
2002fdd8:	e037883a 	mov	sp,fp
2002fddc:	dfc00117 	ldw	ra,4(sp)
2002fde0:	df000017 	ldw	fp,0(sp)
2002fde4:	dec00204 	addi	sp,sp,8
2002fde8:	f800283a 	ret

2002fdec <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
2002fdec:	defff904 	addi	sp,sp,-28
2002fdf0:	dfc00615 	stw	ra,24(sp)
2002fdf4:	df000515 	stw	fp,20(sp)
2002fdf8:	df000504 	addi	fp,sp,20
2002fdfc:	e13ffc15 	stw	r4,-16(fp)
2002fe00:	e17ffd15 	stw	r5,-12(fp)
2002fe04:	e1bffe15 	stw	r6,-8(fp)
2002fe08:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
2002fe0c:	e0800217 	ldw	r2,8(fp)
2002fe10:	d8800015 	stw	r2,0(sp)
2002fe14:	e1ffff17 	ldw	r7,-4(fp)
2002fe18:	e1bffe17 	ldw	r6,-8(fp)
2002fe1c:	e17ffd17 	ldw	r5,-12(fp)
2002fe20:	e13ffc17 	ldw	r4,-16(fp)
2002fe24:	002ff9c0 	call	2002ff9c <alt_iic_isr_register>
}  
2002fe28:	e037883a 	mov	sp,fp
2002fe2c:	dfc00117 	ldw	ra,4(sp)
2002fe30:	df000017 	ldw	fp,0(sp)
2002fe34:	dec00204 	addi	sp,sp,8
2002fe38:	f800283a 	ret

2002fe3c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
2002fe3c:	defff904 	addi	sp,sp,-28
2002fe40:	df000615 	stw	fp,24(sp)
2002fe44:	df000604 	addi	fp,sp,24
2002fe48:	e13ffe15 	stw	r4,-8(fp)
2002fe4c:	e17fff15 	stw	r5,-4(fp)
2002fe50:	e0bfff17 	ldw	r2,-4(fp)
2002fe54:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002fe58:	0005303a 	rdctl	r2,status
2002fe5c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002fe60:	e0fffb17 	ldw	r3,-20(fp)
2002fe64:	00bfff84 	movi	r2,-2
2002fe68:	1884703a 	and	r2,r3,r2
2002fe6c:	1001703a 	wrctl	status,r2
  
  return context;
2002fe70:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
2002fe74:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
2002fe78:	00c00044 	movi	r3,1
2002fe7c:	e0bffa17 	ldw	r2,-24(fp)
2002fe80:	1884983a 	sll	r2,r3,r2
2002fe84:	1007883a 	mov	r3,r2
2002fe88:	d0a6f317 	ldw	r2,-25652(gp)
2002fe8c:	1884b03a 	or	r2,r3,r2
2002fe90:	d0a6f315 	stw	r2,-25652(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
2002fe94:	d0a6f317 	ldw	r2,-25652(gp)
2002fe98:	100170fa 	wrctl	ienable,r2
2002fe9c:	e0bffc17 	ldw	r2,-16(fp)
2002fea0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002fea4:	e0bffd17 	ldw	r2,-12(fp)
2002fea8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
2002feac:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
2002feb0:	0001883a 	nop
}
2002feb4:	e037883a 	mov	sp,fp
2002feb8:	df000017 	ldw	fp,0(sp)
2002febc:	dec00104 	addi	sp,sp,4
2002fec0:	f800283a 	ret

2002fec4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
2002fec4:	defff904 	addi	sp,sp,-28
2002fec8:	df000615 	stw	fp,24(sp)
2002fecc:	df000604 	addi	fp,sp,24
2002fed0:	e13ffe15 	stw	r4,-8(fp)
2002fed4:	e17fff15 	stw	r5,-4(fp)
2002fed8:	e0bfff17 	ldw	r2,-4(fp)
2002fedc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002fee0:	0005303a 	rdctl	r2,status
2002fee4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002fee8:	e0fffb17 	ldw	r3,-20(fp)
2002feec:	00bfff84 	movi	r2,-2
2002fef0:	1884703a 	and	r2,r3,r2
2002fef4:	1001703a 	wrctl	status,r2
  
  return context;
2002fef8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
2002fefc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
2002ff00:	00c00044 	movi	r3,1
2002ff04:	e0bffa17 	ldw	r2,-24(fp)
2002ff08:	1884983a 	sll	r2,r3,r2
2002ff0c:	0084303a 	nor	r2,zero,r2
2002ff10:	1007883a 	mov	r3,r2
2002ff14:	d0a6f317 	ldw	r2,-25652(gp)
2002ff18:	1884703a 	and	r2,r3,r2
2002ff1c:	d0a6f315 	stw	r2,-25652(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
2002ff20:	d0a6f317 	ldw	r2,-25652(gp)
2002ff24:	100170fa 	wrctl	ienable,r2
2002ff28:	e0bffc17 	ldw	r2,-16(fp)
2002ff2c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002ff30:	e0bffd17 	ldw	r2,-12(fp)
2002ff34:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
2002ff38:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
2002ff3c:	0001883a 	nop
}
2002ff40:	e037883a 	mov	sp,fp
2002ff44:	df000017 	ldw	fp,0(sp)
2002ff48:	dec00104 	addi	sp,sp,4
2002ff4c:	f800283a 	ret

2002ff50 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
2002ff50:	defffc04 	addi	sp,sp,-16
2002ff54:	df000315 	stw	fp,12(sp)
2002ff58:	df000304 	addi	fp,sp,12
2002ff5c:	e13ffe15 	stw	r4,-8(fp)
2002ff60:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
2002ff64:	000530fa 	rdctl	r2,ienable
2002ff68:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
2002ff6c:	00c00044 	movi	r3,1
2002ff70:	e0bfff17 	ldw	r2,-4(fp)
2002ff74:	1884983a 	sll	r2,r3,r2
2002ff78:	1007883a 	mov	r3,r2
2002ff7c:	e0bffd17 	ldw	r2,-12(fp)
2002ff80:	1884703a 	and	r2,r3,r2
2002ff84:	1004c03a 	cmpne	r2,r2,zero
2002ff88:	10803fcc 	andi	r2,r2,255
}
2002ff8c:	e037883a 	mov	sp,fp
2002ff90:	df000017 	ldw	fp,0(sp)
2002ff94:	dec00104 	addi	sp,sp,4
2002ff98:	f800283a 	ret

2002ff9c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
2002ff9c:	defff504 	addi	sp,sp,-44
2002ffa0:	dfc00a15 	stw	ra,40(sp)
2002ffa4:	df000915 	stw	fp,36(sp)
2002ffa8:	df000904 	addi	fp,sp,36
2002ffac:	e13ffc15 	stw	r4,-16(fp)
2002ffb0:	e17ffd15 	stw	r5,-12(fp)
2002ffb4:	e1bffe15 	stw	r6,-8(fp)
2002ffb8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
2002ffbc:	00bffa84 	movi	r2,-22
2002ffc0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
2002ffc4:	e0bffd17 	ldw	r2,-12(fp)
2002ffc8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
2002ffcc:	e0bff817 	ldw	r2,-32(fp)
2002ffd0:	10800808 	cmpgei	r2,r2,32
2002ffd4:	1000271e 	bne	r2,zero,20030074 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002ffd8:	0005303a 	rdctl	r2,status
2002ffdc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002ffe0:	e0fffb17 	ldw	r3,-20(fp)
2002ffe4:	00bfff84 	movi	r2,-2
2002ffe8:	1884703a 	and	r2,r3,r2
2002ffec:	1001703a 	wrctl	status,r2
  
  return context;
2002fff0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
2002fff4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
2002fff8:	008800f4 	movhi	r2,8195
2002fffc:	10920a04 	addi	r2,r2,18472
20030000:	e0fff817 	ldw	r3,-32(fp)
20030004:	180690fa 	slli	r3,r3,3
20030008:	10c5883a 	add	r2,r2,r3
2003000c:	e0fffe17 	ldw	r3,-8(fp)
20030010:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
20030014:	008800f4 	movhi	r2,8195
20030018:	10920a04 	addi	r2,r2,18472
2003001c:	e0fff817 	ldw	r3,-32(fp)
20030020:	180690fa 	slli	r3,r3,3
20030024:	10c5883a 	add	r2,r2,r3
20030028:	10800104 	addi	r2,r2,4
2003002c:	e0ffff17 	ldw	r3,-4(fp)
20030030:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
20030034:	e0bffe17 	ldw	r2,-8(fp)
20030038:	10000526 	beq	r2,zero,20030050 <alt_iic_isr_register+0xb4>
2003003c:	e0bff817 	ldw	r2,-32(fp)
20030040:	100b883a 	mov	r5,r2
20030044:	e13ffc17 	ldw	r4,-16(fp)
20030048:	002fe3c0 	call	2002fe3c <alt_ic_irq_enable>
2003004c:	00000406 	br	20030060 <alt_iic_isr_register+0xc4>
20030050:	e0bff817 	ldw	r2,-32(fp)
20030054:	100b883a 	mov	r5,r2
20030058:	e13ffc17 	ldw	r4,-16(fp)
2003005c:	002fec40 	call	2002fec4 <alt_ic_irq_disable>
20030060:	e0bff715 	stw	r2,-36(fp)
20030064:	e0bffa17 	ldw	r2,-24(fp)
20030068:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2003006c:	e0bff917 	ldw	r2,-28(fp)
20030070:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
20030074:	e0bff717 	ldw	r2,-36(fp)
}
20030078:	e037883a 	mov	sp,fp
2003007c:	dfc00117 	ldw	ra,4(sp)
20030080:	df000017 	ldw	fp,0(sp)
20030084:	dec00204 	addi	sp,sp,8
20030088:	f800283a 	ret

2003008c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
2003008c:	defff904 	addi	sp,sp,-28
20030090:	dfc00615 	stw	ra,24(sp)
20030094:	df000515 	stw	fp,20(sp)
20030098:	df000504 	addi	fp,sp,20
2003009c:	e13ffc15 	stw	r4,-16(fp)
200300a0:	e17ffd15 	stw	r5,-12(fp)
200300a4:	e1bffe15 	stw	r6,-8(fp)
200300a8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
200300ac:	e1bfff17 	ldw	r6,-4(fp)
200300b0:	e17ffe17 	ldw	r5,-8(fp)
200300b4:	e13ffd17 	ldw	r4,-12(fp)
200300b8:	00302cc0 	call	200302cc <open>
200300bc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
200300c0:	e0bffb17 	ldw	r2,-20(fp)
200300c4:	10001c16 	blt	r2,zero,20030138 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
200300c8:	008800f4 	movhi	r2,8195
200300cc:	10867b04 	addi	r2,r2,6636
200300d0:	e0fffb17 	ldw	r3,-20(fp)
200300d4:	18c00324 	muli	r3,r3,12
200300d8:	10c5883a 	add	r2,r2,r3
200300dc:	10c00017 	ldw	r3,0(r2)
200300e0:	e0bffc17 	ldw	r2,-16(fp)
200300e4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
200300e8:	008800f4 	movhi	r2,8195
200300ec:	10867b04 	addi	r2,r2,6636
200300f0:	e0fffb17 	ldw	r3,-20(fp)
200300f4:	18c00324 	muli	r3,r3,12
200300f8:	10c5883a 	add	r2,r2,r3
200300fc:	10800104 	addi	r2,r2,4
20030100:	10c00017 	ldw	r3,0(r2)
20030104:	e0bffc17 	ldw	r2,-16(fp)
20030108:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
2003010c:	008800f4 	movhi	r2,8195
20030110:	10867b04 	addi	r2,r2,6636
20030114:	e0fffb17 	ldw	r3,-20(fp)
20030118:	18c00324 	muli	r3,r3,12
2003011c:	10c5883a 	add	r2,r2,r3
20030120:	10800204 	addi	r2,r2,8
20030124:	10c00017 	ldw	r3,0(r2)
20030128:	e0bffc17 	ldw	r2,-16(fp)
2003012c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
20030130:	e13ffb17 	ldw	r4,-20(fp)
20030134:	002dd600 	call	2002dd60 <alt_release_fd>
  }
} 
20030138:	0001883a 	nop
2003013c:	e037883a 	mov	sp,fp
20030140:	dfc00117 	ldw	ra,4(sp)
20030144:	df000017 	ldw	fp,0(sp)
20030148:	dec00204 	addi	sp,sp,8
2003014c:	f800283a 	ret

20030150 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
20030150:	defffb04 	addi	sp,sp,-20
20030154:	dfc00415 	stw	ra,16(sp)
20030158:	df000315 	stw	fp,12(sp)
2003015c:	df000304 	addi	fp,sp,12
20030160:	e13ffd15 	stw	r4,-12(fp)
20030164:	e17ffe15 	stw	r5,-8(fp)
20030168:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
2003016c:	01c07fc4 	movi	r7,511
20030170:	01800044 	movi	r6,1
20030174:	e17ffd17 	ldw	r5,-12(fp)
20030178:	010800f4 	movhi	r4,8195
2003017c:	21067e04 	addi	r4,r4,6648
20030180:	003008c0 	call	2003008c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
20030184:	01c07fc4 	movi	r7,511
20030188:	000d883a 	mov	r6,zero
2003018c:	e17ffe17 	ldw	r5,-8(fp)
20030190:	010800f4 	movhi	r4,8195
20030194:	21067b04 	addi	r4,r4,6636
20030198:	003008c0 	call	2003008c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
2003019c:	01c07fc4 	movi	r7,511
200301a0:	01800044 	movi	r6,1
200301a4:	e17fff17 	ldw	r5,-4(fp)
200301a8:	010800f4 	movhi	r4,8195
200301ac:	21068104 	addi	r4,r4,6660
200301b0:	003008c0 	call	2003008c <alt_open_fd>
}  
200301b4:	0001883a 	nop
200301b8:	e037883a 	mov	sp,fp
200301bc:	dfc00117 	ldw	ra,4(sp)
200301c0:	df000017 	ldw	fp,0(sp)
200301c4:	dec00204 	addi	sp,sp,8
200301c8:	f800283a 	ret

200301cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
200301cc:	defffe04 	addi	sp,sp,-8
200301d0:	dfc00115 	stw	ra,4(sp)
200301d4:	df000015 	stw	fp,0(sp)
200301d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
200301dc:	d0a00b17 	ldw	r2,-32724(gp)
200301e0:	10000326 	beq	r2,zero,200301f0 <alt_get_errno+0x24>
200301e4:	d0a00b17 	ldw	r2,-32724(gp)
200301e8:	103ee83a 	callr	r2
200301ec:	00000106 	br	200301f4 <alt_get_errno+0x28>
200301f0:	d0a6ec04 	addi	r2,gp,-25680
}
200301f4:	e037883a 	mov	sp,fp
200301f8:	dfc00117 	ldw	ra,4(sp)
200301fc:	df000017 	ldw	fp,0(sp)
20030200:	dec00204 	addi	sp,sp,8
20030204:	f800283a 	ret

20030208 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
20030208:	defffd04 	addi	sp,sp,-12
2003020c:	df000215 	stw	fp,8(sp)
20030210:	df000204 	addi	fp,sp,8
20030214:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
20030218:	e0bfff17 	ldw	r2,-4(fp)
2003021c:	10800217 	ldw	r2,8(r2)
20030220:	10d00034 	orhi	r3,r2,16384
20030224:	e0bfff17 	ldw	r2,-4(fp)
20030228:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
2003022c:	e03ffe15 	stw	zero,-8(fp)
20030230:	00001d06 	br	200302a8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
20030234:	008800f4 	movhi	r2,8195
20030238:	10867b04 	addi	r2,r2,6636
2003023c:	e0fffe17 	ldw	r3,-8(fp)
20030240:	18c00324 	muli	r3,r3,12
20030244:	10c5883a 	add	r2,r2,r3
20030248:	10c00017 	ldw	r3,0(r2)
2003024c:	e0bfff17 	ldw	r2,-4(fp)
20030250:	10800017 	ldw	r2,0(r2)
20030254:	1880111e 	bne	r3,r2,2003029c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
20030258:	008800f4 	movhi	r2,8195
2003025c:	10867b04 	addi	r2,r2,6636
20030260:	e0fffe17 	ldw	r3,-8(fp)
20030264:	18c00324 	muli	r3,r3,12
20030268:	10c5883a 	add	r2,r2,r3
2003026c:	10800204 	addi	r2,r2,8
20030270:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
20030274:	1000090e 	bge	r2,zero,2003029c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
20030278:	e0bffe17 	ldw	r2,-8(fp)
2003027c:	10c00324 	muli	r3,r2,12
20030280:	008800f4 	movhi	r2,8195
20030284:	10867b04 	addi	r2,r2,6636
20030288:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
2003028c:	e0bfff17 	ldw	r2,-4(fp)
20030290:	18800226 	beq	r3,r2,2003029c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
20030294:	00bffcc4 	movi	r2,-13
20030298:	00000806 	br	200302bc <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
2003029c:	e0bffe17 	ldw	r2,-8(fp)
200302a0:	10800044 	addi	r2,r2,1
200302a4:	e0bffe15 	stw	r2,-8(fp)
200302a8:	d0a00a17 	ldw	r2,-32728(gp)
200302ac:	1007883a 	mov	r3,r2
200302b0:	e0bffe17 	ldw	r2,-8(fp)
200302b4:	18bfdf2e 	bgeu	r3,r2,20030234 <__alt_data_end+0xffff2234>
    }
  }
  
  /* The device is not locked */
 
  return 0;
200302b8:	0005883a 	mov	r2,zero
}
200302bc:	e037883a 	mov	sp,fp
200302c0:	df000017 	ldw	fp,0(sp)
200302c4:	dec00104 	addi	sp,sp,4
200302c8:	f800283a 	ret

200302cc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
200302cc:	defff604 	addi	sp,sp,-40
200302d0:	dfc00915 	stw	ra,36(sp)
200302d4:	df000815 	stw	fp,32(sp)
200302d8:	df000804 	addi	fp,sp,32
200302dc:	e13ffd15 	stw	r4,-12(fp)
200302e0:	e17ffe15 	stw	r5,-8(fp)
200302e4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
200302e8:	00bfffc4 	movi	r2,-1
200302ec:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
200302f0:	00bffb44 	movi	r2,-19
200302f4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
200302f8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
200302fc:	d1600804 	addi	r5,gp,-32736
20030300:	e13ffd17 	ldw	r4,-12(fp)
20030304:	002fd280 	call	2002fd28 <alt_find_dev>
20030308:	e0bff815 	stw	r2,-32(fp)
2003030c:	e0bff817 	ldw	r2,-32(fp)
20030310:	1000051e 	bne	r2,zero,20030328 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
20030314:	e13ffd17 	ldw	r4,-12(fp)
20030318:	00305e80 	call	200305e8 <alt_find_file>
2003031c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
20030320:	00800044 	movi	r2,1
20030324:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
20030328:	e0bff817 	ldw	r2,-32(fp)
2003032c:	10002926 	beq	r2,zero,200303d4 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
20030330:	e13ff817 	ldw	r4,-32(fp)
20030334:	00306f00 	call	200306f0 <alt_get_fd>
20030338:	e0bff915 	stw	r2,-28(fp)
2003033c:	e0bff917 	ldw	r2,-28(fp)
20030340:	1000030e 	bge	r2,zero,20030350 <open+0x84>
    {
      status = index;
20030344:	e0bff917 	ldw	r2,-28(fp)
20030348:	e0bffa15 	stw	r2,-24(fp)
2003034c:	00002306 	br	200303dc <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
20030350:	e0bff917 	ldw	r2,-28(fp)
20030354:	10c00324 	muli	r3,r2,12
20030358:	008800f4 	movhi	r2,8195
2003035c:	10867b04 	addi	r2,r2,6636
20030360:	1885883a 	add	r2,r3,r2
20030364:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
20030368:	e0fffe17 	ldw	r3,-8(fp)
2003036c:	00900034 	movhi	r2,16384
20030370:	10bfffc4 	addi	r2,r2,-1
20030374:	1886703a 	and	r3,r3,r2
20030378:	e0bffc17 	ldw	r2,-16(fp)
2003037c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
20030380:	e0bffb17 	ldw	r2,-20(fp)
20030384:	1000051e 	bne	r2,zero,2003039c <open+0xd0>
20030388:	e13ffc17 	ldw	r4,-16(fp)
2003038c:	00302080 	call	20030208 <alt_file_locked>
20030390:	e0bffa15 	stw	r2,-24(fp)
20030394:	e0bffa17 	ldw	r2,-24(fp)
20030398:	10001016 	blt	r2,zero,200303dc <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
2003039c:	e0bff817 	ldw	r2,-32(fp)
200303a0:	10800317 	ldw	r2,12(r2)
200303a4:	10000826 	beq	r2,zero,200303c8 <open+0xfc>
200303a8:	e0bff817 	ldw	r2,-32(fp)
200303ac:	10800317 	ldw	r2,12(r2)
200303b0:	e1ffff17 	ldw	r7,-4(fp)
200303b4:	e1bffe17 	ldw	r6,-8(fp)
200303b8:	e17ffd17 	ldw	r5,-12(fp)
200303bc:	e13ffc17 	ldw	r4,-16(fp)
200303c0:	103ee83a 	callr	r2
200303c4:	00000106 	br	200303cc <open+0x100>
200303c8:	0005883a 	mov	r2,zero
200303cc:	e0bffa15 	stw	r2,-24(fp)
200303d0:	00000206 	br	200303dc <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
200303d4:	00bffb44 	movi	r2,-19
200303d8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
200303dc:	e0bffa17 	ldw	r2,-24(fp)
200303e0:	1000090e 	bge	r2,zero,20030408 <open+0x13c>
  {
    alt_release_fd (index);  
200303e4:	e13ff917 	ldw	r4,-28(fp)
200303e8:	002dd600 	call	2002dd60 <alt_release_fd>
    ALT_ERRNO = -status;
200303ec:	00301cc0 	call	200301cc <alt_get_errno>
200303f0:	1007883a 	mov	r3,r2
200303f4:	e0bffa17 	ldw	r2,-24(fp)
200303f8:	0085c83a 	sub	r2,zero,r2
200303fc:	18800015 	stw	r2,0(r3)
    return -1;
20030400:	00bfffc4 	movi	r2,-1
20030404:	00000106 	br	2003040c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
20030408:	e0bff917 	ldw	r2,-28(fp)
}
2003040c:	e037883a 	mov	sp,fp
20030410:	dfc00117 	ldw	ra,4(sp)
20030414:	df000017 	ldw	fp,0(sp)
20030418:	dec00204 	addi	sp,sp,8
2003041c:	f800283a 	ret

20030420 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
20030420:	defffa04 	addi	sp,sp,-24
20030424:	df000515 	stw	fp,20(sp)
20030428:	df000504 	addi	fp,sp,20
2003042c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20030430:	0005303a 	rdctl	r2,status
20030434:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20030438:	e0fffc17 	ldw	r3,-16(fp)
2003043c:	00bfff84 	movi	r2,-2
20030440:	1884703a 	and	r2,r3,r2
20030444:	1001703a 	wrctl	status,r2
  
  return context;
20030448:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
2003044c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
20030450:	e0bfff17 	ldw	r2,-4(fp)
20030454:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
20030458:	e0bffd17 	ldw	r2,-12(fp)
2003045c:	10800017 	ldw	r2,0(r2)
20030460:	e0fffd17 	ldw	r3,-12(fp)
20030464:	18c00117 	ldw	r3,4(r3)
20030468:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
2003046c:	e0bffd17 	ldw	r2,-12(fp)
20030470:	10800117 	ldw	r2,4(r2)
20030474:	e0fffd17 	ldw	r3,-12(fp)
20030478:	18c00017 	ldw	r3,0(r3)
2003047c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
20030480:	e0bffd17 	ldw	r2,-12(fp)
20030484:	e0fffd17 	ldw	r3,-12(fp)
20030488:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
2003048c:	e0bffd17 	ldw	r2,-12(fp)
20030490:	e0fffd17 	ldw	r3,-12(fp)
20030494:	10c00015 	stw	r3,0(r2)
20030498:	e0bffb17 	ldw	r2,-20(fp)
2003049c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200304a0:	e0bffe17 	ldw	r2,-8(fp)
200304a4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
200304a8:	0001883a 	nop
200304ac:	e037883a 	mov	sp,fp
200304b0:	df000017 	ldw	fp,0(sp)
200304b4:	dec00104 	addi	sp,sp,4
200304b8:	f800283a 	ret

200304bc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
200304bc:	defffb04 	addi	sp,sp,-20
200304c0:	dfc00415 	stw	ra,16(sp)
200304c4:	df000315 	stw	fp,12(sp)
200304c8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
200304cc:	d0a01217 	ldw	r2,-32696(gp)
200304d0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
200304d4:	d0a6f517 	ldw	r2,-25644(gp)
200304d8:	10800044 	addi	r2,r2,1
200304dc:	d0a6f515 	stw	r2,-25644(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
200304e0:	00002e06 	br	2003059c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
200304e4:	e0bffd17 	ldw	r2,-12(fp)
200304e8:	10800017 	ldw	r2,0(r2)
200304ec:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
200304f0:	e0bffd17 	ldw	r2,-12(fp)
200304f4:	10800403 	ldbu	r2,16(r2)
200304f8:	10803fcc 	andi	r2,r2,255
200304fc:	10000426 	beq	r2,zero,20030510 <alt_tick+0x54>
20030500:	d0a6f517 	ldw	r2,-25644(gp)
20030504:	1000021e 	bne	r2,zero,20030510 <alt_tick+0x54>
    {
      alarm->rollover = 0;
20030508:	e0bffd17 	ldw	r2,-12(fp)
2003050c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
20030510:	e0bffd17 	ldw	r2,-12(fp)
20030514:	10800217 	ldw	r2,8(r2)
20030518:	d0e6f517 	ldw	r3,-25644(gp)
2003051c:	18801d36 	bltu	r3,r2,20030594 <alt_tick+0xd8>
20030520:	e0bffd17 	ldw	r2,-12(fp)
20030524:	10800403 	ldbu	r2,16(r2)
20030528:	10803fcc 	andi	r2,r2,255
2003052c:	1000191e 	bne	r2,zero,20030594 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
20030530:	e0bffd17 	ldw	r2,-12(fp)
20030534:	10800317 	ldw	r2,12(r2)
20030538:	e0fffd17 	ldw	r3,-12(fp)
2003053c:	18c00517 	ldw	r3,20(r3)
20030540:	1809883a 	mov	r4,r3
20030544:	103ee83a 	callr	r2
20030548:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
2003054c:	e0bfff17 	ldw	r2,-4(fp)
20030550:	1000031e 	bne	r2,zero,20030560 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
20030554:	e13ffd17 	ldw	r4,-12(fp)
20030558:	00304200 	call	20030420 <alt_alarm_stop>
2003055c:	00000d06 	br	20030594 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
20030560:	e0bffd17 	ldw	r2,-12(fp)
20030564:	10c00217 	ldw	r3,8(r2)
20030568:	e0bfff17 	ldw	r2,-4(fp)
2003056c:	1887883a 	add	r3,r3,r2
20030570:	e0bffd17 	ldw	r2,-12(fp)
20030574:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
20030578:	e0bffd17 	ldw	r2,-12(fp)
2003057c:	10c00217 	ldw	r3,8(r2)
20030580:	d0a6f517 	ldw	r2,-25644(gp)
20030584:	1880032e 	bgeu	r3,r2,20030594 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
20030588:	e0bffd17 	ldw	r2,-12(fp)
2003058c:	00c00044 	movi	r3,1
20030590:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
20030594:	e0bffe17 	ldw	r2,-8(fp)
20030598:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
2003059c:	e0fffd17 	ldw	r3,-12(fp)
200305a0:	d0a01204 	addi	r2,gp,-32696
200305a4:	18bfcf1e 	bne	r3,r2,200304e4 <__alt_data_end+0xffff24e4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
200305a8:	0001883a 	nop
}
200305ac:	0001883a 	nop
200305b0:	e037883a 	mov	sp,fp
200305b4:	dfc00117 	ldw	ra,4(sp)
200305b8:	df000017 	ldw	fp,0(sp)
200305bc:	dec00204 	addi	sp,sp,8
200305c0:	f800283a 	ret

200305c4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
200305c4:	deffff04 	addi	sp,sp,-4
200305c8:	df000015 	stw	fp,0(sp)
200305cc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
200305d0:	000170fa 	wrctl	ienable,zero
}
200305d4:	0001883a 	nop
200305d8:	e037883a 	mov	sp,fp
200305dc:	df000017 	ldw	fp,0(sp)
200305e0:	dec00104 	addi	sp,sp,4
200305e4:	f800283a 	ret

200305e8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
200305e8:	defffb04 	addi	sp,sp,-20
200305ec:	dfc00415 	stw	ra,16(sp)
200305f0:	df000315 	stw	fp,12(sp)
200305f4:	df000304 	addi	fp,sp,12
200305f8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
200305fc:	d0a00617 	ldw	r2,-32744(gp)
20030600:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
20030604:	00003106 	br	200306cc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
20030608:	e0bffd17 	ldw	r2,-12(fp)
2003060c:	10800217 	ldw	r2,8(r2)
20030610:	1009883a 	mov	r4,r2
20030614:	0021eec0 	call	20021eec <strlen>
20030618:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
2003061c:	e0bffd17 	ldw	r2,-12(fp)
20030620:	10c00217 	ldw	r3,8(r2)
20030624:	e0bffe17 	ldw	r2,-8(fp)
20030628:	10bfffc4 	addi	r2,r2,-1
2003062c:	1885883a 	add	r2,r3,r2
20030630:	10800003 	ldbu	r2,0(r2)
20030634:	10803fcc 	andi	r2,r2,255
20030638:	1080201c 	xori	r2,r2,128
2003063c:	10bfe004 	addi	r2,r2,-128
20030640:	10800bd8 	cmpnei	r2,r2,47
20030644:	1000031e 	bne	r2,zero,20030654 <alt_find_file+0x6c>
    {
      len -= 1;
20030648:	e0bffe17 	ldw	r2,-8(fp)
2003064c:	10bfffc4 	addi	r2,r2,-1
20030650:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
20030654:	e0bffe17 	ldw	r2,-8(fp)
20030658:	e0ffff17 	ldw	r3,-4(fp)
2003065c:	1885883a 	add	r2,r3,r2
20030660:	10800003 	ldbu	r2,0(r2)
20030664:	10803fcc 	andi	r2,r2,255
20030668:	1080201c 	xori	r2,r2,128
2003066c:	10bfe004 	addi	r2,r2,-128
20030670:	10800be0 	cmpeqi	r2,r2,47
20030674:	1000081e 	bne	r2,zero,20030698 <alt_find_file+0xb0>
20030678:	e0bffe17 	ldw	r2,-8(fp)
2003067c:	e0ffff17 	ldw	r3,-4(fp)
20030680:	1885883a 	add	r2,r3,r2
20030684:	10800003 	ldbu	r2,0(r2)
20030688:	10803fcc 	andi	r2,r2,255
2003068c:	1080201c 	xori	r2,r2,128
20030690:	10bfe004 	addi	r2,r2,-128
20030694:	10000a1e 	bne	r2,zero,200306c0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
20030698:	e0bffd17 	ldw	r2,-12(fp)
2003069c:	10800217 	ldw	r2,8(r2)
200306a0:	e0fffe17 	ldw	r3,-8(fp)
200306a4:	180d883a 	mov	r6,r3
200306a8:	e17fff17 	ldw	r5,-4(fp)
200306ac:	1009883a 	mov	r4,r2
200306b0:	003090c0 	call	2003090c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
200306b4:	1000021e 	bne	r2,zero,200306c0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
200306b8:	e0bffd17 	ldw	r2,-12(fp)
200306bc:	00000706 	br	200306dc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
200306c0:	e0bffd17 	ldw	r2,-12(fp)
200306c4:	10800017 	ldw	r2,0(r2)
200306c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
200306cc:	e0fffd17 	ldw	r3,-12(fp)
200306d0:	d0a00604 	addi	r2,gp,-32744
200306d4:	18bfcc1e 	bne	r3,r2,20030608 <__alt_data_end+0xffff2608>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
200306d8:	0005883a 	mov	r2,zero
}
200306dc:	e037883a 	mov	sp,fp
200306e0:	dfc00117 	ldw	ra,4(sp)
200306e4:	df000017 	ldw	fp,0(sp)
200306e8:	dec00204 	addi	sp,sp,8
200306ec:	f800283a 	ret

200306f0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
200306f0:	defffc04 	addi	sp,sp,-16
200306f4:	df000315 	stw	fp,12(sp)
200306f8:	df000304 	addi	fp,sp,12
200306fc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
20030700:	00bffa04 	movi	r2,-24
20030704:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
20030708:	e03ffd15 	stw	zero,-12(fp)
2003070c:	00001906 	br	20030774 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
20030710:	008800f4 	movhi	r2,8195
20030714:	10867b04 	addi	r2,r2,6636
20030718:	e0fffd17 	ldw	r3,-12(fp)
2003071c:	18c00324 	muli	r3,r3,12
20030720:	10c5883a 	add	r2,r2,r3
20030724:	10800017 	ldw	r2,0(r2)
20030728:	10000f1e 	bne	r2,zero,20030768 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
2003072c:	008800f4 	movhi	r2,8195
20030730:	10867b04 	addi	r2,r2,6636
20030734:	e0fffd17 	ldw	r3,-12(fp)
20030738:	18c00324 	muli	r3,r3,12
2003073c:	10c5883a 	add	r2,r2,r3
20030740:	e0ffff17 	ldw	r3,-4(fp)
20030744:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
20030748:	d0e00a17 	ldw	r3,-32728(gp)
2003074c:	e0bffd17 	ldw	r2,-12(fp)
20030750:	1880020e 	bge	r3,r2,2003075c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
20030754:	e0bffd17 	ldw	r2,-12(fp)
20030758:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
2003075c:	e0bffd17 	ldw	r2,-12(fp)
20030760:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
20030764:	00000606 	br	20030780 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
20030768:	e0bffd17 	ldw	r2,-12(fp)
2003076c:	10800044 	addi	r2,r2,1
20030770:	e0bffd15 	stw	r2,-12(fp)
20030774:	e0bffd17 	ldw	r2,-12(fp)
20030778:	10800810 	cmplti	r2,r2,32
2003077c:	103fe41e 	bne	r2,zero,20030710 <__alt_data_end+0xffff2710>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
20030780:	e0bffe17 	ldw	r2,-8(fp)
}
20030784:	e037883a 	mov	sp,fp
20030788:	df000017 	ldw	fp,0(sp)
2003078c:	dec00104 	addi	sp,sp,4
20030790:	f800283a 	ret

20030794 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
20030794:	defffb04 	addi	sp,sp,-20
20030798:	df000415 	stw	fp,16(sp)
2003079c:	df000404 	addi	fp,sp,16
200307a0:	e13ffe15 	stw	r4,-8(fp)
200307a4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
200307a8:	e0bfff17 	ldw	r2,-4(fp)
200307ac:	10840070 	cmpltui	r2,r2,4097
200307b0:	1000021e 	bne	r2,zero,200307bc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
200307b4:	00840004 	movi	r2,4096
200307b8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
200307bc:	e0fffe17 	ldw	r3,-8(fp)
200307c0:	e0bfff17 	ldw	r2,-4(fp)
200307c4:	1885883a 	add	r2,r3,r2
200307c8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
200307cc:	e0bffe17 	ldw	r2,-8(fp)
200307d0:	e0bffc15 	stw	r2,-16(fp)
200307d4:	00000506 	br	200307ec <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
200307d8:	e0bffc17 	ldw	r2,-16(fp)
200307dc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
200307e0:	e0bffc17 	ldw	r2,-16(fp)
200307e4:	10800804 	addi	r2,r2,32
200307e8:	e0bffc15 	stw	r2,-16(fp)
200307ec:	e0fffc17 	ldw	r3,-16(fp)
200307f0:	e0bffd17 	ldw	r2,-12(fp)
200307f4:	18bff836 	bltu	r3,r2,200307d8 <__alt_data_end+0xffff27d8>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
200307f8:	e0bffe17 	ldw	r2,-8(fp)
200307fc:	108007cc 	andi	r2,r2,31
20030800:	10000226 	beq	r2,zero,2003080c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
20030804:	e0bffc17 	ldw	r2,-16(fp)
20030808:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
2003080c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
20030810:	0001883a 	nop
20030814:	e037883a 	mov	sp,fp
20030818:	df000017 	ldw	fp,0(sp)
2003081c:	dec00104 	addi	sp,sp,4
20030820:	f800283a 	ret

20030824 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
20030824:	defffe04 	addi	sp,sp,-8
20030828:	df000115 	stw	fp,4(sp)
2003082c:	df000104 	addi	fp,sp,4
20030830:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
20030834:	e0bfff17 	ldw	r2,-4(fp)
20030838:	10bffe84 	addi	r2,r2,-6
2003083c:	10c00428 	cmpgeui	r3,r2,16
20030840:	18001a1e 	bne	r3,zero,200308ac <alt_exception_cause_generated_bad_addr+0x88>
20030844:	100690ba 	slli	r3,r2,2
20030848:	008800f4 	movhi	r2,8195
2003084c:	10821704 	addi	r2,r2,2140
20030850:	1885883a 	add	r2,r3,r2
20030854:	10800017 	ldw	r2,0(r2)
20030858:	1000683a 	jmp	r2
2003085c:	2003089c 	xori	zero,r4,3106
20030860:	2003089c 	xori	zero,r4,3106
20030864:	200308ac 	andhi	zero,r4,3106
20030868:	200308ac 	andhi	zero,r4,3106
2003086c:	200308ac 	andhi	zero,r4,3106
20030870:	2003089c 	xori	zero,r4,3106
20030874:	200308a4 	muli	zero,r4,3106
20030878:	200308ac 	andhi	zero,r4,3106
2003087c:	2003089c 	xori	zero,r4,3106
20030880:	2003089c 	xori	zero,r4,3106
20030884:	200308ac 	andhi	zero,r4,3106
20030888:	2003089c 	xori	zero,r4,3106
2003088c:	200308a4 	muli	zero,r4,3106
20030890:	200308ac 	andhi	zero,r4,3106
20030894:	200308ac 	andhi	zero,r4,3106
20030898:	2003089c 	xori	zero,r4,3106
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
2003089c:	00800044 	movi	r2,1
200308a0:	00000306 	br	200308b0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
200308a4:	0005883a 	mov	r2,zero
200308a8:	00000106 	br	200308b0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
200308ac:	0005883a 	mov	r2,zero
  }
}
200308b0:	e037883a 	mov	sp,fp
200308b4:	df000017 	ldw	fp,0(sp)
200308b8:	dec00104 	addi	sp,sp,4
200308bc:	f800283a 	ret

200308c0 <atexit>:
200308c0:	200b883a 	mov	r5,r4
200308c4:	000f883a 	mov	r7,zero
200308c8:	000d883a 	mov	r6,zero
200308cc:	0009883a 	mov	r4,zero
200308d0:	00309881 	jmpi	20030988 <__register_exitproc>

200308d4 <exit>:
200308d4:	defffe04 	addi	sp,sp,-8
200308d8:	000b883a 	mov	r5,zero
200308dc:	dc000015 	stw	r16,0(sp)
200308e0:	dfc00115 	stw	ra,4(sp)
200308e4:	2021883a 	mov	r16,r4
200308e8:	0030aa00 	call	20030aa0 <__call_exitprocs>
200308ec:	008800f4 	movhi	r2,8195
200308f0:	108b0904 	addi	r2,r2,11300
200308f4:	11000017 	ldw	r4,0(r2)
200308f8:	20800f17 	ldw	r2,60(r4)
200308fc:	10000126 	beq	r2,zero,20030904 <exit+0x30>
20030900:	103ee83a 	callr	r2
20030904:	8009883a 	mov	r4,r16
20030908:	0030c200 	call	20030c20 <_exit>

2003090c <memcmp>:
2003090c:	01c000c4 	movi	r7,3
20030910:	3980192e 	bgeu	r7,r6,20030978 <memcmp+0x6c>
20030914:	2144b03a 	or	r2,r4,r5
20030918:	11c4703a 	and	r2,r2,r7
2003091c:	10000f26 	beq	r2,zero,2003095c <memcmp+0x50>
20030920:	20800003 	ldbu	r2,0(r4)
20030924:	28c00003 	ldbu	r3,0(r5)
20030928:	10c0151e 	bne	r2,r3,20030980 <memcmp+0x74>
2003092c:	31bfff84 	addi	r6,r6,-2
20030930:	01ffffc4 	movi	r7,-1
20030934:	00000406 	br	20030948 <memcmp+0x3c>
20030938:	20800003 	ldbu	r2,0(r4)
2003093c:	28c00003 	ldbu	r3,0(r5)
20030940:	31bfffc4 	addi	r6,r6,-1
20030944:	10c00e1e 	bne	r2,r3,20030980 <memcmp+0x74>
20030948:	21000044 	addi	r4,r4,1
2003094c:	29400044 	addi	r5,r5,1
20030950:	31fff91e 	bne	r6,r7,20030938 <__alt_data_end+0xffff2938>
20030954:	0005883a 	mov	r2,zero
20030958:	f800283a 	ret
2003095c:	20c00017 	ldw	r3,0(r4)
20030960:	28800017 	ldw	r2,0(r5)
20030964:	18bfee1e 	bne	r3,r2,20030920 <__alt_data_end+0xffff2920>
20030968:	31bfff04 	addi	r6,r6,-4
2003096c:	21000104 	addi	r4,r4,4
20030970:	29400104 	addi	r5,r5,4
20030974:	39bff936 	bltu	r7,r6,2003095c <__alt_data_end+0xffff295c>
20030978:	303fe91e 	bne	r6,zero,20030920 <__alt_data_end+0xffff2920>
2003097c:	003ff506 	br	20030954 <__alt_data_end+0xffff2954>
20030980:	10c5c83a 	sub	r2,r2,r3
20030984:	f800283a 	ret

20030988 <__register_exitproc>:
20030988:	defffa04 	addi	sp,sp,-24
2003098c:	dc000315 	stw	r16,12(sp)
20030990:	040800f4 	movhi	r16,8195
20030994:	840b0904 	addi	r16,r16,11300
20030998:	80c00017 	ldw	r3,0(r16)
2003099c:	dc400415 	stw	r17,16(sp)
200309a0:	dfc00515 	stw	ra,20(sp)
200309a4:	18805217 	ldw	r2,328(r3)
200309a8:	2023883a 	mov	r17,r4
200309ac:	10003726 	beq	r2,zero,20030a8c <__register_exitproc+0x104>
200309b0:	10c00117 	ldw	r3,4(r2)
200309b4:	010007c4 	movi	r4,31
200309b8:	20c00e16 	blt	r4,r3,200309f4 <__register_exitproc+0x6c>
200309bc:	1a000044 	addi	r8,r3,1
200309c0:	8800221e 	bne	r17,zero,20030a4c <__register_exitproc+0xc4>
200309c4:	18c00084 	addi	r3,r3,2
200309c8:	18c7883a 	add	r3,r3,r3
200309cc:	18c7883a 	add	r3,r3,r3
200309d0:	12000115 	stw	r8,4(r2)
200309d4:	10c7883a 	add	r3,r2,r3
200309d8:	19400015 	stw	r5,0(r3)
200309dc:	0005883a 	mov	r2,zero
200309e0:	dfc00517 	ldw	ra,20(sp)
200309e4:	dc400417 	ldw	r17,16(sp)
200309e8:	dc000317 	ldw	r16,12(sp)
200309ec:	dec00604 	addi	sp,sp,24
200309f0:	f800283a 	ret
200309f4:	00800034 	movhi	r2,0
200309f8:	10800004 	addi	r2,r2,0
200309fc:	10002626 	beq	r2,zero,20030a98 <__register_exitproc+0x110>
20030a00:	01006404 	movi	r4,400
20030a04:	d9400015 	stw	r5,0(sp)
20030a08:	d9800115 	stw	r6,4(sp)
20030a0c:	d9c00215 	stw	r7,8(sp)
20030a10:	00000000 	call	20000000 <__alt_mem_sdram_controller+0x10000000>
20030a14:	d9400017 	ldw	r5,0(sp)
20030a18:	d9800117 	ldw	r6,4(sp)
20030a1c:	d9c00217 	ldw	r7,8(sp)
20030a20:	10001d26 	beq	r2,zero,20030a98 <__register_exitproc+0x110>
20030a24:	81000017 	ldw	r4,0(r16)
20030a28:	10000115 	stw	zero,4(r2)
20030a2c:	02000044 	movi	r8,1
20030a30:	22405217 	ldw	r9,328(r4)
20030a34:	0007883a 	mov	r3,zero
20030a38:	12400015 	stw	r9,0(r2)
20030a3c:	20805215 	stw	r2,328(r4)
20030a40:	10006215 	stw	zero,392(r2)
20030a44:	10006315 	stw	zero,396(r2)
20030a48:	883fde26 	beq	r17,zero,200309c4 <__alt_data_end+0xffff29c4>
20030a4c:	18c9883a 	add	r4,r3,r3
20030a50:	2109883a 	add	r4,r4,r4
20030a54:	1109883a 	add	r4,r2,r4
20030a58:	21802215 	stw	r6,136(r4)
20030a5c:	01800044 	movi	r6,1
20030a60:	12406217 	ldw	r9,392(r2)
20030a64:	30cc983a 	sll	r6,r6,r3
20030a68:	4992b03a 	or	r9,r9,r6
20030a6c:	12406215 	stw	r9,392(r2)
20030a70:	21c04215 	stw	r7,264(r4)
20030a74:	01000084 	movi	r4,2
20030a78:	893fd21e 	bne	r17,r4,200309c4 <__alt_data_end+0xffff29c4>
20030a7c:	11006317 	ldw	r4,396(r2)
20030a80:	218cb03a 	or	r6,r4,r6
20030a84:	11806315 	stw	r6,396(r2)
20030a88:	003fce06 	br	200309c4 <__alt_data_end+0xffff29c4>
20030a8c:	18805304 	addi	r2,r3,332
20030a90:	18805215 	stw	r2,328(r3)
20030a94:	003fc606 	br	200309b0 <__alt_data_end+0xffff29b0>
20030a98:	00bfffc4 	movi	r2,-1
20030a9c:	003fd006 	br	200309e0 <__alt_data_end+0xffff29e0>

20030aa0 <__call_exitprocs>:
20030aa0:	defff504 	addi	sp,sp,-44
20030aa4:	df000915 	stw	fp,36(sp)
20030aa8:	dd400615 	stw	r21,24(sp)
20030aac:	dc800315 	stw	r18,12(sp)
20030ab0:	dfc00a15 	stw	ra,40(sp)
20030ab4:	ddc00815 	stw	r23,32(sp)
20030ab8:	dd800715 	stw	r22,28(sp)
20030abc:	dd000515 	stw	r20,20(sp)
20030ac0:	dcc00415 	stw	r19,16(sp)
20030ac4:	dc400215 	stw	r17,8(sp)
20030ac8:	dc000115 	stw	r16,4(sp)
20030acc:	d9000015 	stw	r4,0(sp)
20030ad0:	2839883a 	mov	fp,r5
20030ad4:	04800044 	movi	r18,1
20030ad8:	057fffc4 	movi	r21,-1
20030adc:	008800f4 	movhi	r2,8195
20030ae0:	108b0904 	addi	r2,r2,11300
20030ae4:	12000017 	ldw	r8,0(r2)
20030ae8:	45005217 	ldw	r20,328(r8)
20030aec:	44c05204 	addi	r19,r8,328
20030af0:	a0001c26 	beq	r20,zero,20030b64 <__call_exitprocs+0xc4>
20030af4:	a0800117 	ldw	r2,4(r20)
20030af8:	15ffffc4 	addi	r23,r2,-1
20030afc:	b8000d16 	blt	r23,zero,20030b34 <__call_exitprocs+0x94>
20030b00:	14000044 	addi	r16,r2,1
20030b04:	8421883a 	add	r16,r16,r16
20030b08:	8421883a 	add	r16,r16,r16
20030b0c:	84402004 	addi	r17,r16,128
20030b10:	a463883a 	add	r17,r20,r17
20030b14:	a421883a 	add	r16,r20,r16
20030b18:	e0001e26 	beq	fp,zero,20030b94 <__call_exitprocs+0xf4>
20030b1c:	80804017 	ldw	r2,256(r16)
20030b20:	e0801c26 	beq	fp,r2,20030b94 <__call_exitprocs+0xf4>
20030b24:	bdffffc4 	addi	r23,r23,-1
20030b28:	843fff04 	addi	r16,r16,-4
20030b2c:	8c7fff04 	addi	r17,r17,-4
20030b30:	bd7ff91e 	bne	r23,r21,20030b18 <__alt_data_end+0xffff2b18>
20030b34:	00800034 	movhi	r2,0
20030b38:	10800004 	addi	r2,r2,0
20030b3c:	10000926 	beq	r2,zero,20030b64 <__call_exitprocs+0xc4>
20030b40:	a0800117 	ldw	r2,4(r20)
20030b44:	1000301e 	bne	r2,zero,20030c08 <__call_exitprocs+0x168>
20030b48:	a0800017 	ldw	r2,0(r20)
20030b4c:	10003226 	beq	r2,zero,20030c18 <__call_exitprocs+0x178>
20030b50:	a009883a 	mov	r4,r20
20030b54:	98800015 	stw	r2,0(r19)
20030b58:	00000000 	call	20000000 <__alt_mem_sdram_controller+0x10000000>
20030b5c:	9d000017 	ldw	r20,0(r19)
20030b60:	a03fe41e 	bne	r20,zero,20030af4 <__alt_data_end+0xffff2af4>
20030b64:	dfc00a17 	ldw	ra,40(sp)
20030b68:	df000917 	ldw	fp,36(sp)
20030b6c:	ddc00817 	ldw	r23,32(sp)
20030b70:	dd800717 	ldw	r22,28(sp)
20030b74:	dd400617 	ldw	r21,24(sp)
20030b78:	dd000517 	ldw	r20,20(sp)
20030b7c:	dcc00417 	ldw	r19,16(sp)
20030b80:	dc800317 	ldw	r18,12(sp)
20030b84:	dc400217 	ldw	r17,8(sp)
20030b88:	dc000117 	ldw	r16,4(sp)
20030b8c:	dec00b04 	addi	sp,sp,44
20030b90:	f800283a 	ret
20030b94:	a0800117 	ldw	r2,4(r20)
20030b98:	80c00017 	ldw	r3,0(r16)
20030b9c:	10bfffc4 	addi	r2,r2,-1
20030ba0:	15c01426 	beq	r2,r23,20030bf4 <__call_exitprocs+0x154>
20030ba4:	80000015 	stw	zero,0(r16)
20030ba8:	183fde26 	beq	r3,zero,20030b24 <__alt_data_end+0xffff2b24>
20030bac:	95c8983a 	sll	r4,r18,r23
20030bb0:	a0806217 	ldw	r2,392(r20)
20030bb4:	a5800117 	ldw	r22,4(r20)
20030bb8:	2084703a 	and	r2,r4,r2
20030bbc:	10000b26 	beq	r2,zero,20030bec <__call_exitprocs+0x14c>
20030bc0:	a0806317 	ldw	r2,396(r20)
20030bc4:	2088703a 	and	r4,r4,r2
20030bc8:	20000c1e 	bne	r4,zero,20030bfc <__call_exitprocs+0x15c>
20030bcc:	89400017 	ldw	r5,0(r17)
20030bd0:	d9000017 	ldw	r4,0(sp)
20030bd4:	183ee83a 	callr	r3
20030bd8:	a0800117 	ldw	r2,4(r20)
20030bdc:	15bfbf1e 	bne	r2,r22,20030adc <__alt_data_end+0xffff2adc>
20030be0:	98800017 	ldw	r2,0(r19)
20030be4:	153fcf26 	beq	r2,r20,20030b24 <__alt_data_end+0xffff2b24>
20030be8:	003fbc06 	br	20030adc <__alt_data_end+0xffff2adc>
20030bec:	183ee83a 	callr	r3
20030bf0:	003ff906 	br	20030bd8 <__alt_data_end+0xffff2bd8>
20030bf4:	a5c00115 	stw	r23,4(r20)
20030bf8:	003feb06 	br	20030ba8 <__alt_data_end+0xffff2ba8>
20030bfc:	89000017 	ldw	r4,0(r17)
20030c00:	183ee83a 	callr	r3
20030c04:	003ff406 	br	20030bd8 <__alt_data_end+0xffff2bd8>
20030c08:	a0800017 	ldw	r2,0(r20)
20030c0c:	a027883a 	mov	r19,r20
20030c10:	1029883a 	mov	r20,r2
20030c14:	003fb606 	br	20030af0 <__alt_data_end+0xffff2af0>
20030c18:	0005883a 	mov	r2,zero
20030c1c:	003ffb06 	br	20030c0c <__alt_data_end+0xffff2c0c>

20030c20 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
20030c20:	defffd04 	addi	sp,sp,-12
20030c24:	df000215 	stw	fp,8(sp)
20030c28:	df000204 	addi	fp,sp,8
20030c2c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
20030c30:	0001883a 	nop
20030c34:	e0bfff17 	ldw	r2,-4(fp)
20030c38:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
20030c3c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
20030c40:	10000226 	beq	r2,zero,20030c4c <_exit+0x2c>
    ALT_SIM_FAIL();
20030c44:	002af070 	cmpltui	zero,zero,43969
20030c48:	00000106 	br	20030c50 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
20030c4c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
20030c50:	003fff06 	br	20030c50 <__alt_data_end+0xffff2c50>
