// system_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module system_mm_interconnect_0 (
		input  wire        clk_0_clk_clk,                                      //                                    clk_0_clk.clk
		input  wire        pll_0_outclk0_clk,                                  //                                pll_0_outclk0.clk
		input  wire        pll_0_outclk1_clk,                                  //                                pll_0_outclk1.clk
		input  wire        cpu_1_0_reset_reset_bridge_in_reset_reset,          //          cpu_1_0_reset_reset_bridge_in_reset.reset
		input  wire        sdram_controller_reset_reset_bridge_in_reset_reset, // sdram_controller_reset_reset_bridge_in_reset.reset
		input  wire        shared_PIO_reset_sink_reset_bridge_in_reset_reset,  //  shared_PIO_reset_sink_reset_bridge_in_reset.reset
		input  wire        sysid_reset_reset_bridge_in_reset_reset,            //            sysid_reset_reset_bridge_in_reset.reset
		input  wire [27:0] cpu_0_0_outgoing_master_address,                    //                      cpu_0_0_outgoing_master.address
		output wire        cpu_0_0_outgoing_master_waitrequest,                //                                             .waitrequest
		input  wire [0:0]  cpu_0_0_outgoing_master_burstcount,                 //                                             .burstcount
		input  wire [3:0]  cpu_0_0_outgoing_master_byteenable,                 //                                             .byteenable
		input  wire        cpu_0_0_outgoing_master_read,                       //                                             .read
		output wire [31:0] cpu_0_0_outgoing_master_readdata,                   //                                             .readdata
		output wire        cpu_0_0_outgoing_master_readdatavalid,              //                                             .readdatavalid
		input  wire        cpu_0_0_outgoing_master_write,                      //                                             .write
		input  wire [31:0] cpu_0_0_outgoing_master_writedata,                  //                                             .writedata
		input  wire        cpu_0_0_outgoing_master_debugaccess,                //                                             .debugaccess
		input  wire [27:0] cpu_1_0_mm_bridge_1_m0_address,                     //                       cpu_1_0_mm_bridge_1_m0.address
		output wire        cpu_1_0_mm_bridge_1_m0_waitrequest,                 //                                             .waitrequest
		input  wire [0:0]  cpu_1_0_mm_bridge_1_m0_burstcount,                  //                                             .burstcount
		input  wire [3:0]  cpu_1_0_mm_bridge_1_m0_byteenable,                  //                                             .byteenable
		input  wire        cpu_1_0_mm_bridge_1_m0_read,                        //                                             .read
		output wire [31:0] cpu_1_0_mm_bridge_1_m0_readdata,                    //                                             .readdata
		output wire        cpu_1_0_mm_bridge_1_m0_readdatavalid,               //                                             .readdatavalid
		input  wire        cpu_1_0_mm_bridge_1_m0_write,                       //                                             .write
		input  wire [31:0] cpu_1_0_mm_bridge_1_m0_writedata,                   //                                             .writedata
		input  wire        cpu_1_0_mm_bridge_1_m0_debugaccess,                 //                                             .debugaccess
		output wire [24:0] sdram_controller_s1_address,                        //                          sdram_controller_s1.address
		output wire        sdram_controller_s1_write,                          //                                             .write
		output wire        sdram_controller_s1_read,                           //                                             .read
		input  wire [15:0] sdram_controller_s1_readdata,                       //                                             .readdata
		output wire [15:0] sdram_controller_s1_writedata,                      //                                             .writedata
		output wire [1:0]  sdram_controller_s1_byteenable,                     //                                             .byteenable
		input  wire        sdram_controller_s1_readdatavalid,                  //                                             .readdatavalid
		input  wire        sdram_controller_s1_waitrequest,                    //                                             .waitrequest
		output wire        sdram_controller_s1_chipselect,                     //                                             .chipselect
		output wire [1:0]  shared_mailbox_avmm_msg_receiver_address,           //             shared_mailbox_avmm_msg_receiver.address
		output wire        shared_mailbox_avmm_msg_receiver_write,             //                                             .write
		output wire        shared_mailbox_avmm_msg_receiver_read,              //                                             .read
		input  wire [31:0] shared_mailbox_avmm_msg_receiver_readdata,          //                                             .readdata
		output wire [31:0] shared_mailbox_avmm_msg_receiver_writedata,         //                                             .writedata
		output wire [1:0]  shared_mailbox_avmm_msg_sender_address,             //               shared_mailbox_avmm_msg_sender.address
		output wire        shared_mailbox_avmm_msg_sender_write,               //                                             .write
		output wire        shared_mailbox_avmm_msg_sender_read,                //                                             .read
		input  wire [31:0] shared_mailbox_avmm_msg_sender_readdata,            //                                             .readdata
		output wire [31:0] shared_mailbox_avmm_msg_sender_writedata,           //                                             .writedata
		input  wire        shared_mailbox_avmm_msg_sender_waitrequest,         //                                             .waitrequest
		output wire [0:0]  shared_mutex_PIO_s1_address,                        //                          shared_mutex_PIO_s1.address
		output wire        shared_mutex_PIO_s1_write,                          //                                             .write
		output wire        shared_mutex_PIO_s1_read,                           //                                             .read
		input  wire [31:0] shared_mutex_PIO_s1_readdata,                       //                                             .readdata
		output wire [31:0] shared_mutex_PIO_s1_writedata,                      //                                             .writedata
		output wire        shared_mutex_PIO_s1_chipselect,                     //                                             .chipselect
		output wire [2:0]  shared_PIO_avalon_slave_0_address,                  //                    shared_PIO_avalon_slave_0.address
		output wire        shared_PIO_avalon_slave_0_write,                    //                                             .write
		output wire        shared_PIO_avalon_slave_0_read,                     //                                             .read
		input  wire [7:0]  shared_PIO_avalon_slave_0_readdata,                 //                                             .readdata
		output wire [7:0]  shared_PIO_avalon_slave_0_writedata,                //                                             .writedata
		output wire [0:0]  sysid_control_slave_address,                        //                          sysid_control_slave.address
		input  wire [31:0] sysid_control_slave_readdata                        //                                             .readdata
	);

	wire          cpu_1_0_mm_bridge_1_m0_translator_avalon_universal_master_0_waitrequest;    // cpu_1_0_mm_bridge_1_m0_agent:av_waitrequest -> cpu_1_0_mm_bridge_1_m0_translator:uav_waitrequest
	wire   [31:0] cpu_1_0_mm_bridge_1_m0_translator_avalon_universal_master_0_readdata;       // cpu_1_0_mm_bridge_1_m0_agent:av_readdata -> cpu_1_0_mm_bridge_1_m0_translator:uav_readdata
	wire          cpu_1_0_mm_bridge_1_m0_translator_avalon_universal_master_0_debugaccess;    // cpu_1_0_mm_bridge_1_m0_translator:uav_debugaccess -> cpu_1_0_mm_bridge_1_m0_agent:av_debugaccess
	wire   [27:0] cpu_1_0_mm_bridge_1_m0_translator_avalon_universal_master_0_address;        // cpu_1_0_mm_bridge_1_m0_translator:uav_address -> cpu_1_0_mm_bridge_1_m0_agent:av_address
	wire          cpu_1_0_mm_bridge_1_m0_translator_avalon_universal_master_0_read;           // cpu_1_0_mm_bridge_1_m0_translator:uav_read -> cpu_1_0_mm_bridge_1_m0_agent:av_read
	wire    [3:0] cpu_1_0_mm_bridge_1_m0_translator_avalon_universal_master_0_byteenable;     // cpu_1_0_mm_bridge_1_m0_translator:uav_byteenable -> cpu_1_0_mm_bridge_1_m0_agent:av_byteenable
	wire          cpu_1_0_mm_bridge_1_m0_translator_avalon_universal_master_0_readdatavalid;  // cpu_1_0_mm_bridge_1_m0_agent:av_readdatavalid -> cpu_1_0_mm_bridge_1_m0_translator:uav_readdatavalid
	wire          cpu_1_0_mm_bridge_1_m0_translator_avalon_universal_master_0_lock;           // cpu_1_0_mm_bridge_1_m0_translator:uav_lock -> cpu_1_0_mm_bridge_1_m0_agent:av_lock
	wire          cpu_1_0_mm_bridge_1_m0_translator_avalon_universal_master_0_write;          // cpu_1_0_mm_bridge_1_m0_translator:uav_write -> cpu_1_0_mm_bridge_1_m0_agent:av_write
	wire   [31:0] cpu_1_0_mm_bridge_1_m0_translator_avalon_universal_master_0_writedata;      // cpu_1_0_mm_bridge_1_m0_translator:uav_writedata -> cpu_1_0_mm_bridge_1_m0_agent:av_writedata
	wire    [2:0] cpu_1_0_mm_bridge_1_m0_translator_avalon_universal_master_0_burstcount;     // cpu_1_0_mm_bridge_1_m0_translator:uav_burstcount -> cpu_1_0_mm_bridge_1_m0_agent:av_burstcount
	wire          cpu_0_0_outgoing_master_translator_avalon_universal_master_0_waitrequest;   // cpu_0_0_outgoing_master_agent:av_waitrequest -> cpu_0_0_outgoing_master_translator:uav_waitrequest
	wire   [31:0] cpu_0_0_outgoing_master_translator_avalon_universal_master_0_readdata;      // cpu_0_0_outgoing_master_agent:av_readdata -> cpu_0_0_outgoing_master_translator:uav_readdata
	wire          cpu_0_0_outgoing_master_translator_avalon_universal_master_0_debugaccess;   // cpu_0_0_outgoing_master_translator:uav_debugaccess -> cpu_0_0_outgoing_master_agent:av_debugaccess
	wire   [27:0] cpu_0_0_outgoing_master_translator_avalon_universal_master_0_address;       // cpu_0_0_outgoing_master_translator:uav_address -> cpu_0_0_outgoing_master_agent:av_address
	wire          cpu_0_0_outgoing_master_translator_avalon_universal_master_0_read;          // cpu_0_0_outgoing_master_translator:uav_read -> cpu_0_0_outgoing_master_agent:av_read
	wire    [3:0] cpu_0_0_outgoing_master_translator_avalon_universal_master_0_byteenable;    // cpu_0_0_outgoing_master_translator:uav_byteenable -> cpu_0_0_outgoing_master_agent:av_byteenable
	wire          cpu_0_0_outgoing_master_translator_avalon_universal_master_0_readdatavalid; // cpu_0_0_outgoing_master_agent:av_readdatavalid -> cpu_0_0_outgoing_master_translator:uav_readdatavalid
	wire          cpu_0_0_outgoing_master_translator_avalon_universal_master_0_lock;          // cpu_0_0_outgoing_master_translator:uav_lock -> cpu_0_0_outgoing_master_agent:av_lock
	wire          cpu_0_0_outgoing_master_translator_avalon_universal_master_0_write;         // cpu_0_0_outgoing_master_translator:uav_write -> cpu_0_0_outgoing_master_agent:av_write
	wire   [31:0] cpu_0_0_outgoing_master_translator_avalon_universal_master_0_writedata;     // cpu_0_0_outgoing_master_translator:uav_writedata -> cpu_0_0_outgoing_master_agent:av_writedata
	wire    [2:0] cpu_0_0_outgoing_master_translator_avalon_universal_master_0_burstcount;    // cpu_0_0_outgoing_master_translator:uav_burstcount -> cpu_0_0_outgoing_master_agent:av_burstcount
	wire    [7:0] shared_pio_avalon_slave_0_agent_m0_readdata;                                // shared_PIO_avalon_slave_0_translator:uav_readdata -> shared_PIO_avalon_slave_0_agent:m0_readdata
	wire          shared_pio_avalon_slave_0_agent_m0_waitrequest;                             // shared_PIO_avalon_slave_0_translator:uav_waitrequest -> shared_PIO_avalon_slave_0_agent:m0_waitrequest
	wire          shared_pio_avalon_slave_0_agent_m0_debugaccess;                             // shared_PIO_avalon_slave_0_agent:m0_debugaccess -> shared_PIO_avalon_slave_0_translator:uav_debugaccess
	wire   [27:0] shared_pio_avalon_slave_0_agent_m0_address;                                 // shared_PIO_avalon_slave_0_agent:m0_address -> shared_PIO_avalon_slave_0_translator:uav_address
	wire    [0:0] shared_pio_avalon_slave_0_agent_m0_byteenable;                              // shared_PIO_avalon_slave_0_agent:m0_byteenable -> shared_PIO_avalon_slave_0_translator:uav_byteenable
	wire          shared_pio_avalon_slave_0_agent_m0_read;                                    // shared_PIO_avalon_slave_0_agent:m0_read -> shared_PIO_avalon_slave_0_translator:uav_read
	wire          shared_pio_avalon_slave_0_agent_m0_readdatavalid;                           // shared_PIO_avalon_slave_0_translator:uav_readdatavalid -> shared_PIO_avalon_slave_0_agent:m0_readdatavalid
	wire          shared_pio_avalon_slave_0_agent_m0_lock;                                    // shared_PIO_avalon_slave_0_agent:m0_lock -> shared_PIO_avalon_slave_0_translator:uav_lock
	wire    [7:0] shared_pio_avalon_slave_0_agent_m0_writedata;                               // shared_PIO_avalon_slave_0_agent:m0_writedata -> shared_PIO_avalon_slave_0_translator:uav_writedata
	wire          shared_pio_avalon_slave_0_agent_m0_write;                                   // shared_PIO_avalon_slave_0_agent:m0_write -> shared_PIO_avalon_slave_0_translator:uav_write
	wire    [0:0] shared_pio_avalon_slave_0_agent_m0_burstcount;                              // shared_PIO_avalon_slave_0_agent:m0_burstcount -> shared_PIO_avalon_slave_0_translator:uav_burstcount
	wire          shared_pio_avalon_slave_0_agent_rf_source_valid;                            // shared_PIO_avalon_slave_0_agent:rf_source_valid -> shared_PIO_avalon_slave_0_agent_rsp_fifo:in_valid
	wire   [75:0] shared_pio_avalon_slave_0_agent_rf_source_data;                             // shared_PIO_avalon_slave_0_agent:rf_source_data -> shared_PIO_avalon_slave_0_agent_rsp_fifo:in_data
	wire          shared_pio_avalon_slave_0_agent_rf_source_ready;                            // shared_PIO_avalon_slave_0_agent_rsp_fifo:in_ready -> shared_PIO_avalon_slave_0_agent:rf_source_ready
	wire          shared_pio_avalon_slave_0_agent_rf_source_startofpacket;                    // shared_PIO_avalon_slave_0_agent:rf_source_startofpacket -> shared_PIO_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire          shared_pio_avalon_slave_0_agent_rf_source_endofpacket;                      // shared_PIO_avalon_slave_0_agent:rf_source_endofpacket -> shared_PIO_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          shared_pio_avalon_slave_0_agent_rsp_fifo_out_valid;                         // shared_PIO_avalon_slave_0_agent_rsp_fifo:out_valid -> shared_PIO_avalon_slave_0_agent:rf_sink_valid
	wire   [75:0] shared_pio_avalon_slave_0_agent_rsp_fifo_out_data;                          // shared_PIO_avalon_slave_0_agent_rsp_fifo:out_data -> shared_PIO_avalon_slave_0_agent:rf_sink_data
	wire          shared_pio_avalon_slave_0_agent_rsp_fifo_out_ready;                         // shared_PIO_avalon_slave_0_agent:rf_sink_ready -> shared_PIO_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          shared_pio_avalon_slave_0_agent_rsp_fifo_out_startofpacket;                 // shared_PIO_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> shared_PIO_avalon_slave_0_agent:rf_sink_startofpacket
	wire          shared_pio_avalon_slave_0_agent_rsp_fifo_out_endofpacket;                   // shared_PIO_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> shared_PIO_avalon_slave_0_agent:rf_sink_endofpacket
	wire   [31:0] shared_mailbox_avmm_msg_receiver_agent_m0_readdata;                         // shared_mailbox_avmm_msg_receiver_translator:uav_readdata -> shared_mailbox_avmm_msg_receiver_agent:m0_readdata
	wire          shared_mailbox_avmm_msg_receiver_agent_m0_waitrequest;                      // shared_mailbox_avmm_msg_receiver_translator:uav_waitrequest -> shared_mailbox_avmm_msg_receiver_agent:m0_waitrequest
	wire          shared_mailbox_avmm_msg_receiver_agent_m0_debugaccess;                      // shared_mailbox_avmm_msg_receiver_agent:m0_debugaccess -> shared_mailbox_avmm_msg_receiver_translator:uav_debugaccess
	wire   [27:0] shared_mailbox_avmm_msg_receiver_agent_m0_address;                          // shared_mailbox_avmm_msg_receiver_agent:m0_address -> shared_mailbox_avmm_msg_receiver_translator:uav_address
	wire    [3:0] shared_mailbox_avmm_msg_receiver_agent_m0_byteenable;                       // shared_mailbox_avmm_msg_receiver_agent:m0_byteenable -> shared_mailbox_avmm_msg_receiver_translator:uav_byteenable
	wire          shared_mailbox_avmm_msg_receiver_agent_m0_read;                             // shared_mailbox_avmm_msg_receiver_agent:m0_read -> shared_mailbox_avmm_msg_receiver_translator:uav_read
	wire          shared_mailbox_avmm_msg_receiver_agent_m0_readdatavalid;                    // shared_mailbox_avmm_msg_receiver_translator:uav_readdatavalid -> shared_mailbox_avmm_msg_receiver_agent:m0_readdatavalid
	wire          shared_mailbox_avmm_msg_receiver_agent_m0_lock;                             // shared_mailbox_avmm_msg_receiver_agent:m0_lock -> shared_mailbox_avmm_msg_receiver_translator:uav_lock
	wire   [31:0] shared_mailbox_avmm_msg_receiver_agent_m0_writedata;                        // shared_mailbox_avmm_msg_receiver_agent:m0_writedata -> shared_mailbox_avmm_msg_receiver_translator:uav_writedata
	wire          shared_mailbox_avmm_msg_receiver_agent_m0_write;                            // shared_mailbox_avmm_msg_receiver_agent:m0_write -> shared_mailbox_avmm_msg_receiver_translator:uav_write
	wire    [2:0] shared_mailbox_avmm_msg_receiver_agent_m0_burstcount;                       // shared_mailbox_avmm_msg_receiver_agent:m0_burstcount -> shared_mailbox_avmm_msg_receiver_translator:uav_burstcount
	wire          shared_mailbox_avmm_msg_receiver_agent_rf_source_valid;                     // shared_mailbox_avmm_msg_receiver_agent:rf_source_valid -> shared_mailbox_avmm_msg_receiver_agent_rsp_fifo:in_valid
	wire  [102:0] shared_mailbox_avmm_msg_receiver_agent_rf_source_data;                      // shared_mailbox_avmm_msg_receiver_agent:rf_source_data -> shared_mailbox_avmm_msg_receiver_agent_rsp_fifo:in_data
	wire          shared_mailbox_avmm_msg_receiver_agent_rf_source_ready;                     // shared_mailbox_avmm_msg_receiver_agent_rsp_fifo:in_ready -> shared_mailbox_avmm_msg_receiver_agent:rf_source_ready
	wire          shared_mailbox_avmm_msg_receiver_agent_rf_source_startofpacket;             // shared_mailbox_avmm_msg_receiver_agent:rf_source_startofpacket -> shared_mailbox_avmm_msg_receiver_agent_rsp_fifo:in_startofpacket
	wire          shared_mailbox_avmm_msg_receiver_agent_rf_source_endofpacket;               // shared_mailbox_avmm_msg_receiver_agent:rf_source_endofpacket -> shared_mailbox_avmm_msg_receiver_agent_rsp_fifo:in_endofpacket
	wire          shared_mailbox_avmm_msg_receiver_agent_rsp_fifo_out_valid;                  // shared_mailbox_avmm_msg_receiver_agent_rsp_fifo:out_valid -> shared_mailbox_avmm_msg_receiver_agent:rf_sink_valid
	wire  [102:0] shared_mailbox_avmm_msg_receiver_agent_rsp_fifo_out_data;                   // shared_mailbox_avmm_msg_receiver_agent_rsp_fifo:out_data -> shared_mailbox_avmm_msg_receiver_agent:rf_sink_data
	wire          shared_mailbox_avmm_msg_receiver_agent_rsp_fifo_out_ready;                  // shared_mailbox_avmm_msg_receiver_agent:rf_sink_ready -> shared_mailbox_avmm_msg_receiver_agent_rsp_fifo:out_ready
	wire          shared_mailbox_avmm_msg_receiver_agent_rsp_fifo_out_startofpacket;          // shared_mailbox_avmm_msg_receiver_agent_rsp_fifo:out_startofpacket -> shared_mailbox_avmm_msg_receiver_agent:rf_sink_startofpacket
	wire          shared_mailbox_avmm_msg_receiver_agent_rsp_fifo_out_endofpacket;            // shared_mailbox_avmm_msg_receiver_agent_rsp_fifo:out_endofpacket -> shared_mailbox_avmm_msg_receiver_agent:rf_sink_endofpacket
	wire   [31:0] sysid_control_slave_agent_m0_readdata;                                      // sysid_control_slave_translator:uav_readdata -> sysid_control_slave_agent:m0_readdata
	wire          sysid_control_slave_agent_m0_waitrequest;                                   // sysid_control_slave_translator:uav_waitrequest -> sysid_control_slave_agent:m0_waitrequest
	wire          sysid_control_slave_agent_m0_debugaccess;                                   // sysid_control_slave_agent:m0_debugaccess -> sysid_control_slave_translator:uav_debugaccess
	wire   [27:0] sysid_control_slave_agent_m0_address;                                       // sysid_control_slave_agent:m0_address -> sysid_control_slave_translator:uav_address
	wire    [3:0] sysid_control_slave_agent_m0_byteenable;                                    // sysid_control_slave_agent:m0_byteenable -> sysid_control_slave_translator:uav_byteenable
	wire          sysid_control_slave_agent_m0_read;                                          // sysid_control_slave_agent:m0_read -> sysid_control_slave_translator:uav_read
	wire          sysid_control_slave_agent_m0_readdatavalid;                                 // sysid_control_slave_translator:uav_readdatavalid -> sysid_control_slave_agent:m0_readdatavalid
	wire          sysid_control_slave_agent_m0_lock;                                          // sysid_control_slave_agent:m0_lock -> sysid_control_slave_translator:uav_lock
	wire   [31:0] sysid_control_slave_agent_m0_writedata;                                     // sysid_control_slave_agent:m0_writedata -> sysid_control_slave_translator:uav_writedata
	wire          sysid_control_slave_agent_m0_write;                                         // sysid_control_slave_agent:m0_write -> sysid_control_slave_translator:uav_write
	wire    [2:0] sysid_control_slave_agent_m0_burstcount;                                    // sysid_control_slave_agent:m0_burstcount -> sysid_control_slave_translator:uav_burstcount
	wire          sysid_control_slave_agent_rf_source_valid;                                  // sysid_control_slave_agent:rf_source_valid -> sysid_control_slave_agent_rsp_fifo:in_valid
	wire  [102:0] sysid_control_slave_agent_rf_source_data;                                   // sysid_control_slave_agent:rf_source_data -> sysid_control_slave_agent_rsp_fifo:in_data
	wire          sysid_control_slave_agent_rf_source_ready;                                  // sysid_control_slave_agent_rsp_fifo:in_ready -> sysid_control_slave_agent:rf_source_ready
	wire          sysid_control_slave_agent_rf_source_startofpacket;                          // sysid_control_slave_agent:rf_source_startofpacket -> sysid_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_control_slave_agent_rf_source_endofpacket;                            // sysid_control_slave_agent:rf_source_endofpacket -> sysid_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_control_slave_agent_rsp_fifo_out_valid;                               // sysid_control_slave_agent_rsp_fifo:out_valid -> sysid_control_slave_agent:rf_sink_valid
	wire  [102:0] sysid_control_slave_agent_rsp_fifo_out_data;                                // sysid_control_slave_agent_rsp_fifo:out_data -> sysid_control_slave_agent:rf_sink_data
	wire          sysid_control_slave_agent_rsp_fifo_out_ready;                               // sysid_control_slave_agent:rf_sink_ready -> sysid_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_control_slave_agent_rsp_fifo_out_startofpacket;                       // sysid_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_control_slave_agent:rf_sink_startofpacket
	wire          sysid_control_slave_agent_rsp_fifo_out_endofpacket;                         // sysid_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_control_slave_agent:rf_sink_endofpacket
	wire          sysid_control_slave_agent_rdata_fifo_src_valid;                             // sysid_control_slave_agent:rdata_fifo_src_valid -> sysid_control_slave_agent_rdata_fifo:in_valid
	wire   [33:0] sysid_control_slave_agent_rdata_fifo_src_data;                              // sysid_control_slave_agent:rdata_fifo_src_data -> sysid_control_slave_agent_rdata_fifo:in_data
	wire          sysid_control_slave_agent_rdata_fifo_src_ready;                             // sysid_control_slave_agent_rdata_fifo:in_ready -> sysid_control_slave_agent:rdata_fifo_src_ready
	wire   [15:0] sdram_controller_s1_agent_m0_readdata;                                      // sdram_controller_s1_translator:uav_readdata -> sdram_controller_s1_agent:m0_readdata
	wire          sdram_controller_s1_agent_m0_waitrequest;                                   // sdram_controller_s1_translator:uav_waitrequest -> sdram_controller_s1_agent:m0_waitrequest
	wire          sdram_controller_s1_agent_m0_debugaccess;                                   // sdram_controller_s1_agent:m0_debugaccess -> sdram_controller_s1_translator:uav_debugaccess
	wire   [27:0] sdram_controller_s1_agent_m0_address;                                       // sdram_controller_s1_agent:m0_address -> sdram_controller_s1_translator:uav_address
	wire    [1:0] sdram_controller_s1_agent_m0_byteenable;                                    // sdram_controller_s1_agent:m0_byteenable -> sdram_controller_s1_translator:uav_byteenable
	wire          sdram_controller_s1_agent_m0_read;                                          // sdram_controller_s1_agent:m0_read -> sdram_controller_s1_translator:uav_read
	wire          sdram_controller_s1_agent_m0_readdatavalid;                                 // sdram_controller_s1_translator:uav_readdatavalid -> sdram_controller_s1_agent:m0_readdatavalid
	wire          sdram_controller_s1_agent_m0_lock;                                          // sdram_controller_s1_agent:m0_lock -> sdram_controller_s1_translator:uav_lock
	wire   [15:0] sdram_controller_s1_agent_m0_writedata;                                     // sdram_controller_s1_agent:m0_writedata -> sdram_controller_s1_translator:uav_writedata
	wire          sdram_controller_s1_agent_m0_write;                                         // sdram_controller_s1_agent:m0_write -> sdram_controller_s1_translator:uav_write
	wire    [1:0] sdram_controller_s1_agent_m0_burstcount;                                    // sdram_controller_s1_agent:m0_burstcount -> sdram_controller_s1_translator:uav_burstcount
	wire          sdram_controller_s1_agent_rf_source_valid;                                  // sdram_controller_s1_agent:rf_source_valid -> sdram_controller_s1_agent_rsp_fifo:in_valid
	wire   [84:0] sdram_controller_s1_agent_rf_source_data;                                   // sdram_controller_s1_agent:rf_source_data -> sdram_controller_s1_agent_rsp_fifo:in_data
	wire          sdram_controller_s1_agent_rf_source_ready;                                  // sdram_controller_s1_agent_rsp_fifo:in_ready -> sdram_controller_s1_agent:rf_source_ready
	wire          sdram_controller_s1_agent_rf_source_startofpacket;                          // sdram_controller_s1_agent:rf_source_startofpacket -> sdram_controller_s1_agent_rsp_fifo:in_startofpacket
	wire          sdram_controller_s1_agent_rf_source_endofpacket;                            // sdram_controller_s1_agent:rf_source_endofpacket -> sdram_controller_s1_agent_rsp_fifo:in_endofpacket
	wire          sdram_controller_s1_agent_rsp_fifo_out_valid;                               // sdram_controller_s1_agent_rsp_fifo:out_valid -> sdram_controller_s1_agent:rf_sink_valid
	wire   [84:0] sdram_controller_s1_agent_rsp_fifo_out_data;                                // sdram_controller_s1_agent_rsp_fifo:out_data -> sdram_controller_s1_agent:rf_sink_data
	wire          sdram_controller_s1_agent_rsp_fifo_out_ready;                               // sdram_controller_s1_agent:rf_sink_ready -> sdram_controller_s1_agent_rsp_fifo:out_ready
	wire          sdram_controller_s1_agent_rsp_fifo_out_startofpacket;                       // sdram_controller_s1_agent_rsp_fifo:out_startofpacket -> sdram_controller_s1_agent:rf_sink_startofpacket
	wire          sdram_controller_s1_agent_rsp_fifo_out_endofpacket;                         // sdram_controller_s1_agent_rsp_fifo:out_endofpacket -> sdram_controller_s1_agent:rf_sink_endofpacket
	wire          sdram_controller_s1_agent_rdata_fifo_src_valid;                             // sdram_controller_s1_agent:rdata_fifo_src_valid -> sdram_controller_s1_agent_rdata_fifo:in_valid
	wire   [17:0] sdram_controller_s1_agent_rdata_fifo_src_data;                              // sdram_controller_s1_agent:rdata_fifo_src_data -> sdram_controller_s1_agent_rdata_fifo:in_data
	wire          sdram_controller_s1_agent_rdata_fifo_src_ready;                             // sdram_controller_s1_agent_rdata_fifo:in_ready -> sdram_controller_s1_agent:rdata_fifo_src_ready
	wire   [31:0] shared_mutex_pio_s1_agent_m0_readdata;                                      // shared_mutex_PIO_s1_translator:uav_readdata -> shared_mutex_PIO_s1_agent:m0_readdata
	wire          shared_mutex_pio_s1_agent_m0_waitrequest;                                   // shared_mutex_PIO_s1_translator:uav_waitrequest -> shared_mutex_PIO_s1_agent:m0_waitrequest
	wire          shared_mutex_pio_s1_agent_m0_debugaccess;                                   // shared_mutex_PIO_s1_agent:m0_debugaccess -> shared_mutex_PIO_s1_translator:uav_debugaccess
	wire   [27:0] shared_mutex_pio_s1_agent_m0_address;                                       // shared_mutex_PIO_s1_agent:m0_address -> shared_mutex_PIO_s1_translator:uav_address
	wire    [3:0] shared_mutex_pio_s1_agent_m0_byteenable;                                    // shared_mutex_PIO_s1_agent:m0_byteenable -> shared_mutex_PIO_s1_translator:uav_byteenable
	wire          shared_mutex_pio_s1_agent_m0_read;                                          // shared_mutex_PIO_s1_agent:m0_read -> shared_mutex_PIO_s1_translator:uav_read
	wire          shared_mutex_pio_s1_agent_m0_readdatavalid;                                 // shared_mutex_PIO_s1_translator:uav_readdatavalid -> shared_mutex_PIO_s1_agent:m0_readdatavalid
	wire          shared_mutex_pio_s1_agent_m0_lock;                                          // shared_mutex_PIO_s1_agent:m0_lock -> shared_mutex_PIO_s1_translator:uav_lock
	wire   [31:0] shared_mutex_pio_s1_agent_m0_writedata;                                     // shared_mutex_PIO_s1_agent:m0_writedata -> shared_mutex_PIO_s1_translator:uav_writedata
	wire          shared_mutex_pio_s1_agent_m0_write;                                         // shared_mutex_PIO_s1_agent:m0_write -> shared_mutex_PIO_s1_translator:uav_write
	wire    [2:0] shared_mutex_pio_s1_agent_m0_burstcount;                                    // shared_mutex_PIO_s1_agent:m0_burstcount -> shared_mutex_PIO_s1_translator:uav_burstcount
	wire          shared_mutex_pio_s1_agent_rf_source_valid;                                  // shared_mutex_PIO_s1_agent:rf_source_valid -> shared_mutex_PIO_s1_agent_rsp_fifo:in_valid
	wire  [102:0] shared_mutex_pio_s1_agent_rf_source_data;                                   // shared_mutex_PIO_s1_agent:rf_source_data -> shared_mutex_PIO_s1_agent_rsp_fifo:in_data
	wire          shared_mutex_pio_s1_agent_rf_source_ready;                                  // shared_mutex_PIO_s1_agent_rsp_fifo:in_ready -> shared_mutex_PIO_s1_agent:rf_source_ready
	wire          shared_mutex_pio_s1_agent_rf_source_startofpacket;                          // shared_mutex_PIO_s1_agent:rf_source_startofpacket -> shared_mutex_PIO_s1_agent_rsp_fifo:in_startofpacket
	wire          shared_mutex_pio_s1_agent_rf_source_endofpacket;                            // shared_mutex_PIO_s1_agent:rf_source_endofpacket -> shared_mutex_PIO_s1_agent_rsp_fifo:in_endofpacket
	wire          shared_mutex_pio_s1_agent_rsp_fifo_out_valid;                               // shared_mutex_PIO_s1_agent_rsp_fifo:out_valid -> shared_mutex_PIO_s1_agent:rf_sink_valid
	wire  [102:0] shared_mutex_pio_s1_agent_rsp_fifo_out_data;                                // shared_mutex_PIO_s1_agent_rsp_fifo:out_data -> shared_mutex_PIO_s1_agent:rf_sink_data
	wire          shared_mutex_pio_s1_agent_rsp_fifo_out_ready;                               // shared_mutex_PIO_s1_agent:rf_sink_ready -> shared_mutex_PIO_s1_agent_rsp_fifo:out_ready
	wire          shared_mutex_pio_s1_agent_rsp_fifo_out_startofpacket;                       // shared_mutex_PIO_s1_agent_rsp_fifo:out_startofpacket -> shared_mutex_PIO_s1_agent:rf_sink_startofpacket
	wire          shared_mutex_pio_s1_agent_rsp_fifo_out_endofpacket;                         // shared_mutex_PIO_s1_agent_rsp_fifo:out_endofpacket -> shared_mutex_PIO_s1_agent:rf_sink_endofpacket
	wire   [31:0] shared_mailbox_avmm_msg_sender_agent_m0_readdata;                           // shared_mailbox_avmm_msg_sender_translator:uav_readdata -> shared_mailbox_avmm_msg_sender_agent:m0_readdata
	wire          shared_mailbox_avmm_msg_sender_agent_m0_waitrequest;                        // shared_mailbox_avmm_msg_sender_translator:uav_waitrequest -> shared_mailbox_avmm_msg_sender_agent:m0_waitrequest
	wire          shared_mailbox_avmm_msg_sender_agent_m0_debugaccess;                        // shared_mailbox_avmm_msg_sender_agent:m0_debugaccess -> shared_mailbox_avmm_msg_sender_translator:uav_debugaccess
	wire   [27:0] shared_mailbox_avmm_msg_sender_agent_m0_address;                            // shared_mailbox_avmm_msg_sender_agent:m0_address -> shared_mailbox_avmm_msg_sender_translator:uav_address
	wire    [3:0] shared_mailbox_avmm_msg_sender_agent_m0_byteenable;                         // shared_mailbox_avmm_msg_sender_agent:m0_byteenable -> shared_mailbox_avmm_msg_sender_translator:uav_byteenable
	wire          shared_mailbox_avmm_msg_sender_agent_m0_read;                               // shared_mailbox_avmm_msg_sender_agent:m0_read -> shared_mailbox_avmm_msg_sender_translator:uav_read
	wire          shared_mailbox_avmm_msg_sender_agent_m0_readdatavalid;                      // shared_mailbox_avmm_msg_sender_translator:uav_readdatavalid -> shared_mailbox_avmm_msg_sender_agent:m0_readdatavalid
	wire          shared_mailbox_avmm_msg_sender_agent_m0_lock;                               // shared_mailbox_avmm_msg_sender_agent:m0_lock -> shared_mailbox_avmm_msg_sender_translator:uav_lock
	wire   [31:0] shared_mailbox_avmm_msg_sender_agent_m0_writedata;                          // shared_mailbox_avmm_msg_sender_agent:m0_writedata -> shared_mailbox_avmm_msg_sender_translator:uav_writedata
	wire          shared_mailbox_avmm_msg_sender_agent_m0_write;                              // shared_mailbox_avmm_msg_sender_agent:m0_write -> shared_mailbox_avmm_msg_sender_translator:uav_write
	wire    [2:0] shared_mailbox_avmm_msg_sender_agent_m0_burstcount;                         // shared_mailbox_avmm_msg_sender_agent:m0_burstcount -> shared_mailbox_avmm_msg_sender_translator:uav_burstcount
	wire          shared_mailbox_avmm_msg_sender_agent_rf_source_valid;                       // shared_mailbox_avmm_msg_sender_agent:rf_source_valid -> shared_mailbox_avmm_msg_sender_agent_rsp_fifo:in_valid
	wire  [102:0] shared_mailbox_avmm_msg_sender_agent_rf_source_data;                        // shared_mailbox_avmm_msg_sender_agent:rf_source_data -> shared_mailbox_avmm_msg_sender_agent_rsp_fifo:in_data
	wire          shared_mailbox_avmm_msg_sender_agent_rf_source_ready;                       // shared_mailbox_avmm_msg_sender_agent_rsp_fifo:in_ready -> shared_mailbox_avmm_msg_sender_agent:rf_source_ready
	wire          shared_mailbox_avmm_msg_sender_agent_rf_source_startofpacket;               // shared_mailbox_avmm_msg_sender_agent:rf_source_startofpacket -> shared_mailbox_avmm_msg_sender_agent_rsp_fifo:in_startofpacket
	wire          shared_mailbox_avmm_msg_sender_agent_rf_source_endofpacket;                 // shared_mailbox_avmm_msg_sender_agent:rf_source_endofpacket -> shared_mailbox_avmm_msg_sender_agent_rsp_fifo:in_endofpacket
	wire          shared_mailbox_avmm_msg_sender_agent_rsp_fifo_out_valid;                    // shared_mailbox_avmm_msg_sender_agent_rsp_fifo:out_valid -> shared_mailbox_avmm_msg_sender_agent:rf_sink_valid
	wire  [102:0] shared_mailbox_avmm_msg_sender_agent_rsp_fifo_out_data;                     // shared_mailbox_avmm_msg_sender_agent_rsp_fifo:out_data -> shared_mailbox_avmm_msg_sender_agent:rf_sink_data
	wire          shared_mailbox_avmm_msg_sender_agent_rsp_fifo_out_ready;                    // shared_mailbox_avmm_msg_sender_agent:rf_sink_ready -> shared_mailbox_avmm_msg_sender_agent_rsp_fifo:out_ready
	wire          shared_mailbox_avmm_msg_sender_agent_rsp_fifo_out_startofpacket;            // shared_mailbox_avmm_msg_sender_agent_rsp_fifo:out_startofpacket -> shared_mailbox_avmm_msg_sender_agent:rf_sink_startofpacket
	wire          shared_mailbox_avmm_msg_sender_agent_rsp_fifo_out_endofpacket;              // shared_mailbox_avmm_msg_sender_agent_rsp_fifo:out_endofpacket -> shared_mailbox_avmm_msg_sender_agent:rf_sink_endofpacket
	wire          cpu_1_0_mm_bridge_1_m0_agent_cp_valid;                                      // cpu_1_0_mm_bridge_1_m0_agent:cp_valid -> router:sink_valid
	wire  [101:0] cpu_1_0_mm_bridge_1_m0_agent_cp_data;                                       // cpu_1_0_mm_bridge_1_m0_agent:cp_data -> router:sink_data
	wire          cpu_1_0_mm_bridge_1_m0_agent_cp_ready;                                      // router:sink_ready -> cpu_1_0_mm_bridge_1_m0_agent:cp_ready
	wire          cpu_1_0_mm_bridge_1_m0_agent_cp_startofpacket;                              // cpu_1_0_mm_bridge_1_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire          cpu_1_0_mm_bridge_1_m0_agent_cp_endofpacket;                                // cpu_1_0_mm_bridge_1_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          cpu_0_0_outgoing_master_agent_cp_valid;                                     // cpu_0_0_outgoing_master_agent:cp_valid -> router_001:sink_valid
	wire  [101:0] cpu_0_0_outgoing_master_agent_cp_data;                                      // cpu_0_0_outgoing_master_agent:cp_data -> router_001:sink_data
	wire          cpu_0_0_outgoing_master_agent_cp_ready;                                     // router_001:sink_ready -> cpu_0_0_outgoing_master_agent:cp_ready
	wire          cpu_0_0_outgoing_master_agent_cp_startofpacket;                             // cpu_0_0_outgoing_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          cpu_0_0_outgoing_master_agent_cp_endofpacket;                               // cpu_0_0_outgoing_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          router_003_src_valid;                                                       // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [101:0] router_003_src_data;                                                        // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                                       // rsp_demux_001:sink_ready -> router_003:src_ready
	wire    [5:0] router_003_src_channel;                                                     // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                                               // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                                 // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_004_src_valid;                                                       // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [101:0] router_004_src_data;                                                        // router_004:src_data -> rsp_demux_002:sink_data
	wire          router_004_src_ready;                                                       // rsp_demux_002:sink_ready -> router_004:src_ready
	wire    [5:0] router_004_src_channel;                                                     // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_startofpacket;                                               // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_004_src_endofpacket;                                                 // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          router_006_src_valid;                                                       // router_006:src_valid -> rsp_demux_004:sink_valid
	wire  [101:0] router_006_src_data;                                                        // router_006:src_data -> rsp_demux_004:sink_data
	wire          router_006_src_ready;                                                       // rsp_demux_004:sink_ready -> router_006:src_ready
	wire    [5:0] router_006_src_channel;                                                     // router_006:src_channel -> rsp_demux_004:sink_channel
	wire          router_006_src_startofpacket;                                               // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_006_src_endofpacket;                                                 // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          router_007_src_valid;                                                       // router_007:src_valid -> rsp_demux_005:sink_valid
	wire  [101:0] router_007_src_data;                                                        // router_007:src_data -> rsp_demux_005:sink_data
	wire          router_007_src_ready;                                                       // rsp_demux_005:sink_ready -> router_007:src_ready
	wire    [5:0] router_007_src_channel;                                                     // router_007:src_channel -> rsp_demux_005:sink_channel
	wire          router_007_src_startofpacket;                                               // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_007_src_endofpacket;                                                 // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          router_src_valid;                                                           // router:src_valid -> cpu_1_0_mm_bridge_1_m0_limiter:cmd_sink_valid
	wire  [101:0] router_src_data;                                                            // router:src_data -> cpu_1_0_mm_bridge_1_m0_limiter:cmd_sink_data
	wire          router_src_ready;                                                           // cpu_1_0_mm_bridge_1_m0_limiter:cmd_sink_ready -> router:src_ready
	wire    [5:0] router_src_channel;                                                         // router:src_channel -> cpu_1_0_mm_bridge_1_m0_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                   // router:src_startofpacket -> cpu_1_0_mm_bridge_1_m0_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                     // router:src_endofpacket -> cpu_1_0_mm_bridge_1_m0_limiter:cmd_sink_endofpacket
	wire          cpu_1_0_mm_bridge_1_m0_limiter_rsp_src_valid;                               // cpu_1_0_mm_bridge_1_m0_limiter:rsp_src_valid -> cpu_1_0_mm_bridge_1_m0_agent:rp_valid
	wire  [101:0] cpu_1_0_mm_bridge_1_m0_limiter_rsp_src_data;                                // cpu_1_0_mm_bridge_1_m0_limiter:rsp_src_data -> cpu_1_0_mm_bridge_1_m0_agent:rp_data
	wire          cpu_1_0_mm_bridge_1_m0_limiter_rsp_src_ready;                               // cpu_1_0_mm_bridge_1_m0_agent:rp_ready -> cpu_1_0_mm_bridge_1_m0_limiter:rsp_src_ready
	wire    [5:0] cpu_1_0_mm_bridge_1_m0_limiter_rsp_src_channel;                             // cpu_1_0_mm_bridge_1_m0_limiter:rsp_src_channel -> cpu_1_0_mm_bridge_1_m0_agent:rp_channel
	wire          cpu_1_0_mm_bridge_1_m0_limiter_rsp_src_startofpacket;                       // cpu_1_0_mm_bridge_1_m0_limiter:rsp_src_startofpacket -> cpu_1_0_mm_bridge_1_m0_agent:rp_startofpacket
	wire          cpu_1_0_mm_bridge_1_m0_limiter_rsp_src_endofpacket;                         // cpu_1_0_mm_bridge_1_m0_limiter:rsp_src_endofpacket -> cpu_1_0_mm_bridge_1_m0_agent:rp_endofpacket
	wire          router_001_src_valid;                                                       // router_001:src_valid -> cpu_0_0_outgoing_master_limiter:cmd_sink_valid
	wire  [101:0] router_001_src_data;                                                        // router_001:src_data -> cpu_0_0_outgoing_master_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                       // cpu_0_0_outgoing_master_limiter:cmd_sink_ready -> router_001:src_ready
	wire    [5:0] router_001_src_channel;                                                     // router_001:src_channel -> cpu_0_0_outgoing_master_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                               // router_001:src_startofpacket -> cpu_0_0_outgoing_master_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                 // router_001:src_endofpacket -> cpu_0_0_outgoing_master_limiter:cmd_sink_endofpacket
	wire          cpu_0_0_outgoing_master_limiter_rsp_src_valid;                              // cpu_0_0_outgoing_master_limiter:rsp_src_valid -> cpu_0_0_outgoing_master_agent:rp_valid
	wire  [101:0] cpu_0_0_outgoing_master_limiter_rsp_src_data;                               // cpu_0_0_outgoing_master_limiter:rsp_src_data -> cpu_0_0_outgoing_master_agent:rp_data
	wire          cpu_0_0_outgoing_master_limiter_rsp_src_ready;                              // cpu_0_0_outgoing_master_agent:rp_ready -> cpu_0_0_outgoing_master_limiter:rsp_src_ready
	wire    [5:0] cpu_0_0_outgoing_master_limiter_rsp_src_channel;                            // cpu_0_0_outgoing_master_limiter:rsp_src_channel -> cpu_0_0_outgoing_master_agent:rp_channel
	wire          cpu_0_0_outgoing_master_limiter_rsp_src_startofpacket;                      // cpu_0_0_outgoing_master_limiter:rsp_src_startofpacket -> cpu_0_0_outgoing_master_agent:rp_startofpacket
	wire          cpu_0_0_outgoing_master_limiter_rsp_src_endofpacket;                        // cpu_0_0_outgoing_master_limiter:rsp_src_endofpacket -> cpu_0_0_outgoing_master_agent:rp_endofpacket
	wire          router_002_src_valid;                                                       // router_002:src_valid -> shared_PIO_avalon_slave_0_rsp_width_adapter:in_valid
	wire   [74:0] router_002_src_data;                                                        // router_002:src_data -> shared_PIO_avalon_slave_0_rsp_width_adapter:in_data
	wire          router_002_src_ready;                                                       // shared_PIO_avalon_slave_0_rsp_width_adapter:in_ready -> router_002:src_ready
	wire    [5:0] router_002_src_channel;                                                     // router_002:src_channel -> shared_PIO_avalon_slave_0_rsp_width_adapter:in_channel
	wire          router_002_src_startofpacket;                                               // router_002:src_startofpacket -> shared_PIO_avalon_slave_0_rsp_width_adapter:in_startofpacket
	wire          router_002_src_endofpacket;                                                 // router_002:src_endofpacket -> shared_PIO_avalon_slave_0_rsp_width_adapter:in_endofpacket
	wire          shared_pio_avalon_slave_0_rsp_width_adapter_src_valid;                      // shared_PIO_avalon_slave_0_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [101:0] shared_pio_avalon_slave_0_rsp_width_adapter_src_data;                       // shared_PIO_avalon_slave_0_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          shared_pio_avalon_slave_0_rsp_width_adapter_src_ready;                      // rsp_demux:sink_ready -> shared_PIO_avalon_slave_0_rsp_width_adapter:out_ready
	wire    [5:0] shared_pio_avalon_slave_0_rsp_width_adapter_src_channel;                    // shared_PIO_avalon_slave_0_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          shared_pio_avalon_slave_0_rsp_width_adapter_src_startofpacket;              // shared_PIO_avalon_slave_0_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          shared_pio_avalon_slave_0_rsp_width_adapter_src_endofpacket;                // shared_PIO_avalon_slave_0_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_005_src_valid;                                                       // router_005:src_valid -> sdram_controller_s1_rsp_width_adapter:in_valid
	wire   [83:0] router_005_src_data;                                                        // router_005:src_data -> sdram_controller_s1_rsp_width_adapter:in_data
	wire          router_005_src_ready;                                                       // sdram_controller_s1_rsp_width_adapter:in_ready -> router_005:src_ready
	wire    [5:0] router_005_src_channel;                                                     // router_005:src_channel -> sdram_controller_s1_rsp_width_adapter:in_channel
	wire          router_005_src_startofpacket;                                               // router_005:src_startofpacket -> sdram_controller_s1_rsp_width_adapter:in_startofpacket
	wire          router_005_src_endofpacket;                                                 // router_005:src_endofpacket -> sdram_controller_s1_rsp_width_adapter:in_endofpacket
	wire          sdram_controller_s1_rsp_width_adapter_src_valid;                            // sdram_controller_s1_rsp_width_adapter:out_valid -> rsp_demux_003:sink_valid
	wire  [101:0] sdram_controller_s1_rsp_width_adapter_src_data;                             // sdram_controller_s1_rsp_width_adapter:out_data -> rsp_demux_003:sink_data
	wire          sdram_controller_s1_rsp_width_adapter_src_ready;                            // rsp_demux_003:sink_ready -> sdram_controller_s1_rsp_width_adapter:out_ready
	wire    [5:0] sdram_controller_s1_rsp_width_adapter_src_channel;                          // sdram_controller_s1_rsp_width_adapter:out_channel -> rsp_demux_003:sink_channel
	wire          sdram_controller_s1_rsp_width_adapter_src_startofpacket;                    // sdram_controller_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          sdram_controller_s1_rsp_width_adapter_src_endofpacket;                      // sdram_controller_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          cmd_mux_src_valid;                                                          // cmd_mux:src_valid -> shared_PIO_avalon_slave_0_cmd_width_adapter:in_valid
	wire  [101:0] cmd_mux_src_data;                                                           // cmd_mux:src_data -> shared_PIO_avalon_slave_0_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                          // shared_PIO_avalon_slave_0_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire    [5:0] cmd_mux_src_channel;                                                        // cmd_mux:src_channel -> shared_PIO_avalon_slave_0_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                                  // cmd_mux:src_startofpacket -> shared_PIO_avalon_slave_0_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                                    // cmd_mux:src_endofpacket -> shared_PIO_avalon_slave_0_cmd_width_adapter:in_endofpacket
	wire          shared_pio_avalon_slave_0_cmd_width_adapter_src_valid;                      // shared_PIO_avalon_slave_0_cmd_width_adapter:out_valid -> shared_PIO_avalon_slave_0_burst_adapter:sink0_valid
	wire   [74:0] shared_pio_avalon_slave_0_cmd_width_adapter_src_data;                       // shared_PIO_avalon_slave_0_cmd_width_adapter:out_data -> shared_PIO_avalon_slave_0_burst_adapter:sink0_data
	wire          shared_pio_avalon_slave_0_cmd_width_adapter_src_ready;                      // shared_PIO_avalon_slave_0_burst_adapter:sink0_ready -> shared_PIO_avalon_slave_0_cmd_width_adapter:out_ready
	wire    [5:0] shared_pio_avalon_slave_0_cmd_width_adapter_src_channel;                    // shared_PIO_avalon_slave_0_cmd_width_adapter:out_channel -> shared_PIO_avalon_slave_0_burst_adapter:sink0_channel
	wire          shared_pio_avalon_slave_0_cmd_width_adapter_src_startofpacket;              // shared_PIO_avalon_slave_0_cmd_width_adapter:out_startofpacket -> shared_PIO_avalon_slave_0_burst_adapter:sink0_startofpacket
	wire          shared_pio_avalon_slave_0_cmd_width_adapter_src_endofpacket;                // shared_PIO_avalon_slave_0_cmd_width_adapter:out_endofpacket -> shared_PIO_avalon_slave_0_burst_adapter:sink0_endofpacket
	wire          cmd_mux_003_src_valid;                                                      // cmd_mux_003:src_valid -> sdram_controller_s1_cmd_width_adapter:in_valid
	wire  [101:0] cmd_mux_003_src_data;                                                       // cmd_mux_003:src_data -> sdram_controller_s1_cmd_width_adapter:in_data
	wire          cmd_mux_003_src_ready;                                                      // sdram_controller_s1_cmd_width_adapter:in_ready -> cmd_mux_003:src_ready
	wire    [5:0] cmd_mux_003_src_channel;                                                    // cmd_mux_003:src_channel -> sdram_controller_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_003_src_startofpacket;                                              // cmd_mux_003:src_startofpacket -> sdram_controller_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                // cmd_mux_003:src_endofpacket -> sdram_controller_s1_cmd_width_adapter:in_endofpacket
	wire          sdram_controller_s1_cmd_width_adapter_src_valid;                            // sdram_controller_s1_cmd_width_adapter:out_valid -> sdram_controller_s1_burst_adapter:sink0_valid
	wire   [83:0] sdram_controller_s1_cmd_width_adapter_src_data;                             // sdram_controller_s1_cmd_width_adapter:out_data -> sdram_controller_s1_burst_adapter:sink0_data
	wire          sdram_controller_s1_cmd_width_adapter_src_ready;                            // sdram_controller_s1_burst_adapter:sink0_ready -> sdram_controller_s1_cmd_width_adapter:out_ready
	wire    [5:0] sdram_controller_s1_cmd_width_adapter_src_channel;                          // sdram_controller_s1_cmd_width_adapter:out_channel -> sdram_controller_s1_burst_adapter:sink0_channel
	wire          sdram_controller_s1_cmd_width_adapter_src_startofpacket;                    // sdram_controller_s1_cmd_width_adapter:out_startofpacket -> sdram_controller_s1_burst_adapter:sink0_startofpacket
	wire          sdram_controller_s1_cmd_width_adapter_src_endofpacket;                      // sdram_controller_s1_cmd_width_adapter:out_endofpacket -> sdram_controller_s1_burst_adapter:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                       // cmd_demux:src2_valid -> crosser:in_valid
	wire  [101:0] cmd_demux_src2_data;                                                        // cmd_demux:src2_data -> crosser:in_data
	wire          cmd_demux_src2_ready;                                                       // crosser:in_ready -> cmd_demux:src2_ready
	wire    [5:0] cmd_demux_src2_channel;                                                     // cmd_demux:src2_channel -> crosser:in_channel
	wire          cmd_demux_src2_startofpacket;                                               // cmd_demux:src2_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                 // cmd_demux:src2_endofpacket -> crosser:in_endofpacket
	wire          cmd_demux_src3_valid;                                                       // cmd_demux:src3_valid -> crosser_001:in_valid
	wire  [101:0] cmd_demux_src3_data;                                                        // cmd_demux:src3_data -> crosser_001:in_data
	wire          cmd_demux_src3_ready;                                                       // crosser_001:in_ready -> cmd_demux:src3_ready
	wire    [5:0] cmd_demux_src3_channel;                                                     // cmd_demux:src3_channel -> crosser_001:in_channel
	wire          cmd_demux_src3_startofpacket;                                               // cmd_demux:src3_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                 // cmd_demux:src3_endofpacket -> crosser_001:in_endofpacket
	wire          cmd_demux_001_src1_valid;                                                   // cmd_demux_001:src1_valid -> crosser_002:in_valid
	wire  [101:0] cmd_demux_001_src1_data;                                                    // cmd_demux_001:src1_data -> crosser_002:in_data
	wire          cmd_demux_001_src1_ready;                                                   // crosser_002:in_ready -> cmd_demux_001:src1_ready
	wire    [5:0] cmd_demux_001_src1_channel;                                                 // cmd_demux_001:src1_channel -> crosser_002:in_channel
	wire          cmd_demux_001_src1_startofpacket;                                           // cmd_demux_001:src1_startofpacket -> crosser_002:in_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                             // cmd_demux_001:src1_endofpacket -> crosser_002:in_endofpacket
	wire          cmd_demux_001_src2_valid;                                                   // cmd_demux_001:src2_valid -> crosser_003:in_valid
	wire  [101:0] cmd_demux_001_src2_data;                                                    // cmd_demux_001:src2_data -> crosser_003:in_data
	wire          cmd_demux_001_src2_ready;                                                   // crosser_003:in_ready -> cmd_demux_001:src2_ready
	wire    [5:0] cmd_demux_001_src2_channel;                                                 // cmd_demux_001:src2_channel -> crosser_003:in_channel
	wire          cmd_demux_001_src2_startofpacket;                                           // cmd_demux_001:src2_startofpacket -> crosser_003:in_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                             // cmd_demux_001:src2_endofpacket -> crosser_003:in_endofpacket
	wire          rsp_demux_002_src0_valid;                                                   // rsp_demux_002:src0_valid -> crosser_004:in_valid
	wire  [101:0] rsp_demux_002_src0_data;                                                    // rsp_demux_002:src0_data -> crosser_004:in_data
	wire          rsp_demux_002_src0_ready;                                                   // crosser_004:in_ready -> rsp_demux_002:src0_ready
	wire    [5:0] rsp_demux_002_src0_channel;                                                 // rsp_demux_002:src0_channel -> crosser_004:in_channel
	wire          rsp_demux_002_src0_startofpacket;                                           // rsp_demux_002:src0_startofpacket -> crosser_004:in_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                             // rsp_demux_002:src0_endofpacket -> crosser_004:in_endofpacket
	wire          rsp_demux_002_src1_valid;                                                   // rsp_demux_002:src1_valid -> crosser_005:in_valid
	wire  [101:0] rsp_demux_002_src1_data;                                                    // rsp_demux_002:src1_data -> crosser_005:in_data
	wire          rsp_demux_002_src1_ready;                                                   // crosser_005:in_ready -> rsp_demux_002:src1_ready
	wire    [5:0] rsp_demux_002_src1_channel;                                                 // rsp_demux_002:src1_channel -> crosser_005:in_channel
	wire          rsp_demux_002_src1_startofpacket;                                           // rsp_demux_002:src1_startofpacket -> crosser_005:in_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                             // rsp_demux_002:src1_endofpacket -> crosser_005:in_endofpacket
	wire          rsp_demux_003_src0_valid;                                                   // rsp_demux_003:src0_valid -> crosser_006:in_valid
	wire  [101:0] rsp_demux_003_src0_data;                                                    // rsp_demux_003:src0_data -> crosser_006:in_data
	wire          rsp_demux_003_src0_ready;                                                   // crosser_006:in_ready -> rsp_demux_003:src0_ready
	wire    [5:0] rsp_demux_003_src0_channel;                                                 // rsp_demux_003:src0_channel -> crosser_006:in_channel
	wire          rsp_demux_003_src0_startofpacket;                                           // rsp_demux_003:src0_startofpacket -> crosser_006:in_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                             // rsp_demux_003:src0_endofpacket -> crosser_006:in_endofpacket
	wire          rsp_demux_003_src1_valid;                                                   // rsp_demux_003:src1_valid -> crosser_007:in_valid
	wire  [101:0] rsp_demux_003_src1_data;                                                    // rsp_demux_003:src1_data -> crosser_007:in_data
	wire          rsp_demux_003_src1_ready;                                                   // crosser_007:in_ready -> rsp_demux_003:src1_ready
	wire    [5:0] rsp_demux_003_src1_channel;                                                 // rsp_demux_003:src1_channel -> crosser_007:in_channel
	wire          rsp_demux_003_src1_startofpacket;                                           // rsp_demux_003:src1_startofpacket -> crosser_007:in_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                             // rsp_demux_003:src1_endofpacket -> crosser_007:in_endofpacket
	wire    [0:0] cpu_1_0_mm_bridge_1_m0_limiter_cmd_src_valid;                               // cpu_1_0_mm_bridge_1_m0_limiter:cmd_src_valid -> limiter_pipeline:in_valid
	wire  [101:0] cpu_1_0_mm_bridge_1_m0_limiter_cmd_src_data;                                // cpu_1_0_mm_bridge_1_m0_limiter:cmd_src_data -> limiter_pipeline:in_data
	wire          cpu_1_0_mm_bridge_1_m0_limiter_cmd_src_ready;                               // limiter_pipeline:in_ready -> cpu_1_0_mm_bridge_1_m0_limiter:cmd_src_ready
	wire    [5:0] cpu_1_0_mm_bridge_1_m0_limiter_cmd_src_channel;                             // cpu_1_0_mm_bridge_1_m0_limiter:cmd_src_channel -> limiter_pipeline:in_channel
	wire          cpu_1_0_mm_bridge_1_m0_limiter_cmd_src_startofpacket;                       // cpu_1_0_mm_bridge_1_m0_limiter:cmd_src_startofpacket -> limiter_pipeline:in_startofpacket
	wire          cpu_1_0_mm_bridge_1_m0_limiter_cmd_src_endofpacket;                         // cpu_1_0_mm_bridge_1_m0_limiter:cmd_src_endofpacket -> limiter_pipeline:in_endofpacket
	wire          limiter_pipeline_source0_valid;                                             // limiter_pipeline:out_valid -> cmd_demux:sink_valid
	wire  [101:0] limiter_pipeline_source0_data;                                              // limiter_pipeline:out_data -> cmd_demux:sink_data
	wire          limiter_pipeline_source0_ready;                                             // cmd_demux:sink_ready -> limiter_pipeline:out_ready
	wire    [5:0] limiter_pipeline_source0_channel;                                           // limiter_pipeline:out_channel -> cmd_demux:sink_channel
	wire          limiter_pipeline_source0_startofpacket;                                     // limiter_pipeline:out_startofpacket -> cmd_demux:sink_startofpacket
	wire          limiter_pipeline_source0_endofpacket;                                       // limiter_pipeline:out_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                          // rsp_mux:src_valid -> limiter_pipeline_001:in_valid
	wire  [101:0] rsp_mux_src_data;                                                           // rsp_mux:src_data -> limiter_pipeline_001:in_data
	wire          rsp_mux_src_ready;                                                          // limiter_pipeline_001:in_ready -> rsp_mux:src_ready
	wire    [5:0] rsp_mux_src_channel;                                                        // rsp_mux:src_channel -> limiter_pipeline_001:in_channel
	wire          rsp_mux_src_startofpacket;                                                  // rsp_mux:src_startofpacket -> limiter_pipeline_001:in_startofpacket
	wire          rsp_mux_src_endofpacket;                                                    // rsp_mux:src_endofpacket -> limiter_pipeline_001:in_endofpacket
	wire          limiter_pipeline_001_source0_valid;                                         // limiter_pipeline_001:out_valid -> cpu_1_0_mm_bridge_1_m0_limiter:rsp_sink_valid
	wire  [101:0] limiter_pipeline_001_source0_data;                                          // limiter_pipeline_001:out_data -> cpu_1_0_mm_bridge_1_m0_limiter:rsp_sink_data
	wire          limiter_pipeline_001_source0_ready;                                         // cpu_1_0_mm_bridge_1_m0_limiter:rsp_sink_ready -> limiter_pipeline_001:out_ready
	wire    [5:0] limiter_pipeline_001_source0_channel;                                       // limiter_pipeline_001:out_channel -> cpu_1_0_mm_bridge_1_m0_limiter:rsp_sink_channel
	wire          limiter_pipeline_001_source0_startofpacket;                                 // limiter_pipeline_001:out_startofpacket -> cpu_1_0_mm_bridge_1_m0_limiter:rsp_sink_startofpacket
	wire          limiter_pipeline_001_source0_endofpacket;                                   // limiter_pipeline_001:out_endofpacket -> cpu_1_0_mm_bridge_1_m0_limiter:rsp_sink_endofpacket
	wire    [0:0] cpu_0_0_outgoing_master_limiter_cmd_src_valid;                              // cpu_0_0_outgoing_master_limiter:cmd_src_valid -> limiter_pipeline_002:in_valid
	wire  [101:0] cpu_0_0_outgoing_master_limiter_cmd_src_data;                               // cpu_0_0_outgoing_master_limiter:cmd_src_data -> limiter_pipeline_002:in_data
	wire          cpu_0_0_outgoing_master_limiter_cmd_src_ready;                              // limiter_pipeline_002:in_ready -> cpu_0_0_outgoing_master_limiter:cmd_src_ready
	wire    [5:0] cpu_0_0_outgoing_master_limiter_cmd_src_channel;                            // cpu_0_0_outgoing_master_limiter:cmd_src_channel -> limiter_pipeline_002:in_channel
	wire          cpu_0_0_outgoing_master_limiter_cmd_src_startofpacket;                      // cpu_0_0_outgoing_master_limiter:cmd_src_startofpacket -> limiter_pipeline_002:in_startofpacket
	wire          cpu_0_0_outgoing_master_limiter_cmd_src_endofpacket;                        // cpu_0_0_outgoing_master_limiter:cmd_src_endofpacket -> limiter_pipeline_002:in_endofpacket
	wire          limiter_pipeline_002_source0_valid;                                         // limiter_pipeline_002:out_valid -> cmd_demux_001:sink_valid
	wire  [101:0] limiter_pipeline_002_source0_data;                                          // limiter_pipeline_002:out_data -> cmd_demux_001:sink_data
	wire          limiter_pipeline_002_source0_ready;                                         // cmd_demux_001:sink_ready -> limiter_pipeline_002:out_ready
	wire    [5:0] limiter_pipeline_002_source0_channel;                                       // limiter_pipeline_002:out_channel -> cmd_demux_001:sink_channel
	wire          limiter_pipeline_002_source0_startofpacket;                                 // limiter_pipeline_002:out_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          limiter_pipeline_002_source0_endofpacket;                                   // limiter_pipeline_002:out_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                      // rsp_mux_001:src_valid -> limiter_pipeline_003:in_valid
	wire  [101:0] rsp_mux_001_src_data;                                                       // rsp_mux_001:src_data -> limiter_pipeline_003:in_data
	wire          rsp_mux_001_src_ready;                                                      // limiter_pipeline_003:in_ready -> rsp_mux_001:src_ready
	wire    [5:0] rsp_mux_001_src_channel;                                                    // rsp_mux_001:src_channel -> limiter_pipeline_003:in_channel
	wire          rsp_mux_001_src_startofpacket;                                              // rsp_mux_001:src_startofpacket -> limiter_pipeline_003:in_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                // rsp_mux_001:src_endofpacket -> limiter_pipeline_003:in_endofpacket
	wire          limiter_pipeline_003_source0_valid;                                         // limiter_pipeline_003:out_valid -> cpu_0_0_outgoing_master_limiter:rsp_sink_valid
	wire  [101:0] limiter_pipeline_003_source0_data;                                          // limiter_pipeline_003:out_data -> cpu_0_0_outgoing_master_limiter:rsp_sink_data
	wire          limiter_pipeline_003_source0_ready;                                         // cpu_0_0_outgoing_master_limiter:rsp_sink_ready -> limiter_pipeline_003:out_ready
	wire    [5:0] limiter_pipeline_003_source0_channel;                                       // limiter_pipeline_003:out_channel -> cpu_0_0_outgoing_master_limiter:rsp_sink_channel
	wire          limiter_pipeline_003_source0_startofpacket;                                 // limiter_pipeline_003:out_startofpacket -> cpu_0_0_outgoing_master_limiter:rsp_sink_startofpacket
	wire          limiter_pipeline_003_source0_endofpacket;                                   // limiter_pipeline_003:out_endofpacket -> cpu_0_0_outgoing_master_limiter:rsp_sink_endofpacket
	wire          shared_pio_avalon_slave_0_burst_adapter_source0_valid;                      // shared_PIO_avalon_slave_0_burst_adapter:source0_valid -> agent_pipeline:in_valid
	wire   [74:0] shared_pio_avalon_slave_0_burst_adapter_source0_data;                       // shared_PIO_avalon_slave_0_burst_adapter:source0_data -> agent_pipeline:in_data
	wire          shared_pio_avalon_slave_0_burst_adapter_source0_ready;                      // agent_pipeline:in_ready -> shared_PIO_avalon_slave_0_burst_adapter:source0_ready
	wire    [5:0] shared_pio_avalon_slave_0_burst_adapter_source0_channel;                    // shared_PIO_avalon_slave_0_burst_adapter:source0_channel -> agent_pipeline:in_channel
	wire          shared_pio_avalon_slave_0_burst_adapter_source0_startofpacket;              // shared_PIO_avalon_slave_0_burst_adapter:source0_startofpacket -> agent_pipeline:in_startofpacket
	wire          shared_pio_avalon_slave_0_burst_adapter_source0_endofpacket;                // shared_PIO_avalon_slave_0_burst_adapter:source0_endofpacket -> agent_pipeline:in_endofpacket
	wire          agent_pipeline_source0_valid;                                               // agent_pipeline:out_valid -> shared_PIO_avalon_slave_0_agent:cp_valid
	wire   [74:0] agent_pipeline_source0_data;                                                // agent_pipeline:out_data -> shared_PIO_avalon_slave_0_agent:cp_data
	wire          agent_pipeline_source0_ready;                                               // shared_PIO_avalon_slave_0_agent:cp_ready -> agent_pipeline:out_ready
	wire    [5:0] agent_pipeline_source0_channel;                                             // agent_pipeline:out_channel -> shared_PIO_avalon_slave_0_agent:cp_channel
	wire          agent_pipeline_source0_startofpacket;                                       // agent_pipeline:out_startofpacket -> shared_PIO_avalon_slave_0_agent:cp_startofpacket
	wire          agent_pipeline_source0_endofpacket;                                         // agent_pipeline:out_endofpacket -> shared_PIO_avalon_slave_0_agent:cp_endofpacket
	wire          shared_pio_avalon_slave_0_agent_rp_valid;                                   // shared_PIO_avalon_slave_0_agent:rp_valid -> agent_pipeline_001:in_valid
	wire   [74:0] shared_pio_avalon_slave_0_agent_rp_data;                                    // shared_PIO_avalon_slave_0_agent:rp_data -> agent_pipeline_001:in_data
	wire          shared_pio_avalon_slave_0_agent_rp_ready;                                   // agent_pipeline_001:in_ready -> shared_PIO_avalon_slave_0_agent:rp_ready
	wire          shared_pio_avalon_slave_0_agent_rp_startofpacket;                           // shared_PIO_avalon_slave_0_agent:rp_startofpacket -> agent_pipeline_001:in_startofpacket
	wire          shared_pio_avalon_slave_0_agent_rp_endofpacket;                             // shared_PIO_avalon_slave_0_agent:rp_endofpacket -> agent_pipeline_001:in_endofpacket
	wire          agent_pipeline_001_source0_valid;                                           // agent_pipeline_001:out_valid -> router_002:sink_valid
	wire   [74:0] agent_pipeline_001_source0_data;                                            // agent_pipeline_001:out_data -> router_002:sink_data
	wire          agent_pipeline_001_source0_ready;                                           // router_002:sink_ready -> agent_pipeline_001:out_ready
	wire          agent_pipeline_001_source0_startofpacket;                                   // agent_pipeline_001:out_startofpacket -> router_002:sink_startofpacket
	wire          agent_pipeline_001_source0_endofpacket;                                     // agent_pipeline_001:out_endofpacket -> router_002:sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                      // cmd_mux_001:src_valid -> agent_pipeline_002:in_valid
	wire  [101:0] cmd_mux_001_src_data;                                                       // cmd_mux_001:src_data -> agent_pipeline_002:in_data
	wire          cmd_mux_001_src_ready;                                                      // agent_pipeline_002:in_ready -> cmd_mux_001:src_ready
	wire    [5:0] cmd_mux_001_src_channel;                                                    // cmd_mux_001:src_channel -> agent_pipeline_002:in_channel
	wire          cmd_mux_001_src_startofpacket;                                              // cmd_mux_001:src_startofpacket -> agent_pipeline_002:in_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                // cmd_mux_001:src_endofpacket -> agent_pipeline_002:in_endofpacket
	wire          agent_pipeline_002_source0_valid;                                           // agent_pipeline_002:out_valid -> shared_mailbox_avmm_msg_receiver_agent:cp_valid
	wire  [101:0] agent_pipeline_002_source0_data;                                            // agent_pipeline_002:out_data -> shared_mailbox_avmm_msg_receiver_agent:cp_data
	wire          agent_pipeline_002_source0_ready;                                           // shared_mailbox_avmm_msg_receiver_agent:cp_ready -> agent_pipeline_002:out_ready
	wire    [5:0] agent_pipeline_002_source0_channel;                                         // agent_pipeline_002:out_channel -> shared_mailbox_avmm_msg_receiver_agent:cp_channel
	wire          agent_pipeline_002_source0_startofpacket;                                   // agent_pipeline_002:out_startofpacket -> shared_mailbox_avmm_msg_receiver_agent:cp_startofpacket
	wire          agent_pipeline_002_source0_endofpacket;                                     // agent_pipeline_002:out_endofpacket -> shared_mailbox_avmm_msg_receiver_agent:cp_endofpacket
	wire          shared_mailbox_avmm_msg_receiver_agent_rp_valid;                            // shared_mailbox_avmm_msg_receiver_agent:rp_valid -> agent_pipeline_003:in_valid
	wire  [101:0] shared_mailbox_avmm_msg_receiver_agent_rp_data;                             // shared_mailbox_avmm_msg_receiver_agent:rp_data -> agent_pipeline_003:in_data
	wire          shared_mailbox_avmm_msg_receiver_agent_rp_ready;                            // agent_pipeline_003:in_ready -> shared_mailbox_avmm_msg_receiver_agent:rp_ready
	wire          shared_mailbox_avmm_msg_receiver_agent_rp_startofpacket;                    // shared_mailbox_avmm_msg_receiver_agent:rp_startofpacket -> agent_pipeline_003:in_startofpacket
	wire          shared_mailbox_avmm_msg_receiver_agent_rp_endofpacket;                      // shared_mailbox_avmm_msg_receiver_agent:rp_endofpacket -> agent_pipeline_003:in_endofpacket
	wire          agent_pipeline_003_source0_valid;                                           // agent_pipeline_003:out_valid -> router_003:sink_valid
	wire  [101:0] agent_pipeline_003_source0_data;                                            // agent_pipeline_003:out_data -> router_003:sink_data
	wire          agent_pipeline_003_source0_ready;                                           // router_003:sink_ready -> agent_pipeline_003:out_ready
	wire          agent_pipeline_003_source0_startofpacket;                                   // agent_pipeline_003:out_startofpacket -> router_003:sink_startofpacket
	wire          agent_pipeline_003_source0_endofpacket;                                     // agent_pipeline_003:out_endofpacket -> router_003:sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                      // cmd_mux_002:src_valid -> agent_pipeline_004:in_valid
	wire  [101:0] cmd_mux_002_src_data;                                                       // cmd_mux_002:src_data -> agent_pipeline_004:in_data
	wire          cmd_mux_002_src_ready;                                                      // agent_pipeline_004:in_ready -> cmd_mux_002:src_ready
	wire    [5:0] cmd_mux_002_src_channel;                                                    // cmd_mux_002:src_channel -> agent_pipeline_004:in_channel
	wire          cmd_mux_002_src_startofpacket;                                              // cmd_mux_002:src_startofpacket -> agent_pipeline_004:in_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                // cmd_mux_002:src_endofpacket -> agent_pipeline_004:in_endofpacket
	wire          agent_pipeline_004_source0_valid;                                           // agent_pipeline_004:out_valid -> sysid_control_slave_agent:cp_valid
	wire  [101:0] agent_pipeline_004_source0_data;                                            // agent_pipeline_004:out_data -> sysid_control_slave_agent:cp_data
	wire          agent_pipeline_004_source0_ready;                                           // sysid_control_slave_agent:cp_ready -> agent_pipeline_004:out_ready
	wire    [5:0] agent_pipeline_004_source0_channel;                                         // agent_pipeline_004:out_channel -> sysid_control_slave_agent:cp_channel
	wire          agent_pipeline_004_source0_startofpacket;                                   // agent_pipeline_004:out_startofpacket -> sysid_control_slave_agent:cp_startofpacket
	wire          agent_pipeline_004_source0_endofpacket;                                     // agent_pipeline_004:out_endofpacket -> sysid_control_slave_agent:cp_endofpacket
	wire          sysid_control_slave_agent_rp_valid;                                         // sysid_control_slave_agent:rp_valid -> agent_pipeline_005:in_valid
	wire  [101:0] sysid_control_slave_agent_rp_data;                                          // sysid_control_slave_agent:rp_data -> agent_pipeline_005:in_data
	wire          sysid_control_slave_agent_rp_ready;                                         // agent_pipeline_005:in_ready -> sysid_control_slave_agent:rp_ready
	wire          sysid_control_slave_agent_rp_startofpacket;                                 // sysid_control_slave_agent:rp_startofpacket -> agent_pipeline_005:in_startofpacket
	wire          sysid_control_slave_agent_rp_endofpacket;                                   // sysid_control_slave_agent:rp_endofpacket -> agent_pipeline_005:in_endofpacket
	wire          agent_pipeline_005_source0_valid;                                           // agent_pipeline_005:out_valid -> router_004:sink_valid
	wire  [101:0] agent_pipeline_005_source0_data;                                            // agent_pipeline_005:out_data -> router_004:sink_data
	wire          agent_pipeline_005_source0_ready;                                           // router_004:sink_ready -> agent_pipeline_005:out_ready
	wire          agent_pipeline_005_source0_startofpacket;                                   // agent_pipeline_005:out_startofpacket -> router_004:sink_startofpacket
	wire          agent_pipeline_005_source0_endofpacket;                                     // agent_pipeline_005:out_endofpacket -> router_004:sink_endofpacket
	wire          sdram_controller_s1_burst_adapter_source0_valid;                            // sdram_controller_s1_burst_adapter:source0_valid -> agent_pipeline_006:in_valid
	wire   [83:0] sdram_controller_s1_burst_adapter_source0_data;                             // sdram_controller_s1_burst_adapter:source0_data -> agent_pipeline_006:in_data
	wire          sdram_controller_s1_burst_adapter_source0_ready;                            // agent_pipeline_006:in_ready -> sdram_controller_s1_burst_adapter:source0_ready
	wire    [5:0] sdram_controller_s1_burst_adapter_source0_channel;                          // sdram_controller_s1_burst_adapter:source0_channel -> agent_pipeline_006:in_channel
	wire          sdram_controller_s1_burst_adapter_source0_startofpacket;                    // sdram_controller_s1_burst_adapter:source0_startofpacket -> agent_pipeline_006:in_startofpacket
	wire          sdram_controller_s1_burst_adapter_source0_endofpacket;                      // sdram_controller_s1_burst_adapter:source0_endofpacket -> agent_pipeline_006:in_endofpacket
	wire          agent_pipeline_006_source0_valid;                                           // agent_pipeline_006:out_valid -> sdram_controller_s1_agent:cp_valid
	wire   [83:0] agent_pipeline_006_source0_data;                                            // agent_pipeline_006:out_data -> sdram_controller_s1_agent:cp_data
	wire          agent_pipeline_006_source0_ready;                                           // sdram_controller_s1_agent:cp_ready -> agent_pipeline_006:out_ready
	wire    [5:0] agent_pipeline_006_source0_channel;                                         // agent_pipeline_006:out_channel -> sdram_controller_s1_agent:cp_channel
	wire          agent_pipeline_006_source0_startofpacket;                                   // agent_pipeline_006:out_startofpacket -> sdram_controller_s1_agent:cp_startofpacket
	wire          agent_pipeline_006_source0_endofpacket;                                     // agent_pipeline_006:out_endofpacket -> sdram_controller_s1_agent:cp_endofpacket
	wire          sdram_controller_s1_agent_rp_valid;                                         // sdram_controller_s1_agent:rp_valid -> agent_pipeline_007:in_valid
	wire   [83:0] sdram_controller_s1_agent_rp_data;                                          // sdram_controller_s1_agent:rp_data -> agent_pipeline_007:in_data
	wire          sdram_controller_s1_agent_rp_ready;                                         // agent_pipeline_007:in_ready -> sdram_controller_s1_agent:rp_ready
	wire          sdram_controller_s1_agent_rp_startofpacket;                                 // sdram_controller_s1_agent:rp_startofpacket -> agent_pipeline_007:in_startofpacket
	wire          sdram_controller_s1_agent_rp_endofpacket;                                   // sdram_controller_s1_agent:rp_endofpacket -> agent_pipeline_007:in_endofpacket
	wire          agent_pipeline_007_source0_valid;                                           // agent_pipeline_007:out_valid -> router_005:sink_valid
	wire   [83:0] agent_pipeline_007_source0_data;                                            // agent_pipeline_007:out_data -> router_005:sink_data
	wire          agent_pipeline_007_source0_ready;                                           // router_005:sink_ready -> agent_pipeline_007:out_ready
	wire          agent_pipeline_007_source0_startofpacket;                                   // agent_pipeline_007:out_startofpacket -> router_005:sink_startofpacket
	wire          agent_pipeline_007_source0_endofpacket;                                     // agent_pipeline_007:out_endofpacket -> router_005:sink_endofpacket
	wire          cmd_mux_004_src_valid;                                                      // cmd_mux_004:src_valid -> agent_pipeline_008:in_valid
	wire  [101:0] cmd_mux_004_src_data;                                                       // cmd_mux_004:src_data -> agent_pipeline_008:in_data
	wire          cmd_mux_004_src_ready;                                                      // agent_pipeline_008:in_ready -> cmd_mux_004:src_ready
	wire    [5:0] cmd_mux_004_src_channel;                                                    // cmd_mux_004:src_channel -> agent_pipeline_008:in_channel
	wire          cmd_mux_004_src_startofpacket;                                              // cmd_mux_004:src_startofpacket -> agent_pipeline_008:in_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                // cmd_mux_004:src_endofpacket -> agent_pipeline_008:in_endofpacket
	wire          agent_pipeline_008_source0_valid;                                           // agent_pipeline_008:out_valid -> shared_mutex_PIO_s1_agent:cp_valid
	wire  [101:0] agent_pipeline_008_source0_data;                                            // agent_pipeline_008:out_data -> shared_mutex_PIO_s1_agent:cp_data
	wire          agent_pipeline_008_source0_ready;                                           // shared_mutex_PIO_s1_agent:cp_ready -> agent_pipeline_008:out_ready
	wire    [5:0] agent_pipeline_008_source0_channel;                                         // agent_pipeline_008:out_channel -> shared_mutex_PIO_s1_agent:cp_channel
	wire          agent_pipeline_008_source0_startofpacket;                                   // agent_pipeline_008:out_startofpacket -> shared_mutex_PIO_s1_agent:cp_startofpacket
	wire          agent_pipeline_008_source0_endofpacket;                                     // agent_pipeline_008:out_endofpacket -> shared_mutex_PIO_s1_agent:cp_endofpacket
	wire          shared_mutex_pio_s1_agent_rp_valid;                                         // shared_mutex_PIO_s1_agent:rp_valid -> agent_pipeline_009:in_valid
	wire  [101:0] shared_mutex_pio_s1_agent_rp_data;                                          // shared_mutex_PIO_s1_agent:rp_data -> agent_pipeline_009:in_data
	wire          shared_mutex_pio_s1_agent_rp_ready;                                         // agent_pipeline_009:in_ready -> shared_mutex_PIO_s1_agent:rp_ready
	wire          shared_mutex_pio_s1_agent_rp_startofpacket;                                 // shared_mutex_PIO_s1_agent:rp_startofpacket -> agent_pipeline_009:in_startofpacket
	wire          shared_mutex_pio_s1_agent_rp_endofpacket;                                   // shared_mutex_PIO_s1_agent:rp_endofpacket -> agent_pipeline_009:in_endofpacket
	wire          agent_pipeline_009_source0_valid;                                           // agent_pipeline_009:out_valid -> router_006:sink_valid
	wire  [101:0] agent_pipeline_009_source0_data;                                            // agent_pipeline_009:out_data -> router_006:sink_data
	wire          agent_pipeline_009_source0_ready;                                           // router_006:sink_ready -> agent_pipeline_009:out_ready
	wire          agent_pipeline_009_source0_startofpacket;                                   // agent_pipeline_009:out_startofpacket -> router_006:sink_startofpacket
	wire          agent_pipeline_009_source0_endofpacket;                                     // agent_pipeline_009:out_endofpacket -> router_006:sink_endofpacket
	wire          cmd_mux_005_src_valid;                                                      // cmd_mux_005:src_valid -> agent_pipeline_010:in_valid
	wire  [101:0] cmd_mux_005_src_data;                                                       // cmd_mux_005:src_data -> agent_pipeline_010:in_data
	wire          cmd_mux_005_src_ready;                                                      // agent_pipeline_010:in_ready -> cmd_mux_005:src_ready
	wire    [5:0] cmd_mux_005_src_channel;                                                    // cmd_mux_005:src_channel -> agent_pipeline_010:in_channel
	wire          cmd_mux_005_src_startofpacket;                                              // cmd_mux_005:src_startofpacket -> agent_pipeline_010:in_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                // cmd_mux_005:src_endofpacket -> agent_pipeline_010:in_endofpacket
	wire          agent_pipeline_010_source0_valid;                                           // agent_pipeline_010:out_valid -> shared_mailbox_avmm_msg_sender_agent:cp_valid
	wire  [101:0] agent_pipeline_010_source0_data;                                            // agent_pipeline_010:out_data -> shared_mailbox_avmm_msg_sender_agent:cp_data
	wire          agent_pipeline_010_source0_ready;                                           // shared_mailbox_avmm_msg_sender_agent:cp_ready -> agent_pipeline_010:out_ready
	wire    [5:0] agent_pipeline_010_source0_channel;                                         // agent_pipeline_010:out_channel -> shared_mailbox_avmm_msg_sender_agent:cp_channel
	wire          agent_pipeline_010_source0_startofpacket;                                   // agent_pipeline_010:out_startofpacket -> shared_mailbox_avmm_msg_sender_agent:cp_startofpacket
	wire          agent_pipeline_010_source0_endofpacket;                                     // agent_pipeline_010:out_endofpacket -> shared_mailbox_avmm_msg_sender_agent:cp_endofpacket
	wire          shared_mailbox_avmm_msg_sender_agent_rp_valid;                              // shared_mailbox_avmm_msg_sender_agent:rp_valid -> agent_pipeline_011:in_valid
	wire  [101:0] shared_mailbox_avmm_msg_sender_agent_rp_data;                               // shared_mailbox_avmm_msg_sender_agent:rp_data -> agent_pipeline_011:in_data
	wire          shared_mailbox_avmm_msg_sender_agent_rp_ready;                              // agent_pipeline_011:in_ready -> shared_mailbox_avmm_msg_sender_agent:rp_ready
	wire          shared_mailbox_avmm_msg_sender_agent_rp_startofpacket;                      // shared_mailbox_avmm_msg_sender_agent:rp_startofpacket -> agent_pipeline_011:in_startofpacket
	wire          shared_mailbox_avmm_msg_sender_agent_rp_endofpacket;                        // shared_mailbox_avmm_msg_sender_agent:rp_endofpacket -> agent_pipeline_011:in_endofpacket
	wire          agent_pipeline_011_source0_valid;                                           // agent_pipeline_011:out_valid -> router_007:sink_valid
	wire  [101:0] agent_pipeline_011_source0_data;                                            // agent_pipeline_011:out_data -> router_007:sink_data
	wire          agent_pipeline_011_source0_ready;                                           // router_007:sink_ready -> agent_pipeline_011:out_ready
	wire          agent_pipeline_011_source0_startofpacket;                                   // agent_pipeline_011:out_startofpacket -> router_007:sink_startofpacket
	wire          agent_pipeline_011_source0_endofpacket;                                     // agent_pipeline_011:out_endofpacket -> router_007:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                       // cmd_demux:src0_valid -> mux_pipeline:in_valid
	wire  [101:0] cmd_demux_src0_data;                                                        // cmd_demux:src0_data -> mux_pipeline:in_data
	wire          cmd_demux_src0_ready;                                                       // mux_pipeline:in_ready -> cmd_demux:src0_ready
	wire    [5:0] cmd_demux_src0_channel;                                                     // cmd_demux:src0_channel -> mux_pipeline:in_channel
	wire          cmd_demux_src0_startofpacket;                                               // cmd_demux:src0_startofpacket -> mux_pipeline:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                 // cmd_demux:src0_endofpacket -> mux_pipeline:in_endofpacket
	wire          mux_pipeline_source0_valid;                                                 // mux_pipeline:out_valid -> cmd_mux:sink0_valid
	wire  [101:0] mux_pipeline_source0_data;                                                  // mux_pipeline:out_data -> cmd_mux:sink0_data
	wire          mux_pipeline_source0_ready;                                                 // cmd_mux:sink0_ready -> mux_pipeline:out_ready
	wire    [5:0] mux_pipeline_source0_channel;                                               // mux_pipeline:out_channel -> cmd_mux:sink0_channel
	wire          mux_pipeline_source0_startofpacket;                                         // mux_pipeline:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          mux_pipeline_source0_endofpacket;                                           // mux_pipeline:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                   // cmd_demux_001:src0_valid -> mux_pipeline_001:in_valid
	wire  [101:0] cmd_demux_001_src0_data;                                                    // cmd_demux_001:src0_data -> mux_pipeline_001:in_data
	wire          cmd_demux_001_src0_ready;                                                   // mux_pipeline_001:in_ready -> cmd_demux_001:src0_ready
	wire    [5:0] cmd_demux_001_src0_channel;                                                 // cmd_demux_001:src0_channel -> mux_pipeline_001:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                           // cmd_demux_001:src0_startofpacket -> mux_pipeline_001:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                             // cmd_demux_001:src0_endofpacket -> mux_pipeline_001:in_endofpacket
	wire          mux_pipeline_001_source0_valid;                                             // mux_pipeline_001:out_valid -> cmd_mux:sink1_valid
	wire  [101:0] mux_pipeline_001_source0_data;                                              // mux_pipeline_001:out_data -> cmd_mux:sink1_data
	wire          mux_pipeline_001_source0_ready;                                             // cmd_mux:sink1_ready -> mux_pipeline_001:out_ready
	wire    [5:0] mux_pipeline_001_source0_channel;                                           // mux_pipeline_001:out_channel -> cmd_mux:sink1_channel
	wire          mux_pipeline_001_source0_startofpacket;                                     // mux_pipeline_001:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire          mux_pipeline_001_source0_endofpacket;                                       // mux_pipeline_001:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_src1_valid;                                                       // cmd_demux:src1_valid -> mux_pipeline_002:in_valid
	wire  [101:0] cmd_demux_src1_data;                                                        // cmd_demux:src1_data -> mux_pipeline_002:in_data
	wire          cmd_demux_src1_ready;                                                       // mux_pipeline_002:in_ready -> cmd_demux:src1_ready
	wire    [5:0] cmd_demux_src1_channel;                                                     // cmd_demux:src1_channel -> mux_pipeline_002:in_channel
	wire          cmd_demux_src1_startofpacket;                                               // cmd_demux:src1_startofpacket -> mux_pipeline_002:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                 // cmd_demux:src1_endofpacket -> mux_pipeline_002:in_endofpacket
	wire          mux_pipeline_002_source0_valid;                                             // mux_pipeline_002:out_valid -> cmd_mux_001:sink0_valid
	wire  [101:0] mux_pipeline_002_source0_data;                                              // mux_pipeline_002:out_data -> cmd_mux_001:sink0_data
	wire          mux_pipeline_002_source0_ready;                                             // cmd_mux_001:sink0_ready -> mux_pipeline_002:out_ready
	wire    [5:0] mux_pipeline_002_source0_channel;                                           // mux_pipeline_002:out_channel -> cmd_mux_001:sink0_channel
	wire          mux_pipeline_002_source0_startofpacket;                                     // mux_pipeline_002:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          mux_pipeline_002_source0_endofpacket;                                       // mux_pipeline_002:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          crosser_out_valid;                                                          // crosser:out_valid -> mux_pipeline_003:in_valid
	wire  [101:0] crosser_out_data;                                                           // crosser:out_data -> mux_pipeline_003:in_data
	wire          crosser_out_ready;                                                          // mux_pipeline_003:in_ready -> crosser:out_ready
	wire    [5:0] crosser_out_channel;                                                        // crosser:out_channel -> mux_pipeline_003:in_channel
	wire          crosser_out_startofpacket;                                                  // crosser:out_startofpacket -> mux_pipeline_003:in_startofpacket
	wire          crosser_out_endofpacket;                                                    // crosser:out_endofpacket -> mux_pipeline_003:in_endofpacket
	wire          mux_pipeline_003_source0_valid;                                             // mux_pipeline_003:out_valid -> cmd_mux_002:sink0_valid
	wire  [101:0] mux_pipeline_003_source0_data;                                              // mux_pipeline_003:out_data -> cmd_mux_002:sink0_data
	wire          mux_pipeline_003_source0_ready;                                             // cmd_mux_002:sink0_ready -> mux_pipeline_003:out_ready
	wire    [5:0] mux_pipeline_003_source0_channel;                                           // mux_pipeline_003:out_channel -> cmd_mux_002:sink0_channel
	wire          mux_pipeline_003_source0_startofpacket;                                     // mux_pipeline_003:out_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          mux_pipeline_003_source0_endofpacket;                                       // mux_pipeline_003:out_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          crosser_002_out_valid;                                                      // crosser_002:out_valid -> mux_pipeline_004:in_valid
	wire  [101:0] crosser_002_out_data;                                                       // crosser_002:out_data -> mux_pipeline_004:in_data
	wire          crosser_002_out_ready;                                                      // mux_pipeline_004:in_ready -> crosser_002:out_ready
	wire    [5:0] crosser_002_out_channel;                                                    // crosser_002:out_channel -> mux_pipeline_004:in_channel
	wire          crosser_002_out_startofpacket;                                              // crosser_002:out_startofpacket -> mux_pipeline_004:in_startofpacket
	wire          crosser_002_out_endofpacket;                                                // crosser_002:out_endofpacket -> mux_pipeline_004:in_endofpacket
	wire          mux_pipeline_004_source0_valid;                                             // mux_pipeline_004:out_valid -> cmd_mux_002:sink1_valid
	wire  [101:0] mux_pipeline_004_source0_data;                                              // mux_pipeline_004:out_data -> cmd_mux_002:sink1_data
	wire          mux_pipeline_004_source0_ready;                                             // cmd_mux_002:sink1_ready -> mux_pipeline_004:out_ready
	wire    [5:0] mux_pipeline_004_source0_channel;                                           // mux_pipeline_004:out_channel -> cmd_mux_002:sink1_channel
	wire          mux_pipeline_004_source0_startofpacket;                                     // mux_pipeline_004:out_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          mux_pipeline_004_source0_endofpacket;                                       // mux_pipeline_004:out_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          crosser_001_out_valid;                                                      // crosser_001:out_valid -> mux_pipeline_005:in_valid
	wire  [101:0] crosser_001_out_data;                                                       // crosser_001:out_data -> mux_pipeline_005:in_data
	wire          crosser_001_out_ready;                                                      // mux_pipeline_005:in_ready -> crosser_001:out_ready
	wire    [5:0] crosser_001_out_channel;                                                    // crosser_001:out_channel -> mux_pipeline_005:in_channel
	wire          crosser_001_out_startofpacket;                                              // crosser_001:out_startofpacket -> mux_pipeline_005:in_startofpacket
	wire          crosser_001_out_endofpacket;                                                // crosser_001:out_endofpacket -> mux_pipeline_005:in_endofpacket
	wire          mux_pipeline_005_source0_valid;                                             // mux_pipeline_005:out_valid -> cmd_mux_003:sink0_valid
	wire  [101:0] mux_pipeline_005_source0_data;                                              // mux_pipeline_005:out_data -> cmd_mux_003:sink0_data
	wire          mux_pipeline_005_source0_ready;                                             // cmd_mux_003:sink0_ready -> mux_pipeline_005:out_ready
	wire    [5:0] mux_pipeline_005_source0_channel;                                           // mux_pipeline_005:out_channel -> cmd_mux_003:sink0_channel
	wire          mux_pipeline_005_source0_startofpacket;                                     // mux_pipeline_005:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          mux_pipeline_005_source0_endofpacket;                                       // mux_pipeline_005:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          crosser_003_out_valid;                                                      // crosser_003:out_valid -> mux_pipeline_006:in_valid
	wire  [101:0] crosser_003_out_data;                                                       // crosser_003:out_data -> mux_pipeline_006:in_data
	wire          crosser_003_out_ready;                                                      // mux_pipeline_006:in_ready -> crosser_003:out_ready
	wire    [5:0] crosser_003_out_channel;                                                    // crosser_003:out_channel -> mux_pipeline_006:in_channel
	wire          crosser_003_out_startofpacket;                                              // crosser_003:out_startofpacket -> mux_pipeline_006:in_startofpacket
	wire          crosser_003_out_endofpacket;                                                // crosser_003:out_endofpacket -> mux_pipeline_006:in_endofpacket
	wire          mux_pipeline_006_source0_valid;                                             // mux_pipeline_006:out_valid -> cmd_mux_003:sink1_valid
	wire  [101:0] mux_pipeline_006_source0_data;                                              // mux_pipeline_006:out_data -> cmd_mux_003:sink1_data
	wire          mux_pipeline_006_source0_ready;                                             // cmd_mux_003:sink1_ready -> mux_pipeline_006:out_ready
	wire    [5:0] mux_pipeline_006_source0_channel;                                           // mux_pipeline_006:out_channel -> cmd_mux_003:sink1_channel
	wire          mux_pipeline_006_source0_startofpacket;                                     // mux_pipeline_006:out_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          mux_pipeline_006_source0_endofpacket;                                       // mux_pipeline_006:out_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_src4_valid;                                                       // cmd_demux:src4_valid -> mux_pipeline_007:in_valid
	wire  [101:0] cmd_demux_src4_data;                                                        // cmd_demux:src4_data -> mux_pipeline_007:in_data
	wire          cmd_demux_src4_ready;                                                       // mux_pipeline_007:in_ready -> cmd_demux:src4_ready
	wire    [5:0] cmd_demux_src4_channel;                                                     // cmd_demux:src4_channel -> mux_pipeline_007:in_channel
	wire          cmd_demux_src4_startofpacket;                                               // cmd_demux:src4_startofpacket -> mux_pipeline_007:in_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                 // cmd_demux:src4_endofpacket -> mux_pipeline_007:in_endofpacket
	wire          mux_pipeline_007_source0_valid;                                             // mux_pipeline_007:out_valid -> cmd_mux_004:sink0_valid
	wire  [101:0] mux_pipeline_007_source0_data;                                              // mux_pipeline_007:out_data -> cmd_mux_004:sink0_data
	wire          mux_pipeline_007_source0_ready;                                             // cmd_mux_004:sink0_ready -> mux_pipeline_007:out_ready
	wire    [5:0] mux_pipeline_007_source0_channel;                                           // mux_pipeline_007:out_channel -> cmd_mux_004:sink0_channel
	wire          mux_pipeline_007_source0_startofpacket;                                     // mux_pipeline_007:out_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          mux_pipeline_007_source0_endofpacket;                                       // mux_pipeline_007:out_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_001_src3_valid;                                                   // cmd_demux_001:src3_valid -> mux_pipeline_008:in_valid
	wire  [101:0] cmd_demux_001_src3_data;                                                    // cmd_demux_001:src3_data -> mux_pipeline_008:in_data
	wire          cmd_demux_001_src3_ready;                                                   // mux_pipeline_008:in_ready -> cmd_demux_001:src3_ready
	wire    [5:0] cmd_demux_001_src3_channel;                                                 // cmd_demux_001:src3_channel -> mux_pipeline_008:in_channel
	wire          cmd_demux_001_src3_startofpacket;                                           // cmd_demux_001:src3_startofpacket -> mux_pipeline_008:in_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                             // cmd_demux_001:src3_endofpacket -> mux_pipeline_008:in_endofpacket
	wire          mux_pipeline_008_source0_valid;                                             // mux_pipeline_008:out_valid -> cmd_mux_004:sink1_valid
	wire  [101:0] mux_pipeline_008_source0_data;                                              // mux_pipeline_008:out_data -> cmd_mux_004:sink1_data
	wire          mux_pipeline_008_source0_ready;                                             // cmd_mux_004:sink1_ready -> mux_pipeline_008:out_ready
	wire    [5:0] mux_pipeline_008_source0_channel;                                           // mux_pipeline_008:out_channel -> cmd_mux_004:sink1_channel
	wire          mux_pipeline_008_source0_startofpacket;                                     // mux_pipeline_008:out_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          mux_pipeline_008_source0_endofpacket;                                       // mux_pipeline_008:out_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_001_src4_valid;                                                   // cmd_demux_001:src4_valid -> mux_pipeline_009:in_valid
	wire  [101:0] cmd_demux_001_src4_data;                                                    // cmd_demux_001:src4_data -> mux_pipeline_009:in_data
	wire          cmd_demux_001_src4_ready;                                                   // mux_pipeline_009:in_ready -> cmd_demux_001:src4_ready
	wire    [5:0] cmd_demux_001_src4_channel;                                                 // cmd_demux_001:src4_channel -> mux_pipeline_009:in_channel
	wire          cmd_demux_001_src4_startofpacket;                                           // cmd_demux_001:src4_startofpacket -> mux_pipeline_009:in_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                             // cmd_demux_001:src4_endofpacket -> mux_pipeline_009:in_endofpacket
	wire          mux_pipeline_009_source0_valid;                                             // mux_pipeline_009:out_valid -> cmd_mux_005:sink0_valid
	wire  [101:0] mux_pipeline_009_source0_data;                                              // mux_pipeline_009:out_data -> cmd_mux_005:sink0_data
	wire          mux_pipeline_009_source0_ready;                                             // cmd_mux_005:sink0_ready -> mux_pipeline_009:out_ready
	wire    [5:0] mux_pipeline_009_source0_channel;                                           // mux_pipeline_009:out_channel -> cmd_mux_005:sink0_channel
	wire          mux_pipeline_009_source0_startofpacket;                                     // mux_pipeline_009:out_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          mux_pipeline_009_source0_endofpacket;                                       // mux_pipeline_009:out_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                       // rsp_demux:src0_valid -> mux_pipeline_010:in_valid
	wire  [101:0] rsp_demux_src0_data;                                                        // rsp_demux:src0_data -> mux_pipeline_010:in_data
	wire          rsp_demux_src0_ready;                                                       // mux_pipeline_010:in_ready -> rsp_demux:src0_ready
	wire    [5:0] rsp_demux_src0_channel;                                                     // rsp_demux:src0_channel -> mux_pipeline_010:in_channel
	wire          rsp_demux_src0_startofpacket;                                               // rsp_demux:src0_startofpacket -> mux_pipeline_010:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                 // rsp_demux:src0_endofpacket -> mux_pipeline_010:in_endofpacket
	wire          mux_pipeline_010_source0_valid;                                             // mux_pipeline_010:out_valid -> rsp_mux:sink0_valid
	wire  [101:0] mux_pipeline_010_source0_data;                                              // mux_pipeline_010:out_data -> rsp_mux:sink0_data
	wire          mux_pipeline_010_source0_ready;                                             // rsp_mux:sink0_ready -> mux_pipeline_010:out_ready
	wire    [5:0] mux_pipeline_010_source0_channel;                                           // mux_pipeline_010:out_channel -> rsp_mux:sink0_channel
	wire          mux_pipeline_010_source0_startofpacket;                                     // mux_pipeline_010:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          mux_pipeline_010_source0_endofpacket;                                       // mux_pipeline_010:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                   // rsp_demux_001:src0_valid -> mux_pipeline_011:in_valid
	wire  [101:0] rsp_demux_001_src0_data;                                                    // rsp_demux_001:src0_data -> mux_pipeline_011:in_data
	wire          rsp_demux_001_src0_ready;                                                   // mux_pipeline_011:in_ready -> rsp_demux_001:src0_ready
	wire    [5:0] rsp_demux_001_src0_channel;                                                 // rsp_demux_001:src0_channel -> mux_pipeline_011:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                           // rsp_demux_001:src0_startofpacket -> mux_pipeline_011:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                             // rsp_demux_001:src0_endofpacket -> mux_pipeline_011:in_endofpacket
	wire          mux_pipeline_011_source0_valid;                                             // mux_pipeline_011:out_valid -> rsp_mux:sink1_valid
	wire  [101:0] mux_pipeline_011_source0_data;                                              // mux_pipeline_011:out_data -> rsp_mux:sink1_data
	wire          mux_pipeline_011_source0_ready;                                             // rsp_mux:sink1_ready -> mux_pipeline_011:out_ready
	wire    [5:0] mux_pipeline_011_source0_channel;                                           // mux_pipeline_011:out_channel -> rsp_mux:sink1_channel
	wire          mux_pipeline_011_source0_startofpacket;                                     // mux_pipeline_011:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          mux_pipeline_011_source0_endofpacket;                                       // mux_pipeline_011:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          crosser_004_out_valid;                                                      // crosser_004:out_valid -> mux_pipeline_012:in_valid
	wire  [101:0] crosser_004_out_data;                                                       // crosser_004:out_data -> mux_pipeline_012:in_data
	wire          crosser_004_out_ready;                                                      // mux_pipeline_012:in_ready -> crosser_004:out_ready
	wire    [5:0] crosser_004_out_channel;                                                    // crosser_004:out_channel -> mux_pipeline_012:in_channel
	wire          crosser_004_out_startofpacket;                                              // crosser_004:out_startofpacket -> mux_pipeline_012:in_startofpacket
	wire          crosser_004_out_endofpacket;                                                // crosser_004:out_endofpacket -> mux_pipeline_012:in_endofpacket
	wire          mux_pipeline_012_source0_valid;                                             // mux_pipeline_012:out_valid -> rsp_mux:sink2_valid
	wire  [101:0] mux_pipeline_012_source0_data;                                              // mux_pipeline_012:out_data -> rsp_mux:sink2_data
	wire          mux_pipeline_012_source0_ready;                                             // rsp_mux:sink2_ready -> mux_pipeline_012:out_ready
	wire    [5:0] mux_pipeline_012_source0_channel;                                           // mux_pipeline_012:out_channel -> rsp_mux:sink2_channel
	wire          mux_pipeline_012_source0_startofpacket;                                     // mux_pipeline_012:out_startofpacket -> rsp_mux:sink2_startofpacket
	wire          mux_pipeline_012_source0_endofpacket;                                       // mux_pipeline_012:out_endofpacket -> rsp_mux:sink2_endofpacket
	wire          crosser_006_out_valid;                                                      // crosser_006:out_valid -> mux_pipeline_013:in_valid
	wire  [101:0] crosser_006_out_data;                                                       // crosser_006:out_data -> mux_pipeline_013:in_data
	wire          crosser_006_out_ready;                                                      // mux_pipeline_013:in_ready -> crosser_006:out_ready
	wire    [5:0] crosser_006_out_channel;                                                    // crosser_006:out_channel -> mux_pipeline_013:in_channel
	wire          crosser_006_out_startofpacket;                                              // crosser_006:out_startofpacket -> mux_pipeline_013:in_startofpacket
	wire          crosser_006_out_endofpacket;                                                // crosser_006:out_endofpacket -> mux_pipeline_013:in_endofpacket
	wire          mux_pipeline_013_source0_valid;                                             // mux_pipeline_013:out_valid -> rsp_mux:sink3_valid
	wire  [101:0] mux_pipeline_013_source0_data;                                              // mux_pipeline_013:out_data -> rsp_mux:sink3_data
	wire          mux_pipeline_013_source0_ready;                                             // rsp_mux:sink3_ready -> mux_pipeline_013:out_ready
	wire    [5:0] mux_pipeline_013_source0_channel;                                           // mux_pipeline_013:out_channel -> rsp_mux:sink3_channel
	wire          mux_pipeline_013_source0_startofpacket;                                     // mux_pipeline_013:out_startofpacket -> rsp_mux:sink3_startofpacket
	wire          mux_pipeline_013_source0_endofpacket;                                       // mux_pipeline_013:out_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                   // rsp_demux_004:src0_valid -> mux_pipeline_014:in_valid
	wire  [101:0] rsp_demux_004_src0_data;                                                    // rsp_demux_004:src0_data -> mux_pipeline_014:in_data
	wire          rsp_demux_004_src0_ready;                                                   // mux_pipeline_014:in_ready -> rsp_demux_004:src0_ready
	wire    [5:0] rsp_demux_004_src0_channel;                                                 // rsp_demux_004:src0_channel -> mux_pipeline_014:in_channel
	wire          rsp_demux_004_src0_startofpacket;                                           // rsp_demux_004:src0_startofpacket -> mux_pipeline_014:in_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                             // rsp_demux_004:src0_endofpacket -> mux_pipeline_014:in_endofpacket
	wire          mux_pipeline_014_source0_valid;                                             // mux_pipeline_014:out_valid -> rsp_mux:sink4_valid
	wire  [101:0] mux_pipeline_014_source0_data;                                              // mux_pipeline_014:out_data -> rsp_mux:sink4_data
	wire          mux_pipeline_014_source0_ready;                                             // rsp_mux:sink4_ready -> mux_pipeline_014:out_ready
	wire    [5:0] mux_pipeline_014_source0_channel;                                           // mux_pipeline_014:out_channel -> rsp_mux:sink4_channel
	wire          mux_pipeline_014_source0_startofpacket;                                     // mux_pipeline_014:out_startofpacket -> rsp_mux:sink4_startofpacket
	wire          mux_pipeline_014_source0_endofpacket;                                       // mux_pipeline_014:out_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_src1_valid;                                                       // rsp_demux:src1_valid -> mux_pipeline_015:in_valid
	wire  [101:0] rsp_demux_src1_data;                                                        // rsp_demux:src1_data -> mux_pipeline_015:in_data
	wire          rsp_demux_src1_ready;                                                       // mux_pipeline_015:in_ready -> rsp_demux:src1_ready
	wire    [5:0] rsp_demux_src1_channel;                                                     // rsp_demux:src1_channel -> mux_pipeline_015:in_channel
	wire          rsp_demux_src1_startofpacket;                                               // rsp_demux:src1_startofpacket -> mux_pipeline_015:in_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                 // rsp_demux:src1_endofpacket -> mux_pipeline_015:in_endofpacket
	wire          mux_pipeline_015_source0_valid;                                             // mux_pipeline_015:out_valid -> rsp_mux_001:sink0_valid
	wire  [101:0] mux_pipeline_015_source0_data;                                              // mux_pipeline_015:out_data -> rsp_mux_001:sink0_data
	wire          mux_pipeline_015_source0_ready;                                             // rsp_mux_001:sink0_ready -> mux_pipeline_015:out_ready
	wire    [5:0] mux_pipeline_015_source0_channel;                                           // mux_pipeline_015:out_channel -> rsp_mux_001:sink0_channel
	wire          mux_pipeline_015_source0_startofpacket;                                     // mux_pipeline_015:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          mux_pipeline_015_source0_endofpacket;                                       // mux_pipeline_015:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          crosser_005_out_valid;                                                      // crosser_005:out_valid -> mux_pipeline_016:in_valid
	wire  [101:0] crosser_005_out_data;                                                       // crosser_005:out_data -> mux_pipeline_016:in_data
	wire          crosser_005_out_ready;                                                      // mux_pipeline_016:in_ready -> crosser_005:out_ready
	wire    [5:0] crosser_005_out_channel;                                                    // crosser_005:out_channel -> mux_pipeline_016:in_channel
	wire          crosser_005_out_startofpacket;                                              // crosser_005:out_startofpacket -> mux_pipeline_016:in_startofpacket
	wire          crosser_005_out_endofpacket;                                                // crosser_005:out_endofpacket -> mux_pipeline_016:in_endofpacket
	wire          mux_pipeline_016_source0_valid;                                             // mux_pipeline_016:out_valid -> rsp_mux_001:sink1_valid
	wire  [101:0] mux_pipeline_016_source0_data;                                              // mux_pipeline_016:out_data -> rsp_mux_001:sink1_data
	wire          mux_pipeline_016_source0_ready;                                             // rsp_mux_001:sink1_ready -> mux_pipeline_016:out_ready
	wire    [5:0] mux_pipeline_016_source0_channel;                                           // mux_pipeline_016:out_channel -> rsp_mux_001:sink1_channel
	wire          mux_pipeline_016_source0_startofpacket;                                     // mux_pipeline_016:out_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          mux_pipeline_016_source0_endofpacket;                                       // mux_pipeline_016:out_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          crosser_007_out_valid;                                                      // crosser_007:out_valid -> mux_pipeline_017:in_valid
	wire  [101:0] crosser_007_out_data;                                                       // crosser_007:out_data -> mux_pipeline_017:in_data
	wire          crosser_007_out_ready;                                                      // mux_pipeline_017:in_ready -> crosser_007:out_ready
	wire    [5:0] crosser_007_out_channel;                                                    // crosser_007:out_channel -> mux_pipeline_017:in_channel
	wire          crosser_007_out_startofpacket;                                              // crosser_007:out_startofpacket -> mux_pipeline_017:in_startofpacket
	wire          crosser_007_out_endofpacket;                                                // crosser_007:out_endofpacket -> mux_pipeline_017:in_endofpacket
	wire          mux_pipeline_017_source0_valid;                                             // mux_pipeline_017:out_valid -> rsp_mux_001:sink2_valid
	wire  [101:0] mux_pipeline_017_source0_data;                                              // mux_pipeline_017:out_data -> rsp_mux_001:sink2_data
	wire          mux_pipeline_017_source0_ready;                                             // rsp_mux_001:sink2_ready -> mux_pipeline_017:out_ready
	wire    [5:0] mux_pipeline_017_source0_channel;                                           // mux_pipeline_017:out_channel -> rsp_mux_001:sink2_channel
	wire          mux_pipeline_017_source0_startofpacket;                                     // mux_pipeline_017:out_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          mux_pipeline_017_source0_endofpacket;                                       // mux_pipeline_017:out_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_004_src1_valid;                                                   // rsp_demux_004:src1_valid -> mux_pipeline_018:in_valid
	wire  [101:0] rsp_demux_004_src1_data;                                                    // rsp_demux_004:src1_data -> mux_pipeline_018:in_data
	wire          rsp_demux_004_src1_ready;                                                   // mux_pipeline_018:in_ready -> rsp_demux_004:src1_ready
	wire    [5:0] rsp_demux_004_src1_channel;                                                 // rsp_demux_004:src1_channel -> mux_pipeline_018:in_channel
	wire          rsp_demux_004_src1_startofpacket;                                           // rsp_demux_004:src1_startofpacket -> mux_pipeline_018:in_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                             // rsp_demux_004:src1_endofpacket -> mux_pipeline_018:in_endofpacket
	wire          mux_pipeline_018_source0_valid;                                             // mux_pipeline_018:out_valid -> rsp_mux_001:sink3_valid
	wire  [101:0] mux_pipeline_018_source0_data;                                              // mux_pipeline_018:out_data -> rsp_mux_001:sink3_data
	wire          mux_pipeline_018_source0_ready;                                             // rsp_mux_001:sink3_ready -> mux_pipeline_018:out_ready
	wire    [5:0] mux_pipeline_018_source0_channel;                                           // mux_pipeline_018:out_channel -> rsp_mux_001:sink3_channel
	wire          mux_pipeline_018_source0_startofpacket;                                     // mux_pipeline_018:out_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          mux_pipeline_018_source0_endofpacket;                                       // mux_pipeline_018:out_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_005_src0_valid;                                                   // rsp_demux_005:src0_valid -> mux_pipeline_019:in_valid
	wire  [101:0] rsp_demux_005_src0_data;                                                    // rsp_demux_005:src0_data -> mux_pipeline_019:in_data
	wire          rsp_demux_005_src0_ready;                                                   // mux_pipeline_019:in_ready -> rsp_demux_005:src0_ready
	wire    [5:0] rsp_demux_005_src0_channel;                                                 // rsp_demux_005:src0_channel -> mux_pipeline_019:in_channel
	wire          rsp_demux_005_src0_startofpacket;                                           // rsp_demux_005:src0_startofpacket -> mux_pipeline_019:in_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                             // rsp_demux_005:src0_endofpacket -> mux_pipeline_019:in_endofpacket
	wire          mux_pipeline_019_source0_valid;                                             // mux_pipeline_019:out_valid -> rsp_mux_001:sink4_valid
	wire  [101:0] mux_pipeline_019_source0_data;                                              // mux_pipeline_019:out_data -> rsp_mux_001:sink4_data
	wire          mux_pipeline_019_source0_ready;                                             // rsp_mux_001:sink4_ready -> mux_pipeline_019:out_ready
	wire    [5:0] mux_pipeline_019_source0_channel;                                           // mux_pipeline_019:out_channel -> rsp_mux_001:sink4_channel
	wire          mux_pipeline_019_source0_startofpacket;                                     // mux_pipeline_019:out_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          mux_pipeline_019_source0_endofpacket;                                       // mux_pipeline_019:out_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          shared_pio_avalon_slave_0_agent_rdata_fifo_src_valid;                       // shared_PIO_avalon_slave_0_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire    [9:0] shared_pio_avalon_slave_0_agent_rdata_fifo_src_data;                        // shared_PIO_avalon_slave_0_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          shared_pio_avalon_slave_0_agent_rdata_fifo_src_ready;                       // avalon_st_adapter:in_0_ready -> shared_PIO_avalon_slave_0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                              // avalon_st_adapter:out_0_valid -> shared_PIO_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire    [9:0] avalon_st_adapter_out_0_data;                                               // avalon_st_adapter:out_0_data -> shared_PIO_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                              // shared_PIO_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                              // avalon_st_adapter:out_0_error -> shared_PIO_avalon_slave_0_agent:rdata_fifo_sink_error
	wire          shared_mailbox_avmm_msg_receiver_agent_rdata_fifo_src_valid;                // shared_mailbox_avmm_msg_receiver_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] shared_mailbox_avmm_msg_receiver_agent_rdata_fifo_src_data;                 // shared_mailbox_avmm_msg_receiver_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          shared_mailbox_avmm_msg_receiver_agent_rdata_fifo_src_ready;                // avalon_st_adapter_001:in_0_ready -> shared_mailbox_avmm_msg_receiver_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                          // avalon_st_adapter_001:out_0_valid -> shared_mailbox_avmm_msg_receiver_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                           // avalon_st_adapter_001:out_0_data -> shared_mailbox_avmm_msg_receiver_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                          // shared_mailbox_avmm_msg_receiver_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                          // avalon_st_adapter_001:out_0_error -> shared_mailbox_avmm_msg_receiver_agent:rdata_fifo_sink_error
	wire          sysid_control_slave_agent_rdata_fifo_out_valid;                             // sysid_control_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] sysid_control_slave_agent_rdata_fifo_out_data;                              // sysid_control_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          sysid_control_slave_agent_rdata_fifo_out_ready;                             // avalon_st_adapter_002:in_0_ready -> sysid_control_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                          // avalon_st_adapter_002:out_0_valid -> sysid_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                           // avalon_st_adapter_002:out_0_data -> sysid_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                          // sysid_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                          // avalon_st_adapter_002:out_0_error -> sysid_control_slave_agent:rdata_fifo_sink_error
	wire          sdram_controller_s1_agent_rdata_fifo_out_valid;                             // sdram_controller_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [17:0] sdram_controller_s1_agent_rdata_fifo_out_data;                              // sdram_controller_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          sdram_controller_s1_agent_rdata_fifo_out_ready;                             // avalon_st_adapter_003:in_0_ready -> sdram_controller_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                          // avalon_st_adapter_003:out_0_valid -> sdram_controller_s1_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_003_out_0_data;                                           // avalon_st_adapter_003:out_0_data -> sdram_controller_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                          // sdram_controller_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                          // avalon_st_adapter_003:out_0_error -> sdram_controller_s1_agent:rdata_fifo_sink_error
	wire          shared_mutex_pio_s1_agent_rdata_fifo_src_valid;                             // shared_mutex_PIO_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] shared_mutex_pio_s1_agent_rdata_fifo_src_data;                              // shared_mutex_PIO_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire          shared_mutex_pio_s1_agent_rdata_fifo_src_ready;                             // avalon_st_adapter_004:in_0_ready -> shared_mutex_PIO_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_004_out_0_valid;                                          // avalon_st_adapter_004:out_0_valid -> shared_mutex_PIO_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                           // avalon_st_adapter_004:out_0_data -> shared_mutex_PIO_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                          // shared_mutex_PIO_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                          // avalon_st_adapter_004:out_0_error -> shared_mutex_PIO_s1_agent:rdata_fifo_sink_error
	wire          shared_mailbox_avmm_msg_sender_agent_rdata_fifo_src_valid;                  // shared_mailbox_avmm_msg_sender_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] shared_mailbox_avmm_msg_sender_agent_rdata_fifo_src_data;                   // shared_mailbox_avmm_msg_sender_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire          shared_mailbox_avmm_msg_sender_agent_rdata_fifo_src_ready;                  // avalon_st_adapter_005:in_0_ready -> shared_mailbox_avmm_msg_sender_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_005_out_0_valid;                                          // avalon_st_adapter_005:out_0_valid -> shared_mailbox_avmm_msg_sender_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                           // avalon_st_adapter_005:out_0_data -> shared_mailbox_avmm_msg_sender_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                          // shared_mailbox_avmm_msg_sender_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                          // avalon_st_adapter_005:out_0_error -> shared_mailbox_avmm_msg_sender_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (28),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_1_0_mm_bridge_1_m0_translator (
		.clk                    (clk_0_clk_clk),                                                             //                       clk.clk
		.reset                  (shared_PIO_reset_sink_reset_bridge_in_reset_reset),                         //                     reset.reset
		.uav_address            (cpu_1_0_mm_bridge_1_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_1_0_mm_bridge_1_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_1_0_mm_bridge_1_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_1_0_mm_bridge_1_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_1_0_mm_bridge_1_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_1_0_mm_bridge_1_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_1_0_mm_bridge_1_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_1_0_mm_bridge_1_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_1_0_mm_bridge_1_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_1_0_mm_bridge_1_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_1_0_mm_bridge_1_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (cpu_1_0_mm_bridge_1_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (cpu_1_0_mm_bridge_1_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (cpu_1_0_mm_bridge_1_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (cpu_1_0_mm_bridge_1_m0_byteenable),                                         //                          .byteenable
		.av_read                (cpu_1_0_mm_bridge_1_m0_read),                                               //                          .read
		.av_readdata            (cpu_1_0_mm_bridge_1_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (cpu_1_0_mm_bridge_1_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (cpu_1_0_mm_bridge_1_m0_write),                                              //                          .write
		.av_writedata           (cpu_1_0_mm_bridge_1_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (cpu_1_0_mm_bridge_1_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                                      //               (terminated)
		.av_chipselect          (1'b0),                                                                      //               (terminated)
		.av_lock                (1'b0),                                                                      //               (terminated)
		.uav_clken              (),                                                                          //               (terminated)
		.av_clken               (1'b1),                                                                      //               (terminated)
		.uav_response           (2'b00),                                                                     //               (terminated)
		.av_response            (),                                                                          //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                      //               (terminated)
		.av_writeresponsevalid  ()                                                                           //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (28),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_0_0_outgoing_master_translator (
		.clk                    (clk_0_clk_clk),                                                              //                       clk.clk
		.reset                  (shared_PIO_reset_sink_reset_bridge_in_reset_reset),                          //                     reset.reset
		.uav_address            (cpu_0_0_outgoing_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_0_0_outgoing_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_0_0_outgoing_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_0_0_outgoing_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_0_0_outgoing_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_0_0_outgoing_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_0_0_outgoing_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_0_0_outgoing_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_0_0_outgoing_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_0_0_outgoing_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_0_0_outgoing_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (cpu_0_0_outgoing_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (cpu_0_0_outgoing_master_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (cpu_0_0_outgoing_master_burstcount),                                         //                          .burstcount
		.av_byteenable          (cpu_0_0_outgoing_master_byteenable),                                         //                          .byteenable
		.av_read                (cpu_0_0_outgoing_master_read),                                               //                          .read
		.av_readdata            (cpu_0_0_outgoing_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (cpu_0_0_outgoing_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (cpu_0_0_outgoing_master_write),                                              //                          .write
		.av_writedata           (cpu_0_0_outgoing_master_writedata),                                          //                          .writedata
		.av_debugaccess         (cpu_0_0_outgoing_master_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                       //               (terminated)
		.av_begintransfer       (1'b0),                                                                       //               (terminated)
		.av_chipselect          (1'b0),                                                                       //               (terminated)
		.av_lock                (1'b0),                                                                       //               (terminated)
		.uav_clken              (),                                                                           //               (terminated)
		.av_clken               (1'b1),                                                                       //               (terminated)
		.uav_response           (2'b00),                                                                      //               (terminated)
		.av_response            (),                                                                           //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                       //               (terminated)
		.av_writeresponsevalid  ()                                                                            //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) shared_pio_avalon_slave_0_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (shared_PIO_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (shared_pio_avalon_slave_0_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount         (shared_pio_avalon_slave_0_agent_m0_burstcount),     //                         .burstcount
		.uav_read               (shared_pio_avalon_slave_0_agent_m0_read),           //                         .read
		.uav_write              (shared_pio_avalon_slave_0_agent_m0_write),          //                         .write
		.uav_waitrequest        (shared_pio_avalon_slave_0_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid      (shared_pio_avalon_slave_0_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable         (shared_pio_avalon_slave_0_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata           (shared_pio_avalon_slave_0_agent_m0_readdata),       //                         .readdata
		.uav_writedata          (shared_pio_avalon_slave_0_agent_m0_writedata),      //                         .writedata
		.uav_lock               (shared_pio_avalon_slave_0_agent_m0_lock),           //                         .lock
		.uav_debugaccess        (shared_pio_avalon_slave_0_agent_m0_debugaccess),    //                         .debugaccess
		.av_address             (shared_PIO_avalon_slave_0_address),                 //      avalon_anti_slave_0.address
		.av_write               (shared_PIO_avalon_slave_0_write),                   //                         .write
		.av_read                (shared_PIO_avalon_slave_0_read),                    //                         .read
		.av_readdata            (shared_PIO_avalon_slave_0_readdata),                //                         .readdata
		.av_writedata           (shared_PIO_avalon_slave_0_writedata),               //                         .writedata
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) shared_mailbox_avmm_msg_receiver_translator (
		.clk                    (clk_0_clk_clk),                                           //                      clk.clk
		.reset                  (shared_PIO_reset_sink_reset_bridge_in_reset_reset),       //                    reset.reset
		.uav_address            (shared_mailbox_avmm_msg_receiver_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (shared_mailbox_avmm_msg_receiver_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (shared_mailbox_avmm_msg_receiver_agent_m0_read),          //                         .read
		.uav_write              (shared_mailbox_avmm_msg_receiver_agent_m0_write),         //                         .write
		.uav_waitrequest        (shared_mailbox_avmm_msg_receiver_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (shared_mailbox_avmm_msg_receiver_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (shared_mailbox_avmm_msg_receiver_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (shared_mailbox_avmm_msg_receiver_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (shared_mailbox_avmm_msg_receiver_agent_m0_writedata),     //                         .writedata
		.uav_lock               (shared_mailbox_avmm_msg_receiver_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (shared_mailbox_avmm_msg_receiver_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (shared_mailbox_avmm_msg_receiver_address),                //      avalon_anti_slave_0.address
		.av_write               (shared_mailbox_avmm_msg_receiver_write),                  //                         .write
		.av_read                (shared_mailbox_avmm_msg_receiver_read),                   //                         .read
		.av_readdata            (shared_mailbox_avmm_msg_receiver_readdata),               //                         .readdata
		.av_writedata           (shared_mailbox_avmm_msg_receiver_writedata),              //                         .writedata
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_byteenable          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_waitrequest         (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_chipselect          (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_control_slave_translator (
		.clk                    (pll_0_outclk0_clk),                          //                      clk.clk
		.reset                  (sysid_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (sysid_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sysid_control_slave_agent_m0_read),          //                         .read
		.uav_write              (sysid_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (sysid_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sysid_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sysid_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sysid_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sysid_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sysid_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sysid_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (sysid_control_slave_address),                //      avalon_anti_slave_0.address
		.av_readdata            (sysid_control_slave_readdata),               //                         .readdata
		.av_write               (),                                           //              (terminated)
		.av_read                (),                                           //              (terminated)
		.av_writedata           (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_chipselect          (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_controller_s1_translator (
		.clk                    (pll_0_outclk1_clk),                                  //                      clk.clk
		.reset                  (sdram_controller_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sdram_controller_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (sdram_controller_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (sdram_controller_s1_agent_m0_read),                  //                         .read
		.uav_write              (sdram_controller_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (sdram_controller_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (sdram_controller_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (sdram_controller_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (sdram_controller_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (sdram_controller_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (sdram_controller_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (sdram_controller_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (sdram_controller_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (sdram_controller_s1_write),                          //                         .write
		.av_read                (sdram_controller_s1_read),                           //                         .read
		.av_readdata            (sdram_controller_s1_readdata),                       //                         .readdata
		.av_writedata           (sdram_controller_s1_writedata),                      //                         .writedata
		.av_byteenable          (sdram_controller_s1_byteenable),                     //                         .byteenable
		.av_readdatavalid       (sdram_controller_s1_readdatavalid),                  //                         .readdatavalid
		.av_waitrequest         (sdram_controller_s1_waitrequest),                    //                         .waitrequest
		.av_chipselect          (sdram_controller_s1_chipselect),                     //                         .chipselect
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) shared_mutex_pio_s1_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (shared_PIO_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (shared_mutex_pio_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (shared_mutex_pio_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (shared_mutex_pio_s1_agent_m0_read),                 //                         .read
		.uav_write              (shared_mutex_pio_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (shared_mutex_pio_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (shared_mutex_pio_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (shared_mutex_pio_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (shared_mutex_pio_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (shared_mutex_pio_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (shared_mutex_pio_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (shared_mutex_pio_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (shared_mutex_PIO_s1_address),                       //      avalon_anti_slave_0.address
		.av_write               (shared_mutex_PIO_s1_write),                         //                         .write
		.av_read                (shared_mutex_PIO_s1_read),                          //                         .read
		.av_readdata            (shared_mutex_PIO_s1_readdata),                      //                         .readdata
		.av_writedata           (shared_mutex_PIO_s1_writedata),                     //                         .writedata
		.av_chipselect          (shared_mutex_PIO_s1_chipselect),                    //                         .chipselect
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) shared_mailbox_avmm_msg_sender_translator (
		.clk                    (clk_0_clk_clk),                                         //                      clk.clk
		.reset                  (shared_PIO_reset_sink_reset_bridge_in_reset_reset),     //                    reset.reset
		.uav_address            (shared_mailbox_avmm_msg_sender_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (shared_mailbox_avmm_msg_sender_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (shared_mailbox_avmm_msg_sender_agent_m0_read),          //                         .read
		.uav_write              (shared_mailbox_avmm_msg_sender_agent_m0_write),         //                         .write
		.uav_waitrequest        (shared_mailbox_avmm_msg_sender_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (shared_mailbox_avmm_msg_sender_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (shared_mailbox_avmm_msg_sender_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (shared_mailbox_avmm_msg_sender_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (shared_mailbox_avmm_msg_sender_agent_m0_writedata),     //                         .writedata
		.uav_lock               (shared_mailbox_avmm_msg_sender_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (shared_mailbox_avmm_msg_sender_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (shared_mailbox_avmm_msg_sender_address),                //      avalon_anti_slave_0.address
		.av_write               (shared_mailbox_avmm_msg_sender_write),                  //                         .write
		.av_read                (shared_mailbox_avmm_msg_sender_read),                   //                         .read
		.av_readdata            (shared_mailbox_avmm_msg_sender_readdata),               //                         .readdata
		.av_writedata           (shared_mailbox_avmm_msg_sender_writedata),              //                         .writedata
		.av_waitrequest         (shared_mailbox_avmm_msg_sender_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_byteenable          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_chipselect          (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (101),
		.PKT_ORI_BURST_SIZE_L      (99),
		.PKT_RESPONSE_STATUS_H     (98),
		.PKT_RESPONSE_STATUS_L     (97),
		.PKT_QOS_H                 (82),
		.PKT_QOS_L                 (82),
		.PKT_DATA_SIDEBAND_H       (80),
		.PKT_DATA_SIDEBAND_L       (80),
		.PKT_ADDR_SIDEBAND_H       (79),
		.PKT_ADDR_SIDEBAND_L       (79),
		.PKT_BURST_TYPE_H          (78),
		.PKT_BURST_TYPE_L          (77),
		.PKT_CACHE_H               (96),
		.PKT_CACHE_L               (93),
		.PKT_THREAD_ID_H           (89),
		.PKT_THREAD_ID_L           (89),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_EXCLUSIVE       (69),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (92),
		.PKT_PROTECTION_L          (90),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (88),
		.PKT_DEST_ID_L             (86),
		.ST_DATA_W                 (102),
		.ST_CHANNEL_W              (6),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_1_0_mm_bridge_1_m0_agent (
		.clk                   (clk_0_clk_clk),                                                             //       clk.clk
		.reset                 (shared_PIO_reset_sink_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.av_address            (cpu_1_0_mm_bridge_1_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_1_0_mm_bridge_1_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_1_0_mm_bridge_1_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_1_0_mm_bridge_1_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_1_0_mm_bridge_1_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_1_0_mm_bridge_1_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_1_0_mm_bridge_1_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_1_0_mm_bridge_1_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_1_0_mm_bridge_1_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_1_0_mm_bridge_1_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_1_0_mm_bridge_1_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_1_0_mm_bridge_1_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_1_0_mm_bridge_1_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_1_0_mm_bridge_1_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_1_0_mm_bridge_1_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_1_0_mm_bridge_1_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (cpu_1_0_mm_bridge_1_m0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (cpu_1_0_mm_bridge_1_m0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (cpu_1_0_mm_bridge_1_m0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (cpu_1_0_mm_bridge_1_m0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (cpu_1_0_mm_bridge_1_m0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (cpu_1_0_mm_bridge_1_m0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                          // (terminated)
		.av_writeresponsevalid ()                                                                           // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (101),
		.PKT_ORI_BURST_SIZE_L      (99),
		.PKT_RESPONSE_STATUS_H     (98),
		.PKT_RESPONSE_STATUS_L     (97),
		.PKT_QOS_H                 (82),
		.PKT_QOS_L                 (82),
		.PKT_DATA_SIDEBAND_H       (80),
		.PKT_DATA_SIDEBAND_L       (80),
		.PKT_ADDR_SIDEBAND_H       (79),
		.PKT_ADDR_SIDEBAND_L       (79),
		.PKT_BURST_TYPE_H          (78),
		.PKT_BURST_TYPE_L          (77),
		.PKT_CACHE_H               (96),
		.PKT_CACHE_L               (93),
		.PKT_THREAD_ID_H           (89),
		.PKT_THREAD_ID_L           (89),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_EXCLUSIVE       (69),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (92),
		.PKT_PROTECTION_L          (90),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (88),
		.PKT_DEST_ID_L             (86),
		.ST_DATA_W                 (102),
		.ST_CHANNEL_W              (6),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_0_0_outgoing_master_agent (
		.clk                   (clk_0_clk_clk),                                                              //       clk.clk
		.reset                 (shared_PIO_reset_sink_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.av_address            (cpu_0_0_outgoing_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_0_0_outgoing_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_0_0_outgoing_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_0_0_outgoing_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_0_0_outgoing_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_0_0_outgoing_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_0_0_outgoing_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_0_0_outgoing_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_0_0_outgoing_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_0_0_outgoing_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_0_0_outgoing_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_0_0_outgoing_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_0_0_outgoing_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_0_0_outgoing_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_0_0_outgoing_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_0_0_outgoing_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (cpu_0_0_outgoing_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (cpu_0_0_outgoing_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (cpu_0_0_outgoing_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (cpu_0_0_outgoing_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (cpu_0_0_outgoing_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (cpu_0_0_outgoing_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                           // (terminated)
		.av_writeresponsevalid ()                                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (74),
		.PKT_ORI_BURST_SIZE_L      (72),
		.PKT_RESPONSE_STATUS_H     (71),
		.PKT_RESPONSE_STATUS_L     (70),
		.PKT_BURST_SIZE_H          (49),
		.PKT_BURST_SIZE_L          (47),
		.PKT_TRANS_LOCK            (41),
		.PKT_BEGIN_BURST           (54),
		.PKT_PROTECTION_H          (65),
		.PKT_PROTECTION_L          (63),
		.PKT_BURSTWRAP_H           (46),
		.PKT_BURSTWRAP_L           (46),
		.PKT_BYTE_CNT_H            (45),
		.PKT_BYTE_CNT_L            (43),
		.PKT_ADDR_H                (36),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (37),
		.PKT_TRANS_POSTED          (38),
		.PKT_TRANS_WRITE           (39),
		.PKT_TRANS_READ            (40),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (58),
		.PKT_SRC_ID_L              (56),
		.PKT_DEST_ID_H             (61),
		.PKT_DEST_ID_L             (59),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (75),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) shared_pio_avalon_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                              //             clk.clk
		.reset                   (shared_PIO_reset_sink_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (shared_pio_avalon_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (shared_pio_avalon_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (shared_pio_avalon_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (shared_pio_avalon_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (shared_pio_avalon_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (shared_pio_avalon_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (shared_pio_avalon_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (shared_pio_avalon_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (shared_pio_avalon_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (shared_pio_avalon_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (shared_pio_avalon_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (shared_pio_avalon_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (shared_pio_avalon_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (shared_pio_avalon_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (shared_pio_avalon_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (shared_pio_avalon_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_source0_ready),                               //              cp.ready
		.cp_valid                (agent_pipeline_source0_valid),                               //                .valid
		.cp_data                 (agent_pipeline_source0_data),                                //                .data
		.cp_startofpacket        (agent_pipeline_source0_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (agent_pipeline_source0_endofpacket),                         //                .endofpacket
		.cp_channel              (agent_pipeline_source0_channel),                             //                .channel
		.rf_sink_ready           (shared_pio_avalon_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (shared_pio_avalon_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (shared_pio_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (shared_pio_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (shared_pio_avalon_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (shared_pio_avalon_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (shared_pio_avalon_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (shared_pio_avalon_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (shared_pio_avalon_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (shared_pio_avalon_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                              //                .error
		.rdata_fifo_src_ready    (shared_pio_avalon_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (shared_pio_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (shared_pio_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (76),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) shared_pio_avalon_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                              //       clk.clk
		.reset             (shared_PIO_reset_sink_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (shared_pio_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (shared_pio_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (shared_pio_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (shared_pio_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (shared_pio_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (shared_pio_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (shared_pio_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (shared_pio_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (shared_pio_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (shared_pio_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (101),
		.PKT_ORI_BURST_SIZE_L      (99),
		.PKT_RESPONSE_STATUS_H     (98),
		.PKT_RESPONSE_STATUS_L     (97),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (92),
		.PKT_PROTECTION_L          (90),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (88),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (102),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) shared_mailbox_avmm_msg_receiver_agent (
		.clk                     (clk_0_clk_clk),                                                     //             clk.clk
		.reset                   (shared_PIO_reset_sink_reset_bridge_in_reset_reset),                 //       clk_reset.reset
		.m0_address              (shared_mailbox_avmm_msg_receiver_agent_m0_address),                 //              m0.address
		.m0_burstcount           (shared_mailbox_avmm_msg_receiver_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (shared_mailbox_avmm_msg_receiver_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (shared_mailbox_avmm_msg_receiver_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (shared_mailbox_avmm_msg_receiver_agent_m0_lock),                    //                .lock
		.m0_readdata             (shared_mailbox_avmm_msg_receiver_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (shared_mailbox_avmm_msg_receiver_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (shared_mailbox_avmm_msg_receiver_agent_m0_read),                    //                .read
		.m0_waitrequest          (shared_mailbox_avmm_msg_receiver_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (shared_mailbox_avmm_msg_receiver_agent_m0_writedata),               //                .writedata
		.m0_write                (shared_mailbox_avmm_msg_receiver_agent_m0_write),                   //                .write
		.rp_endofpacket          (shared_mailbox_avmm_msg_receiver_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (shared_mailbox_avmm_msg_receiver_agent_rp_ready),                   //                .ready
		.rp_valid                (shared_mailbox_avmm_msg_receiver_agent_rp_valid),                   //                .valid
		.rp_data                 (shared_mailbox_avmm_msg_receiver_agent_rp_data),                    //                .data
		.rp_startofpacket        (shared_mailbox_avmm_msg_receiver_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_002_source0_ready),                                  //              cp.ready
		.cp_valid                (agent_pipeline_002_source0_valid),                                  //                .valid
		.cp_data                 (agent_pipeline_002_source0_data),                                   //                .data
		.cp_startofpacket        (agent_pipeline_002_source0_startofpacket),                          //                .startofpacket
		.cp_endofpacket          (agent_pipeline_002_source0_endofpacket),                            //                .endofpacket
		.cp_channel              (agent_pipeline_002_source0_channel),                                //                .channel
		.rf_sink_ready           (shared_mailbox_avmm_msg_receiver_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (shared_mailbox_avmm_msg_receiver_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (shared_mailbox_avmm_msg_receiver_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (shared_mailbox_avmm_msg_receiver_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (shared_mailbox_avmm_msg_receiver_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (shared_mailbox_avmm_msg_receiver_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (shared_mailbox_avmm_msg_receiver_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (shared_mailbox_avmm_msg_receiver_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (shared_mailbox_avmm_msg_receiver_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (shared_mailbox_avmm_msg_receiver_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                                 //                .error
		.rdata_fifo_src_ready    (shared_mailbox_avmm_msg_receiver_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (shared_mailbox_avmm_msg_receiver_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (shared_mailbox_avmm_msg_receiver_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (103),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) shared_mailbox_avmm_msg_receiver_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                     //       clk.clk
		.reset             (shared_PIO_reset_sink_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_data           (shared_mailbox_avmm_msg_receiver_agent_rf_source_data),             //        in.data
		.in_valid          (shared_mailbox_avmm_msg_receiver_agent_rf_source_valid),            //          .valid
		.in_ready          (shared_mailbox_avmm_msg_receiver_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (shared_mailbox_avmm_msg_receiver_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (shared_mailbox_avmm_msg_receiver_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (shared_mailbox_avmm_msg_receiver_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (shared_mailbox_avmm_msg_receiver_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (shared_mailbox_avmm_msg_receiver_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (shared_mailbox_avmm_msg_receiver_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (shared_mailbox_avmm_msg_receiver_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (101),
		.PKT_ORI_BURST_SIZE_L      (99),
		.PKT_RESPONSE_STATUS_H     (98),
		.PKT_RESPONSE_STATUS_L     (97),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (92),
		.PKT_PROTECTION_L          (90),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (88),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (102),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_control_slave_agent (
		.clk                     (pll_0_outclk0_clk),                                    //             clk.clk
		.reset                   (sysid_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (sysid_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sysid_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sysid_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sysid_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sysid_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sysid_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sysid_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sysid_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sysid_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sysid_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sysid_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sysid_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sysid_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sysid_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sysid_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sysid_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_004_source0_ready),                     //              cp.ready
		.cp_valid                (agent_pipeline_004_source0_valid),                     //                .valid
		.cp_data                 (agent_pipeline_004_source0_data),                      //                .data
		.cp_startofpacket        (agent_pipeline_004_source0_startofpacket),             //                .startofpacket
		.cp_endofpacket          (agent_pipeline_004_source0_endofpacket),               //                .endofpacket
		.cp_channel              (agent_pipeline_004_source0_channel),                   //                .channel
		.rf_sink_ready           (sysid_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sysid_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sysid_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sysid_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sysid_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sysid_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sysid_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sysid_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sysid_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sysid_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (sysid_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sysid_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (103),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_control_slave_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                                    //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (sysid_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_control_slave_agent_rdata_fifo (
		.clk               (pll_0_outclk0_clk),                              //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (sysid_control_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (sysid_control_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (sysid_control_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (sysid_control_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (sysid_control_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (sysid_control_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_startofpacket  (1'b0),                                           // (terminated)
		.in_endofpacket    (1'b0),                                           // (terminated)
		.out_startofpacket (),                                               // (terminated)
		.out_endofpacket   (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (83),
		.PKT_ORI_BURST_SIZE_L      (81),
		.PKT_RESPONSE_STATUS_H     (80),
		.PKT_RESPONSE_STATUS_L     (79),
		.PKT_BURST_SIZE_H          (58),
		.PKT_BURST_SIZE_L          (56),
		.PKT_TRANS_LOCK            (50),
		.PKT_BEGIN_BURST           (63),
		.PKT_PROTECTION_H          (74),
		.PKT_PROTECTION_L          (72),
		.PKT_BURSTWRAP_H           (55),
		.PKT_BURSTWRAP_L           (55),
		.PKT_BYTE_CNT_H            (54),
		.PKT_BYTE_CNT_L            (52),
		.PKT_ADDR_H                (45),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (46),
		.PKT_TRANS_POSTED          (47),
		.PKT_TRANS_WRITE           (48),
		.PKT_TRANS_READ            (49),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (67),
		.PKT_SRC_ID_L              (65),
		.PKT_DEST_ID_H             (70),
		.PKT_DEST_ID_L             (68),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (84),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sdram_controller_s1_agent (
		.clk                     (pll_0_outclk1_clk),                                    //             clk.clk
		.reset                   (sdram_controller_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (sdram_controller_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sdram_controller_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sdram_controller_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sdram_controller_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sdram_controller_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (sdram_controller_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sdram_controller_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sdram_controller_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (sdram_controller_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sdram_controller_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (sdram_controller_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (sdram_controller_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sdram_controller_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (sdram_controller_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (sdram_controller_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (sdram_controller_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_006_source0_ready),                     //              cp.ready
		.cp_valid                (agent_pipeline_006_source0_valid),                     //                .valid
		.cp_data                 (agent_pipeline_006_source0_data),                      //                .data
		.cp_startofpacket        (agent_pipeline_006_source0_startofpacket),             //                .startofpacket
		.cp_endofpacket          (agent_pipeline_006_source0_endofpacket),               //                .endofpacket
		.cp_channel              (agent_pipeline_006_source0_channel),                   //                .channel
		.rf_sink_ready           (sdram_controller_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sdram_controller_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sdram_controller_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sdram_controller_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sdram_controller_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sdram_controller_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sdram_controller_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sdram_controller_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sdram_controller_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sdram_controller_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (sdram_controller_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_controller_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sdram_controller_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (85),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_controller_s1_agent_rsp_fifo (
		.clk               (pll_0_outclk1_clk),                                    //       clk.clk
		.reset             (sdram_controller_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (sdram_controller_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sdram_controller_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sdram_controller_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sdram_controller_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sdram_controller_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sdram_controller_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sdram_controller_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sdram_controller_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sdram_controller_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sdram_controller_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_controller_s1_agent_rdata_fifo (
		.clk               (pll_0_outclk1_clk),                                  //       clk.clk
		.reset             (sdram_controller_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_controller_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (sdram_controller_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (sdram_controller_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (sdram_controller_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (sdram_controller_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (sdram_controller_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_startofpacket  (1'b0),                                               // (terminated)
		.in_endofpacket    (1'b0),                                               // (terminated)
		.out_startofpacket (),                                                   // (terminated)
		.out_endofpacket   (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (101),
		.PKT_ORI_BURST_SIZE_L      (99),
		.PKT_RESPONSE_STATUS_H     (98),
		.PKT_RESPONSE_STATUS_L     (97),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (92),
		.PKT_PROTECTION_L          (90),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (88),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (102),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) shared_mutex_pio_s1_agent (
		.clk                     (clk_0_clk_clk),                                        //             clk.clk
		.reset                   (shared_PIO_reset_sink_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (shared_mutex_pio_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (shared_mutex_pio_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (shared_mutex_pio_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (shared_mutex_pio_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (shared_mutex_pio_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (shared_mutex_pio_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (shared_mutex_pio_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (shared_mutex_pio_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (shared_mutex_pio_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (shared_mutex_pio_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (shared_mutex_pio_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (shared_mutex_pio_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (shared_mutex_pio_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (shared_mutex_pio_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (shared_mutex_pio_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (shared_mutex_pio_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_008_source0_ready),                     //              cp.ready
		.cp_valid                (agent_pipeline_008_source0_valid),                     //                .valid
		.cp_data                 (agent_pipeline_008_source0_data),                      //                .data
		.cp_startofpacket        (agent_pipeline_008_source0_startofpacket),             //                .startofpacket
		.cp_endofpacket          (agent_pipeline_008_source0_endofpacket),               //                .endofpacket
		.cp_channel              (agent_pipeline_008_source0_channel),                   //                .channel
		.rf_sink_ready           (shared_mutex_pio_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (shared_mutex_pio_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (shared_mutex_pio_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (shared_mutex_pio_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (shared_mutex_pio_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (shared_mutex_pio_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (shared_mutex_pio_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (shared_mutex_pio_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (shared_mutex_pio_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (shared_mutex_pio_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (shared_mutex_pio_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (shared_mutex_pio_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (shared_mutex_pio_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (103),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) shared_mutex_pio_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                        //       clk.clk
		.reset             (shared_PIO_reset_sink_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (shared_mutex_pio_s1_agent_rf_source_data),             //        in.data
		.in_valid          (shared_mutex_pio_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (shared_mutex_pio_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (shared_mutex_pio_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (shared_mutex_pio_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (shared_mutex_pio_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (shared_mutex_pio_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (shared_mutex_pio_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (shared_mutex_pio_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (shared_mutex_pio_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (101),
		.PKT_ORI_BURST_SIZE_L      (99),
		.PKT_RESPONSE_STATUS_H     (98),
		.PKT_RESPONSE_STATUS_L     (97),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (92),
		.PKT_PROTECTION_L          (90),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (88),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (102),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) shared_mailbox_avmm_msg_sender_agent (
		.clk                     (clk_0_clk_clk),                                                   //             clk.clk
		.reset                   (shared_PIO_reset_sink_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (shared_mailbox_avmm_msg_sender_agent_m0_address),                 //              m0.address
		.m0_burstcount           (shared_mailbox_avmm_msg_sender_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (shared_mailbox_avmm_msg_sender_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (shared_mailbox_avmm_msg_sender_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (shared_mailbox_avmm_msg_sender_agent_m0_lock),                    //                .lock
		.m0_readdata             (shared_mailbox_avmm_msg_sender_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (shared_mailbox_avmm_msg_sender_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (shared_mailbox_avmm_msg_sender_agent_m0_read),                    //                .read
		.m0_waitrequest          (shared_mailbox_avmm_msg_sender_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (shared_mailbox_avmm_msg_sender_agent_m0_writedata),               //                .writedata
		.m0_write                (shared_mailbox_avmm_msg_sender_agent_m0_write),                   //                .write
		.rp_endofpacket          (shared_mailbox_avmm_msg_sender_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (shared_mailbox_avmm_msg_sender_agent_rp_ready),                   //                .ready
		.rp_valid                (shared_mailbox_avmm_msg_sender_agent_rp_valid),                   //                .valid
		.rp_data                 (shared_mailbox_avmm_msg_sender_agent_rp_data),                    //                .data
		.rp_startofpacket        (shared_mailbox_avmm_msg_sender_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_010_source0_ready),                                //              cp.ready
		.cp_valid                (agent_pipeline_010_source0_valid),                                //                .valid
		.cp_data                 (agent_pipeline_010_source0_data),                                 //                .data
		.cp_startofpacket        (agent_pipeline_010_source0_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (agent_pipeline_010_source0_endofpacket),                          //                .endofpacket
		.cp_channel              (agent_pipeline_010_source0_channel),                              //                .channel
		.rf_sink_ready           (shared_mailbox_avmm_msg_sender_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (shared_mailbox_avmm_msg_sender_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (shared_mailbox_avmm_msg_sender_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (shared_mailbox_avmm_msg_sender_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (shared_mailbox_avmm_msg_sender_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (shared_mailbox_avmm_msg_sender_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (shared_mailbox_avmm_msg_sender_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (shared_mailbox_avmm_msg_sender_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (shared_mailbox_avmm_msg_sender_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (shared_mailbox_avmm_msg_sender_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (shared_mailbox_avmm_msg_sender_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (shared_mailbox_avmm_msg_sender_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (shared_mailbox_avmm_msg_sender_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (103),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) shared_mailbox_avmm_msg_sender_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                   //       clk.clk
		.reset             (shared_PIO_reset_sink_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (shared_mailbox_avmm_msg_sender_agent_rf_source_data),             //        in.data
		.in_valid          (shared_mailbox_avmm_msg_sender_agent_rf_source_valid),            //          .valid
		.in_ready          (shared_mailbox_avmm_msg_sender_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (shared_mailbox_avmm_msg_sender_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (shared_mailbox_avmm_msg_sender_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (shared_mailbox_avmm_msg_sender_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (shared_mailbox_avmm_msg_sender_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (shared_mailbox_avmm_msg_sender_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (shared_mailbox_avmm_msg_sender_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (shared_mailbox_avmm_msg_sender_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	system_mm_interconnect_0_router router (
		.sink_ready         (cpu_1_0_mm_bridge_1_m0_agent_cp_ready),             //      sink.ready
		.sink_valid         (cpu_1_0_mm_bridge_1_m0_agent_cp_valid),             //          .valid
		.sink_data          (cpu_1_0_mm_bridge_1_m0_agent_cp_data),              //          .data
		.sink_startofpacket (cpu_1_0_mm_bridge_1_m0_agent_cp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (cpu_1_0_mm_bridge_1_m0_agent_cp_endofpacket),       //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (shared_PIO_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                  //       src.ready
		.src_valid          (router_src_valid),                                  //          .valid
		.src_data           (router_src_data),                                   //          .data
		.src_channel        (router_src_channel),                                //          .channel
		.src_startofpacket  (router_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                             //          .endofpacket
	);

	system_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (cpu_0_0_outgoing_master_agent_cp_ready),            //      sink.ready
		.sink_valid         (cpu_0_0_outgoing_master_agent_cp_valid),            //          .valid
		.sink_data          (cpu_0_0_outgoing_master_agent_cp_data),             //          .data
		.sink_startofpacket (cpu_0_0_outgoing_master_agent_cp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (cpu_0_0_outgoing_master_agent_cp_endofpacket),      //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (shared_PIO_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                              //       src.ready
		.src_valid          (router_001_src_valid),                              //          .valid
		.src_data           (router_001_src_data),                               //          .data
		.src_channel        (router_001_src_channel),                            //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                         //          .endofpacket
	);

	system_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (agent_pipeline_001_source0_ready),                  //      sink.ready
		.sink_valid         (agent_pipeline_001_source0_valid),                  //          .valid
		.sink_data          (agent_pipeline_001_source0_data),                   //          .data
		.sink_startofpacket (agent_pipeline_001_source0_startofpacket),          //          .startofpacket
		.sink_endofpacket   (agent_pipeline_001_source0_endofpacket),            //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (shared_PIO_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                              //       src.ready
		.src_valid          (router_002_src_valid),                              //          .valid
		.src_data           (router_002_src_data),                               //          .data
		.src_channel        (router_002_src_channel),                            //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                         //          .endofpacket
	);

	system_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (agent_pipeline_003_source0_ready),                  //      sink.ready
		.sink_valid         (agent_pipeline_003_source0_valid),                  //          .valid
		.sink_data          (agent_pipeline_003_source0_data),                   //          .data
		.sink_startofpacket (agent_pipeline_003_source0_startofpacket),          //          .startofpacket
		.sink_endofpacket   (agent_pipeline_003_source0_endofpacket),            //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (shared_PIO_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                              //       src.ready
		.src_valid          (router_003_src_valid),                              //          .valid
		.src_data           (router_003_src_data),                               //          .data
		.src_channel        (router_003_src_channel),                            //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                         //          .endofpacket
	);

	system_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (agent_pipeline_005_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_005_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_005_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_005_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_005_source0_endofpacket),   //          .endofpacket
		.clk                (pll_0_outclk0_clk),                        //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_004_src_ready),                     //       src.ready
		.src_valid          (router_004_src_valid),                     //          .valid
		.src_data           (router_004_src_data),                      //          .data
		.src_channel        (router_004_src_channel),                   //          .channel
		.src_startofpacket  (router_004_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                //          .endofpacket
	);

	system_mm_interconnect_0_router_005 router_005 (
		.sink_ready         (agent_pipeline_007_source0_ready),                   //      sink.ready
		.sink_valid         (agent_pipeline_007_source0_valid),                   //          .valid
		.sink_data          (agent_pipeline_007_source0_data),                    //          .data
		.sink_startofpacket (agent_pipeline_007_source0_startofpacket),           //          .startofpacket
		.sink_endofpacket   (agent_pipeline_007_source0_endofpacket),             //          .endofpacket
		.clk                (pll_0_outclk1_clk),                                  //       clk.clk
		.reset              (sdram_controller_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                               //       src.ready
		.src_valid          (router_005_src_valid),                               //          .valid
		.src_data           (router_005_src_data),                                //          .data
		.src_channel        (router_005_src_channel),                             //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                          //          .endofpacket
	);

	system_mm_interconnect_0_router_004 router_006 (
		.sink_ready         (agent_pipeline_009_source0_ready),                  //      sink.ready
		.sink_valid         (agent_pipeline_009_source0_valid),                  //          .valid
		.sink_data          (agent_pipeline_009_source0_data),                   //          .data
		.sink_startofpacket (agent_pipeline_009_source0_startofpacket),          //          .startofpacket
		.sink_endofpacket   (agent_pipeline_009_source0_endofpacket),            //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (shared_PIO_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                              //       src.ready
		.src_valid          (router_006_src_valid),                              //          .valid
		.src_data           (router_006_src_data),                               //          .data
		.src_channel        (router_006_src_channel),                            //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                         //          .endofpacket
	);

	system_mm_interconnect_0_router_007 router_007 (
		.sink_ready         (agent_pipeline_011_source0_ready),                  //      sink.ready
		.sink_valid         (agent_pipeline_011_source0_valid),                  //          .valid
		.sink_data          (agent_pipeline_011_source0_data),                   //          .data
		.sink_startofpacket (agent_pipeline_011_source0_startofpacket),          //          .startofpacket
		.sink_endofpacket   (agent_pipeline_011_source0_endofpacket),            //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (shared_PIO_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                              //       src.ready
		.src_valid          (router_007_src_valid),                              //          .valid
		.src_data           (router_007_src_data),                               //          .data
		.src_channel        (router_007_src_channel),                            //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                         //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (88),
		.PKT_DEST_ID_L             (86),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (83),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.MAX_OUTSTANDING_RESPONSES (25),
		.PIPELINED                 (0),
		.ST_DATA_W                 (102),
		.ST_CHANNEL_W              (6),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) cpu_1_0_mm_bridge_1_m0_limiter (
		.clk                    (clk_0_clk_clk),                                        //       clk.clk
		.reset                  (shared_PIO_reset_sink_reset_bridge_in_reset_reset),    // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                     //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                     //          .valid
		.cmd_sink_data          (router_src_data),                                      //          .data
		.cmd_sink_channel       (router_src_channel),                                   //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                             //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                               //          .endofpacket
		.cmd_src_ready          (cpu_1_0_mm_bridge_1_m0_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (cpu_1_0_mm_bridge_1_m0_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (cpu_1_0_mm_bridge_1_m0_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (cpu_1_0_mm_bridge_1_m0_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (cpu_1_0_mm_bridge_1_m0_limiter_cmd_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (cpu_1_0_mm_bridge_1_m0_limiter_cmd_src_valid),         //          .valid
		.rsp_sink_ready         (limiter_pipeline_001_source0_ready),                   //  rsp_sink.ready
		.rsp_sink_valid         (limiter_pipeline_001_source0_valid),                   //          .valid
		.rsp_sink_channel       (limiter_pipeline_001_source0_channel),                 //          .channel
		.rsp_sink_data          (limiter_pipeline_001_source0_data),                    //          .data
		.rsp_sink_startofpacket (limiter_pipeline_001_source0_startofpacket),           //          .startofpacket
		.rsp_sink_endofpacket   (limiter_pipeline_001_source0_endofpacket),             //          .endofpacket
		.rsp_src_ready          (cpu_1_0_mm_bridge_1_m0_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (cpu_1_0_mm_bridge_1_m0_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (cpu_1_0_mm_bridge_1_m0_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (cpu_1_0_mm_bridge_1_m0_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (cpu_1_0_mm_bridge_1_m0_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (cpu_1_0_mm_bridge_1_m0_limiter_rsp_src_endofpacket)    //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (88),
		.PKT_DEST_ID_L             (86),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (83),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.MAX_OUTSTANDING_RESPONSES (25),
		.PIPELINED                 (0),
		.ST_DATA_W                 (102),
		.ST_CHANNEL_W              (6),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) cpu_0_0_outgoing_master_limiter (
		.clk                    (clk_0_clk_clk),                                         //       clk.clk
		.reset                  (shared_PIO_reset_sink_reset_bridge_in_reset_reset),     // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                  //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                  //          .valid
		.cmd_sink_data          (router_001_src_data),                                   //          .data
		.cmd_sink_channel       (router_001_src_channel),                                //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                          //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                            //          .endofpacket
		.cmd_src_ready          (cpu_0_0_outgoing_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (cpu_0_0_outgoing_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (cpu_0_0_outgoing_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (cpu_0_0_outgoing_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (cpu_0_0_outgoing_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (cpu_0_0_outgoing_master_limiter_cmd_src_valid),         //          .valid
		.rsp_sink_ready         (limiter_pipeline_003_source0_ready),                    //  rsp_sink.ready
		.rsp_sink_valid         (limiter_pipeline_003_source0_valid),                    //          .valid
		.rsp_sink_channel       (limiter_pipeline_003_source0_channel),                  //          .channel
		.rsp_sink_data          (limiter_pipeline_003_source0_data),                     //          .data
		.rsp_sink_startofpacket (limiter_pipeline_003_source0_startofpacket),            //          .startofpacket
		.rsp_sink_endofpacket   (limiter_pipeline_003_source0_endofpacket),              //          .endofpacket
		.rsp_src_ready          (cpu_0_0_outgoing_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (cpu_0_0_outgoing_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (cpu_0_0_outgoing_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (cpu_0_0_outgoing_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (cpu_0_0_outgoing_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (cpu_0_0_outgoing_master_limiter_rsp_src_endofpacket)    //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (36),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (54),
		.PKT_BYTE_CNT_H            (45),
		.PKT_BYTE_CNT_L            (43),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (49),
		.PKT_BURST_SIZE_L          (47),
		.PKT_BURST_TYPE_H          (51),
		.PKT_BURST_TYPE_L          (50),
		.PKT_BURSTWRAP_H           (46),
		.PKT_BURSTWRAP_L           (46),
		.PKT_TRANS_COMPRESSED_READ (37),
		.PKT_TRANS_WRITE           (39),
		.PKT_TRANS_READ            (40),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (75),
		.ST_CHANNEL_W              (6),
		.OUT_BYTE_CNT_H            (43),
		.OUT_BURSTWRAP_H           (46),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) shared_pio_avalon_slave_0_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                 //       cr0.clk
		.reset                 (shared_PIO_reset_sink_reset_bridge_in_reset_reset),             // cr0_reset.reset
		.sink0_valid           (shared_pio_avalon_slave_0_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (shared_pio_avalon_slave_0_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (shared_pio_avalon_slave_0_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (shared_pio_avalon_slave_0_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (shared_pio_avalon_slave_0_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (shared_pio_avalon_slave_0_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (shared_pio_avalon_slave_0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (shared_pio_avalon_slave_0_burst_adapter_source0_data),          //          .data
		.source0_channel       (shared_pio_avalon_slave_0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (shared_pio_avalon_slave_0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (shared_pio_avalon_slave_0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (shared_pio_avalon_slave_0_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (45),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (63),
		.PKT_BYTE_CNT_H            (54),
		.PKT_BYTE_CNT_L            (52),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (58),
		.PKT_BURST_SIZE_L          (56),
		.PKT_BURST_TYPE_H          (60),
		.PKT_BURST_TYPE_L          (59),
		.PKT_BURSTWRAP_H           (55),
		.PKT_BURSTWRAP_L           (55),
		.PKT_TRANS_COMPRESSED_READ (46),
		.PKT_TRANS_WRITE           (48),
		.PKT_TRANS_READ            (49),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (84),
		.ST_CHANNEL_W              (6),
		.OUT_BYTE_CNT_H            (53),
		.OUT_BURSTWRAP_H           (55),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) sdram_controller_s1_burst_adapter (
		.clk                   (pll_0_outclk1_clk),                                       //       cr0.clk
		.reset                 (sdram_controller_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (sdram_controller_s1_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sdram_controller_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sdram_controller_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sdram_controller_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sdram_controller_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sdram_controller_s1_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sdram_controller_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sdram_controller_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (sdram_controller_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sdram_controller_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sdram_controller_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sdram_controller_s1_burst_adapter_source0_ready)          //          .ready
	);

	system_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (shared_PIO_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (limiter_pipeline_source0_ready),                    //      sink.ready
		.sink_channel       (limiter_pipeline_source0_channel),                  //          .channel
		.sink_data          (limiter_pipeline_source0_data),                     //          .data
		.sink_startofpacket (limiter_pipeline_source0_startofpacket),            //          .startofpacket
		.sink_endofpacket   (limiter_pipeline_source0_endofpacket),              //          .endofpacket
		.sink_valid         (limiter_pipeline_source0_valid),                    //          .valid
		.src0_ready         (cmd_demux_src0_ready),                              //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                              //          .valid
		.src0_data          (cmd_demux_src0_data),                               //          .data
		.src0_channel       (cmd_demux_src0_channel),                            //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                              //      src1.ready
		.src1_valid         (cmd_demux_src1_valid),                              //          .valid
		.src1_data          (cmd_demux_src1_data),                               //          .data
		.src1_channel       (cmd_demux_src1_channel),                            //          .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                        //          .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                              //      src2.ready
		.src2_valid         (cmd_demux_src2_valid),                              //          .valid
		.src2_data          (cmd_demux_src2_data),                               //          .data
		.src2_channel       (cmd_demux_src2_channel),                            //          .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                      //          .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                        //          .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                              //      src3.ready
		.src3_valid         (cmd_demux_src3_valid),                              //          .valid
		.src3_data          (cmd_demux_src3_data),                               //          .data
		.src3_channel       (cmd_demux_src3_channel),                            //          .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                      //          .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                        //          .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                              //      src4.ready
		.src4_valid         (cmd_demux_src4_valid),                              //          .valid
		.src4_data          (cmd_demux_src4_data),                               //          .data
		.src4_channel       (cmd_demux_src4_channel),                            //          .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                      //          .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket)                         //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (shared_PIO_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (limiter_pipeline_002_source0_ready),                //      sink.ready
		.sink_channel       (limiter_pipeline_002_source0_channel),              //          .channel
		.sink_data          (limiter_pipeline_002_source0_data),                 //          .data
		.sink_startofpacket (limiter_pipeline_002_source0_startofpacket),        //          .startofpacket
		.sink_endofpacket   (limiter_pipeline_002_source0_endofpacket),          //          .endofpacket
		.sink_valid         (limiter_pipeline_002_source0_valid),                //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                          //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                          //          .valid
		.src0_data          (cmd_demux_001_src0_data),                           //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                        //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                    //          .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                          //      src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                          //          .valid
		.src1_data          (cmd_demux_001_src1_data),                           //          .data
		.src1_channel       (cmd_demux_001_src1_channel),                        //          .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                  //          .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                    //          .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                          //      src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                          //          .valid
		.src2_data          (cmd_demux_001_src2_data),                           //          .data
		.src2_channel       (cmd_demux_001_src2_channel),                        //          .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                  //          .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),                    //          .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                          //      src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                          //          .valid
		.src3_data          (cmd_demux_001_src3_data),                           //          .data
		.src3_channel       (cmd_demux_001_src3_channel),                        //          .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),                  //          .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket),                    //          .endofpacket
		.src4_ready         (cmd_demux_001_src4_ready),                          //      src4.ready
		.src4_valid         (cmd_demux_001_src4_valid),                          //          .valid
		.src4_data          (cmd_demux_001_src4_data),                           //          .data
		.src4_channel       (cmd_demux_001_src4_channel),                        //          .channel
		.src4_startofpacket (cmd_demux_001_src4_startofpacket),                  //          .startofpacket
		.src4_endofpacket   (cmd_demux_001_src4_endofpacket)                     //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (shared_PIO_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_src_valid),                                 //          .valid
		.src_data            (cmd_mux_src_data),                                  //          .data
		.src_channel         (cmd_mux_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (mux_pipeline_source0_ready),                        //     sink0.ready
		.sink0_valid         (mux_pipeline_source0_valid),                        //          .valid
		.sink0_channel       (mux_pipeline_source0_channel),                      //          .channel
		.sink0_data          (mux_pipeline_source0_data),                         //          .data
		.sink0_startofpacket (mux_pipeline_source0_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_source0_endofpacket),                  //          .endofpacket
		.sink1_ready         (mux_pipeline_001_source0_ready),                    //     sink1.ready
		.sink1_valid         (mux_pipeline_001_source0_valid),                    //          .valid
		.sink1_channel       (mux_pipeline_001_source0_channel),                  //          .channel
		.sink1_data          (mux_pipeline_001_source0_data),                     //          .data
		.sink1_startofpacket (mux_pipeline_001_source0_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_001_source0_endofpacket)               //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_001 cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (shared_PIO_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                             //          .valid
		.src_data            (cmd_mux_001_src_data),                              //          .data
		.src_channel         (cmd_mux_001_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (mux_pipeline_002_source0_ready),                    //     sink0.ready
		.sink0_valid         (mux_pipeline_002_source0_valid),                    //          .valid
		.sink0_channel       (mux_pipeline_002_source0_channel),                  //          .channel
		.sink0_data          (mux_pipeline_002_source0_data),                     //          .data
		.sink0_startofpacket (mux_pipeline_002_source0_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_002_source0_endofpacket)               //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (pll_0_outclk0_clk),                       //       clk.clk
		.reset               (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                   //          .valid
		.src_data            (cmd_mux_002_src_data),                    //          .data
		.src_channel         (cmd_mux_002_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),             //          .endofpacket
		.sink0_ready         (mux_pipeline_003_source0_ready),          //     sink0.ready
		.sink0_valid         (mux_pipeline_003_source0_valid),          //          .valid
		.sink0_channel       (mux_pipeline_003_source0_channel),        //          .channel
		.sink0_data          (mux_pipeline_003_source0_data),           //          .data
		.sink0_startofpacket (mux_pipeline_003_source0_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_003_source0_endofpacket),    //          .endofpacket
		.sink1_ready         (mux_pipeline_004_source0_ready),          //     sink1.ready
		.sink1_valid         (mux_pipeline_004_source0_valid),          //          .valid
		.sink1_channel       (mux_pipeline_004_source0_channel),        //          .channel
		.sink1_data          (mux_pipeline_004_source0_data),           //          .data
		.sink1_startofpacket (mux_pipeline_004_source0_startofpacket),  //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_004_source0_endofpacket)     //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (pll_0_outclk1_clk),                                  //       clk.clk
		.reset               (sdram_controller_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                              //          .valid
		.src_data            (cmd_mux_003_src_data),                               //          .data
		.src_channel         (cmd_mux_003_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (mux_pipeline_005_source0_ready),                     //     sink0.ready
		.sink0_valid         (mux_pipeline_005_source0_valid),                     //          .valid
		.sink0_channel       (mux_pipeline_005_source0_channel),                   //          .channel
		.sink0_data          (mux_pipeline_005_source0_data),                      //          .data
		.sink0_startofpacket (mux_pipeline_005_source0_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_005_source0_endofpacket),               //          .endofpacket
		.sink1_ready         (mux_pipeline_006_source0_ready),                     //     sink1.ready
		.sink1_valid         (mux_pipeline_006_source0_valid),                     //          .valid
		.sink1_channel       (mux_pipeline_006_source0_channel),                   //          .channel
		.sink1_data          (mux_pipeline_006_source0_data),                      //          .data
		.sink1_startofpacket (mux_pipeline_006_source0_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_006_source0_endofpacket)                //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (shared_PIO_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                             //          .valid
		.src_data            (cmd_mux_004_src_data),                              //          .data
		.src_channel         (cmd_mux_004_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (mux_pipeline_007_source0_ready),                    //     sink0.ready
		.sink0_valid         (mux_pipeline_007_source0_valid),                    //          .valid
		.sink0_channel       (mux_pipeline_007_source0_channel),                  //          .channel
		.sink0_data          (mux_pipeline_007_source0_data),                     //          .data
		.sink0_startofpacket (mux_pipeline_007_source0_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_007_source0_endofpacket),              //          .endofpacket
		.sink1_ready         (mux_pipeline_008_source0_ready),                    //     sink1.ready
		.sink1_valid         (mux_pipeline_008_source0_valid),                    //          .valid
		.sink1_channel       (mux_pipeline_008_source0_channel),                  //          .channel
		.sink1_data          (mux_pipeline_008_source0_data),                     //          .data
		.sink1_startofpacket (mux_pipeline_008_source0_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_008_source0_endofpacket)               //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_001 cmd_mux_005 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (shared_PIO_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                             //          .valid
		.src_data            (cmd_mux_005_src_data),                              //          .data
		.src_channel         (cmd_mux_005_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (mux_pipeline_009_source0_ready),                    //     sink0.ready
		.sink0_valid         (mux_pipeline_009_source0_valid),                    //          .valid
		.sink0_channel       (mux_pipeline_009_source0_channel),                  //          .channel
		.sink0_data          (mux_pipeline_009_source0_data),                     //          .data
		.sink0_startofpacket (mux_pipeline_009_source0_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_009_source0_endofpacket)               //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                                 //       clk.clk
		.reset              (shared_PIO_reset_sink_reset_bridge_in_reset_reset),             // clk_reset.reset
		.sink_ready         (shared_pio_avalon_slave_0_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (shared_pio_avalon_slave_0_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (shared_pio_avalon_slave_0_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (shared_pio_avalon_slave_0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (shared_pio_avalon_slave_0_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (shared_pio_avalon_slave_0_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                          //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                          //          .valid
		.src0_data          (rsp_demux_src0_data),                                           //          .data
		.src0_channel       (rsp_demux_src0_channel),                                        //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                    //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                          //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                          //          .valid
		.src1_data          (rsp_demux_src1_data),                                           //          .data
		.src1_channel       (rsp_demux_src1_channel),                                        //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                                  //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                                     //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux_001 rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (shared_PIO_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                              //      sink.ready
		.sink_channel       (router_003_src_channel),                            //          .channel
		.sink_data          (router_003_src_data),                               //          .data
		.sink_startofpacket (router_003_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_003_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_001_src0_data),                           //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                     //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux rsp_demux_002 (
		.clk                (pll_0_outclk0_clk),                       //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                    //      sink.ready
		.sink_channel       (router_004_src_channel),                  //          .channel
		.sink_data          (router_004_src_data),                     //          .data
		.sink_startofpacket (router_004_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_004_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                //          .valid
		.src0_data          (rsp_demux_002_src0_data),                 //          .data
		.src0_channel       (rsp_demux_002_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                //          .valid
		.src1_data          (rsp_demux_002_src1_data),                 //          .data
		.src1_channel       (rsp_demux_002_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)           //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux_003 rsp_demux_003 (
		.clk                (pll_0_outclk1_clk),                                       //       clk.clk
		.reset              (sdram_controller_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.sink_ready         (sdram_controller_s1_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sdram_controller_s1_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sdram_controller_s1_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sdram_controller_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sdram_controller_s1_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sdram_controller_s1_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_003_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                          //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                                //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                                //          .valid
		.src1_data          (rsp_demux_003_src1_data),                                 //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                              //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),                        //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)                           //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux rsp_demux_004 (
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (shared_PIO_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                              //      sink.ready
		.sink_channel       (router_006_src_channel),                            //          .channel
		.sink_data          (router_006_src_data),                               //          .data
		.sink_startofpacket (router_006_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_006_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_004_src0_data),                           //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),                    //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                          //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                          //          .valid
		.src1_data          (rsp_demux_004_src1_data),                           //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                        //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),                  //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)                     //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux_001 rsp_demux_005 (
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (shared_PIO_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                              //      sink.ready
		.sink_channel       (router_007_src_channel),                            //          .channel
		.sink_data          (router_007_src_data),                               //          .data
		.sink_startofpacket (router_007_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_007_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_005_src0_data),                           //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                     //          .endofpacket
	);

	system_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (shared_PIO_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                 //       src.ready
		.src_valid           (rsp_mux_src_valid),                                 //          .valid
		.src_data            (rsp_mux_src_data),                                  //          .data
		.src_channel         (rsp_mux_src_channel),                               //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (mux_pipeline_010_source0_ready),                    //     sink0.ready
		.sink0_valid         (mux_pipeline_010_source0_valid),                    //          .valid
		.sink0_channel       (mux_pipeline_010_source0_channel),                  //          .channel
		.sink0_data          (mux_pipeline_010_source0_data),                     //          .data
		.sink0_startofpacket (mux_pipeline_010_source0_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_010_source0_endofpacket),              //          .endofpacket
		.sink1_ready         (mux_pipeline_011_source0_ready),                    //     sink1.ready
		.sink1_valid         (mux_pipeline_011_source0_valid),                    //          .valid
		.sink1_channel       (mux_pipeline_011_source0_channel),                  //          .channel
		.sink1_data          (mux_pipeline_011_source0_data),                     //          .data
		.sink1_startofpacket (mux_pipeline_011_source0_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_011_source0_endofpacket),              //          .endofpacket
		.sink2_ready         (mux_pipeline_012_source0_ready),                    //     sink2.ready
		.sink2_valid         (mux_pipeline_012_source0_valid),                    //          .valid
		.sink2_channel       (mux_pipeline_012_source0_channel),                  //          .channel
		.sink2_data          (mux_pipeline_012_source0_data),                     //          .data
		.sink2_startofpacket (mux_pipeline_012_source0_startofpacket),            //          .startofpacket
		.sink2_endofpacket   (mux_pipeline_012_source0_endofpacket),              //          .endofpacket
		.sink3_ready         (mux_pipeline_013_source0_ready),                    //     sink3.ready
		.sink3_valid         (mux_pipeline_013_source0_valid),                    //          .valid
		.sink3_channel       (mux_pipeline_013_source0_channel),                  //          .channel
		.sink3_data          (mux_pipeline_013_source0_data),                     //          .data
		.sink3_startofpacket (mux_pipeline_013_source0_startofpacket),            //          .startofpacket
		.sink3_endofpacket   (mux_pipeline_013_source0_endofpacket),              //          .endofpacket
		.sink4_ready         (mux_pipeline_014_source0_ready),                    //     sink4.ready
		.sink4_valid         (mux_pipeline_014_source0_valid),                    //          .valid
		.sink4_channel       (mux_pipeline_014_source0_channel),                  //          .channel
		.sink4_data          (mux_pipeline_014_source0_data),                     //          .data
		.sink4_startofpacket (mux_pipeline_014_source0_startofpacket),            //          .startofpacket
		.sink4_endofpacket   (mux_pipeline_014_source0_endofpacket)               //          .endofpacket
	);

	system_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (shared_PIO_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                             //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                             //          .valid
		.src_data            (rsp_mux_001_src_data),                              //          .data
		.src_channel         (rsp_mux_001_src_channel),                           //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (mux_pipeline_015_source0_ready),                    //     sink0.ready
		.sink0_valid         (mux_pipeline_015_source0_valid),                    //          .valid
		.sink0_channel       (mux_pipeline_015_source0_channel),                  //          .channel
		.sink0_data          (mux_pipeline_015_source0_data),                     //          .data
		.sink0_startofpacket (mux_pipeline_015_source0_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_015_source0_endofpacket),              //          .endofpacket
		.sink1_ready         (mux_pipeline_016_source0_ready),                    //     sink1.ready
		.sink1_valid         (mux_pipeline_016_source0_valid),                    //          .valid
		.sink1_channel       (mux_pipeline_016_source0_channel),                  //          .channel
		.sink1_data          (mux_pipeline_016_source0_data),                     //          .data
		.sink1_startofpacket (mux_pipeline_016_source0_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_016_source0_endofpacket),              //          .endofpacket
		.sink2_ready         (mux_pipeline_017_source0_ready),                    //     sink2.ready
		.sink2_valid         (mux_pipeline_017_source0_valid),                    //          .valid
		.sink2_channel       (mux_pipeline_017_source0_channel),                  //          .channel
		.sink2_data          (mux_pipeline_017_source0_data),                     //          .data
		.sink2_startofpacket (mux_pipeline_017_source0_startofpacket),            //          .startofpacket
		.sink2_endofpacket   (mux_pipeline_017_source0_endofpacket),              //          .endofpacket
		.sink3_ready         (mux_pipeline_018_source0_ready),                    //     sink3.ready
		.sink3_valid         (mux_pipeline_018_source0_valid),                    //          .valid
		.sink3_channel       (mux_pipeline_018_source0_channel),                  //          .channel
		.sink3_data          (mux_pipeline_018_source0_data),                     //          .data
		.sink3_startofpacket (mux_pipeline_018_source0_startofpacket),            //          .startofpacket
		.sink3_endofpacket   (mux_pipeline_018_source0_endofpacket),              //          .endofpacket
		.sink4_ready         (mux_pipeline_019_source0_ready),                    //     sink4.ready
		.sink4_valid         (mux_pipeline_019_source0_valid),                    //          .valid
		.sink4_channel       (mux_pipeline_019_source0_channel),                  //          .channel
		.sink4_data          (mux_pipeline_019_source0_data),                     //          .data
		.sink4_startofpacket (mux_pipeline_019_source0_startofpacket),            //          .startofpacket
		.sink4_endofpacket   (mux_pipeline_019_source0_endofpacket)               //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (36),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (45),
		.IN_PKT_BYTE_CNT_L             (43),
		.IN_PKT_TRANS_COMPRESSED_READ  (37),
		.IN_PKT_TRANS_WRITE            (39),
		.IN_PKT_BURSTWRAP_H            (46),
		.IN_PKT_BURSTWRAP_L            (46),
		.IN_PKT_BURST_SIZE_H           (49),
		.IN_PKT_BURST_SIZE_L           (47),
		.IN_PKT_RESPONSE_STATUS_H      (71),
		.IN_PKT_RESPONSE_STATUS_L      (70),
		.IN_PKT_TRANS_EXCLUSIVE        (42),
		.IN_PKT_BURST_TYPE_H           (51),
		.IN_PKT_BURST_TYPE_L           (50),
		.IN_PKT_ORI_BURST_SIZE_L       (72),
		.IN_PKT_ORI_BURST_SIZE_H       (74),
		.IN_ST_DATA_W                  (75),
		.OUT_PKT_ADDR_H                (63),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (72),
		.OUT_PKT_BYTE_CNT_L            (70),
		.OUT_PKT_TRANS_COMPRESSED_READ (64),
		.OUT_PKT_BURST_SIZE_H          (76),
		.OUT_PKT_BURST_SIZE_L          (74),
		.OUT_PKT_RESPONSE_STATUS_H     (98),
		.OUT_PKT_RESPONSE_STATUS_L     (97),
		.OUT_PKT_TRANS_EXCLUSIVE       (69),
		.OUT_PKT_BURST_TYPE_H          (78),
		.OUT_PKT_BURST_TYPE_L          (77),
		.OUT_PKT_ORI_BURST_SIZE_L      (99),
		.OUT_PKT_ORI_BURST_SIZE_H      (101),
		.OUT_ST_DATA_W                 (102),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) shared_pio_avalon_slave_0_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                 //       clk.clk
		.reset                (shared_PIO_reset_sink_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_valid             (router_002_src_valid),                                          //      sink.valid
		.in_channel           (router_002_src_channel),                                        //          .channel
		.in_startofpacket     (router_002_src_startofpacket),                                  //          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                                    //          .endofpacket
		.in_ready             (router_002_src_ready),                                          //          .ready
		.in_data              (router_002_src_data),                                           //          .data
		.out_endofpacket      (shared_pio_avalon_slave_0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (shared_pio_avalon_slave_0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (shared_pio_avalon_slave_0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (shared_pio_avalon_slave_0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (shared_pio_avalon_slave_0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (shared_pio_avalon_slave_0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (45),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (54),
		.IN_PKT_BYTE_CNT_L             (52),
		.IN_PKT_TRANS_COMPRESSED_READ  (46),
		.IN_PKT_TRANS_WRITE            (48),
		.IN_PKT_BURSTWRAP_H            (55),
		.IN_PKT_BURSTWRAP_L            (55),
		.IN_PKT_BURST_SIZE_H           (58),
		.IN_PKT_BURST_SIZE_L           (56),
		.IN_PKT_RESPONSE_STATUS_H      (80),
		.IN_PKT_RESPONSE_STATUS_L      (79),
		.IN_PKT_TRANS_EXCLUSIVE        (51),
		.IN_PKT_BURST_TYPE_H           (60),
		.IN_PKT_BURST_TYPE_L           (59),
		.IN_PKT_ORI_BURST_SIZE_L       (81),
		.IN_PKT_ORI_BURST_SIZE_H       (83),
		.IN_ST_DATA_W                  (84),
		.OUT_PKT_ADDR_H                (63),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (72),
		.OUT_PKT_BYTE_CNT_L            (70),
		.OUT_PKT_TRANS_COMPRESSED_READ (64),
		.OUT_PKT_BURST_SIZE_H          (76),
		.OUT_PKT_BURST_SIZE_L          (74),
		.OUT_PKT_RESPONSE_STATUS_H     (98),
		.OUT_PKT_RESPONSE_STATUS_L     (97),
		.OUT_PKT_TRANS_EXCLUSIVE       (69),
		.OUT_PKT_BURST_TYPE_H          (78),
		.OUT_PKT_BURST_TYPE_L          (77),
		.OUT_PKT_ORI_BURST_SIZE_L      (99),
		.OUT_PKT_ORI_BURST_SIZE_H      (101),
		.OUT_ST_DATA_W                 (102),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_controller_s1_rsp_width_adapter (
		.clk                  (pll_0_outclk1_clk),                                       //       clk.clk
		.reset                (sdram_controller_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_valid             (router_005_src_valid),                                    //      sink.valid
		.in_channel           (router_005_src_channel),                                  //          .channel
		.in_startofpacket     (router_005_src_startofpacket),                            //          .startofpacket
		.in_endofpacket       (router_005_src_endofpacket),                              //          .endofpacket
		.in_ready             (router_005_src_ready),                                    //          .ready
		.in_data              (router_005_src_data),                                     //          .data
		.out_endofpacket      (sdram_controller_s1_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_controller_s1_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_controller_s1_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_controller_s1_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_controller_s1_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_controller_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                   // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (63),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (72),
		.IN_PKT_BYTE_CNT_L             (70),
		.IN_PKT_TRANS_COMPRESSED_READ  (64),
		.IN_PKT_TRANS_WRITE            (66),
		.IN_PKT_BURSTWRAP_H            (73),
		.IN_PKT_BURSTWRAP_L            (73),
		.IN_PKT_BURST_SIZE_H           (76),
		.IN_PKT_BURST_SIZE_L           (74),
		.IN_PKT_RESPONSE_STATUS_H      (98),
		.IN_PKT_RESPONSE_STATUS_L      (97),
		.IN_PKT_TRANS_EXCLUSIVE        (69),
		.IN_PKT_BURST_TYPE_H           (78),
		.IN_PKT_BURST_TYPE_L           (77),
		.IN_PKT_ORI_BURST_SIZE_L       (99),
		.IN_PKT_ORI_BURST_SIZE_H       (101),
		.IN_ST_DATA_W                  (102),
		.OUT_PKT_ADDR_H                (36),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (45),
		.OUT_PKT_BYTE_CNT_L            (43),
		.OUT_PKT_TRANS_COMPRESSED_READ (37),
		.OUT_PKT_BURST_SIZE_H          (49),
		.OUT_PKT_BURST_SIZE_L          (47),
		.OUT_PKT_RESPONSE_STATUS_H     (71),
		.OUT_PKT_RESPONSE_STATUS_L     (70),
		.OUT_PKT_TRANS_EXCLUSIVE       (42),
		.OUT_PKT_BURST_TYPE_H          (51),
		.OUT_PKT_BURST_TYPE_L          (50),
		.OUT_PKT_ORI_BURST_SIZE_L      (72),
		.OUT_PKT_ORI_BURST_SIZE_H      (74),
		.OUT_ST_DATA_W                 (75),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) shared_pio_avalon_slave_0_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                 //       clk.clk
		.reset                (shared_PIO_reset_sink_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                             //      sink.valid
		.in_channel           (cmd_mux_src_channel),                                           //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                     //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                       //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                             //          .ready
		.in_data              (cmd_mux_src_data),                                              //          .data
		.out_endofpacket      (shared_pio_avalon_slave_0_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (shared_pio_avalon_slave_0_cmd_width_adapter_src_data),          //          .data
		.out_channel          (shared_pio_avalon_slave_0_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (shared_pio_avalon_slave_0_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (shared_pio_avalon_slave_0_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (shared_pio_avalon_slave_0_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (63),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (72),
		.IN_PKT_BYTE_CNT_L             (70),
		.IN_PKT_TRANS_COMPRESSED_READ  (64),
		.IN_PKT_TRANS_WRITE            (66),
		.IN_PKT_BURSTWRAP_H            (73),
		.IN_PKT_BURSTWRAP_L            (73),
		.IN_PKT_BURST_SIZE_H           (76),
		.IN_PKT_BURST_SIZE_L           (74),
		.IN_PKT_RESPONSE_STATUS_H      (98),
		.IN_PKT_RESPONSE_STATUS_L      (97),
		.IN_PKT_TRANS_EXCLUSIVE        (69),
		.IN_PKT_BURST_TYPE_H           (78),
		.IN_PKT_BURST_TYPE_L           (77),
		.IN_PKT_ORI_BURST_SIZE_L       (99),
		.IN_PKT_ORI_BURST_SIZE_H       (101),
		.IN_ST_DATA_W                  (102),
		.OUT_PKT_ADDR_H                (45),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (54),
		.OUT_PKT_BYTE_CNT_L            (52),
		.OUT_PKT_TRANS_COMPRESSED_READ (46),
		.OUT_PKT_BURST_SIZE_H          (58),
		.OUT_PKT_BURST_SIZE_L          (56),
		.OUT_PKT_RESPONSE_STATUS_H     (80),
		.OUT_PKT_RESPONSE_STATUS_L     (79),
		.OUT_PKT_TRANS_EXCLUSIVE       (51),
		.OUT_PKT_BURST_TYPE_H          (60),
		.OUT_PKT_BURST_TYPE_L          (59),
		.OUT_PKT_ORI_BURST_SIZE_L      (81),
		.OUT_PKT_ORI_BURST_SIZE_H      (83),
		.OUT_ST_DATA_W                 (84),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_controller_s1_cmd_width_adapter (
		.clk                  (pll_0_outclk1_clk),                                       //       clk.clk
		.reset                (sdram_controller_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_valid             (cmd_mux_003_src_valid),                                   //      sink.valid
		.in_channel           (cmd_mux_003_src_channel),                                 //          .channel
		.in_startofpacket     (cmd_mux_003_src_startofpacket),                           //          .startofpacket
		.in_endofpacket       (cmd_mux_003_src_endofpacket),                             //          .endofpacket
		.in_ready             (cmd_mux_003_src_ready),                                   //          .ready
		.in_data              (cmd_mux_003_src_data),                                    //          .data
		.out_endofpacket      (sdram_controller_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_controller_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sdram_controller_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_controller_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_controller_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_controller_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                   // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (102),
		.BITS_PER_SYMBOL     (102),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (6),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (clk_0_clk_clk),                                     //        in_clk.clk
		.in_reset          (shared_PIO_reset_sink_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk0_clk),                                 //       out_clk.clk
		.out_reset         (sysid_reset_reset_bridge_in_reset_reset),           // out_clk_reset.reset
		.in_ready          (cmd_demux_src2_ready),                              //            in.ready
		.in_valid          (cmd_demux_src2_valid),                              //              .valid
		.in_startofpacket  (cmd_demux_src2_startofpacket),                      //              .startofpacket
		.in_endofpacket    (cmd_demux_src2_endofpacket),                        //              .endofpacket
		.in_channel        (cmd_demux_src2_channel),                            //              .channel
		.in_data           (cmd_demux_src2_data),                               //              .data
		.out_ready         (crosser_out_ready),                                 //           out.ready
		.out_valid         (crosser_out_valid),                                 //              .valid
		.out_startofpacket (crosser_out_startofpacket),                         //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                           //              .endofpacket
		.out_channel       (crosser_out_channel),                               //              .channel
		.out_data          (crosser_out_data),                                  //              .data
		.in_empty          (1'b0),                                              //   (terminated)
		.in_error          (1'b0),                                              //   (terminated)
		.out_empty         (),                                                  //   (terminated)
		.out_error         ()                                                   //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (102),
		.BITS_PER_SYMBOL     (102),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (6),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (clk_0_clk_clk),                                      //        in_clk.clk
		.in_reset          (shared_PIO_reset_sink_reset_bridge_in_reset_reset),  //  in_clk_reset.reset
		.out_clk           (pll_0_outclk1_clk),                                  //       out_clk.clk
		.out_reset         (sdram_controller_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src3_ready),                               //            in.ready
		.in_valid          (cmd_demux_src3_valid),                               //              .valid
		.in_startofpacket  (cmd_demux_src3_startofpacket),                       //              .startofpacket
		.in_endofpacket    (cmd_demux_src3_endofpacket),                         //              .endofpacket
		.in_channel        (cmd_demux_src3_channel),                             //              .channel
		.in_data           (cmd_demux_src3_data),                                //              .data
		.out_ready         (crosser_001_out_ready),                              //           out.ready
		.out_valid         (crosser_001_out_valid),                              //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                      //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                        //              .endofpacket
		.out_channel       (crosser_001_out_channel),                            //              .channel
		.out_data          (crosser_001_out_data),                               //              .data
		.in_empty          (1'b0),                                               //   (terminated)
		.in_error          (1'b0),                                               //   (terminated)
		.out_empty         (),                                                   //   (terminated)
		.out_error         ()                                                    //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (102),
		.BITS_PER_SYMBOL     (102),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (6),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (clk_0_clk_clk),                                     //        in_clk.clk
		.in_reset          (shared_PIO_reset_sink_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk0_clk),                                 //       out_clk.clk
		.out_reset         (sysid_reset_reset_bridge_in_reset_reset),           // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src1_ready),                          //            in.ready
		.in_valid          (cmd_demux_001_src1_valid),                          //              .valid
		.in_startofpacket  (cmd_demux_001_src1_startofpacket),                  //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src1_endofpacket),                    //              .endofpacket
		.in_channel        (cmd_demux_001_src1_channel),                        //              .channel
		.in_data           (cmd_demux_001_src1_data),                           //              .data
		.out_ready         (crosser_002_out_ready),                             //           out.ready
		.out_valid         (crosser_002_out_valid),                             //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                     //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                       //              .endofpacket
		.out_channel       (crosser_002_out_channel),                           //              .channel
		.out_data          (crosser_002_out_data),                              //              .data
		.in_empty          (1'b0),                                              //   (terminated)
		.in_error          (1'b0),                                              //   (terminated)
		.out_empty         (),                                                  //   (terminated)
		.out_error         ()                                                   //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (102),
		.BITS_PER_SYMBOL     (102),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (6),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (clk_0_clk_clk),                                      //        in_clk.clk
		.in_reset          (shared_PIO_reset_sink_reset_bridge_in_reset_reset),  //  in_clk_reset.reset
		.out_clk           (pll_0_outclk1_clk),                                  //       out_clk.clk
		.out_reset         (sdram_controller_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src2_ready),                           //            in.ready
		.in_valid          (cmd_demux_001_src2_valid),                           //              .valid
		.in_startofpacket  (cmd_demux_001_src2_startofpacket),                   //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src2_endofpacket),                     //              .endofpacket
		.in_channel        (cmd_demux_001_src2_channel),                         //              .channel
		.in_data           (cmd_demux_001_src2_data),                            //              .data
		.out_ready         (crosser_003_out_ready),                              //           out.ready
		.out_valid         (crosser_003_out_valid),                              //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                      //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                        //              .endofpacket
		.out_channel       (crosser_003_out_channel),                            //              .channel
		.out_data          (crosser_003_out_data),                               //              .data
		.in_empty          (1'b0),                                               //   (terminated)
		.in_error          (1'b0),                                               //   (terminated)
		.out_empty         (),                                                   //   (terminated)
		.out_error         ()                                                    //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (102),
		.BITS_PER_SYMBOL     (102),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (6),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_004 (
		.in_clk            (pll_0_outclk0_clk),                                 //        in_clk.clk
		.in_reset          (sysid_reset_reset_bridge_in_reset_reset),           //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                     //       out_clk.clk
		.out_reset         (shared_PIO_reset_sink_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_002_src0_ready),                          //            in.ready
		.in_valid          (rsp_demux_002_src0_valid),                          //              .valid
		.in_startofpacket  (rsp_demux_002_src0_startofpacket),                  //              .startofpacket
		.in_endofpacket    (rsp_demux_002_src0_endofpacket),                    //              .endofpacket
		.in_channel        (rsp_demux_002_src0_channel),                        //              .channel
		.in_data           (rsp_demux_002_src0_data),                           //              .data
		.out_ready         (crosser_004_out_ready),                             //           out.ready
		.out_valid         (crosser_004_out_valid),                             //              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                     //              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                       //              .endofpacket
		.out_channel       (crosser_004_out_channel),                           //              .channel
		.out_data          (crosser_004_out_data),                              //              .data
		.in_empty          (1'b0),                                              //   (terminated)
		.in_error          (1'b0),                                              //   (terminated)
		.out_empty         (),                                                  //   (terminated)
		.out_error         ()                                                   //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (102),
		.BITS_PER_SYMBOL     (102),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (6),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_005 (
		.in_clk            (pll_0_outclk0_clk),                                 //        in_clk.clk
		.in_reset          (sysid_reset_reset_bridge_in_reset_reset),           //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                     //       out_clk.clk
		.out_reset         (shared_PIO_reset_sink_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_002_src1_ready),                          //            in.ready
		.in_valid          (rsp_demux_002_src1_valid),                          //              .valid
		.in_startofpacket  (rsp_demux_002_src1_startofpacket),                  //              .startofpacket
		.in_endofpacket    (rsp_demux_002_src1_endofpacket),                    //              .endofpacket
		.in_channel        (rsp_demux_002_src1_channel),                        //              .channel
		.in_data           (rsp_demux_002_src1_data),                           //              .data
		.out_ready         (crosser_005_out_ready),                             //           out.ready
		.out_valid         (crosser_005_out_valid),                             //              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                     //              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                       //              .endofpacket
		.out_channel       (crosser_005_out_channel),                           //              .channel
		.out_data          (crosser_005_out_data),                              //              .data
		.in_empty          (1'b0),                                              //   (terminated)
		.in_error          (1'b0),                                              //   (terminated)
		.out_empty         (),                                                  //   (terminated)
		.out_error         ()                                                   //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (102),
		.BITS_PER_SYMBOL     (102),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (6),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_006 (
		.in_clk            (pll_0_outclk1_clk),                                  //        in_clk.clk
		.in_reset          (sdram_controller_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                      //       out_clk.clk
		.out_reset         (shared_PIO_reset_sink_reset_bridge_in_reset_reset),  // out_clk_reset.reset
		.in_ready          (rsp_demux_003_src0_ready),                           //            in.ready
		.in_valid          (rsp_demux_003_src0_valid),                           //              .valid
		.in_startofpacket  (rsp_demux_003_src0_startofpacket),                   //              .startofpacket
		.in_endofpacket    (rsp_demux_003_src0_endofpacket),                     //              .endofpacket
		.in_channel        (rsp_demux_003_src0_channel),                         //              .channel
		.in_data           (rsp_demux_003_src0_data),                            //              .data
		.out_ready         (crosser_006_out_ready),                              //           out.ready
		.out_valid         (crosser_006_out_valid),                              //              .valid
		.out_startofpacket (crosser_006_out_startofpacket),                      //              .startofpacket
		.out_endofpacket   (crosser_006_out_endofpacket),                        //              .endofpacket
		.out_channel       (crosser_006_out_channel),                            //              .channel
		.out_data          (crosser_006_out_data),                               //              .data
		.in_empty          (1'b0),                                               //   (terminated)
		.in_error          (1'b0),                                               //   (terminated)
		.out_empty         (),                                                   //   (terminated)
		.out_error         ()                                                    //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (102),
		.BITS_PER_SYMBOL     (102),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (6),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_007 (
		.in_clk            (pll_0_outclk1_clk),                                  //        in_clk.clk
		.in_reset          (sdram_controller_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                      //       out_clk.clk
		.out_reset         (shared_PIO_reset_sink_reset_bridge_in_reset_reset),  // out_clk_reset.reset
		.in_ready          (rsp_demux_003_src1_ready),                           //            in.ready
		.in_valid          (rsp_demux_003_src1_valid),                           //              .valid
		.in_startofpacket  (rsp_demux_003_src1_startofpacket),                   //              .startofpacket
		.in_endofpacket    (rsp_demux_003_src1_endofpacket),                     //              .endofpacket
		.in_channel        (rsp_demux_003_src1_channel),                         //              .channel
		.in_data           (rsp_demux_003_src1_data),                            //              .data
		.out_ready         (crosser_007_out_ready),                              //           out.ready
		.out_valid         (crosser_007_out_valid),                              //              .valid
		.out_startofpacket (crosser_007_out_startofpacket),                      //              .startofpacket
		.out_endofpacket   (crosser_007_out_endofpacket),                        //              .endofpacket
		.out_channel       (crosser_007_out_channel),                            //              .channel
		.out_data          (crosser_007_out_data),                               //              .data
		.in_empty          (1'b0),                                               //   (terminated)
		.in_error          (1'b0),                                               //   (terminated)
		.out_empty         (),                                                   //   (terminated)
		.out_error         ()                                                    //   (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (102),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline (
		.clk               (clk_0_clk_clk),                                        //       cr0.clk
		.reset             (shared_PIO_reset_sink_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.in_ready          (cpu_1_0_mm_bridge_1_m0_limiter_cmd_src_ready),         //     sink0.ready
		.in_valid          (cpu_1_0_mm_bridge_1_m0_limiter_cmd_src_valid),         //          .valid
		.in_startofpacket  (cpu_1_0_mm_bridge_1_m0_limiter_cmd_src_startofpacket), //          .startofpacket
		.in_endofpacket    (cpu_1_0_mm_bridge_1_m0_limiter_cmd_src_endofpacket),   //          .endofpacket
		.in_data           (cpu_1_0_mm_bridge_1_m0_limiter_cmd_src_data),          //          .data
		.in_channel        (cpu_1_0_mm_bridge_1_m0_limiter_cmd_src_channel),       //          .channel
		.out_ready         (limiter_pipeline_source0_ready),                       //   source0.ready
		.out_valid         (limiter_pipeline_source0_valid),                       //          .valid
		.out_startofpacket (limiter_pipeline_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (limiter_pipeline_source0_endofpacket),                 //          .endofpacket
		.out_data          (limiter_pipeline_source0_data),                        //          .data
		.out_channel       (limiter_pipeline_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (102),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_001 (
		.clk               (clk_0_clk_clk),                                     //       cr0.clk
		.reset             (shared_PIO_reset_sink_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_mux_src_ready),                                 //     sink0.ready
		.in_valid          (rsp_mux_src_valid),                                 //          .valid
		.in_startofpacket  (rsp_mux_src_startofpacket),                         //          .startofpacket
		.in_endofpacket    (rsp_mux_src_endofpacket),                           //          .endofpacket
		.in_data           (rsp_mux_src_data),                                  //          .data
		.in_channel        (rsp_mux_src_channel),                               //          .channel
		.out_ready         (limiter_pipeline_001_source0_ready),                //   source0.ready
		.out_valid         (limiter_pipeline_001_source0_valid),                //          .valid
		.out_startofpacket (limiter_pipeline_001_source0_startofpacket),        //          .startofpacket
		.out_endofpacket   (limiter_pipeline_001_source0_endofpacket),          //          .endofpacket
		.out_data          (limiter_pipeline_001_source0_data),                 //          .data
		.out_channel       (limiter_pipeline_001_source0_channel),              //          .channel
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_error          (1'b0)                                               // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (102),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_002 (
		.clk               (clk_0_clk_clk),                                         //       cr0.clk
		.reset             (shared_PIO_reset_sink_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.in_ready          (cpu_0_0_outgoing_master_limiter_cmd_src_ready),         //     sink0.ready
		.in_valid          (cpu_0_0_outgoing_master_limiter_cmd_src_valid),         //          .valid
		.in_startofpacket  (cpu_0_0_outgoing_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.in_endofpacket    (cpu_0_0_outgoing_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.in_data           (cpu_0_0_outgoing_master_limiter_cmd_src_data),          //          .data
		.in_channel        (cpu_0_0_outgoing_master_limiter_cmd_src_channel),       //          .channel
		.out_ready         (limiter_pipeline_002_source0_ready),                    //   source0.ready
		.out_valid         (limiter_pipeline_002_source0_valid),                    //          .valid
		.out_startofpacket (limiter_pipeline_002_source0_startofpacket),            //          .startofpacket
		.out_endofpacket   (limiter_pipeline_002_source0_endofpacket),              //          .endofpacket
		.out_data          (limiter_pipeline_002_source0_data),                     //          .data
		.out_channel       (limiter_pipeline_002_source0_channel),                  //          .channel
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_error          (1'b0)                                                   // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (102),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_003 (
		.clk               (clk_0_clk_clk),                                     //       cr0.clk
		.reset             (shared_PIO_reset_sink_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_mux_001_src_ready),                             //     sink0.ready
		.in_valid          (rsp_mux_001_src_valid),                             //          .valid
		.in_startofpacket  (rsp_mux_001_src_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_mux_001_src_endofpacket),                       //          .endofpacket
		.in_data           (rsp_mux_001_src_data),                              //          .data
		.in_channel        (rsp_mux_001_src_channel),                           //          .channel
		.out_ready         (limiter_pipeline_003_source0_ready),                //   source0.ready
		.out_valid         (limiter_pipeline_003_source0_valid),                //          .valid
		.out_startofpacket (limiter_pipeline_003_source0_startofpacket),        //          .startofpacket
		.out_endofpacket   (limiter_pipeline_003_source0_endofpacket),          //          .endofpacket
		.out_data          (limiter_pipeline_003_source0_data),                 //          .data
		.out_channel       (limiter_pipeline_003_source0_channel),              //          .channel
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_error          (1'b0)                                               // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (75),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline (
		.clk               (clk_0_clk_clk),                                                 //       cr0.clk
		.reset             (shared_PIO_reset_sink_reset_bridge_in_reset_reset),             // cr0_reset.reset
		.in_ready          (shared_pio_avalon_slave_0_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (shared_pio_avalon_slave_0_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (shared_pio_avalon_slave_0_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (shared_pio_avalon_slave_0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (shared_pio_avalon_slave_0_burst_adapter_source0_data),          //          .data
		.in_channel        (shared_pio_avalon_slave_0_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_source0_ready),                                  //   source0.ready
		.out_valid         (agent_pipeline_source0_valid),                                  //          .valid
		.out_startofpacket (agent_pipeline_source0_startofpacket),                          //          .startofpacket
		.out_endofpacket   (agent_pipeline_source0_endofpacket),                            //          .endofpacket
		.out_data          (agent_pipeline_source0_data),                                   //          .data
		.out_channel       (agent_pipeline_source0_channel),                                //          .channel
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_error          (1'b0)                                                           // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (75),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_001 (
		.clk               (clk_0_clk_clk),                                     //       cr0.clk
		.reset             (shared_PIO_reset_sink_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (shared_pio_avalon_slave_0_agent_rp_ready),          //     sink0.ready
		.in_valid          (shared_pio_avalon_slave_0_agent_rp_valid),          //          .valid
		.in_startofpacket  (shared_pio_avalon_slave_0_agent_rp_startofpacket),  //          .startofpacket
		.in_endofpacket    (shared_pio_avalon_slave_0_agent_rp_endofpacket),    //          .endofpacket
		.in_data           (shared_pio_avalon_slave_0_agent_rp_data),           //          .data
		.out_ready         (agent_pipeline_001_source0_ready),                  //   source0.ready
		.out_valid         (agent_pipeline_001_source0_valid),                  //          .valid
		.out_startofpacket (agent_pipeline_001_source0_startofpacket),          //          .startofpacket
		.out_endofpacket   (agent_pipeline_001_source0_endofpacket),            //          .endofpacket
		.out_data          (agent_pipeline_001_source0_data),                   //          .data
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_channel       (),                                                  // (terminated)
		.in_channel        (1'b0)                                               // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (102),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_002 (
		.clk               (clk_0_clk_clk),                                     //       cr0.clk
		.reset             (shared_PIO_reset_sink_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_001_src_ready),                             //     sink0.ready
		.in_valid          (cmd_mux_001_src_valid),                             //          .valid
		.in_startofpacket  (cmd_mux_001_src_startofpacket),                     //          .startofpacket
		.in_endofpacket    (cmd_mux_001_src_endofpacket),                       //          .endofpacket
		.in_data           (cmd_mux_001_src_data),                              //          .data
		.in_channel        (cmd_mux_001_src_channel),                           //          .channel
		.out_ready         (agent_pipeline_002_source0_ready),                  //   source0.ready
		.out_valid         (agent_pipeline_002_source0_valid),                  //          .valid
		.out_startofpacket (agent_pipeline_002_source0_startofpacket),          //          .startofpacket
		.out_endofpacket   (agent_pipeline_002_source0_endofpacket),            //          .endofpacket
		.out_data          (agent_pipeline_002_source0_data),                   //          .data
		.out_channel       (agent_pipeline_002_source0_channel),                //          .channel
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_error          (1'b0)                                               // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (102),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_003 (
		.clk               (clk_0_clk_clk),                                           //       cr0.clk
		.reset             (shared_PIO_reset_sink_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.in_ready          (shared_mailbox_avmm_msg_receiver_agent_rp_ready),         //     sink0.ready
		.in_valid          (shared_mailbox_avmm_msg_receiver_agent_rp_valid),         //          .valid
		.in_startofpacket  (shared_mailbox_avmm_msg_receiver_agent_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (shared_mailbox_avmm_msg_receiver_agent_rp_endofpacket),   //          .endofpacket
		.in_data           (shared_mailbox_avmm_msg_receiver_agent_rp_data),          //          .data
		.out_ready         (agent_pipeline_003_source0_ready),                        //   source0.ready
		.out_valid         (agent_pipeline_003_source0_valid),                        //          .valid
		.out_startofpacket (agent_pipeline_003_source0_startofpacket),                //          .startofpacket
		.out_endofpacket   (agent_pipeline_003_source0_endofpacket),                  //          .endofpacket
		.out_data          (agent_pipeline_003_source0_data),                         //          .data
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_channel       (),                                                        // (terminated)
		.in_channel        (1'b0)                                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (102),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_004 (
		.clk               (pll_0_outclk0_clk),                        //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (cmd_mux_002_src_ready),                    //     sink0.ready
		.in_valid          (cmd_mux_002_src_valid),                    //          .valid
		.in_startofpacket  (cmd_mux_002_src_startofpacket),            //          .startofpacket
		.in_endofpacket    (cmd_mux_002_src_endofpacket),              //          .endofpacket
		.in_data           (cmd_mux_002_src_data),                     //          .data
		.in_channel        (cmd_mux_002_src_channel),                  //          .channel
		.out_ready         (agent_pipeline_004_source0_ready),         //   source0.ready
		.out_valid         (agent_pipeline_004_source0_valid),         //          .valid
		.out_startofpacket (agent_pipeline_004_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (agent_pipeline_004_source0_endofpacket),   //          .endofpacket
		.out_data          (agent_pipeline_004_source0_data),          //          .data
		.out_channel       (agent_pipeline_004_source0_channel),       //          .channel
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (102),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_005 (
		.clk               (pll_0_outclk0_clk),                          //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.in_ready          (sysid_control_slave_agent_rp_ready),         //     sink0.ready
		.in_valid          (sysid_control_slave_agent_rp_valid),         //          .valid
		.in_startofpacket  (sysid_control_slave_agent_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (sysid_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.in_data           (sysid_control_slave_agent_rp_data),          //          .data
		.out_ready         (agent_pipeline_005_source0_ready),           //   source0.ready
		.out_valid         (agent_pipeline_005_source0_valid),           //          .valid
		.out_startofpacket (agent_pipeline_005_source0_startofpacket),   //          .startofpacket
		.out_endofpacket   (agent_pipeline_005_source0_endofpacket),     //          .endofpacket
		.out_data          (agent_pipeline_005_source0_data),            //          .data
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.out_error         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_channel       (),                                           // (terminated)
		.in_channel        (1'b0)                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (84),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_006 (
		.clk               (pll_0_outclk1_clk),                                       //       cr0.clk
		.reset             (sdram_controller_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.in_ready          (sdram_controller_s1_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (sdram_controller_s1_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (sdram_controller_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (sdram_controller_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (sdram_controller_s1_burst_adapter_source0_data),          //          .data
		.in_channel        (sdram_controller_s1_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_006_source0_ready),                        //   source0.ready
		.out_valid         (agent_pipeline_006_source0_valid),                        //          .valid
		.out_startofpacket (agent_pipeline_006_source0_startofpacket),                //          .startofpacket
		.out_endofpacket   (agent_pipeline_006_source0_endofpacket),                  //          .endofpacket
		.out_data          (agent_pipeline_006_source0_data),                         //          .data
		.out_channel       (agent_pipeline_006_source0_channel),                      //          .channel
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_error          (1'b0)                                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (84),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_007 (
		.clk               (pll_0_outclk1_clk),                                  //       cr0.clk
		.reset             (sdram_controller_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (sdram_controller_s1_agent_rp_ready),                 //     sink0.ready
		.in_valid          (sdram_controller_s1_agent_rp_valid),                 //          .valid
		.in_startofpacket  (sdram_controller_s1_agent_rp_startofpacket),         //          .startofpacket
		.in_endofpacket    (sdram_controller_s1_agent_rp_endofpacket),           //          .endofpacket
		.in_data           (sdram_controller_s1_agent_rp_data),                  //          .data
		.out_ready         (agent_pipeline_007_source0_ready),                   //   source0.ready
		.out_valid         (agent_pipeline_007_source0_valid),                   //          .valid
		.out_startofpacket (agent_pipeline_007_source0_startofpacket),           //          .startofpacket
		.out_endofpacket   (agent_pipeline_007_source0_endofpacket),             //          .endofpacket
		.out_data          (agent_pipeline_007_source0_data),                    //          .data
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_channel       (),                                                   // (terminated)
		.in_channel        (1'b0)                                                // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (102),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_008 (
		.clk               (clk_0_clk_clk),                                     //       cr0.clk
		.reset             (shared_PIO_reset_sink_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_004_src_ready),                             //     sink0.ready
		.in_valid          (cmd_mux_004_src_valid),                             //          .valid
		.in_startofpacket  (cmd_mux_004_src_startofpacket),                     //          .startofpacket
		.in_endofpacket    (cmd_mux_004_src_endofpacket),                       //          .endofpacket
		.in_data           (cmd_mux_004_src_data),                              //          .data
		.in_channel        (cmd_mux_004_src_channel),                           //          .channel
		.out_ready         (agent_pipeline_008_source0_ready),                  //   source0.ready
		.out_valid         (agent_pipeline_008_source0_valid),                  //          .valid
		.out_startofpacket (agent_pipeline_008_source0_startofpacket),          //          .startofpacket
		.out_endofpacket   (agent_pipeline_008_source0_endofpacket),            //          .endofpacket
		.out_data          (agent_pipeline_008_source0_data),                   //          .data
		.out_channel       (agent_pipeline_008_source0_channel),                //          .channel
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_error          (1'b0)                                               // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (102),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_009 (
		.clk               (clk_0_clk_clk),                                     //       cr0.clk
		.reset             (shared_PIO_reset_sink_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (shared_mutex_pio_s1_agent_rp_ready),                //     sink0.ready
		.in_valid          (shared_mutex_pio_s1_agent_rp_valid),                //          .valid
		.in_startofpacket  (shared_mutex_pio_s1_agent_rp_startofpacket),        //          .startofpacket
		.in_endofpacket    (shared_mutex_pio_s1_agent_rp_endofpacket),          //          .endofpacket
		.in_data           (shared_mutex_pio_s1_agent_rp_data),                 //          .data
		.out_ready         (agent_pipeline_009_source0_ready),                  //   source0.ready
		.out_valid         (agent_pipeline_009_source0_valid),                  //          .valid
		.out_startofpacket (agent_pipeline_009_source0_startofpacket),          //          .startofpacket
		.out_endofpacket   (agent_pipeline_009_source0_endofpacket),            //          .endofpacket
		.out_data          (agent_pipeline_009_source0_data),                   //          .data
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_channel       (),                                                  // (terminated)
		.in_channel        (1'b0)                                               // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (102),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_010 (
		.clk               (clk_0_clk_clk),                                     //       cr0.clk
		.reset             (shared_PIO_reset_sink_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_005_src_ready),                             //     sink0.ready
		.in_valid          (cmd_mux_005_src_valid),                             //          .valid
		.in_startofpacket  (cmd_mux_005_src_startofpacket),                     //          .startofpacket
		.in_endofpacket    (cmd_mux_005_src_endofpacket),                       //          .endofpacket
		.in_data           (cmd_mux_005_src_data),                              //          .data
		.in_channel        (cmd_mux_005_src_channel),                           //          .channel
		.out_ready         (agent_pipeline_010_source0_ready),                  //   source0.ready
		.out_valid         (agent_pipeline_010_source0_valid),                  //          .valid
		.out_startofpacket (agent_pipeline_010_source0_startofpacket),          //          .startofpacket
		.out_endofpacket   (agent_pipeline_010_source0_endofpacket),            //          .endofpacket
		.out_data          (agent_pipeline_010_source0_data),                   //          .data
		.out_channel       (agent_pipeline_010_source0_channel),                //          .channel
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_error          (1'b0)                                               // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (102),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_011 (
		.clk               (clk_0_clk_clk),                                         //       cr0.clk
		.reset             (shared_PIO_reset_sink_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.in_ready          (shared_mailbox_avmm_msg_sender_agent_rp_ready),         //     sink0.ready
		.in_valid          (shared_mailbox_avmm_msg_sender_agent_rp_valid),         //          .valid
		.in_startofpacket  (shared_mailbox_avmm_msg_sender_agent_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (shared_mailbox_avmm_msg_sender_agent_rp_endofpacket),   //          .endofpacket
		.in_data           (shared_mailbox_avmm_msg_sender_agent_rp_data),          //          .data
		.out_ready         (agent_pipeline_011_source0_ready),                      //   source0.ready
		.out_valid         (agent_pipeline_011_source0_valid),                      //          .valid
		.out_startofpacket (agent_pipeline_011_source0_startofpacket),              //          .startofpacket
		.out_endofpacket   (agent_pipeline_011_source0_endofpacket),                //          .endofpacket
		.out_data          (agent_pipeline_011_source0_data),                       //          .data
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_channel       (),                                                      // (terminated)
		.in_channel        (1'b0)                                                   // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (102),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline (
		.clk               (clk_0_clk_clk),                                     //       cr0.clk
		.reset             (shared_PIO_reset_sink_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src0_ready),                              //     sink0.ready
		.in_valid          (cmd_demux_src0_valid),                              //          .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                      //          .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                        //          .endofpacket
		.in_data           (cmd_demux_src0_data),                               //          .data
		.in_channel        (cmd_demux_src0_channel),                            //          .channel
		.out_ready         (mux_pipeline_source0_ready),                        //   source0.ready
		.out_valid         (mux_pipeline_source0_valid),                        //          .valid
		.out_startofpacket (mux_pipeline_source0_startofpacket),                //          .startofpacket
		.out_endofpacket   (mux_pipeline_source0_endofpacket),                  //          .endofpacket
		.out_data          (mux_pipeline_source0_data),                         //          .data
		.out_channel       (mux_pipeline_source0_channel),                      //          .channel
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_error          (1'b0)                                               // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (102),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_001 (
		.clk               (clk_0_clk_clk),                                     //       cr0.clk
		.reset             (shared_PIO_reset_sink_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src0_ready),                          //     sink0.ready
		.in_valid          (cmd_demux_001_src0_valid),                          //          .valid
		.in_startofpacket  (cmd_demux_001_src0_startofpacket),                  //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src0_endofpacket),                    //          .endofpacket
		.in_data           (cmd_demux_001_src0_data),                           //          .data
		.in_channel        (cmd_demux_001_src0_channel),                        //          .channel
		.out_ready         (mux_pipeline_001_source0_ready),                    //   source0.ready
		.out_valid         (mux_pipeline_001_source0_valid),                    //          .valid
		.out_startofpacket (mux_pipeline_001_source0_startofpacket),            //          .startofpacket
		.out_endofpacket   (mux_pipeline_001_source0_endofpacket),              //          .endofpacket
		.out_data          (mux_pipeline_001_source0_data),                     //          .data
		.out_channel       (mux_pipeline_001_source0_channel),                  //          .channel
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_error          (1'b0)                                               // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (102),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_002 (
		.clk               (clk_0_clk_clk),                                     //       cr0.clk
		.reset             (shared_PIO_reset_sink_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src1_ready),                              //     sink0.ready
		.in_valid          (cmd_demux_src1_valid),                              //          .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),                      //          .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),                        //          .endofpacket
		.in_data           (cmd_demux_src1_data),                               //          .data
		.in_channel        (cmd_demux_src1_channel),                            //          .channel
		.out_ready         (mux_pipeline_002_source0_ready),                    //   source0.ready
		.out_valid         (mux_pipeline_002_source0_valid),                    //          .valid
		.out_startofpacket (mux_pipeline_002_source0_startofpacket),            //          .startofpacket
		.out_endofpacket   (mux_pipeline_002_source0_endofpacket),              //          .endofpacket
		.out_data          (mux_pipeline_002_source0_data),                     //          .data
		.out_channel       (mux_pipeline_002_source0_channel),                  //          .channel
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_error          (1'b0)                                               // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (102),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_003 (
		.clk               (pll_0_outclk0_clk),                       //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (crosser_out_ready),                       //     sink0.ready
		.in_valid          (crosser_out_valid),                       //          .valid
		.in_startofpacket  (crosser_out_startofpacket),               //          .startofpacket
		.in_endofpacket    (crosser_out_endofpacket),                 //          .endofpacket
		.in_data           (crosser_out_data),                        //          .data
		.in_channel        (crosser_out_channel),                     //          .channel
		.out_ready         (mux_pipeline_003_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_003_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_003_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_003_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_003_source0_data),           //          .data
		.out_channel       (mux_pipeline_003_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (102),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_004 (
		.clk               (pll_0_outclk0_clk),                       //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (crosser_002_out_ready),                   //     sink0.ready
		.in_valid          (crosser_002_out_valid),                   //          .valid
		.in_startofpacket  (crosser_002_out_startofpacket),           //          .startofpacket
		.in_endofpacket    (crosser_002_out_endofpacket),             //          .endofpacket
		.in_data           (crosser_002_out_data),                    //          .data
		.in_channel        (crosser_002_out_channel),                 //          .channel
		.out_ready         (mux_pipeline_004_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_004_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_004_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_004_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_004_source0_data),           //          .data
		.out_channel       (mux_pipeline_004_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (102),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_005 (
		.clk               (pll_0_outclk1_clk),                                  //       cr0.clk
		.reset             (sdram_controller_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (crosser_001_out_ready),                              //     sink0.ready
		.in_valid          (crosser_001_out_valid),                              //          .valid
		.in_startofpacket  (crosser_001_out_startofpacket),                      //          .startofpacket
		.in_endofpacket    (crosser_001_out_endofpacket),                        //          .endofpacket
		.in_data           (crosser_001_out_data),                               //          .data
		.in_channel        (crosser_001_out_channel),                            //          .channel
		.out_ready         (mux_pipeline_005_source0_ready),                     //   source0.ready
		.out_valid         (mux_pipeline_005_source0_valid),                     //          .valid
		.out_startofpacket (mux_pipeline_005_source0_startofpacket),             //          .startofpacket
		.out_endofpacket   (mux_pipeline_005_source0_endofpacket),               //          .endofpacket
		.out_data          (mux_pipeline_005_source0_data),                      //          .data
		.out_channel       (mux_pipeline_005_source0_channel),                   //          .channel
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_error          (1'b0)                                                // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (102),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_006 (
		.clk               (pll_0_outclk1_clk),                                  //       cr0.clk
		.reset             (sdram_controller_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (crosser_003_out_ready),                              //     sink0.ready
		.in_valid          (crosser_003_out_valid),                              //          .valid
		.in_startofpacket  (crosser_003_out_startofpacket),                      //          .startofpacket
		.in_endofpacket    (crosser_003_out_endofpacket),                        //          .endofpacket
		.in_data           (crosser_003_out_data),                               //          .data
		.in_channel        (crosser_003_out_channel),                            //          .channel
		.out_ready         (mux_pipeline_006_source0_ready),                     //   source0.ready
		.out_valid         (mux_pipeline_006_source0_valid),                     //          .valid
		.out_startofpacket (mux_pipeline_006_source0_startofpacket),             //          .startofpacket
		.out_endofpacket   (mux_pipeline_006_source0_endofpacket),               //          .endofpacket
		.out_data          (mux_pipeline_006_source0_data),                      //          .data
		.out_channel       (mux_pipeline_006_source0_channel),                   //          .channel
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_error          (1'b0)                                                // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (102),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_007 (
		.clk               (clk_0_clk_clk),                                     //       cr0.clk
		.reset             (shared_PIO_reset_sink_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src4_ready),                              //     sink0.ready
		.in_valid          (cmd_demux_src4_valid),                              //          .valid
		.in_startofpacket  (cmd_demux_src4_startofpacket),                      //          .startofpacket
		.in_endofpacket    (cmd_demux_src4_endofpacket),                        //          .endofpacket
		.in_data           (cmd_demux_src4_data),                               //          .data
		.in_channel        (cmd_demux_src4_channel),                            //          .channel
		.out_ready         (mux_pipeline_007_source0_ready),                    //   source0.ready
		.out_valid         (mux_pipeline_007_source0_valid),                    //          .valid
		.out_startofpacket (mux_pipeline_007_source0_startofpacket),            //          .startofpacket
		.out_endofpacket   (mux_pipeline_007_source0_endofpacket),              //          .endofpacket
		.out_data          (mux_pipeline_007_source0_data),                     //          .data
		.out_channel       (mux_pipeline_007_source0_channel),                  //          .channel
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_error          (1'b0)                                               // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (102),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_008 (
		.clk               (clk_0_clk_clk),                                     //       cr0.clk
		.reset             (shared_PIO_reset_sink_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src3_ready),                          //     sink0.ready
		.in_valid          (cmd_demux_001_src3_valid),                          //          .valid
		.in_startofpacket  (cmd_demux_001_src3_startofpacket),                  //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src3_endofpacket),                    //          .endofpacket
		.in_data           (cmd_demux_001_src3_data),                           //          .data
		.in_channel        (cmd_demux_001_src3_channel),                        //          .channel
		.out_ready         (mux_pipeline_008_source0_ready),                    //   source0.ready
		.out_valid         (mux_pipeline_008_source0_valid),                    //          .valid
		.out_startofpacket (mux_pipeline_008_source0_startofpacket),            //          .startofpacket
		.out_endofpacket   (mux_pipeline_008_source0_endofpacket),              //          .endofpacket
		.out_data          (mux_pipeline_008_source0_data),                     //          .data
		.out_channel       (mux_pipeline_008_source0_channel),                  //          .channel
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_error          (1'b0)                                               // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (102),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_009 (
		.clk               (clk_0_clk_clk),                                     //       cr0.clk
		.reset             (shared_PIO_reset_sink_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src4_ready),                          //     sink0.ready
		.in_valid          (cmd_demux_001_src4_valid),                          //          .valid
		.in_startofpacket  (cmd_demux_001_src4_startofpacket),                  //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src4_endofpacket),                    //          .endofpacket
		.in_data           (cmd_demux_001_src4_data),                           //          .data
		.in_channel        (cmd_demux_001_src4_channel),                        //          .channel
		.out_ready         (mux_pipeline_009_source0_ready),                    //   source0.ready
		.out_valid         (mux_pipeline_009_source0_valid),                    //          .valid
		.out_startofpacket (mux_pipeline_009_source0_startofpacket),            //          .startofpacket
		.out_endofpacket   (mux_pipeline_009_source0_endofpacket),              //          .endofpacket
		.out_data          (mux_pipeline_009_source0_data),                     //          .data
		.out_channel       (mux_pipeline_009_source0_channel),                  //          .channel
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_error          (1'b0)                                               // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (102),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_010 (
		.clk               (clk_0_clk_clk),                                     //       cr0.clk
		.reset             (shared_PIO_reset_sink_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_src0_ready),                              //     sink0.ready
		.in_valid          (rsp_demux_src0_valid),                              //          .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                      //          .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                        //          .endofpacket
		.in_data           (rsp_demux_src0_data),                               //          .data
		.in_channel        (rsp_demux_src0_channel),                            //          .channel
		.out_ready         (mux_pipeline_010_source0_ready),                    //   source0.ready
		.out_valid         (mux_pipeline_010_source0_valid),                    //          .valid
		.out_startofpacket (mux_pipeline_010_source0_startofpacket),            //          .startofpacket
		.out_endofpacket   (mux_pipeline_010_source0_endofpacket),              //          .endofpacket
		.out_data          (mux_pipeline_010_source0_data),                     //          .data
		.out_channel       (mux_pipeline_010_source0_channel),                  //          .channel
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_error          (1'b0)                                               // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (102),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_011 (
		.clk               (clk_0_clk_clk),                                     //       cr0.clk
		.reset             (shared_PIO_reset_sink_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                          //     sink0.ready
		.in_valid          (rsp_demux_001_src0_valid),                          //          .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),                  //          .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                    //          .endofpacket
		.in_data           (rsp_demux_001_src0_data),                           //          .data
		.in_channel        (rsp_demux_001_src0_channel),                        //          .channel
		.out_ready         (mux_pipeline_011_source0_ready),                    //   source0.ready
		.out_valid         (mux_pipeline_011_source0_valid),                    //          .valid
		.out_startofpacket (mux_pipeline_011_source0_startofpacket),            //          .startofpacket
		.out_endofpacket   (mux_pipeline_011_source0_endofpacket),              //          .endofpacket
		.out_data          (mux_pipeline_011_source0_data),                     //          .data
		.out_channel       (mux_pipeline_011_source0_channel),                  //          .channel
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_error          (1'b0)                                               // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (102),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_012 (
		.clk               (clk_0_clk_clk),                                     //       cr0.clk
		.reset             (shared_PIO_reset_sink_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (crosser_004_out_ready),                             //     sink0.ready
		.in_valid          (crosser_004_out_valid),                             //          .valid
		.in_startofpacket  (crosser_004_out_startofpacket),                     //          .startofpacket
		.in_endofpacket    (crosser_004_out_endofpacket),                       //          .endofpacket
		.in_data           (crosser_004_out_data),                              //          .data
		.in_channel        (crosser_004_out_channel),                           //          .channel
		.out_ready         (mux_pipeline_012_source0_ready),                    //   source0.ready
		.out_valid         (mux_pipeline_012_source0_valid),                    //          .valid
		.out_startofpacket (mux_pipeline_012_source0_startofpacket),            //          .startofpacket
		.out_endofpacket   (mux_pipeline_012_source0_endofpacket),              //          .endofpacket
		.out_data          (mux_pipeline_012_source0_data),                     //          .data
		.out_channel       (mux_pipeline_012_source0_channel),                  //          .channel
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_error          (1'b0)                                               // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (102),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_013 (
		.clk               (clk_0_clk_clk),                                     //       cr0.clk
		.reset             (shared_PIO_reset_sink_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (crosser_006_out_ready),                             //     sink0.ready
		.in_valid          (crosser_006_out_valid),                             //          .valid
		.in_startofpacket  (crosser_006_out_startofpacket),                     //          .startofpacket
		.in_endofpacket    (crosser_006_out_endofpacket),                       //          .endofpacket
		.in_data           (crosser_006_out_data),                              //          .data
		.in_channel        (crosser_006_out_channel),                           //          .channel
		.out_ready         (mux_pipeline_013_source0_ready),                    //   source0.ready
		.out_valid         (mux_pipeline_013_source0_valid),                    //          .valid
		.out_startofpacket (mux_pipeline_013_source0_startofpacket),            //          .startofpacket
		.out_endofpacket   (mux_pipeline_013_source0_endofpacket),              //          .endofpacket
		.out_data          (mux_pipeline_013_source0_data),                     //          .data
		.out_channel       (mux_pipeline_013_source0_channel),                  //          .channel
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_error          (1'b0)                                               // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (102),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_014 (
		.clk               (clk_0_clk_clk),                                     //       cr0.clk
		.reset             (shared_PIO_reset_sink_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_004_src0_ready),                          //     sink0.ready
		.in_valid          (rsp_demux_004_src0_valid),                          //          .valid
		.in_startofpacket  (rsp_demux_004_src0_startofpacket),                  //          .startofpacket
		.in_endofpacket    (rsp_demux_004_src0_endofpacket),                    //          .endofpacket
		.in_data           (rsp_demux_004_src0_data),                           //          .data
		.in_channel        (rsp_demux_004_src0_channel),                        //          .channel
		.out_ready         (mux_pipeline_014_source0_ready),                    //   source0.ready
		.out_valid         (mux_pipeline_014_source0_valid),                    //          .valid
		.out_startofpacket (mux_pipeline_014_source0_startofpacket),            //          .startofpacket
		.out_endofpacket   (mux_pipeline_014_source0_endofpacket),              //          .endofpacket
		.out_data          (mux_pipeline_014_source0_data),                     //          .data
		.out_channel       (mux_pipeline_014_source0_channel),                  //          .channel
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_error          (1'b0)                                               // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (102),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_015 (
		.clk               (clk_0_clk_clk),                                     //       cr0.clk
		.reset             (shared_PIO_reset_sink_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_src1_ready),                              //     sink0.ready
		.in_valid          (rsp_demux_src1_valid),                              //          .valid
		.in_startofpacket  (rsp_demux_src1_startofpacket),                      //          .startofpacket
		.in_endofpacket    (rsp_demux_src1_endofpacket),                        //          .endofpacket
		.in_data           (rsp_demux_src1_data),                               //          .data
		.in_channel        (rsp_demux_src1_channel),                            //          .channel
		.out_ready         (mux_pipeline_015_source0_ready),                    //   source0.ready
		.out_valid         (mux_pipeline_015_source0_valid),                    //          .valid
		.out_startofpacket (mux_pipeline_015_source0_startofpacket),            //          .startofpacket
		.out_endofpacket   (mux_pipeline_015_source0_endofpacket),              //          .endofpacket
		.out_data          (mux_pipeline_015_source0_data),                     //          .data
		.out_channel       (mux_pipeline_015_source0_channel),                  //          .channel
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_error          (1'b0)                                               // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (102),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_016 (
		.clk               (clk_0_clk_clk),                                     //       cr0.clk
		.reset             (shared_PIO_reset_sink_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (crosser_005_out_ready),                             //     sink0.ready
		.in_valid          (crosser_005_out_valid),                             //          .valid
		.in_startofpacket  (crosser_005_out_startofpacket),                     //          .startofpacket
		.in_endofpacket    (crosser_005_out_endofpacket),                       //          .endofpacket
		.in_data           (crosser_005_out_data),                              //          .data
		.in_channel        (crosser_005_out_channel),                           //          .channel
		.out_ready         (mux_pipeline_016_source0_ready),                    //   source0.ready
		.out_valid         (mux_pipeline_016_source0_valid),                    //          .valid
		.out_startofpacket (mux_pipeline_016_source0_startofpacket),            //          .startofpacket
		.out_endofpacket   (mux_pipeline_016_source0_endofpacket),              //          .endofpacket
		.out_data          (mux_pipeline_016_source0_data),                     //          .data
		.out_channel       (mux_pipeline_016_source0_channel),                  //          .channel
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_error          (1'b0)                                               // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (102),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_017 (
		.clk               (clk_0_clk_clk),                                     //       cr0.clk
		.reset             (shared_PIO_reset_sink_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (crosser_007_out_ready),                             //     sink0.ready
		.in_valid          (crosser_007_out_valid),                             //          .valid
		.in_startofpacket  (crosser_007_out_startofpacket),                     //          .startofpacket
		.in_endofpacket    (crosser_007_out_endofpacket),                       //          .endofpacket
		.in_data           (crosser_007_out_data),                              //          .data
		.in_channel        (crosser_007_out_channel),                           //          .channel
		.out_ready         (mux_pipeline_017_source0_ready),                    //   source0.ready
		.out_valid         (mux_pipeline_017_source0_valid),                    //          .valid
		.out_startofpacket (mux_pipeline_017_source0_startofpacket),            //          .startofpacket
		.out_endofpacket   (mux_pipeline_017_source0_endofpacket),              //          .endofpacket
		.out_data          (mux_pipeline_017_source0_data),                     //          .data
		.out_channel       (mux_pipeline_017_source0_channel),                  //          .channel
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_error          (1'b0)                                               // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (102),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_018 (
		.clk               (clk_0_clk_clk),                                     //       cr0.clk
		.reset             (shared_PIO_reset_sink_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_004_src1_ready),                          //     sink0.ready
		.in_valid          (rsp_demux_004_src1_valid),                          //          .valid
		.in_startofpacket  (rsp_demux_004_src1_startofpacket),                  //          .startofpacket
		.in_endofpacket    (rsp_demux_004_src1_endofpacket),                    //          .endofpacket
		.in_data           (rsp_demux_004_src1_data),                           //          .data
		.in_channel        (rsp_demux_004_src1_channel),                        //          .channel
		.out_ready         (mux_pipeline_018_source0_ready),                    //   source0.ready
		.out_valid         (mux_pipeline_018_source0_valid),                    //          .valid
		.out_startofpacket (mux_pipeline_018_source0_startofpacket),            //          .startofpacket
		.out_endofpacket   (mux_pipeline_018_source0_endofpacket),              //          .endofpacket
		.out_data          (mux_pipeline_018_source0_data),                     //          .data
		.out_channel       (mux_pipeline_018_source0_channel),                  //          .channel
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_error          (1'b0)                                               // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (102),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_019 (
		.clk               (clk_0_clk_clk),                                     //       cr0.clk
		.reset             (shared_PIO_reset_sink_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_005_src0_ready),                          //     sink0.ready
		.in_valid          (rsp_demux_005_src0_valid),                          //          .valid
		.in_startofpacket  (rsp_demux_005_src0_startofpacket),                  //          .startofpacket
		.in_endofpacket    (rsp_demux_005_src0_endofpacket),                    //          .endofpacket
		.in_data           (rsp_demux_005_src0_data),                           //          .data
		.in_channel        (rsp_demux_005_src0_channel),                        //          .channel
		.out_ready         (mux_pipeline_019_source0_ready),                    //   source0.ready
		.out_valid         (mux_pipeline_019_source0_valid),                    //          .valid
		.out_startofpacket (mux_pipeline_019_source0_startofpacket),            //          .startofpacket
		.out_endofpacket   (mux_pipeline_019_source0_endofpacket),              //          .endofpacket
		.out_data          (mux_pipeline_019_source0_data),                     //          .data
		.out_channel       (mux_pipeline_019_source0_channel),                  //          .channel
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_error          (1'b0)                                               // (terminated)
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (shared_PIO_reset_sink_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (shared_pio_avalon_slave_0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (shared_pio_avalon_slave_0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (shared_pio_avalon_slave_0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                        //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                        //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                         //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_0_clk_clk),                                               // in_clk_0.clk
		.in_rst_0_reset (shared_PIO_reset_sink_reset_bridge_in_reset_reset),           // in_rst_0.reset
		.in_0_data      (shared_mailbox_avmm_msg_receiver_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (shared_mailbox_avmm_msg_receiver_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (shared_mailbox_avmm_msg_receiver_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                            //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                              // in_clk_0.clk
		.in_rst_0_reset (sysid_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (sysid_control_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (sysid_control_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (sysid_control_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)               //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_003 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (pll_0_outclk1_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (sdram_controller_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sdram_controller_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (sdram_controller_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (sdram_controller_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                   //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_0_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (shared_PIO_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (shared_mutex_pio_s1_agent_rdata_fifo_src_data),     //     in_0.data
		.in_0_valid     (shared_mutex_pio_s1_agent_rdata_fifo_src_valid),    //         .valid
		.in_0_ready     (shared_mutex_pio_s1_agent_rdata_fifo_src_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                  //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_0_clk_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (shared_PIO_reset_sink_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (shared_mailbox_avmm_msg_sender_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (shared_mailbox_avmm_msg_sender_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (shared_mailbox_avmm_msg_sender_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                          //         .error
	);

endmodule
