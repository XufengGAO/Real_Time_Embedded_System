// system.v

// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module system (
		input  wire        clk_clk,                       //                     clk.clk
		inout  wire [7:0]  cpu_0_custompio_0_parport,     //       cpu_0_custompio_0.parport
		output wire [7:0]  cpu_0_led_export,              //               cpu_0_led.export
		inout  wire [7:0]  cpu_1_custompio_0_parport,     //       cpu_1_custompio_0.parport
		output wire [7:0]  cpu_1_led_export,              //               cpu_1_led.export
		output wire        pll_0_outclk2_clk,             //           pll_0_outclk2.clk
		input  wire        reset_reset_n,                 //                   reset.reset_n
		output wire [12:0] sdram_controller_0_wire_addr,  // sdram_controller_0_wire.addr
		output wire [1:0]  sdram_controller_0_wire_ba,    //                        .ba
		output wire        sdram_controller_0_wire_cas_n, //                        .cas_n
		output wire        sdram_controller_0_wire_cke,   //                        .cke
		output wire        sdram_controller_0_wire_cs_n,  //                        .cs_n
		inout  wire [15:0] sdram_controller_0_wire_dq,    //                        .dq
		output wire [1:0]  sdram_controller_0_wire_dqm,   //                        .dqm
		output wire        sdram_controller_0_wire_ras_n, //                        .ras_n
		output wire        sdram_controller_0_wire_we_n,  //                        .we_n
		inout  wire [7:0]  shared_pio_output_parport      //       shared_pio_output.parport
	);

	wire         pll_0_outclk0_clk;                                            // pll_0:outclk_0 -> [mm_interconnect_0:pll_0_outclk0_clk, rst_controller_002:clk, sysid:clock]
	wire         pll_0_outclk1_clk;                                            // pll_0:outclk_1 -> [mm_interconnect_0:pll_0_outclk1_clk, rst_controller:clk, sdram_controller:clk]
	wire         cpu_1_0_mm_bridge_1_m0_waitrequest;                           // mm_interconnect_0:cpu_1_0_mm_bridge_1_m0_waitrequest -> cpu_1_0:mm_bridge_1_m0_waitrequest
	wire  [31:0] cpu_1_0_mm_bridge_1_m0_readdata;                              // mm_interconnect_0:cpu_1_0_mm_bridge_1_m0_readdata -> cpu_1_0:mm_bridge_1_m0_readdata
	wire         cpu_1_0_mm_bridge_1_m0_debugaccess;                           // cpu_1_0:mm_bridge_1_m0_debugaccess -> mm_interconnect_0:cpu_1_0_mm_bridge_1_m0_debugaccess
	wire  [27:0] cpu_1_0_mm_bridge_1_m0_address;                               // cpu_1_0:mm_bridge_1_m0_address -> mm_interconnect_0:cpu_1_0_mm_bridge_1_m0_address
	wire         cpu_1_0_mm_bridge_1_m0_read;                                  // cpu_1_0:mm_bridge_1_m0_read -> mm_interconnect_0:cpu_1_0_mm_bridge_1_m0_read
	wire   [3:0] cpu_1_0_mm_bridge_1_m0_byteenable;                            // cpu_1_0:mm_bridge_1_m0_byteenable -> mm_interconnect_0:cpu_1_0_mm_bridge_1_m0_byteenable
	wire         cpu_1_0_mm_bridge_1_m0_readdatavalid;                         // mm_interconnect_0:cpu_1_0_mm_bridge_1_m0_readdatavalid -> cpu_1_0:mm_bridge_1_m0_readdatavalid
	wire  [31:0] cpu_1_0_mm_bridge_1_m0_writedata;                             // cpu_1_0:mm_bridge_1_m0_writedata -> mm_interconnect_0:cpu_1_0_mm_bridge_1_m0_writedata
	wire         cpu_1_0_mm_bridge_1_m0_write;                                 // cpu_1_0:mm_bridge_1_m0_write -> mm_interconnect_0:cpu_1_0_mm_bridge_1_m0_write
	wire   [0:0] cpu_1_0_mm_bridge_1_m0_burstcount;                            // cpu_1_0:mm_bridge_1_m0_burstcount -> mm_interconnect_0:cpu_1_0_mm_bridge_1_m0_burstcount
	wire         cpu_0_0_outgoing_master_waitrequest;                          // mm_interconnect_0:cpu_0_0_outgoing_master_waitrequest -> cpu_0_0:outgoing_master_waitrequest
	wire  [31:0] cpu_0_0_outgoing_master_readdata;                             // mm_interconnect_0:cpu_0_0_outgoing_master_readdata -> cpu_0_0:outgoing_master_readdata
	wire         cpu_0_0_outgoing_master_debugaccess;                          // cpu_0_0:outgoing_master_debugaccess -> mm_interconnect_0:cpu_0_0_outgoing_master_debugaccess
	wire  [27:0] cpu_0_0_outgoing_master_address;                              // cpu_0_0:outgoing_master_address -> mm_interconnect_0:cpu_0_0_outgoing_master_address
	wire         cpu_0_0_outgoing_master_read;                                 // cpu_0_0:outgoing_master_read -> mm_interconnect_0:cpu_0_0_outgoing_master_read
	wire   [3:0] cpu_0_0_outgoing_master_byteenable;                           // cpu_0_0:outgoing_master_byteenable -> mm_interconnect_0:cpu_0_0_outgoing_master_byteenable
	wire         cpu_0_0_outgoing_master_readdatavalid;                        // mm_interconnect_0:cpu_0_0_outgoing_master_readdatavalid -> cpu_0_0:outgoing_master_readdatavalid
	wire  [31:0] cpu_0_0_outgoing_master_writedata;                            // cpu_0_0:outgoing_master_writedata -> mm_interconnect_0:cpu_0_0_outgoing_master_writedata
	wire         cpu_0_0_outgoing_master_write;                                // cpu_0_0:outgoing_master_write -> mm_interconnect_0:cpu_0_0_outgoing_master_write
	wire   [0:0] cpu_0_0_outgoing_master_burstcount;                           // cpu_0_0:outgoing_master_burstcount -> mm_interconnect_0:cpu_0_0_outgoing_master_burstcount
	wire   [7:0] mm_interconnect_0_shared_pio_avalon_slave_0_readdata;         // shared_PIO:ReadData -> mm_interconnect_0:shared_PIO_avalon_slave_0_readdata
	wire   [2:0] mm_interconnect_0_shared_pio_avalon_slave_0_address;          // mm_interconnect_0:shared_PIO_avalon_slave_0_address -> shared_PIO:Address
	wire         mm_interconnect_0_shared_pio_avalon_slave_0_read;             // mm_interconnect_0:shared_PIO_avalon_slave_0_read -> shared_PIO:Read
	wire         mm_interconnect_0_shared_pio_avalon_slave_0_write;            // mm_interconnect_0:shared_PIO_avalon_slave_0_write -> shared_PIO:Write
	wire   [7:0] mm_interconnect_0_shared_pio_avalon_slave_0_writedata;        // mm_interconnect_0:shared_PIO_avalon_slave_0_writedata -> shared_PIO:WriteData
	wire  [31:0] mm_interconnect_0_shared_mailbox_avmm_msg_receiver_readdata;  // shared_mailbox:avmm_rcv_readdata -> mm_interconnect_0:shared_mailbox_avmm_msg_receiver_readdata
	wire   [1:0] mm_interconnect_0_shared_mailbox_avmm_msg_receiver_address;   // mm_interconnect_0:shared_mailbox_avmm_msg_receiver_address -> shared_mailbox:avmm_rcv_address
	wire         mm_interconnect_0_shared_mailbox_avmm_msg_receiver_read;      // mm_interconnect_0:shared_mailbox_avmm_msg_receiver_read -> shared_mailbox:avmm_rcv_read
	wire         mm_interconnect_0_shared_mailbox_avmm_msg_receiver_write;     // mm_interconnect_0:shared_mailbox_avmm_msg_receiver_write -> shared_mailbox:avmm_rcv_write
	wire  [31:0] mm_interconnect_0_shared_mailbox_avmm_msg_receiver_writedata; // mm_interconnect_0:shared_mailbox_avmm_msg_receiver_writedata -> shared_mailbox:avmm_rcv_writedata
	wire  [31:0] mm_interconnect_0_sysid_control_slave_readdata;               // sysid:readdata -> mm_interconnect_0:sysid_control_slave_readdata
	wire   [0:0] mm_interconnect_0_sysid_control_slave_address;                // mm_interconnect_0:sysid_control_slave_address -> sysid:address
	wire         mm_interconnect_0_sdram_controller_s1_chipselect;             // mm_interconnect_0:sdram_controller_s1_chipselect -> sdram_controller:az_cs
	wire  [15:0] mm_interconnect_0_sdram_controller_s1_readdata;               // sdram_controller:za_data -> mm_interconnect_0:sdram_controller_s1_readdata
	wire         mm_interconnect_0_sdram_controller_s1_waitrequest;            // sdram_controller:za_waitrequest -> mm_interconnect_0:sdram_controller_s1_waitrequest
	wire  [24:0] mm_interconnect_0_sdram_controller_s1_address;                // mm_interconnect_0:sdram_controller_s1_address -> sdram_controller:az_addr
	wire         mm_interconnect_0_sdram_controller_s1_read;                   // mm_interconnect_0:sdram_controller_s1_read -> sdram_controller:az_rd_n
	wire   [1:0] mm_interconnect_0_sdram_controller_s1_byteenable;             // mm_interconnect_0:sdram_controller_s1_byteenable -> sdram_controller:az_be_n
	wire         mm_interconnect_0_sdram_controller_s1_readdatavalid;          // sdram_controller:za_valid -> mm_interconnect_0:sdram_controller_s1_readdatavalid
	wire         mm_interconnect_0_sdram_controller_s1_write;                  // mm_interconnect_0:sdram_controller_s1_write -> sdram_controller:az_wr_n
	wire  [15:0] mm_interconnect_0_sdram_controller_s1_writedata;              // mm_interconnect_0:sdram_controller_s1_writedata -> sdram_controller:az_data
	wire         mm_interconnect_0_shared_mutex_pio_s1_chipselect;             // mm_interconnect_0:shared_mutex_PIO_s1_chipselect -> shared_mutex_PIO:chipselect
	wire  [31:0] mm_interconnect_0_shared_mutex_pio_s1_readdata;               // shared_mutex_PIO:data_to_cpu -> mm_interconnect_0:shared_mutex_PIO_s1_readdata
	wire   [0:0] mm_interconnect_0_shared_mutex_pio_s1_address;                // mm_interconnect_0:shared_mutex_PIO_s1_address -> shared_mutex_PIO:address
	wire         mm_interconnect_0_shared_mutex_pio_s1_read;                   // mm_interconnect_0:shared_mutex_PIO_s1_read -> shared_mutex_PIO:read
	wire         mm_interconnect_0_shared_mutex_pio_s1_write;                  // mm_interconnect_0:shared_mutex_PIO_s1_write -> shared_mutex_PIO:write
	wire  [31:0] mm_interconnect_0_shared_mutex_pio_s1_writedata;              // mm_interconnect_0:shared_mutex_PIO_s1_writedata -> shared_mutex_PIO:data_from_cpu
	wire  [31:0] mm_interconnect_0_shared_mailbox_avmm_msg_sender_readdata;    // shared_mailbox:avmm_snd_readdata -> mm_interconnect_0:shared_mailbox_avmm_msg_sender_readdata
	wire         mm_interconnect_0_shared_mailbox_avmm_msg_sender_waitrequest; // shared_mailbox:avmm_snd_waitrequest -> mm_interconnect_0:shared_mailbox_avmm_msg_sender_waitrequest
	wire   [1:0] mm_interconnect_0_shared_mailbox_avmm_msg_sender_address;     // mm_interconnect_0:shared_mailbox_avmm_msg_sender_address -> shared_mailbox:avmm_snd_address
	wire         mm_interconnect_0_shared_mailbox_avmm_msg_sender_read;        // mm_interconnect_0:shared_mailbox_avmm_msg_sender_read -> shared_mailbox:avmm_snd_read
	wire         mm_interconnect_0_shared_mailbox_avmm_msg_sender_write;       // mm_interconnect_0:shared_mailbox_avmm_msg_sender_write -> shared_mailbox:avmm_snd_write
	wire  [31:0] mm_interconnect_0_shared_mailbox_avmm_msg_sender_writedata;   // mm_interconnect_0:shared_mailbox_avmm_msg_sender_writedata -> shared_mailbox:avmm_snd_writedata
	wire         rst_controller_reset_out_reset;                               // rst_controller:reset_out -> [mm_interconnect_0:sdram_controller_reset_reset_bridge_in_reset_reset, sdram_controller:reset_n]
	wire         rst_controller_001_reset_out_reset;                           // rst_controller_001:reset_out -> [mm_interconnect_0:cpu_1_0_reset_reset_bridge_in_reset_reset, mm_interconnect_0:shared_PIO_reset_sink_reset_bridge_in_reset_reset, shared_PIO:nReset, shared_mailbox:rst_n, shared_mutex_PIO:reset_n]
	wire         rst_controller_002_reset_out_reset;                           // rst_controller_002:reset_out -> [mm_interconnect_0:sysid_reset_reset_bridge_in_reset_reset, sysid:reset_n]

	system_cpu_0_0 cpu_0_0 (
		.clk_clk                       (clk_clk),                               //               clk.clk
		.cpu_0_custompio_0_parport     (cpu_0_custompio_0_parport),             // cpu_0_custompio_0.parport
		.cpu_0_led_export              (cpu_0_led_export),                      //         cpu_0_led.export
		.outgoing_master_waitrequest   (cpu_0_0_outgoing_master_waitrequest),   //   outgoing_master.waitrequest
		.outgoing_master_readdata      (cpu_0_0_outgoing_master_readdata),      //                  .readdata
		.outgoing_master_readdatavalid (cpu_0_0_outgoing_master_readdatavalid), //                  .readdatavalid
		.outgoing_master_burstcount    (cpu_0_0_outgoing_master_burstcount),    //                  .burstcount
		.outgoing_master_writedata     (cpu_0_0_outgoing_master_writedata),     //                  .writedata
		.outgoing_master_address       (cpu_0_0_outgoing_master_address),       //                  .address
		.outgoing_master_write         (cpu_0_0_outgoing_master_write),         //                  .write
		.outgoing_master_read          (cpu_0_0_outgoing_master_read),          //                  .read
		.outgoing_master_byteenable    (cpu_0_0_outgoing_master_byteenable),    //                  .byteenable
		.outgoing_master_debugaccess   (cpu_0_0_outgoing_master_debugaccess),   //                  .debugaccess
		.reset_reset_n                 (reset_reset_n)                          //             reset.reset_n
	);

	system_cpu_1_0 cpu_1_0 (
		.clk_clk                      (clk_clk),                              //               clk.clk
		.cpu_1_custompio_0_parport    (cpu_1_custompio_0_parport),            // cpu_1_custompio_0.parport
		.cpu_1_led_export             (cpu_1_led_export),                     //         cpu_1_led.export
		.mm_bridge_1_m0_waitrequest   (cpu_1_0_mm_bridge_1_m0_waitrequest),   //    mm_bridge_1_m0.waitrequest
		.mm_bridge_1_m0_readdata      (cpu_1_0_mm_bridge_1_m0_readdata),      //                  .readdata
		.mm_bridge_1_m0_readdatavalid (cpu_1_0_mm_bridge_1_m0_readdatavalid), //                  .readdatavalid
		.mm_bridge_1_m0_burstcount    (cpu_1_0_mm_bridge_1_m0_burstcount),    //                  .burstcount
		.mm_bridge_1_m0_writedata     (cpu_1_0_mm_bridge_1_m0_writedata),     //                  .writedata
		.mm_bridge_1_m0_address       (cpu_1_0_mm_bridge_1_m0_address),       //                  .address
		.mm_bridge_1_m0_write         (cpu_1_0_mm_bridge_1_m0_write),         //                  .write
		.mm_bridge_1_m0_read          (cpu_1_0_mm_bridge_1_m0_read),          //                  .read
		.mm_bridge_1_m0_byteenable    (cpu_1_0_mm_bridge_1_m0_byteenable),    //                  .byteenable
		.mm_bridge_1_m0_debugaccess   (cpu_1_0_mm_bridge_1_m0_debugaccess),   //                  .debugaccess
		.reset_reset_n                (reset_reset_n)                         //             reset.reset_n
	);

	system_pll_0 pll_0 (
		.refclk   (clk_clk),           //  refclk.clk
		.rst      (~reset_reset_n),    //   reset.reset
		.outclk_0 (pll_0_outclk0_clk), // outclk0.clk
		.outclk_1 (pll_0_outclk1_clk), // outclk1.clk
		.outclk_2 (pll_0_outclk2_clk), // outclk2.clk
		.locked   ()                   // (terminated)
	);

	system_sdram_controller sdram_controller (
		.clk            (pll_0_outclk1_clk),                                   //   clk.clk
		.reset_n        (~rst_controller_reset_out_reset),                     // reset.reset_n
		.az_addr        (mm_interconnect_0_sdram_controller_s1_address),       //    s1.address
		.az_be_n        (~mm_interconnect_0_sdram_controller_s1_byteenable),   //      .byteenable_n
		.az_cs          (mm_interconnect_0_sdram_controller_s1_chipselect),    //      .chipselect
		.az_data        (mm_interconnect_0_sdram_controller_s1_writedata),     //      .writedata
		.az_rd_n        (~mm_interconnect_0_sdram_controller_s1_read),         //      .read_n
		.az_wr_n        (~mm_interconnect_0_sdram_controller_s1_write),        //      .write_n
		.za_data        (mm_interconnect_0_sdram_controller_s1_readdata),      //      .readdata
		.za_valid       (mm_interconnect_0_sdram_controller_s1_readdatavalid), //      .readdatavalid
		.za_waitrequest (mm_interconnect_0_sdram_controller_s1_waitrequest),   //      .waitrequest
		.zs_addr        (sdram_controller_0_wire_addr),                        //  wire.export
		.zs_ba          (sdram_controller_0_wire_ba),                          //      .export
		.zs_cas_n       (sdram_controller_0_wire_cas_n),                       //      .export
		.zs_cke         (sdram_controller_0_wire_cke),                         //      .export
		.zs_cs_n        (sdram_controller_0_wire_cs_n),                        //      .export
		.zs_dq          (sdram_controller_0_wire_dq),                          //      .export
		.zs_dqm         (sdram_controller_0_wire_dqm),                         //      .export
		.zs_ras_n       (sdram_controller_0_wire_ras_n),                       //      .export
		.zs_we_n        (sdram_controller_0_wire_we_n)                         //      .export
	);

	ParallelPort shared_pio (
		.Clk       (clk_clk),                                               //            clock.clk
		.Address   (mm_interconnect_0_shared_pio_avalon_slave_0_address),   //   avalon_slave_0.address
		.Read      (mm_interconnect_0_shared_pio_avalon_slave_0_read),      //                 .read
		.ReadData  (mm_interconnect_0_shared_pio_avalon_slave_0_readdata),  //                 .readdata
		.Write     (mm_interconnect_0_shared_pio_avalon_slave_0_write),     //                 .write
		.WriteData (mm_interconnect_0_shared_pio_avalon_slave_0_writedata), //                 .writedata
		.ParPort   (shared_pio_output_parport),                             //      conduit_end.parport
		.nReset    (~rst_controller_001_reset_out_reset),                   //       reset_sink.reset_n
		.irq       ()                                                       // interrupt_sender.irq
	);

	altera_avalon_mailbox #(
		.DWIDTH (32),
		.AWIDTH (2)
	) shared_mailbox (
		.clk                  (clk_clk),                                                      //               clk.clk
		.rst_n                (~rst_controller_001_reset_out_reset),                          //             rst_n.reset_n
		.avmm_snd_address     (mm_interconnect_0_shared_mailbox_avmm_msg_sender_address),     //   avmm_msg_sender.address
		.avmm_snd_writedata   (mm_interconnect_0_shared_mailbox_avmm_msg_sender_writedata),   //                  .writedata
		.avmm_snd_write       (mm_interconnect_0_shared_mailbox_avmm_msg_sender_write),       //                  .write
		.avmm_snd_read        (mm_interconnect_0_shared_mailbox_avmm_msg_sender_read),        //                  .read
		.avmm_snd_readdata    (mm_interconnect_0_shared_mailbox_avmm_msg_sender_readdata),    //                  .readdata
		.avmm_snd_waitrequest (mm_interconnect_0_shared_mailbox_avmm_msg_sender_waitrequest), //                  .waitrequest
		.avmm_rcv_address     (mm_interconnect_0_shared_mailbox_avmm_msg_receiver_address),   // avmm_msg_receiver.address
		.avmm_rcv_read        (mm_interconnect_0_shared_mailbox_avmm_msg_receiver_read),      //                  .read
		.avmm_rcv_writedata   (mm_interconnect_0_shared_mailbox_avmm_msg_receiver_writedata), //                  .writedata
		.avmm_rcv_write       (mm_interconnect_0_shared_mailbox_avmm_msg_receiver_write),     //                  .write
		.avmm_rcv_readdata    (mm_interconnect_0_shared_mailbox_avmm_msg_receiver_readdata),  //                  .readdata
		.irq_space            (),                                                             //       (terminated)
		.irq_msg              ()                                                              //       (terminated)
	);

	system_shared_mutex_PIO shared_mutex_pio (
		.reset_n       (~rst_controller_001_reset_out_reset),              // reset.reset_n
		.clk           (clk_clk),                                          //   clk.clk
		.chipselect    (mm_interconnect_0_shared_mutex_pio_s1_chipselect), //    s1.chipselect
		.data_from_cpu (mm_interconnect_0_shared_mutex_pio_s1_writedata),  //      .writedata
		.read          (mm_interconnect_0_shared_mutex_pio_s1_read),       //      .read
		.write         (mm_interconnect_0_shared_mutex_pio_s1_write),      //      .write
		.data_to_cpu   (mm_interconnect_0_shared_mutex_pio_s1_readdata),   //      .readdata
		.address       (mm_interconnect_0_shared_mutex_pio_s1_address)     //      .address
	);

	system_sysid sysid (
		.clock    (pll_0_outclk0_clk),                              //           clk.clk
		.reset_n  (~rst_controller_002_reset_out_reset),            //         reset.reset_n
		.readdata (mm_interconnect_0_sysid_control_slave_readdata), // control_slave.readdata
		.address  (mm_interconnect_0_sysid_control_slave_address)   //              .address
	);

	system_mm_interconnect_0 mm_interconnect_0 (
		.clk_0_clk_clk                                      (clk_clk),                                                      //                                    clk_0_clk.clk
		.pll_0_outclk0_clk                                  (pll_0_outclk0_clk),                                            //                                pll_0_outclk0.clk
		.pll_0_outclk1_clk                                  (pll_0_outclk1_clk),                                            //                                pll_0_outclk1.clk
		.cpu_1_0_reset_reset_bridge_in_reset_reset          (rst_controller_001_reset_out_reset),                           //          cpu_1_0_reset_reset_bridge_in_reset.reset
		.sdram_controller_reset_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),                               // sdram_controller_reset_reset_bridge_in_reset.reset
		.shared_PIO_reset_sink_reset_bridge_in_reset_reset  (rst_controller_001_reset_out_reset),                           //  shared_PIO_reset_sink_reset_bridge_in_reset.reset
		.sysid_reset_reset_bridge_in_reset_reset            (rst_controller_002_reset_out_reset),                           //            sysid_reset_reset_bridge_in_reset.reset
		.cpu_0_0_outgoing_master_address                    (cpu_0_0_outgoing_master_address),                              //                      cpu_0_0_outgoing_master.address
		.cpu_0_0_outgoing_master_waitrequest                (cpu_0_0_outgoing_master_waitrequest),                          //                                             .waitrequest
		.cpu_0_0_outgoing_master_burstcount                 (cpu_0_0_outgoing_master_burstcount),                           //                                             .burstcount
		.cpu_0_0_outgoing_master_byteenable                 (cpu_0_0_outgoing_master_byteenable),                           //                                             .byteenable
		.cpu_0_0_outgoing_master_read                       (cpu_0_0_outgoing_master_read),                                 //                                             .read
		.cpu_0_0_outgoing_master_readdata                   (cpu_0_0_outgoing_master_readdata),                             //                                             .readdata
		.cpu_0_0_outgoing_master_readdatavalid              (cpu_0_0_outgoing_master_readdatavalid),                        //                                             .readdatavalid
		.cpu_0_0_outgoing_master_write                      (cpu_0_0_outgoing_master_write),                                //                                             .write
		.cpu_0_0_outgoing_master_writedata                  (cpu_0_0_outgoing_master_writedata),                            //                                             .writedata
		.cpu_0_0_outgoing_master_debugaccess                (cpu_0_0_outgoing_master_debugaccess),                          //                                             .debugaccess
		.cpu_1_0_mm_bridge_1_m0_address                     (cpu_1_0_mm_bridge_1_m0_address),                               //                       cpu_1_0_mm_bridge_1_m0.address
		.cpu_1_0_mm_bridge_1_m0_waitrequest                 (cpu_1_0_mm_bridge_1_m0_waitrequest),                           //                                             .waitrequest
		.cpu_1_0_mm_bridge_1_m0_burstcount                  (cpu_1_0_mm_bridge_1_m0_burstcount),                            //                                             .burstcount
		.cpu_1_0_mm_bridge_1_m0_byteenable                  (cpu_1_0_mm_bridge_1_m0_byteenable),                            //                                             .byteenable
		.cpu_1_0_mm_bridge_1_m0_read                        (cpu_1_0_mm_bridge_1_m0_read),                                  //                                             .read
		.cpu_1_0_mm_bridge_1_m0_readdata                    (cpu_1_0_mm_bridge_1_m0_readdata),                              //                                             .readdata
		.cpu_1_0_mm_bridge_1_m0_readdatavalid               (cpu_1_0_mm_bridge_1_m0_readdatavalid),                         //                                             .readdatavalid
		.cpu_1_0_mm_bridge_1_m0_write                       (cpu_1_0_mm_bridge_1_m0_write),                                 //                                             .write
		.cpu_1_0_mm_bridge_1_m0_writedata                   (cpu_1_0_mm_bridge_1_m0_writedata),                             //                                             .writedata
		.cpu_1_0_mm_bridge_1_m0_debugaccess                 (cpu_1_0_mm_bridge_1_m0_debugaccess),                           //                                             .debugaccess
		.sdram_controller_s1_address                        (mm_interconnect_0_sdram_controller_s1_address),                //                          sdram_controller_s1.address
		.sdram_controller_s1_write                          (mm_interconnect_0_sdram_controller_s1_write),                  //                                             .write
		.sdram_controller_s1_read                           (mm_interconnect_0_sdram_controller_s1_read),                   //                                             .read
		.sdram_controller_s1_readdata                       (mm_interconnect_0_sdram_controller_s1_readdata),               //                                             .readdata
		.sdram_controller_s1_writedata                      (mm_interconnect_0_sdram_controller_s1_writedata),              //                                             .writedata
		.sdram_controller_s1_byteenable                     (mm_interconnect_0_sdram_controller_s1_byteenable),             //                                             .byteenable
		.sdram_controller_s1_readdatavalid                  (mm_interconnect_0_sdram_controller_s1_readdatavalid),          //                                             .readdatavalid
		.sdram_controller_s1_waitrequest                    (mm_interconnect_0_sdram_controller_s1_waitrequest),            //                                             .waitrequest
		.sdram_controller_s1_chipselect                     (mm_interconnect_0_sdram_controller_s1_chipselect),             //                                             .chipselect
		.shared_mailbox_avmm_msg_receiver_address           (mm_interconnect_0_shared_mailbox_avmm_msg_receiver_address),   //             shared_mailbox_avmm_msg_receiver.address
		.shared_mailbox_avmm_msg_receiver_write             (mm_interconnect_0_shared_mailbox_avmm_msg_receiver_write),     //                                             .write
		.shared_mailbox_avmm_msg_receiver_read              (mm_interconnect_0_shared_mailbox_avmm_msg_receiver_read),      //                                             .read
		.shared_mailbox_avmm_msg_receiver_readdata          (mm_interconnect_0_shared_mailbox_avmm_msg_receiver_readdata),  //                                             .readdata
		.shared_mailbox_avmm_msg_receiver_writedata         (mm_interconnect_0_shared_mailbox_avmm_msg_receiver_writedata), //                                             .writedata
		.shared_mailbox_avmm_msg_sender_address             (mm_interconnect_0_shared_mailbox_avmm_msg_sender_address),     //               shared_mailbox_avmm_msg_sender.address
		.shared_mailbox_avmm_msg_sender_write               (mm_interconnect_0_shared_mailbox_avmm_msg_sender_write),       //                                             .write
		.shared_mailbox_avmm_msg_sender_read                (mm_interconnect_0_shared_mailbox_avmm_msg_sender_read),        //                                             .read
		.shared_mailbox_avmm_msg_sender_readdata            (mm_interconnect_0_shared_mailbox_avmm_msg_sender_readdata),    //                                             .readdata
		.shared_mailbox_avmm_msg_sender_writedata           (mm_interconnect_0_shared_mailbox_avmm_msg_sender_writedata),   //                                             .writedata
		.shared_mailbox_avmm_msg_sender_waitrequest         (mm_interconnect_0_shared_mailbox_avmm_msg_sender_waitrequest), //                                             .waitrequest
		.shared_mutex_PIO_s1_address                        (mm_interconnect_0_shared_mutex_pio_s1_address),                //                          shared_mutex_PIO_s1.address
		.shared_mutex_PIO_s1_write                          (mm_interconnect_0_shared_mutex_pio_s1_write),                  //                                             .write
		.shared_mutex_PIO_s1_read                           (mm_interconnect_0_shared_mutex_pio_s1_read),                   //                                             .read
		.shared_mutex_PIO_s1_readdata                       (mm_interconnect_0_shared_mutex_pio_s1_readdata),               //                                             .readdata
		.shared_mutex_PIO_s1_writedata                      (mm_interconnect_0_shared_mutex_pio_s1_writedata),              //                                             .writedata
		.shared_mutex_PIO_s1_chipselect                     (mm_interconnect_0_shared_mutex_pio_s1_chipselect),             //                                             .chipselect
		.shared_PIO_avalon_slave_0_address                  (mm_interconnect_0_shared_pio_avalon_slave_0_address),          //                    shared_PIO_avalon_slave_0.address
		.shared_PIO_avalon_slave_0_write                    (mm_interconnect_0_shared_pio_avalon_slave_0_write),            //                                             .write
		.shared_PIO_avalon_slave_0_read                     (mm_interconnect_0_shared_pio_avalon_slave_0_read),             //                                             .read
		.shared_PIO_avalon_slave_0_readdata                 (mm_interconnect_0_shared_pio_avalon_slave_0_readdata),         //                                             .readdata
		.shared_PIO_avalon_slave_0_writedata                (mm_interconnect_0_shared_pio_avalon_slave_0_writedata),        //                                             .writedata
		.sysid_control_slave_address                        (mm_interconnect_0_sysid_control_slave_address),                //                          sysid_control_slave.address
		.sysid_control_slave_readdata                       (mm_interconnect_0_sysid_control_slave_readdata)                //                                             .readdata
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~reset_reset_n),                 // reset_in0.reset
		.clk            (pll_0_outclk1_clk),              //       clk.clk
		.reset_out      (rst_controller_reset_out_reset), // reset_out.reset
		.reset_req      (),                               // (terminated)
		.reset_req_in0  (1'b0),                           // (terminated)
		.reset_in1      (1'b0),                           // (terminated)
		.reset_req_in1  (1'b0),                           // (terminated)
		.reset_in2      (1'b0),                           // (terminated)
		.reset_req_in2  (1'b0),                           // (terminated)
		.reset_in3      (1'b0),                           // (terminated)
		.reset_req_in3  (1'b0),                           // (terminated)
		.reset_in4      (1'b0),                           // (terminated)
		.reset_req_in4  (1'b0),                           // (terminated)
		.reset_in5      (1'b0),                           // (terminated)
		.reset_req_in5  (1'b0),                           // (terminated)
		.reset_in6      (1'b0),                           // (terminated)
		.reset_req_in6  (1'b0),                           // (terminated)
		.reset_in7      (1'b0),                           // (terminated)
		.reset_req_in7  (1'b0),                           // (terminated)
		.reset_in8      (1'b0),                           // (terminated)
		.reset_req_in8  (1'b0),                           // (terminated)
		.reset_in9      (1'b0),                           // (terminated)
		.reset_req_in9  (1'b0),                           // (terminated)
		.reset_in10     (1'b0),                           // (terminated)
		.reset_req_in10 (1'b0),                           // (terminated)
		.reset_in11     (1'b0),                           // (terminated)
		.reset_req_in11 (1'b0),                           // (terminated)
		.reset_in12     (1'b0),                           // (terminated)
		.reset_req_in12 (1'b0),                           // (terminated)
		.reset_in13     (1'b0),                           // (terminated)
		.reset_req_in13 (1'b0),                           // (terminated)
		.reset_in14     (1'b0),                           // (terminated)
		.reset_req_in14 (1'b0),                           // (terminated)
		.reset_in15     (1'b0),                           // (terminated)
		.reset_req_in15 (1'b0)                            // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (~reset_reset_n),                     // reset_in0.reset
		.clk            (clk_clk),                            //       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_002 (
		.reset_in0      (~reset_reset_n),                     // reset_in0.reset
		.clk            (pll_0_outclk0_clk),                  //       clk.clk
		.reset_out      (rst_controller_002_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

endmodule
