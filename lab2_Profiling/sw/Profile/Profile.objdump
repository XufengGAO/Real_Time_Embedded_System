
Profile.elf:     file format elf32-littlenios2
Profile.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000025c

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00011240 memsz 0x00011240 flags r-x
    LOAD off    0x00012260 vaddr 0x00011260 paddr 0x00013184 align 2**12
         filesz 0x00001f24 memsz 0x00001f24 flags rw-
    LOAD off    0x000150a8 vaddr 0x000150a8 paddr 0x000150a8 align 2**12
         filesz 0x00000000 memsz 0x000021cc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000023c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010b44  0000025c  0000025c  0000125c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004c0  00010da0  00010da0  00011da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f24  00011260  00013184  00012260  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000021cc  000150a8  000150a8  000150a8  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller_0 00000000  00017274  00017274  00014184  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00014184  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000fb0  00000000  00000000  000141a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00024ad2  00000000  00000000  00015158  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009709  00000000  00000000  00039c2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000bda7  00000000  00000000  00043333  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002420  00000000  00000000  0004f0dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003d45  00000000  00000000  000514fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017995  00000000  00000000  00055241  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0006cbd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001860  00000000  00000000  0006cc08  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00071b39  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00071b3c  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00071b48  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00071b49  2**0
                  CONTENTS, READONLY
 21 .profiling_enabled 00000001  00000000  00000000  00071b4a  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  00071b4b  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  00071b56  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  00071b61  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000006  00000000  00000000  00071b6c  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000005e  00000000  00000000  00071b72  2**0
                  CONTENTS, READONLY
 27 .jdi          0000677a  00000000  00000000  00071bd0  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0006daca  00000000  00000000  0007834a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
0000025c l    d  .text	00000000 .text
00010da0 l    d  .rodata	00000000 .rodata
00011260 l    d  .rwdata	00000000 .rwdata
000150a8 l    d  .bss	00000000 .bss
00017274 l    d  .sdram_controller_0	00000000 .sdram_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/24833/Desktop/FPGA/lab2_Profiling/sdram_instrCacheEnabled_dataCacheEnabled/sw/Profile_bsp//obj/HAL/src/crt0.o
000002a4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00011260 l     O .rwdata	00000400 lookup_bitflip
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_load.c
0000093c l     F .text	00000074 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000de4 l     F .text	00000040 alt_dev_reg
00011660 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000115c l     F .text	00000218 altera_avalon_jtag_uart_irq
00001374 l     F .text	000000ac altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_performance_counter.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00001bb4 l     F .text	00000084 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 perf_print_formatted_report.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00002084 l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000021a8 l     F .text	00000038 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000021e0 l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_gmon.c
00013150 l     O .rwdata	00000004 pcsample_need_init
000150bc l     O .bss	00000004 s_pcsamples
00013154 l     O .rwdata	00000004 s_low_pc
00013158 l     O .rwdata	00000004 s_high_pc
000150f4 l     O .bss	00000018 s_nios2_pcsample_alarm
000150c0 l     O .bss	00000004 mcount_slab_ptr
000150c4 l     O .bss	00000004 mcount_slab_size
000023b0 l     F .text	0000007c mcount_allocate
0000252c l     F .text	000000cc nios2_pcsample_init
000025f8 l     F .text	00000080 nios2_pcsample
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00002994 l     F .text	000000d0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00002aec l     F .text	00000048 alt_get_errno
00002b34 l     F .text	000000d0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00013160 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0001288c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00010fde l     O .rodata	00000010 zeroes.4404
00005c58 l     F .text	000000c8 __sbprintf
00010fee l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
000062a0 l     F .text	0000020c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00007e0c l     F .text	00000014 __fp_unlock
00007e38 l     F .text	000001a8 __sinit.part.1
00007fe0 l     F .text	00000014 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
00012cd0 l     O .rwdata	00000020 lc_ctype_charset
00012cb0 l     O .rwdata	00000020 lc_message_charset
00012cf0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mprec.c
0001101c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000a85c l     F .text	00000108 __sprint_r.part.0
00011150 l     O .rodata	00000010 blanks.4348
00011140 l     O .rodata	00000010 zeroes.4349
0000be18 l     F .text	000000c8 __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00010780 l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00010884 l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
0001097c l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00010b04 l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_write.c
00010c54 l     F .text	00000048 alt_get_errno
000150d4 g     O .bss	00000004 alt_instruction_exception_handler
0000a38c g     F .text	00000080 _mprec_log10
0000a490 g     F .text	00000094 __any_on
0000c8f4 g     F .text	00000060 _isatty_r
00011028 g     O .rodata	00000028 __mprec_tinytens
00000a40 g     F .text	00000088 alt_main
00017174 g     O .bss	00000100 alt_irq
0000c954 g     F .text	0000006c _lseek_r
00013184 g       *ABS*	00000000 __flash_rwdata_start
0000f1e8 g     F .text	00000090 .hidden __eqdf2
00017274 g       *ABS*	00000000 __alt_heap_start
000037c0 g     F .text	00000048 printf
0000d100 g     F .text	000000a8 _wcrtomb_r
0000a700 g     F .text	00000068 __sseek
000081b0 g     F .text	0000001c __sinit
00001b84 g     F .text	00000030 alt_get_cpu_freq
00005d20 g     F .text	0000014c __swbuf_r
00008840 g     F .text	00000088 _setlocale_r
00007ff4 g     F .text	00000074 __sfmoreglue
00010ad4 g     F .text	00000030 __malloc_unlock
000150b8 g     O .bss	00000004 altera_avalon_timer_ts_freq
0000c9c0 g     F .text	00000164 memmove
00001cc0 g     F .text	0000028c perf_print_formatted_report
0000818c g     F .text	00000024 _cleanup
0000944c g     F .text	000000b4 _Balloc
0000f278 g     F .text	000000e4 .hidden __gtdf2
00003040 g     F .text	00000030 altera_nios2_gen2_irq_init
000004c0 g     F .text	000000c0 check_res
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000c3c4 g     F .text	00000068 _fstat_r
000150d8 g     O .bss	00000004 errno
0000a664 g     F .text	00000014 __seofread
000150ac g     O .bss	00000004 alt_argv
0001b130 g       *ABS*	00000000 _gp
00015134 g     O .bss	00000fa0 output
00000580 g     F .text	000000bc software_Bit_Manipulator
000126e8 g     O .rwdata	00000180 alt_fd_list
00003070 g     F .text	0000009c alt_find_dev
00003500 g     F .text	00000154 memcpy
00007e20 g     F .text	00000018 _cleanup_r
0001050c g     F .text	000000e8 .hidden __floatsidf
00002a64 g     F .text	00000088 alt_io_redirect
0000f35c g     F .text	000000f8 .hidden __ltdf2
00010da0 g       *ABS*	00000000 __DTOR_END__
0000336c g     F .text	000000a8 alt_exception_cause_generated_bad_addr
0000a524 g     F .text	00000080 __fpclassifyd
0000a2dc g     F .text	000000b0 __ratio
0000bdf0 g     F .text	00000028 __vfiprintf_internal
00001590 g     F .text	00000228 altera_avalon_jtag_uart_read
00003784 g     F .text	0000003c _printf_r
0000df6c g     F .text	00000070 .hidden __udivsi3
000108cc g     F .text	000000b0 isatty
00000810 g     F .text	000000d8 Accelerator_profile
00011078 g     O .rodata	000000c8 __mprec_tens
000088c8 g     F .text	00000018 __locale_charset
000032d0 g     F .text	0000009c alt_icache_flush
000150f0 g     O .bss	00000004 __malloc_top_pad
000160d4 g     O .bss	00000fa0 input
00001b08 g     F .text	0000004c perf_get_num_starts
00013174 g     O .rwdata	00000004 __mb_cur_max
00008928 g     F .text	00000018 _localeconv_r
0000c42c g     F .text	000004c8 __sfvwrite_r
000098a0 g     F .text	00000048 __i2b
0000a5a4 g     F .text	00000060 _sbrk_r
0000063c g     F .text	000000d4 software_profile
0000cb24 g     F .text	0000006c _read_r
00013148 g     O .rwdata	00000004 alt_max_fd
0000c07c g     F .text	000000fc _fclose_r
00007dd0 g     F .text	0000003c fflush
000150ec g     O .bss	00000004 __malloc_max_sbrked_mem
0000e03c g     F .text	000008b8 .hidden __adddf3
0000a06c g     F .text	00000118 __b2d
0000d918 g     F .text	00000544 .hidden __umoddi3
000109c4 g     F .text	000000e0 lseek
00000000 g       *ABS*	00000000 __alt_mem_sdram_controller_0
0001316c g     O .rwdata	00000004 _global_impure_ptr
0000cb90 g     F .text	00000570 _realloc_r
00017274 g       *ABS*	00000000 __bss_end
00002898 g     F .text	000000fc alt_iic_isr_register
00002f2c g     F .text	00000114 alt_tick
0000d394 g     F .text	00000584 .hidden __udivdi3
0000c308 g     F .text	00000030 _fputwc_r
00011050 g     O .rodata	00000028 __mprec_bigtens
00009660 g     F .text	00000110 __s2b
000105f4 g     F .text	000000b4 .hidden __floatunsidf
00000710 g     F .text	0000002c Custom_Instruction_Bit_Manipulator
00009d8c g     F .text	0000006c __mcmp
0000820c g     F .text	00000024 __fp_lock_all
00002840 g     F .text	00000058 alt_ic_irq_enabled
00002e84 g     F .text	000000a8 alt_alarm_stop
000150c8 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000e0 alt_irq_handler
000126c0 g     O .rwdata	00000028 alt_dev_null
000008e8 g     F .text	00000054 alt_dcache_flush_all
00009770 g     F .text	00000074 __hi0bits
00010480 g     F .text	0000008c .hidden __fixdfsi
0000025c g       *ABS*	00000000 stext
0000242c g     F .text	00000100 __mcount_record
00013184 g       *ABS*	00000000 __ram_rwdata_end
00013140 g     O .rwdata	00000008 alt_dev_list
00010c9c g     F .text	00000104 write
00003808 g     F .text	000000ac _putc_r
00011260 g       *ABS*	00000000 __ram_rodata_end
000107c8 g     F .text	000000bc fstat
0000f35c g     F .text	000000f8 .hidden __ledf2
00009aec g     F .text	0000014c __pow5mult
0000a988 g     F .text	00001468 ___vfiprintf_internal_r
000150e4 g     O .bss	00000004 __nlocale_changed
0000dfdc g     F .text	00000060 .hidden __umodsi3
00017274 g       *ABS*	00000000 end
00001090 g     F .text	000000cc altera_avalon_jtag_uart_init
000001dc g     F .exceptions	00000080 alt_instruction_exception_entry
00010da0 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
00001c38 g     F .text	00000088 alt_avalon_timer_sc_init
000106a8 g     F .text	00000070 .hidden __clzsi2
000017b8 g     F .text	00000230 altera_avalon_jtag_uart_write
000081cc g     F .text	00000010 __sfp_lock_acquire
0000935c g     F .text	000000f0 memchr
00010da0 g       *ABS*	00000000 etext
00003a2c g     F .text	00002204 ___vfprintf_internal_r
00008384 g     F .text	0000031c _free_r
00000b64 g     F .text	00000238 alt_printf
000088e0 g     F .text	0000001c __locale_mb_cur_max
00006114 g     F .text	0000018c __call_exitprocs
000150e0 g     O .bss	00000004 __mlocale_changed
00000434 g     F .text	0000008c write_data
00013178 g     O .rwdata	00000004 __malloc_sbrk_base
0000025c g     F .text	0000004c _start
000150cc g     O .bss	00000004 _alt_tick_rate
0000d318 g     F .text	0000007c .hidden __floatundidf
00009c38 g     F .text	00000154 __lshift
000150d0 g     O .bss	00000004 _alt_nticks
00010b4c g     F .text	00000108 read
00000e68 g     F .text	00000094 alt_sys_init
00005ff0 g     F .text	00000124 __register_exitproc
00012868 g     O .rwdata	00000024 alt_gmon_data
000098e8 g     F .text	00000204 __multiply
00000ac8 g       .text	00000000 mcount
00001420 g     F .text	00000074 altera_avalon_jtag_uart_close
00011260 g       *ABS*	00000000 __ram_rwdata_start
00010da0 g       *ABS*	00000000 __ram_rodata_start
0001510c g     O .bss	00000028 __malloc_current_mallinfo
0000a184 g     F .text	00000158 __d2b
00000efc g     F .text	0000006c altera_avalon_jtag_uart_read_fd
00003220 g     F .text	000000b0 alt_get_fd
0000bf4c g     F .text	00000060 _close_r
000019e8 g     F .text	000000c8 perf_get_section_time
00003478 g     F .text	00000088 memcmp
00000fd4 g     F .text	0000005c altera_avalon_jtag_uart_close_fd
00017274 g       *ABS*	00000000 __alt_stack_base
00001030 g     F .text	00000060 altera_avalon_jtag_uart_ioctl_fd
00005e90 g     F .text	00000160 __swsetup_r
0000e8f4 g     F .text	000008f4 .hidden __divdf3
00008068 g     F .text	00000124 __sfp
0000a40c g     F .text	00000084 __copybits
00001ab0 g     F .text	00000058 perf_get_total_time
00012d28 g     O .rwdata	00000408 __malloc_av_
000081fc g     F .text	00000010 __sinit_lock_release
0000f454 g     F .text	00000724 .hidden __muldf3
0000a604 g     F .text	00000060 __sread
0000310c g     F .text	00000114 alt_find_file
00002228 g     F .text	000000b0 alt_dev_llist_insert
00010aa4 g     F .text	00000030 __malloc_lock
00002dd4 g     F .text	000000b0 sbrk
00007d68 g     F .text	00000068 _fflush_r
0000bfac g     F .text	000000d0 _calloc_r
000150a8 g       *ABS*	00000000 __bss_start
00003654 g     F .text	00000130 memset
000002a8 g     F .text	0000018c main
000150b0 g     O .bss	00000004 alt_envp
000150e8 g     O .bss	00000004 __malloc_max_total_mem
00000f68 g     F .text	0000006c altera_avalon_jtag_uart_write_fd
00005e6c g     F .text	00000024 __swbuf
0000a768 g     F .text	00000014 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0000c178 g     F .text	00000020 fclose
000064ac g     F .text	00001694 _dtoa_r
00008b44 g     F .text	00000818 _malloc_r
0000d274 g     F .text	0000003c __ascii_wctomb
0001314c g     O .rwdata	00000004 alt_errno
000086a0 g     F .text	000000d0 _fwalk
000038b4 g     F .text	000000d4 putc
0000de5c g     F .text	00000090 .hidden __divsi3
00008254 g     F .text	00000130 _malloc_trim_r
00010da0 g       *ABS*	00000000 __CTOR_END__
0000a77c g     F .text	000000e0 strcmp
00010da0 g       *ABS*	00000000 __flash_rodata_start
00010da0 g       *ABS*	00000000 __DTOR_LIST__
0000f1e8 g     F .text	00000090 .hidden __nedf2
00000e24 g     F .text	00000044 alt_irq_init
00002d64 g     F .text	00000070 alt_release_fd
00011160 g     O .rodata	00000100 .hidden __clz_tab
000150dc g     O .bss	00000004 _PathLocale
00003414 g     F .text	00000020 atexit
0000bee0 g     F .text	0000006c _write_r
00008940 g     F .text	00000024 setlocale
00013170 g     O .rwdata	00000004 _impure_ptr
000150a8 g     O .bss	00000004 alt_argc
00007b40 g     F .text	00000228 __sflush_r
000150b4 g     O .bss	00000004 altera_avalon_timer_ts_base
00002344 g     F .text	0000006c _do_dtors
00008914 g     F .text	00000014 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
0000a000 g     F .text	0000006c __ulp
00008230 g     F .text	00000024 __fp_unlock_all
00013138 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00008964 g     F .text	00000018 localeconv
000026b8 g     F .text	0000005c alt_ic_isr_register
00013184 g       *ABS*	00000000 _edata
00017274 g       *ABS*	00000000 _end
0000c198 g     F .text	00000170 __fputwc
0000025c g       *ABS*	00000000 __ram_exceptions_end
00001494 g     F .text	000000fc altera_avalon_jtag_uart_ioctl
000027a8 g     F .text	00000098 alt_ic_irq_disable
0000a678 g     F .text	00000088 __swrite
0001317c g     O .rwdata	00000004 __malloc_trim_threshold
00001b54 g     F .text	00000030 alt_get_performance_counter_base
000088fc g     F .text	00000018 __locale_msgcharset
00003434 g     F .text	00000044 exit
00008770 g     F .text	000000d0 _fwalk_reent
00009df8 g     F .text	00000208 __mdiff
0000073c g     F .text	000000d4 custom_Ins_profile
0000deec g     F .text	00000080 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000081dc g     F .text	00000010 __sfp_lock_release
00010718 g     F .text	00000068 _exit
00001f4c g     F .text	00000138 alt_alarm_start
00017074 g     O .bss	00000100 __mcount_fn_head
0000897c g     F .text	000001c8 __smakebuf_r
00003988 g     F .text	000000a4 strlen
00002c04 g     F .text	00000160 open
0000f278 g     F .text	000000e4 .hidden __gedf2
00000d9c g     F .text	00000048 alt_putchar
00013180 g     O .rwdata	00000004 __wctomb
0000a964 g     F .text	00000024 __sprint_r
00002678 g     F .text	00000040 alt_icache_flush_all
0001315c g     O .rwdata	00000004 alt_priority_mask
00002714 g     F .text	00000094 alt_ic_irq_enable
00005c30 g     F .text	00000028 __vfprintf_internal
0000d2b0 g     F .text	00000068 _wctomb_r
0000fb78 g     F .text	00000908 .hidden __subdf3
00013130 g     O .rwdata	00000004 test_data
000097e4 g     F .text	000000bc __lo0bits
00000ac8 g       .text	00000000 _mcount
00013164 g     O .rwdata	00000008 alt_alarm_list
000022d8 g     F .text	0000006c _do_ctors
0000d1a8 g     F .text	000000cc wcrtomb
000020cc g     F .text	000000dc close
000009b0 g     F .text	00000090 alt_load
00013134 g     O .rwdata	00000004 expected_res
0000c338 g     F .text	0000008c fputwc
000081ec g     F .text	00000010 __sinit_lock_acquire
00009534 g     F .text	0000012c __multadd
00009500 g     F .text	00000034 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0xfc000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409714 	ori	at,at,604
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001dc0 	call	1dc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	f811883a 	mov	r8,ra
 100:	0000ac80 	call	ac8 <_mcount>
 104:	403f883a 	mov	ra,r8
 108:	defff904 	addi	sp,sp,-28
 10c:	dfc00615 	stw	ra,24(sp)
 110:	df000515 	stw	fp,20(sp)
 114:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 118:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 11c:	0005313a 	rdctl	r2,ipending
 120:	e0bffe15 	stw	r2,-8(fp)

  return active;
 124:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 128:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 12c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 130:	00800044 	movi	r2,1
 134:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 138:	e0fffb17 	ldw	r3,-20(fp)
 13c:	e0bffc17 	ldw	r2,-16(fp)
 140:	1884703a 	and	r2,r3,r2
 144:	10001426 	beq	r2,zero,198 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 148:	00800074 	movhi	r2,1
 14c:	109c5d04 	addi	r2,r2,29044
 150:	e0fffd17 	ldw	r3,-12(fp)
 154:	180690fa 	slli	r3,r3,3
 158:	10c5883a 	add	r2,r2,r3
 15c:	10c00017 	ldw	r3,0(r2)
 160:	00800074 	movhi	r2,1
 164:	109c5d04 	addi	r2,r2,29044
 168:	e13ffd17 	ldw	r4,-12(fp)
 16c:	200890fa 	slli	r4,r4,3
 170:	1105883a 	add	r2,r2,r4
 174:	10800104 	addi	r2,r2,4
 178:	10800017 	ldw	r2,0(r2)
 17c:	1009883a 	mov	r4,r2
 180:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 184:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 188:	0005313a 	rdctl	r2,ipending
 18c:	e0bfff15 	stw	r2,-4(fp)

  return active;
 190:	e0bfff17 	ldw	r2,-4(fp)
 194:	00000706 	br	1b4 <alt_irq_handler+0xb8>
      }
      mask <<= 1;
 198:	e0bffc17 	ldw	r2,-16(fp)
 19c:	1085883a 	add	r2,r2,r2
 1a0:	e0bffc15 	stw	r2,-16(fp)
      i++;
 1a4:	e0bffd17 	ldw	r2,-12(fp)
 1a8:	10800044 	addi	r2,r2,1
 1ac:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1b0:	003fe106 	br	138 <__alt_data_end+0xfc000138>

    active = alt_irq_pending ();
 1b4:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b8:	e0bffb17 	ldw	r2,-20(fp)
 1bc:	103fdb1e 	bne	r2,zero,12c <__alt_data_end+0xfc00012c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1c0:	0001883a 	nop
}
 1c4:	0001883a 	nop
 1c8:	e037883a 	mov	sp,fp
 1cc:	dfc00117 	ldw	ra,4(sp)
 1d0:	df000017 	ldw	fp,0(sp)
 1d4:	dec00204 	addi	sp,sp,8
 1d8:	f800283a 	ret

000001dc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1dc:	f811883a 	mov	r8,ra
 1e0:	0000ac80 	call	ac8 <_mcount>
 1e4:	403f883a 	mov	ra,r8
 1e8:	defffb04 	addi	sp,sp,-20
 1ec:	dfc00415 	stw	ra,16(sp)
 1f0:	df000315 	stw	fp,12(sp)
 1f4:	df000304 	addi	fp,sp,12
 1f8:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1fc:	000531fa 	rdctl	r2,exception
 200:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 204:	e0bffd17 	ldw	r2,-12(fp)
 208:	10801f0c 	andi	r2,r2,124
 20c:	1004d0ba 	srli	r2,r2,2
 210:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 214:	0005333a 	rdctl	r2,badaddr
 218:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 21c:	d0a7e917 	ldw	r2,-24668(gp)
 220:	10000726 	beq	r2,zero,240 <alt_instruction_exception_entry+0x64>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 224:	d0a7e917 	ldw	r2,-24668(gp)
 228:	e0fffd17 	ldw	r3,-12(fp)
 22c:	e1bffe17 	ldw	r6,-8(fp)
 230:	e17fff17 	ldw	r5,-4(fp)
 234:	1809883a 	mov	r4,r3
 238:	103ee83a 	callr	r2
 23c:	00000206 	br	248 <alt_instruction_exception_entry+0x6c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 240:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 244:	0005883a 	mov	r2,zero
}
 248:	e037883a 	mov	sp,fp
 24c:	dfc00117 	ldw	ra,4(sp)
 250:	df000017 	ldw	fp,0(sp)
 254:	dec00204 	addi	sp,sp,8
 258:	f800283a 	ret

Disassembly of section .text:

0000025c <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     25c:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     260:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     264:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     268:	00bffd16 	blt	zero,r2,260 <__alt_data_end+0xfc000260>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     26c:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     270:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     274:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     278:	d6ac4c14 	ori	gp,gp,45360
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     27c:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     280:	10942a14 	ori	r2,r2,20648

    movhi r3, %hi(__bss_end)
     284:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     288:	18dc9d14 	ori	r3,r3,29300

    beq r2, r3, 1f
     28c:	10c00326 	beq	r2,r3,29c <_start+0x40>

0:
    stw zero, (r2)
     290:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     294:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     298:	10fffd36 	bltu	r2,r3,290 <__alt_data_end+0xfc000290>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     29c:	00009b00 	call	9b0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     2a0:	0000a400 	call	a40 <alt_main>

000002a4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     2a4:	003fff06 	br	2a4 <__alt_data_end+0xfc0002a4>

000002a8 <main>:
#define IREStart  3
#define IREDone  4


int main()
{
     2a8:	defff904 	addi	sp,sp,-28
     2ac:	dfc00615 	stw	ra,24(sp)
     2b0:	df000515 	stw	fp,20(sp)
     2b4:	df000504 	addi	fp,sp,20
	// performance counter functions
	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
     2b8:	00c00044 	movi	r3,1
     2bc:	00810034 	movhi	r2,1024
     2c0:	10840004 	addi	r2,r2,4096
     2c4:	10c00035 	stwio	r3,0(r2)
	PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
     2c8:	0007883a 	mov	r3,zero
     2cc:	00810034 	movhi	r2,1024
     2d0:	10840104 	addi	r2,r2,4100
     2d4:	10c00035 	stwio	r3,0(r2)

	// we test 3 cases, 1 bit manipulation, 1000 bit manipulations, and 1000000 bit manipulations
	// corresponding to (data_len, amount) = (1, 1), (1000, 1), (1000, 1000)
	int data_len = 1000;
     2d8:	0080fa04 	movi	r2,1000
     2dc:	e0bffd15 	stw	r2,-12(fp)
	int amount = 1000;
     2e0:	0080fa04 	movi	r2,1000
     2e4:	e0bffe15 	stw	r2,-8(fp)

	// validation to check if the manipulation results are correct
	bool validation = false;
     2e8:	e03fff05 	stb	zero,-4(fp)

	alt_printf("Start\n");
     2ec:	01000074 	movhi	r4,1
     2f0:	21036804 	addi	r4,r4,3488
     2f4:	0000b640 	call	b64 <alt_printf>

	// software
	write_data(data_len);
     2f8:	e13ffd17 	ldw	r4,-12(fp)
     2fc:	00004340 	call	434 <write_data>
	software_profile(data_len, amount);
     300:	e17ffe17 	ldw	r5,-8(fp)
     304:	e13ffd17 	ldw	r4,-12(fp)
     308:	000063c0 	call	63c <software_profile>
	validation = check_res(data_len, true);
     30c:	01400044 	movi	r5,1
     310:	e13ffd17 	ldw	r4,-12(fp)
     314:	00004c00 	call	4c0 <check_res>
     318:	e0bfff05 	stb	r2,-4(fp)
	validation ? alt_printf("software res=True\n") : alt_printf("software res=False\n");
     31c:	e0bfff03 	ldbu	r2,-4(fp)
     320:	10000426 	beq	r2,zero,334 <main+0x8c>
     324:	01000074 	movhi	r4,1
     328:	21036a04 	addi	r4,r4,3496
     32c:	0000b640 	call	b64 <alt_printf>
     330:	00000306 	br	340 <main+0x98>
     334:	01000074 	movhi	r4,1
     338:	21036f04 	addi	r4,r4,3516
     33c:	0000b640 	call	b64 <alt_printf>

	// custom instruction
	write_data(data_len);
     340:	e13ffd17 	ldw	r4,-12(fp)
     344:	00004340 	call	434 <write_data>
	custom_Ins_profile(data_len, amount);
     348:	e17ffe17 	ldw	r5,-8(fp)
     34c:	e13ffd17 	ldw	r4,-12(fp)
     350:	000073c0 	call	73c <custom_Ins_profile>
	validation = check_res(data_len, true);
     354:	01400044 	movi	r5,1
     358:	e13ffd17 	ldw	r4,-12(fp)
     35c:	00004c00 	call	4c0 <check_res>
     360:	e0bfff05 	stb	r2,-4(fp)
	validation ? alt_printf("custom Ins res=True\n") : alt_printf("custom Ins res=False\n");
     364:	e0bfff03 	ldbu	r2,-4(fp)
     368:	10000426 	beq	r2,zero,37c <main+0xd4>
     36c:	01000074 	movhi	r4,1
     370:	21037404 	addi	r4,r4,3536
     374:	0000b640 	call	b64 <alt_printf>
     378:	00000306 	br	388 <main+0xe0>
     37c:	01000074 	movhi	r4,1
     380:	21037a04 	addi	r4,r4,3560
     384:	0000b640 	call	b64 <alt_printf>

	// hardware accelerator
	write_data(data_len);
     388:	e13ffd17 	ldw	r4,-12(fp)
     38c:	00004340 	call	434 <write_data>
	Accelerator_profile(data_len, amount);
     390:	e17ffe17 	ldw	r5,-8(fp)
     394:	e13ffd17 	ldw	r4,-12(fp)
     398:	00008100 	call	810 <Accelerator_profile>
	validation = check_res(data_len, false);
     39c:	000b883a 	mov	r5,zero
     3a0:	e13ffd17 	ldw	r4,-12(fp)
     3a4:	00004c00 	call	4c0 <check_res>
     3a8:	e0bfff05 	stb	r2,-4(fp)
	validation ? alt_printf("Accelerator res=True\n") : alt_printf("Accelerator res=False\n");
     3ac:	e0bfff03 	ldbu	r2,-4(fp)
     3b0:	10000426 	beq	r2,zero,3c4 <main+0x11c>
     3b4:	01000074 	movhi	r4,1
     3b8:	21038004 	addi	r4,r4,3584
     3bc:	0000b640 	call	b64 <alt_printf>
     3c0:	00000306 	br	3d0 <main+0x128>
     3c4:	01000074 	movhi	r4,1
     3c8:	21038604 	addi	r4,r4,3608
     3cc:	0000b640 	call	b64 <alt_printf>

	PERF_STOP_MEASURING(PERFORMANCE_COUNTER_0_BASE);
     3d0:	0007883a 	mov	r3,zero
     3d4:	00810034 	movhi	r2,1024
     3d8:	10840004 	addi	r2,r2,4096
     3dc:	10c00035 	stwio	r3,0(r2)
	perf_print_formatted_report(PERFORMANCE_COUNTER_0_BASE, alt_get_cpu_freq(), 3, "software", "custom_iIs", "Accelerator");
     3e0:	0001b840 	call	1b84 <alt_get_cpu_freq>
     3e4:	1007883a 	mov	r3,r2
     3e8:	00800074 	movhi	r2,1
     3ec:	10838f04 	addi	r2,r2,3644
     3f0:	d8800115 	stw	r2,4(sp)
     3f4:	00800074 	movhi	r2,1
     3f8:	10839204 	addi	r2,r2,3656
     3fc:	d8800015 	stw	r2,0(sp)
     400:	01c00074 	movhi	r7,1
     404:	39c38c04 	addi	r7,r7,3632
     408:	018000c4 	movi	r6,3
     40c:	180b883a 	mov	r5,r3
     410:	01010034 	movhi	r4,1024
     414:	21040004 	addi	r4,r4,4096
     418:	0001cc00 	call	1cc0 <perf_print_formatted_report>

	//exit(EXIT_SUCCESS);
	return 0;
     41c:	0005883a 	mov	r2,zero
}
     420:	e037883a 	mov	sp,fp
     424:	dfc00117 	ldw	ra,4(sp)
     428:	df000017 	ldw	fp,0(sp)
     42c:	dec00204 	addi	sp,sp,8
     430:	f800283a 	ret

00000434 <write_data>:

// function to write data to memory
void write_data(int data_len)
{
     434:	defffc04 	addi	sp,sp,-16
     438:	dfc00315 	stw	ra,12(sp)
     43c:	df000215 	stw	fp,8(sp)
     440:	df000204 	addi	fp,sp,8
     444:	e13fff15 	stw	r4,-4(fp)
	for(int i = 0; i < data_len; i++)
     448:	e03ffe15 	stw	zero,-8(fp)
     44c:	00001206 	br	498 <write_data+0x64>
	{
		input[i] = test_data;
     450:	d1200017 	ldw	r4,-32768(gp)
     454:	00800074 	movhi	r2,1
     458:	10983504 	addi	r2,r2,24788
     45c:	e0fffe17 	ldw	r3,-8(fp)
     460:	18c7883a 	add	r3,r3,r3
     464:	18c7883a 	add	r3,r3,r3
     468:	10c5883a 	add	r2,r2,r3
     46c:	11000015 	stw	r4,0(r2)
		output[i] = 0;
     470:	00800074 	movhi	r2,1
     474:	10944d04 	addi	r2,r2,20788
     478:	e0fffe17 	ldw	r3,-8(fp)
     47c:	18c7883a 	add	r3,r3,r3
     480:	18c7883a 	add	r3,r3,r3
     484:	10c5883a 	add	r2,r2,r3
     488:	10000015 	stw	zero,0(r2)
}

// function to write data to memory
void write_data(int data_len)
{
	for(int i = 0; i < data_len; i++)
     48c:	e0bffe17 	ldw	r2,-8(fp)
     490:	10800044 	addi	r2,r2,1
     494:	e0bffe15 	stw	r2,-8(fp)
     498:	e0fffe17 	ldw	r3,-8(fp)
     49c:	e0bfff17 	ldw	r2,-4(fp)
     4a0:	18bfeb16 	blt	r3,r2,450 <__alt_data_end+0xfc000450>
	{
		input[i] = test_data;
		output[i] = 0;
	}
	// write dirty data back to memory
	alt_dcache_flush_all();
     4a4:	00008e80 	call	8e8 <alt_dcache_flush_all>
}
     4a8:	0001883a 	nop
     4ac:	e037883a 	mov	sp,fp
     4b0:	dfc00117 	ldw	ra,4(sp)
     4b4:	df000017 	ldw	fp,0(sp)
     4b8:	dec00204 	addi	sp,sp,8
     4bc:	f800283a 	ret

000004c0 <check_res>:

// function to check manipulation results
bool check_res(int data_len, bool cache)
{
     4c0:	defffa04 	addi	sp,sp,-24
     4c4:	dfc00515 	stw	ra,20(sp)
     4c8:	df000415 	stw	fp,16(sp)
     4cc:	df000404 	addi	fp,sp,16
     4d0:	e13ffe15 	stw	r4,-8(fp)
     4d4:	2805883a 	mov	r2,r5
     4d8:	e0bfff05 	stb	r2,-4(fp)
	for(int i = 0; i < data_len; i++)
     4dc:	e03ffc15 	stw	zero,-16(fp)
     4e0:	00001e06 	br	55c <check_res+0x9c>
	{
		uint32_t swapping_res = cache ? output[i] : IORD_32DIRECT(&output[i],0);
     4e4:	e0bfff03 	ldbu	r2,-4(fp)
     4e8:	10000826 	beq	r2,zero,50c <check_res+0x4c>
     4ec:	00800074 	movhi	r2,1
     4f0:	10944d04 	addi	r2,r2,20788
     4f4:	e0fffc17 	ldw	r3,-16(fp)
     4f8:	18c7883a 	add	r3,r3,r3
     4fc:	18c7883a 	add	r3,r3,r3
     500:	10c5883a 	add	r2,r2,r3
     504:	10800017 	ldw	r2,0(r2)
     508:	00000706 	br	528 <check_res+0x68>
     50c:	e0bffc17 	ldw	r2,-16(fp)
     510:	1085883a 	add	r2,r2,r2
     514:	1087883a 	add	r3,r2,r2
     518:	00800074 	movhi	r2,1
     51c:	10944d04 	addi	r2,r2,20788
     520:	1885883a 	add	r2,r3,r2
     524:	10800037 	ldwio	r2,0(r2)
     528:	e0bffd15 	stw	r2,-12(fp)
		if(swapping_res != expected_res)
     52c:	d0a00117 	ldw	r2,-32764(gp)
     530:	e0fffd17 	ldw	r3,-12(fp)
     534:	18800626 	beq	r3,r2,550 <check_res+0x90>
		{
			alt_printf("Wrong res=%x\n", swapping_res);
     538:	e17ffd17 	ldw	r5,-12(fp)
     53c:	01000074 	movhi	r4,1
     540:	21039504 	addi	r4,r4,3668
     544:	0000b640 	call	b64 <alt_printf>
			return false;
     548:	0005883a 	mov	r2,zero
     54c:	00000706 	br	56c <check_res+0xac>
}

// function to check manipulation results
bool check_res(int data_len, bool cache)
{
	for(int i = 0; i < data_len; i++)
     550:	e0bffc17 	ldw	r2,-16(fp)
     554:	10800044 	addi	r2,r2,1
     558:	e0bffc15 	stw	r2,-16(fp)
     55c:	e0fffc17 	ldw	r3,-16(fp)
     560:	e0bffe17 	ldw	r2,-8(fp)
     564:	18bfdf16 	blt	r3,r2,4e4 <__alt_data_end+0xfc0004e4>
		{
			alt_printf("Wrong res=%x\n", swapping_res);
			return false;
		}
	}
	return true;
     568:	00800044 	movi	r2,1
}
     56c:	e037883a 	mov	sp,fp
     570:	dfc00117 	ldw	ra,4(sp)
     574:	df000017 	ldw	fp,0(sp)
     578:	dec00204 	addi	sp,sp,8
     57c:	f800283a 	ret

00000580 <software_Bit_Manipulator>:

uint32_t software_Bit_Manipulator(uint32_t input) {
     580:	defffa04 	addi	sp,sp,-24
     584:	df000515 	stw	fp,20(sp)
     588:	df000504 	addi	fp,sp,20
     58c:	e13fff15 	stw	r4,-4(fp)
    // most 8 bits
	uint32_t high = input & 0xFF000000;
     590:	e0bfff17 	ldw	r2,-4(fp)
     594:	10bfc02c 	andhi	r2,r2,65280
     598:	e0bffb15 	stw	r2,-20(fp)
    // least 8 bits
	uint32_t low = input & 0x000000FF;
     59c:	e0bfff17 	ldw	r2,-4(fp)
     5a0:	10803fcc 	andi	r2,r2,255
     5a4:	e0bffc15 	stw	r2,-16(fp)
    // middle 16 bits, right shift 8 bits
	uint32_t middle = (input & 0x00FFFF00) >> 8;
     5a8:	e0ffff17 	ldw	r3,-4(fp)
     5ac:	00804034 	movhi	r2,256
     5b0:	10bfc004 	addi	r2,r2,-256
     5b4:	1884703a 	and	r2,r3,r2
     5b8:	1004d23a 	srli	r2,r2,8
     5bc:	e0bffd15 	stw	r2,-12(fp)
    // get the reverse order bits
	uint32_t flipped_middle = lookup_bitflip[middle & 0x00FF] << 8 | lookup_bitflip[middle >> 8];
     5c0:	e0bffd17 	ldw	r2,-12(fp)
     5c4:	10c03fcc 	andi	r3,r2,255
     5c8:	00800074 	movhi	r2,1
     5cc:	10849804 	addi	r2,r2,4704
     5d0:	18c7883a 	add	r3,r3,r3
     5d4:	18c7883a 	add	r3,r3,r3
     5d8:	10c5883a 	add	r2,r2,r3
     5dc:	10800017 	ldw	r2,0(r2)
     5e0:	1008923a 	slli	r4,r2,8
     5e4:	e0bffd17 	ldw	r2,-12(fp)
     5e8:	1006d23a 	srli	r3,r2,8
     5ec:	00800074 	movhi	r2,1
     5f0:	10849804 	addi	r2,r2,4704
     5f4:	18c7883a 	add	r3,r3,r3
     5f8:	18c7883a 	add	r3,r3,r3
     5fc:	10c5883a 	add	r2,r2,r3
     600:	10800017 	ldw	r2,0(r2)
     604:	2084b03a 	or	r2,r4,r2
     608:	e0bffe15 	stw	r2,-8(fp)
    // concatenate all bits
	return low << 24 | flipped_middle << 8 | high >> 24;
     60c:	e0bffc17 	ldw	r2,-16(fp)
     610:	1006963a 	slli	r3,r2,24
     614:	e0bffe17 	ldw	r2,-8(fp)
     618:	1004923a 	slli	r2,r2,8
     61c:	1886b03a 	or	r3,r3,r2
     620:	e0bffb17 	ldw	r2,-20(fp)
     624:	1004d63a 	srli	r2,r2,24
     628:	1884b03a 	or	r2,r3,r2
}
     62c:	e037883a 	mov	sp,fp
     630:	df000017 	ldw	fp,0(sp)
     634:	dec00104 	addi	sp,sp,4
     638:	f800283a 	ret

0000063c <software_profile>:

void software_profile(int data_len, int amount)
{
     63c:	defffa04 	addi	sp,sp,-24
     640:	dfc00515 	stw	ra,20(sp)
     644:	df000415 	stw	fp,16(sp)
     648:	df000404 	addi	fp,sp,16
     64c:	e13ffe15 	stw	r4,-8(fp)
     650:	e17fff15 	stw	r5,-4(fp)
	PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE,1);
     654:	0007883a 	mov	r3,zero
     658:	00810034 	movhi	r2,1024
     65c:	10840504 	addi	r2,r2,4116
     660:	10c00035 	stwio	r3,0(r2)
	for(int j=0; j<amount; j++){
     664:	e03ffc15 	stw	zero,-16(fp)
     668:	00001c06 	br	6dc <software_profile+0xa0>
		for(int i=0; i<data_len; i++){
     66c:	e03ffd15 	stw	zero,-12(fp)
     670:	00001406 	br	6c4 <software_profile+0x88>
			output[i] = software_Bit_Manipulator(input[i]);
     674:	00800074 	movhi	r2,1
     678:	10983504 	addi	r2,r2,24788
     67c:	e0fffd17 	ldw	r3,-12(fp)
     680:	18c7883a 	add	r3,r3,r3
     684:	18c7883a 	add	r3,r3,r3
     688:	10c5883a 	add	r2,r2,r3
     68c:	10800017 	ldw	r2,0(r2)
     690:	1009883a 	mov	r4,r2
     694:	00005800 	call	580 <software_Bit_Manipulator>
     698:	1009883a 	mov	r4,r2
     69c:	00800074 	movhi	r2,1
     6a0:	10944d04 	addi	r2,r2,20788
     6a4:	e0fffd17 	ldw	r3,-12(fp)
     6a8:	18c7883a 	add	r3,r3,r3
     6ac:	18c7883a 	add	r3,r3,r3
     6b0:	10c5883a 	add	r2,r2,r3
     6b4:	11000015 	stw	r4,0(r2)

void software_profile(int data_len, int amount)
{
	PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE,1);
	for(int j=0; j<amount; j++){
		for(int i=0; i<data_len; i++){
     6b8:	e0bffd17 	ldw	r2,-12(fp)
     6bc:	10800044 	addi	r2,r2,1
     6c0:	e0bffd15 	stw	r2,-12(fp)
     6c4:	e0fffd17 	ldw	r3,-12(fp)
     6c8:	e0bffe17 	ldw	r2,-8(fp)
     6cc:	18bfe916 	blt	r3,r2,674 <__alt_data_end+0xfc000674>
}

void software_profile(int data_len, int amount)
{
	PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE,1);
	for(int j=0; j<amount; j++){
     6d0:	e0bffc17 	ldw	r2,-16(fp)
     6d4:	10800044 	addi	r2,r2,1
     6d8:	e0bffc15 	stw	r2,-16(fp)
     6dc:	e0fffc17 	ldw	r3,-16(fp)
     6e0:	e0bfff17 	ldw	r2,-4(fp)
     6e4:	18bfe116 	blt	r3,r2,66c <__alt_data_end+0xfc00066c>
		for(int i=0; i<data_len; i++){
			output[i] = software_Bit_Manipulator(input[i]);
		}
	}
	PERF_END(PERFORMANCE_COUNTER_0_BASE,1);
     6e8:	0007883a 	mov	r3,zero
     6ec:	00810034 	movhi	r2,1024
     6f0:	10840404 	addi	r2,r2,4112
     6f4:	10c00035 	stwio	r3,0(r2)
}
     6f8:	0001883a 	nop
     6fc:	e037883a 	mov	sp,fp
     700:	dfc00117 	ldw	ra,4(sp)
     704:	df000017 	ldw	fp,0(sp)
     708:	dec00204 	addi	sp,sp,8
     70c:	f800283a 	ret

00000710 <Custom_Instruction_Bit_Manipulator>:

uint32_t Custom_Instruction_Bit_Manipulator(uint32_t input) {
     710:	defffe04 	addi	sp,sp,-8
     714:	df000115 	stw	fp,4(sp)
     718:	df000104 	addi	fp,sp,4
     71c:	e13fff15 	stw	r4,-4(fp)
	return ALT_CI_BIT_MANIPULATE_0(input, 0);
     720:	e0bfff17 	ldw	r2,-4(fp)
     724:	0007883a 	mov	r3,zero
     728:	10c5c032 	custom	0,r2,r2,r3
}
     72c:	e037883a 	mov	sp,fp
     730:	df000017 	ldw	fp,0(sp)
     734:	dec00104 	addi	sp,sp,4
     738:	f800283a 	ret

0000073c <custom_Ins_profile>:

void custom_Ins_profile(int data_len, int amount)
{
     73c:	defffa04 	addi	sp,sp,-24
     740:	dfc00515 	stw	ra,20(sp)
     744:	df000415 	stw	fp,16(sp)
     748:	df000404 	addi	fp,sp,16
     74c:	e13ffe15 	stw	r4,-8(fp)
     750:	e17fff15 	stw	r5,-4(fp)
	PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE,2);
     754:	0007883a 	mov	r3,zero
     758:	00810034 	movhi	r2,1024
     75c:	10840904 	addi	r2,r2,4132
     760:	10c00035 	stwio	r3,0(r2)
	for(int j=0; j<amount; j++){
     764:	e03ffc15 	stw	zero,-16(fp)
     768:	00001c06 	br	7dc <custom_Ins_profile+0xa0>
		for(int i=0; i<data_len; i++){
     76c:	e03ffd15 	stw	zero,-12(fp)
     770:	00001406 	br	7c4 <custom_Ins_profile+0x88>
			output[i] = Custom_Instruction_Bit_Manipulator(input[i]);
     774:	00800074 	movhi	r2,1
     778:	10983504 	addi	r2,r2,24788
     77c:	e0fffd17 	ldw	r3,-12(fp)
     780:	18c7883a 	add	r3,r3,r3
     784:	18c7883a 	add	r3,r3,r3
     788:	10c5883a 	add	r2,r2,r3
     78c:	10800017 	ldw	r2,0(r2)
     790:	1009883a 	mov	r4,r2
     794:	00007100 	call	710 <Custom_Instruction_Bit_Manipulator>
     798:	1009883a 	mov	r4,r2
     79c:	00800074 	movhi	r2,1
     7a0:	10944d04 	addi	r2,r2,20788
     7a4:	e0fffd17 	ldw	r3,-12(fp)
     7a8:	18c7883a 	add	r3,r3,r3
     7ac:	18c7883a 	add	r3,r3,r3
     7b0:	10c5883a 	add	r2,r2,r3
     7b4:	11000015 	stw	r4,0(r2)

void custom_Ins_profile(int data_len, int amount)
{
	PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE,2);
	for(int j=0; j<amount; j++){
		for(int i=0; i<data_len; i++){
     7b8:	e0bffd17 	ldw	r2,-12(fp)
     7bc:	10800044 	addi	r2,r2,1
     7c0:	e0bffd15 	stw	r2,-12(fp)
     7c4:	e0fffd17 	ldw	r3,-12(fp)
     7c8:	e0bffe17 	ldw	r2,-8(fp)
     7cc:	18bfe916 	blt	r3,r2,774 <__alt_data_end+0xfc000774>
}

void custom_Ins_profile(int data_len, int amount)
{
	PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE,2);
	for(int j=0; j<amount; j++){
     7d0:	e0bffc17 	ldw	r2,-16(fp)
     7d4:	10800044 	addi	r2,r2,1
     7d8:	e0bffc15 	stw	r2,-16(fp)
     7dc:	e0fffc17 	ldw	r3,-16(fp)
     7e0:	e0bfff17 	ldw	r2,-4(fp)
     7e4:	18bfe116 	blt	r3,r2,76c <__alt_data_end+0xfc00076c>
		for(int i=0; i<data_len; i++){
			output[i] = Custom_Instruction_Bit_Manipulator(input[i]);
		}
	}
	PERF_END(PERFORMANCE_COUNTER_0_BASE,2);
     7e8:	0007883a 	mov	r3,zero
     7ec:	00810034 	movhi	r2,1024
     7f0:	10840804 	addi	r2,r2,4128
     7f4:	10c00035 	stwio	r3,0(r2)
}
     7f8:	0001883a 	nop
     7fc:	e037883a 	mov	sp,fp
     800:	dfc00117 	ldw	ra,4(sp)
     804:	df000017 	ldw	fp,0(sp)
     808:	dec00204 	addi	sp,sp,8
     80c:	f800283a 	ret

00000810 <Accelerator_profile>:

void Accelerator_profile(int data_len, int amount)
{
     810:	defffc04 	addi	sp,sp,-16
     814:	df000315 	stw	fp,12(sp)
     818:	df000304 	addi	fp,sp,12
     81c:	e13ffe15 	stw	r4,-8(fp)
     820:	e17fff15 	stw	r5,-4(fp)
	PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE,3);
     824:	0007883a 	mov	r3,zero
     828:	00810034 	movhi	r2,1024
     82c:	10840d04 	addi	r2,r2,4148
     830:	10c00035 	stwio	r3,0(r2)
	for(int j=0; j<amount; j++){
     834:	e03ffd15 	stw	zero,-12(fp)
     838:	00001f06 	br	8b8 <Accelerator_profile+0xa8>
		IOWR_32DIRECT(ACCELERATOR_0_BASE, IREReadAddr*4, (uint32_t)&input[0]);
     83c:	00c00074 	movhi	r3,1
     840:	18d83504 	addi	r3,r3,24788
     844:	00810034 	movhi	r2,1024
     848:	10841004 	addi	r2,r2,4160
     84c:	10c00035 	stwio	r3,0(r2)
		IOWR_32DIRECT(ACCELERATOR_0_BASE, IREWriteAddr*4, (uint32_t)&output[0]);
     850:	00c00074 	movhi	r3,1
     854:	18d44d04 	addi	r3,r3,20788
     858:	00810034 	movhi	r2,1024
     85c:	10841104 	addi	r2,r2,4164
     860:	10c00035 	stwio	r3,0(r2)
		IOWR_32DIRECT(ACCELERATOR_0_BASE, IREComputeCount*4, data_len);
     864:	00810034 	movhi	r2,1024
     868:	10841204 	addi	r2,r2,4168
     86c:	e0fffe17 	ldw	r3,-8(fp)
     870:	10c00035 	stwio	r3,0(r2)
		// start the DMA
		IOWR_32DIRECT(ACCELERATOR_0_BASE,IREStart*4, 1);
     874:	00c00044 	movi	r3,1
     878:	00810034 	movhi	r2,1024
     87c:	10841304 	addi	r2,r2,4172
     880:	10c00035 	stwio	r3,0(r2)
		while(IORD_32DIRECT(ACCELERATOR_0_BASE,IREDone*4)!= 1);
     884:	0001883a 	nop
     888:	00810034 	movhi	r2,1024
     88c:	10841404 	addi	r2,r2,4176
     890:	10800037 	ldwio	r2,0(r2)
     894:	10800058 	cmpnei	r2,r2,1
     898:	103ffb1e 	bne	r2,zero,888 <__alt_data_end+0xfc000888>
		IOWR_32DIRECT(ACCELERATOR_0_BASE, IREComputeCount*4, 0);
     89c:	0007883a 	mov	r3,zero
     8a0:	00810034 	movhi	r2,1024
     8a4:	10841204 	addi	r2,r2,4168
     8a8:	10c00035 	stwio	r3,0(r2)
}

void Accelerator_profile(int data_len, int amount)
{
	PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE,3);
	for(int j=0; j<amount; j++){
     8ac:	e0bffd17 	ldw	r2,-12(fp)
     8b0:	10800044 	addi	r2,r2,1
     8b4:	e0bffd15 	stw	r2,-12(fp)
     8b8:	e0fffd17 	ldw	r3,-12(fp)
     8bc:	e0bfff17 	ldw	r2,-4(fp)
     8c0:	18bfde16 	blt	r3,r2,83c <__alt_data_end+0xfc00083c>
		// start the DMA
		IOWR_32DIRECT(ACCELERATOR_0_BASE,IREStart*4, 1);
		while(IORD_32DIRECT(ACCELERATOR_0_BASE,IREDone*4)!= 1);
		IOWR_32DIRECT(ACCELERATOR_0_BASE, IREComputeCount*4, 0);
	}
	PERF_END(PERFORMANCE_COUNTER_0_BASE,3);
     8c4:	0007883a 	mov	r3,zero
     8c8:	00810034 	movhi	r2,1024
     8cc:	10840c04 	addi	r2,r2,4144
     8d0:	10c00035 	stwio	r3,0(r2)
}
     8d4:	0001883a 	nop
     8d8:	e037883a 	mov	sp,fp
     8dc:	df000017 	ldw	fp,0(sp)
     8e0:	dec00104 	addi	sp,sp,4
     8e4:	f800283a 	ret

000008e8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
     8e8:	f811883a 	mov	r8,ra
     8ec:	0000ac80 	call	ac8 <_mcount>
     8f0:	403f883a 	mov	ra,r8
     8f4:	defffe04 	addi	sp,sp,-8
     8f8:	df000115 	stw	fp,4(sp)
     8fc:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
     900:	e03fff15 	stw	zero,-4(fp)
     904:	00000506 	br	91c <alt_dcache_flush_all+0x34>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
     908:	e0bfff17 	ldw	r2,-4(fp)
     90c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
     910:	e0bfff17 	ldw	r2,-4(fp)
     914:	10800804 	addi	r2,r2,32
     918:	e0bfff15 	stw	r2,-4(fp)
     91c:	e0bfff17 	ldw	r2,-4(fp)
     920:	10820030 	cmpltui	r2,r2,2048
     924:	103ff81e 	bne	r2,zero,908 <__alt_data_end+0xfc000908>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
     928:	0001883a 	nop
     92c:	e037883a 	mov	sp,fp
     930:	df000017 	ldw	fp,0(sp)
     934:	dec00104 	addi	sp,sp,4
     938:	f800283a 	ret

0000093c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
     93c:	f811883a 	mov	r8,ra
     940:	0000ac80 	call	ac8 <_mcount>
     944:	403f883a 	mov	ra,r8
     948:	defffc04 	addi	sp,sp,-16
     94c:	df000315 	stw	fp,12(sp)
     950:	df000304 	addi	fp,sp,12
     954:	e13ffd15 	stw	r4,-12(fp)
     958:	e17ffe15 	stw	r5,-8(fp)
     95c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
     960:	e0fffe17 	ldw	r3,-8(fp)
     964:	e0bffd17 	ldw	r2,-12(fp)
     968:	18800c26 	beq	r3,r2,99c <alt_load_section+0x60>
  {
    while( to != end )
     96c:	00000806 	br	990 <alt_load_section+0x54>
    {
      *to++ = *from++;
     970:	e0bffe17 	ldw	r2,-8(fp)
     974:	10c00104 	addi	r3,r2,4
     978:	e0fffe15 	stw	r3,-8(fp)
     97c:	e0fffd17 	ldw	r3,-12(fp)
     980:	19000104 	addi	r4,r3,4
     984:	e13ffd15 	stw	r4,-12(fp)
     988:	18c00017 	ldw	r3,0(r3)
     98c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     990:	e0fffe17 	ldw	r3,-8(fp)
     994:	e0bfff17 	ldw	r2,-4(fp)
     998:	18bff51e 	bne	r3,r2,970 <__alt_data_end+0xfc000970>
    {
      *to++ = *from++;
    }
  }
}
     99c:	0001883a 	nop
     9a0:	e037883a 	mov	sp,fp
     9a4:	df000017 	ldw	fp,0(sp)
     9a8:	dec00104 	addi	sp,sp,4
     9ac:	f800283a 	ret

000009b0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     9b0:	f811883a 	mov	r8,ra
     9b4:	0000ac80 	call	ac8 <_mcount>
     9b8:	403f883a 	mov	ra,r8
     9bc:	defffe04 	addi	sp,sp,-8
     9c0:	dfc00115 	stw	ra,4(sp)
     9c4:	df000015 	stw	fp,0(sp)
     9c8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     9cc:	01800074 	movhi	r6,1
     9d0:	318c6104 	addi	r6,r6,12676
     9d4:	01400074 	movhi	r5,1
     9d8:	29449804 	addi	r5,r5,4704
     9dc:	01000074 	movhi	r4,1
     9e0:	210c6104 	addi	r4,r4,12676
     9e4:	000093c0 	call	93c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     9e8:	01800034 	movhi	r6,0
     9ec:	31809704 	addi	r6,r6,604
     9f0:	01400034 	movhi	r5,0
     9f4:	29400804 	addi	r5,r5,32
     9f8:	01000034 	movhi	r4,0
     9fc:	21000804 	addi	r4,r4,32
     a00:	000093c0 	call	93c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     a04:	01800074 	movhi	r6,1
     a08:	31849804 	addi	r6,r6,4704
     a0c:	01400074 	movhi	r5,1
     a10:	29436804 	addi	r5,r5,3488
     a14:	01000074 	movhi	r4,1
     a18:	21036804 	addi	r4,r4,3488
     a1c:	000093c0 	call	93c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     a20:	00008e80 	call	8e8 <alt_dcache_flush_all>
  alt_icache_flush_all();
     a24:	00026780 	call	2678 <alt_icache_flush_all>
}
     a28:	0001883a 	nop
     a2c:	e037883a 	mov	sp,fp
     a30:	dfc00117 	ldw	ra,4(sp)
     a34:	df000017 	ldw	fp,0(sp)
     a38:	dec00204 	addi	sp,sp,8
     a3c:	f800283a 	ret

00000a40 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     a40:	f811883a 	mov	r8,ra
     a44:	0000ac80 	call	ac8 <_mcount>
     a48:	403f883a 	mov	ra,r8
     a4c:	defffd04 	addi	sp,sp,-12
     a50:	dfc00215 	stw	ra,8(sp)
     a54:	df000115 	stw	fp,4(sp)
     a58:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     a5c:	0009883a 	mov	r4,zero
     a60:	0000e240 	call	e24 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
     a64:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     a68:	0000e680 	call	e68 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     a6c:	01800074 	movhi	r6,1
     a70:	31839904 	addi	r6,r6,3684
     a74:	01400074 	movhi	r5,1
     a78:	29439904 	addi	r5,r5,3684
     a7c:	01000074 	movhi	r4,1
     a80:	21039904 	addi	r4,r4,3684
     a84:	0002a640 	call	2a64 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
     a88:	00022d80 	call	22d8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
     a8c:	01000034 	movhi	r4,0
     a90:	2108d104 	addi	r4,r4,9028
     a94:	00034140 	call	3414 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     a98:	d0a7de17 	ldw	r2,-24712(gp)
     a9c:	d0e7df17 	ldw	r3,-24708(gp)
     aa0:	d127e017 	ldw	r4,-24704(gp)
     aa4:	200d883a 	mov	r6,r4
     aa8:	180b883a 	mov	r5,r3
     aac:	1009883a 	mov	r4,r2
     ab0:	00002a80 	call	2a8 <main>
     ab4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
     ab8:	01000044 	movi	r4,1
     abc:	00020cc0 	call	20cc <close>
  exit (result);
     ac0:	e13fff17 	ldw	r4,-4(fp)
     ac4:	00034340 	call	3434 <exit>

00000ac8 <_mcount>:
         * of values for bits 4:2 won't be even (aligning on cache line boundaries
         * will skew it).  Higher bits should be fairly random.
         */
        /* fn_head = mcount_fn_head + (((unsigned int)self_pc >> 5) & (HASH_BUCKETS - 1)); */

        srli    r2, ra, 3
     ac8:	f804d0fa 	srli	r2,ra,3
        movhi   r3, %hiadj(__mcount_fn_head)
     acc:	00c00074 	movhi	r3,1
        addi    r3, r3, %lo(__mcount_fn_head)
     ad0:	18dc1d04 	addi	r3,r3,28788
        andi    r2, r2, 0xFC
     ad4:	10803f0c 	andi	r2,r2,252
        add     r11, r2, r3
     ad8:	10d7883a 	add	r11,r2,r3
        /* The fast case is where we have already allocated a function arc, and so
         * also a function pointer.
         */

        /* First find the function being called (using self_pc) */
        mov     r10, r11
     adc:	5815883a 	mov	r10,r11
0:
        ldw     r10, 0(r10)
     ae0:	52800017 	ldw	r10,0(r10)
        beq     r10, zero, .Lnew_arc
     ae4:	50000726 	beq	r10,zero,b04 <_mcount+0x3c>
        ldw     r2, 4(r10)
     ae8:	50800117 	ldw	r2,4(r10)
        bne     r2, ra, 0b
     aec:	17fffc1e 	bne	r2,ra,ae0 <__alt_data_end+0xfc000ae0>

        /* Found a function entry for this PC. Now look for an arc with a matching
         * from_pc value. There will always be at least one arc. */
        ldw     r3, 8(r10)
     af0:	50c00217 	ldw	r3,8(r10)
0:
        ldw     r2, 4(r3)
     af4:	18800117 	ldw	r2,4(r3)
        beq     r2, r8, .Lfound_arc
     af8:	12001626 	beq	r2,r8,b54 <_mcount+0x8c>
        ldw     r3, 0(r3)
     afc:	18c00017 	ldw	r3,0(r3)
        bne     r3, zero, 0b
     b00:	183ffc1e 	bne	r3,zero,af4 <__alt_data_end+0xfc000af4>

.Lnew_arc:
        addi    sp, sp, -24
     b04:	defffa04 	addi	sp,sp,-24

.LCFI0:
        stw     ra, 0(sp)
     b08:	dfc00015 	stw	ra,0(sp)
        stw     r4, 4(sp)
     b0c:	d9000115 	stw	r4,4(sp)
        stw     r5, 8(sp)
     b10:	d9400215 	stw	r5,8(sp)
        stw     r6, 12(sp)
     b14:	d9800315 	stw	r6,12(sp)
        stw     r7, 16(sp)
     b18:	d9c00415 	stw	r7,16(sp)
        stw     r8, 20(sp)
     b1c:	da000515 	stw	r8,20(sp)

.LCFI1:
        /* __mcount_record(orig_ra, orig_r8, fn_entry, *fn_head); */
        mov     r4, ra
     b20:	f809883a 	mov	r4,ra
        mov     r5, r8
     b24:	400b883a 	mov	r5,r8
        mov     r6, r10
     b28:	500d883a 	mov	r6,r10
        mov     r7, r11
     b2c:	580f883a 	mov	r7,r11
        call     __mcount_record
     b30:	000242c0 	call	242c <__mcount_record>
        
        /* restore registers from the stack */
        ldw     ra, 0(sp)
     b34:	dfc00017 	ldw	ra,0(sp)
        ldw     r4, 4(sp)
     b38:	d9000117 	ldw	r4,4(sp)
        ldw     r5, 8(sp)
     b3c:	d9400217 	ldw	r5,8(sp)
        ldw     r6, 12(sp)
     b40:	d9800317 	ldw	r6,12(sp)
        ldw     r7, 16(sp)
     b44:	d9c00417 	ldw	r7,16(sp)
        ldw     r8, 20(sp)
     b48:	da000517 	ldw	r8,20(sp)

        addi    sp, sp, 24
     b4c:	dec00604 	addi	sp,sp,24

.LCFI2:
        ret
     b50:	f800283a 	ret

.Lfound_arc:
        /* We've found the correct arc record.  Increment the count and return */
        ldw     r2, 8(r3)
     b54:	18800217 	ldw	r2,8(r3)
        addi    r2, r2, 1
     b58:	10800044 	addi	r2,r2,1
        stw     r2, 8(r3)
     b5c:	18800215 	stw	r2,8(r3)
        ret
     b60:	f800283a 	ret

00000b64 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
     b64:	f811883a 	mov	r8,ra
     b68:	0000ac80 	call	ac8 <_mcount>
     b6c:	403f883a 	mov	ra,r8
     b70:	defff204 	addi	sp,sp,-56
     b74:	dfc00a15 	stw	ra,40(sp)
     b78:	df000915 	stw	fp,36(sp)
     b7c:	df000904 	addi	fp,sp,36
     b80:	e13fff15 	stw	r4,-4(fp)
     b84:	e1400215 	stw	r5,8(fp)
     b88:	e1800315 	stw	r6,12(fp)
     b8c:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
     b90:	e0800204 	addi	r2,fp,8
     b94:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
     b98:	e0bfff17 	ldw	r2,-4(fp)
     b9c:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
     ba0:	00006f06 	br	d60 <alt_printf+0x1fc>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
     ba4:	e0bff807 	ldb	r2,-32(fp)
     ba8:	10800960 	cmpeqi	r2,r2,37
     bac:	1000041e 	bne	r2,zero,bc0 <alt_printf+0x5c>
        {
            alt_putchar(c);
     bb0:	e0bff807 	ldb	r2,-32(fp)
     bb4:	1009883a 	mov	r4,r2
     bb8:	0000d9c0 	call	d9c <alt_putchar>
     bbc:	00006806 	br	d60 <alt_printf+0x1fc>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
     bc0:	e0bff717 	ldw	r2,-36(fp)
     bc4:	10c00044 	addi	r3,r2,1
     bc8:	e0fff715 	stw	r3,-36(fp)
     bcc:	10800003 	ldbu	r2,0(r2)
     bd0:	e0bff805 	stb	r2,-32(fp)
     bd4:	e0bff807 	ldb	r2,-32(fp)
     bd8:	10006926 	beq	r2,zero,d80 <alt_printf+0x21c>
            {
                if (c == '%')
     bdc:	e0bff807 	ldb	r2,-32(fp)
     be0:	10800958 	cmpnei	r2,r2,37
     be4:	1000041e 	bne	r2,zero,bf8 <alt_printf+0x94>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
     be8:	e0bff807 	ldb	r2,-32(fp)
     bec:	1009883a 	mov	r4,r2
     bf0:	0000d9c0 	call	d9c <alt_putchar>
     bf4:	00005a06 	br	d60 <alt_printf+0x1fc>
                } 
                else if (c == 'c')
     bf8:	e0bff807 	ldb	r2,-32(fp)
     bfc:	108018d8 	cmpnei	r2,r2,99
     c00:	1000081e 	bne	r2,zero,c24 <alt_printf+0xc0>
                {
                    int v = va_arg(args, int);
     c04:	e0bffe17 	ldw	r2,-8(fp)
     c08:	10c00104 	addi	r3,r2,4
     c0c:	e0fffe15 	stw	r3,-8(fp)
     c10:	10800017 	ldw	r2,0(r2)
     c14:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
     c18:	e13ffd17 	ldw	r4,-12(fp)
     c1c:	0000d9c0 	call	d9c <alt_putchar>
     c20:	00004f06 	br	d60 <alt_printf+0x1fc>
                }
                else if (c == 'x')
     c24:	e0bff807 	ldb	r2,-32(fp)
     c28:	10801e18 	cmpnei	r2,r2,120
     c2c:	1000341e 	bne	r2,zero,d00 <alt_printf+0x19c>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
     c30:	e0bffe17 	ldw	r2,-8(fp)
     c34:	10c00104 	addi	r3,r2,4
     c38:	e0fffe15 	stw	r3,-8(fp)
     c3c:	10800017 	ldw	r2,0(r2)
     c40:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
     c44:	e0bffb17 	ldw	r2,-20(fp)
     c48:	1000031e 	bne	r2,zero,c58 <alt_printf+0xf4>
                    {
                        alt_putchar('0');
     c4c:	01000c04 	movi	r4,48
     c50:	0000d9c0 	call	d9c <alt_putchar>
                        continue;
     c54:	00004206 	br	d60 <alt_printf+0x1fc>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
     c58:	00800704 	movi	r2,28
     c5c:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
     c60:	00000306 	br	c70 <alt_printf+0x10c>
                        digit_shift -= 4;
     c64:	e0bff917 	ldw	r2,-28(fp)
     c68:	10bfff04 	addi	r2,r2,-4
     c6c:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
     c70:	00c003c4 	movi	r3,15
     c74:	e0bff917 	ldw	r2,-28(fp)
     c78:	1884983a 	sll	r2,r3,r2
     c7c:	1007883a 	mov	r3,r2
     c80:	e0bffb17 	ldw	r2,-20(fp)
     c84:	1884703a 	and	r2,r3,r2
     c88:	103ff626 	beq	r2,zero,c64 <__alt_data_end+0xfc000c64>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
     c8c:	00001906 	br	cf4 <alt_printf+0x190>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
     c90:	00c003c4 	movi	r3,15
     c94:	e0bff917 	ldw	r2,-28(fp)
     c98:	1884983a 	sll	r2,r3,r2
     c9c:	1007883a 	mov	r3,r2
     ca0:	e0bffb17 	ldw	r2,-20(fp)
     ca4:	1886703a 	and	r3,r3,r2
     ca8:	e0bff917 	ldw	r2,-28(fp)
     cac:	1884d83a 	srl	r2,r3,r2
     cb0:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
     cb4:	e0bffc17 	ldw	r2,-16(fp)
     cb8:	108002a8 	cmpgeui	r2,r2,10
     cbc:	1000041e 	bne	r2,zero,cd0 <alt_printf+0x16c>
                            c = '0' + digit;
     cc0:	e0bffc17 	ldw	r2,-16(fp)
     cc4:	10800c04 	addi	r2,r2,48
     cc8:	e0bff805 	stb	r2,-32(fp)
     ccc:	00000306 	br	cdc <alt_printf+0x178>
                        else
                            c = 'a' + digit - 10;
     cd0:	e0bffc17 	ldw	r2,-16(fp)
     cd4:	108015c4 	addi	r2,r2,87
     cd8:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
     cdc:	e0bff807 	ldb	r2,-32(fp)
     ce0:	1009883a 	mov	r4,r2
     ce4:	0000d9c0 	call	d9c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
     ce8:	e0bff917 	ldw	r2,-28(fp)
     cec:	10bfff04 	addi	r2,r2,-4
     cf0:	e0bff915 	stw	r2,-28(fp)
     cf4:	e0bff917 	ldw	r2,-28(fp)
     cf8:	103fe50e 	bge	r2,zero,c90 <__alt_data_end+0xfc000c90>
     cfc:	00001806 	br	d60 <alt_printf+0x1fc>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
     d00:	e0bff807 	ldb	r2,-32(fp)
     d04:	10801cd8 	cmpnei	r2,r2,115
     d08:	1000151e 	bne	r2,zero,d60 <alt_printf+0x1fc>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
     d0c:	e0bffe17 	ldw	r2,-8(fp)
     d10:	10c00104 	addi	r3,r2,4
     d14:	e0fffe15 	stw	r3,-8(fp)
     d18:	10800017 	ldw	r2,0(r2)
     d1c:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
     d20:	00000906 	br	d48 <alt_printf+0x1e4>
                      alt_putchar(*s++);
     d24:	e0bffa17 	ldw	r2,-24(fp)
     d28:	10c00044 	addi	r3,r2,1
     d2c:	e0fffa15 	stw	r3,-24(fp)
     d30:	10800003 	ldbu	r2,0(r2)
     d34:	10803fcc 	andi	r2,r2,255
     d38:	1080201c 	xori	r2,r2,128
     d3c:	10bfe004 	addi	r2,r2,-128
     d40:	1009883a 	mov	r4,r2
     d44:	0000d9c0 	call	d9c <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
     d48:	e0bffa17 	ldw	r2,-24(fp)
     d4c:	10800003 	ldbu	r2,0(r2)
     d50:	10803fcc 	andi	r2,r2,255
     d54:	1080201c 	xori	r2,r2,128
     d58:	10bfe004 	addi	r2,r2,-128
     d5c:	103ff11e 	bne	r2,zero,d24 <__alt_data_end+0xfc000d24>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
     d60:	e0bff717 	ldw	r2,-36(fp)
     d64:	10c00044 	addi	r3,r2,1
     d68:	e0fff715 	stw	r3,-36(fp)
     d6c:	10800003 	ldbu	r2,0(r2)
     d70:	e0bff805 	stb	r2,-32(fp)
     d74:	e0bff807 	ldb	r2,-32(fp)
     d78:	103f8a1e 	bne	r2,zero,ba4 <__alt_data_end+0xfc000ba4>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
     d7c:	00000106 	br	d84 <alt_printf+0x220>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
     d80:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
     d84:	0001883a 	nop
     d88:	e037883a 	mov	sp,fp
     d8c:	dfc00117 	ldw	ra,4(sp)
     d90:	df000017 	ldw	fp,0(sp)
     d94:	dec00504 	addi	sp,sp,20
     d98:	f800283a 	ret

00000d9c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
     d9c:	f811883a 	mov	r8,ra
     da0:	0000ac80 	call	ac8 <_mcount>
     da4:	403f883a 	mov	ra,r8
     da8:	defffd04 	addi	sp,sp,-12
     dac:	dfc00215 	stw	ra,8(sp)
     db0:	df000115 	stw	fp,4(sp)
     db4:	df000104 	addi	fp,sp,4
     db8:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
     dbc:	d0a01017 	ldw	r2,-32704(gp)
     dc0:	10800217 	ldw	r2,8(r2)
     dc4:	100b883a 	mov	r5,r2
     dc8:	e13fff17 	ldw	r4,-4(fp)
     dcc:	00038b40 	call	38b4 <putc>
#endif
#endif
}
     dd0:	e037883a 	mov	sp,fp
     dd4:	dfc00117 	ldw	ra,4(sp)
     dd8:	df000017 	ldw	fp,0(sp)
     ddc:	dec00204 	addi	sp,sp,8
     de0:	f800283a 	ret

00000de4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
     de4:	f811883a 	mov	r8,ra
     de8:	0000ac80 	call	ac8 <_mcount>
     dec:	403f883a 	mov	ra,r8
     df0:	defffd04 	addi	sp,sp,-12
     df4:	dfc00215 	stw	ra,8(sp)
     df8:	df000115 	stw	fp,4(sp)
     dfc:	df000104 	addi	fp,sp,4
     e00:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     e04:	d1600404 	addi	r5,gp,-32752
     e08:	e13fff17 	ldw	r4,-4(fp)
     e0c:	00022280 	call	2228 <alt_dev_llist_insert>
}
     e10:	e037883a 	mov	sp,fp
     e14:	dfc00117 	ldw	ra,4(sp)
     e18:	df000017 	ldw	fp,0(sp)
     e1c:	dec00204 	addi	sp,sp,8
     e20:	f800283a 	ret

00000e24 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     e24:	f811883a 	mov	r8,ra
     e28:	0000ac80 	call	ac8 <_mcount>
     e2c:	403f883a 	mov	ra,r8
     e30:	defffd04 	addi	sp,sp,-12
     e34:	dfc00215 	stw	ra,8(sp)
     e38:	df000115 	stw	fp,4(sp)
     e3c:	df000104 	addi	fp,sp,4
     e40:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
     e44:	00030400 	call	3040 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     e48:	00800044 	movi	r2,1
     e4c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     e50:	0001883a 	nop
     e54:	e037883a 	mov	sp,fp
     e58:	dfc00117 	ldw	ra,4(sp)
     e5c:	df000017 	ldw	fp,0(sp)
     e60:	dec00204 	addi	sp,sp,8
     e64:	f800283a 	ret

00000e68 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     e68:	f811883a 	mov	r8,ra
     e6c:	0000ac80 	call	ac8 <_mcount>
     e70:	403f883a 	mov	ra,r8
     e74:	defffe04 	addi	sp,sp,-8
     e78:	dfc00115 	stw	ra,4(sp)
     e7c:	df000015 	stw	fp,0(sp)
     e80:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( HIGH_RES_TIMER_1US, high_res_timer_1us);
     e84:	00810034 	movhi	r2,1024
     e88:	10841804 	addi	r2,r2,4192
     e8c:	d0a7e115 	stw	r2,-24700(gp)
     e90:	0080bef4 	movhi	r2,763
     e94:	10bc2004 	addi	r2,r2,-3968
     e98:	d0a7e215 	stw	r2,-24696(gp)
    ALTERA_AVALON_TIMER_INIT ( SYS_TIMER_1MS, sys_timer_1ms);
     e9c:	01c0fa04 	movi	r7,1000
     ea0:	018000c4 	movi	r6,3
     ea4:	000b883a 	mov	r5,zero
     ea8:	01010034 	movhi	r4,1024
     eac:	21042004 	addi	r4,r4,4224
     eb0:	0001c380 	call	1c38 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
     eb4:	01800044 	movi	r6,1
     eb8:	000b883a 	mov	r5,zero
     ebc:	01000074 	movhi	r4,1
     ec0:	2105a204 	addi	r4,r4,5768
     ec4:	00010900 	call	1090 <altera_avalon_jtag_uart_init>
     ec8:	01000074 	movhi	r4,1
     ecc:	21059804 	addi	r4,r4,5728
     ed0:	0000de40 	call	de4 <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
     ed4:	00c00044 	movi	r3,1
     ed8:	00810034 	movhi	r2,1024
     edc:	10840004 	addi	r2,r2,4096
     ee0:	10c00035 	stwio	r3,0(r2)
}
     ee4:	0001883a 	nop
     ee8:	e037883a 	mov	sp,fp
     eec:	dfc00117 	ldw	ra,4(sp)
     ef0:	df000017 	ldw	fp,0(sp)
     ef4:	dec00204 	addi	sp,sp,8
     ef8:	f800283a 	ret

00000efc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
     efc:	f811883a 	mov	r8,ra
     f00:	0000ac80 	call	ac8 <_mcount>
     f04:	403f883a 	mov	ra,r8
     f08:	defffa04 	addi	sp,sp,-24
     f0c:	dfc00515 	stw	ra,20(sp)
     f10:	df000415 	stw	fp,16(sp)
     f14:	df000404 	addi	fp,sp,16
     f18:	e13ffd15 	stw	r4,-12(fp)
     f1c:	e17ffe15 	stw	r5,-8(fp)
     f20:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     f24:	e0bffd17 	ldw	r2,-12(fp)
     f28:	10800017 	ldw	r2,0(r2)
     f2c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
     f30:	e0bffc17 	ldw	r2,-16(fp)
     f34:	10c00a04 	addi	r3,r2,40
     f38:	e0bffd17 	ldw	r2,-12(fp)
     f3c:	10800217 	ldw	r2,8(r2)
     f40:	100f883a 	mov	r7,r2
     f44:	e1bfff17 	ldw	r6,-4(fp)
     f48:	e17ffe17 	ldw	r5,-8(fp)
     f4c:	1809883a 	mov	r4,r3
     f50:	00015900 	call	1590 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
     f54:	e037883a 	mov	sp,fp
     f58:	dfc00117 	ldw	ra,4(sp)
     f5c:	df000017 	ldw	fp,0(sp)
     f60:	dec00204 	addi	sp,sp,8
     f64:	f800283a 	ret

00000f68 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
     f68:	f811883a 	mov	r8,ra
     f6c:	0000ac80 	call	ac8 <_mcount>
     f70:	403f883a 	mov	ra,r8
     f74:	defffa04 	addi	sp,sp,-24
     f78:	dfc00515 	stw	ra,20(sp)
     f7c:	df000415 	stw	fp,16(sp)
     f80:	df000404 	addi	fp,sp,16
     f84:	e13ffd15 	stw	r4,-12(fp)
     f88:	e17ffe15 	stw	r5,-8(fp)
     f8c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     f90:	e0bffd17 	ldw	r2,-12(fp)
     f94:	10800017 	ldw	r2,0(r2)
     f98:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
     f9c:	e0bffc17 	ldw	r2,-16(fp)
     fa0:	10c00a04 	addi	r3,r2,40
     fa4:	e0bffd17 	ldw	r2,-12(fp)
     fa8:	10800217 	ldw	r2,8(r2)
     fac:	100f883a 	mov	r7,r2
     fb0:	e1bfff17 	ldw	r6,-4(fp)
     fb4:	e17ffe17 	ldw	r5,-8(fp)
     fb8:	1809883a 	mov	r4,r3
     fbc:	00017b80 	call	17b8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
     fc0:	e037883a 	mov	sp,fp
     fc4:	dfc00117 	ldw	ra,4(sp)
     fc8:	df000017 	ldw	fp,0(sp)
     fcc:	dec00204 	addi	sp,sp,8
     fd0:	f800283a 	ret

00000fd4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
     fd4:	f811883a 	mov	r8,ra
     fd8:	0000ac80 	call	ac8 <_mcount>
     fdc:	403f883a 	mov	ra,r8
     fe0:	defffc04 	addi	sp,sp,-16
     fe4:	dfc00315 	stw	ra,12(sp)
     fe8:	df000215 	stw	fp,8(sp)
     fec:	df000204 	addi	fp,sp,8
     ff0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     ff4:	e0bfff17 	ldw	r2,-4(fp)
     ff8:	10800017 	ldw	r2,0(r2)
     ffc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    1000:	e0bffe17 	ldw	r2,-8(fp)
    1004:	10c00a04 	addi	r3,r2,40
    1008:	e0bfff17 	ldw	r2,-4(fp)
    100c:	10800217 	ldw	r2,8(r2)
    1010:	100b883a 	mov	r5,r2
    1014:	1809883a 	mov	r4,r3
    1018:	00014200 	call	1420 <altera_avalon_jtag_uart_close>
}
    101c:	e037883a 	mov	sp,fp
    1020:	dfc00117 	ldw	ra,4(sp)
    1024:	df000017 	ldw	fp,0(sp)
    1028:	dec00204 	addi	sp,sp,8
    102c:	f800283a 	ret

00001030 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    1030:	f811883a 	mov	r8,ra
    1034:	0000ac80 	call	ac8 <_mcount>
    1038:	403f883a 	mov	ra,r8
    103c:	defffa04 	addi	sp,sp,-24
    1040:	dfc00515 	stw	ra,20(sp)
    1044:	df000415 	stw	fp,16(sp)
    1048:	df000404 	addi	fp,sp,16
    104c:	e13ffd15 	stw	r4,-12(fp)
    1050:	e17ffe15 	stw	r5,-8(fp)
    1054:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    1058:	e0bffd17 	ldw	r2,-12(fp)
    105c:	10800017 	ldw	r2,0(r2)
    1060:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    1064:	e0bffc17 	ldw	r2,-16(fp)
    1068:	10800a04 	addi	r2,r2,40
    106c:	e1bfff17 	ldw	r6,-4(fp)
    1070:	e17ffe17 	ldw	r5,-8(fp)
    1074:	1009883a 	mov	r4,r2
    1078:	00014940 	call	1494 <altera_avalon_jtag_uart_ioctl>
}
    107c:	e037883a 	mov	sp,fp
    1080:	dfc00117 	ldw	ra,4(sp)
    1084:	df000017 	ldw	fp,0(sp)
    1088:	dec00204 	addi	sp,sp,8
    108c:	f800283a 	ret

00001090 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    1090:	f811883a 	mov	r8,ra
    1094:	0000ac80 	call	ac8 <_mcount>
    1098:	403f883a 	mov	ra,r8
    109c:	defffa04 	addi	sp,sp,-24
    10a0:	dfc00515 	stw	ra,20(sp)
    10a4:	df000415 	stw	fp,16(sp)
    10a8:	df000404 	addi	fp,sp,16
    10ac:	e13ffd15 	stw	r4,-12(fp)
    10b0:	e17ffe15 	stw	r5,-8(fp)
    10b4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    10b8:	e0bffd17 	ldw	r2,-12(fp)
    10bc:	00c00044 	movi	r3,1
    10c0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    10c4:	e0bffd17 	ldw	r2,-12(fp)
    10c8:	10800017 	ldw	r2,0(r2)
    10cc:	10800104 	addi	r2,r2,4
    10d0:	1007883a 	mov	r3,r2
    10d4:	e0bffd17 	ldw	r2,-12(fp)
    10d8:	10800817 	ldw	r2,32(r2)
    10dc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    10e0:	e0bffe17 	ldw	r2,-8(fp)
    10e4:	e0ffff17 	ldw	r3,-4(fp)
    10e8:	d8000015 	stw	zero,0(sp)
    10ec:	e1fffd17 	ldw	r7,-12(fp)
    10f0:	01800034 	movhi	r6,0
    10f4:	31845704 	addi	r6,r6,4444
    10f8:	180b883a 	mov	r5,r3
    10fc:	1009883a 	mov	r4,r2
    1100:	00026b80 	call	26b8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    1104:	e0bffd17 	ldw	r2,-12(fp)
    1108:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    110c:	e0bffd17 	ldw	r2,-12(fp)
    1110:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    1114:	d0e7e717 	ldw	r3,-24676(gp)
    1118:	e1fffd17 	ldw	r7,-12(fp)
    111c:	01800034 	movhi	r6,0
    1120:	3184dd04 	addi	r6,r6,4980
    1124:	180b883a 	mov	r5,r3
    1128:	1009883a 	mov	r4,r2
    112c:	0001f4c0 	call	1f4c <alt_alarm_start>
    1130:	1000040e 	bge	r2,zero,1144 <altera_avalon_jtag_uart_init+0xb4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    1134:	e0fffd17 	ldw	r3,-12(fp)
    1138:	00a00034 	movhi	r2,32768
    113c:	10bfffc4 	addi	r2,r2,-1
    1140:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    1144:	0001883a 	nop
    1148:	e037883a 	mov	sp,fp
    114c:	dfc00117 	ldw	ra,4(sp)
    1150:	df000017 	ldw	fp,0(sp)
    1154:	dec00204 	addi	sp,sp,8
    1158:	f800283a 	ret

0000115c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    115c:	f811883a 	mov	r8,ra
    1160:	0000ac80 	call	ac8 <_mcount>
    1164:	403f883a 	mov	ra,r8
    1168:	defff804 	addi	sp,sp,-32
    116c:	df000715 	stw	fp,28(sp)
    1170:	df000704 	addi	fp,sp,28
    1174:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    1178:	e0bfff17 	ldw	r2,-4(fp)
    117c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    1180:	e0bffb17 	ldw	r2,-20(fp)
    1184:	10800017 	ldw	r2,0(r2)
    1188:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    118c:	e0bffc17 	ldw	r2,-16(fp)
    1190:	10800104 	addi	r2,r2,4
    1194:	10800037 	ldwio	r2,0(r2)
    1198:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    119c:	e0bffd17 	ldw	r2,-12(fp)
    11a0:	1080c00c 	andi	r2,r2,768
    11a4:	10006d26 	beq	r2,zero,135c <altera_avalon_jtag_uart_irq+0x200>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    11a8:	e0bffd17 	ldw	r2,-12(fp)
    11ac:	1080400c 	andi	r2,r2,256
    11b0:	10003526 	beq	r2,zero,1288 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    11b4:	00800074 	movhi	r2,1
    11b8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    11bc:	e0bffb17 	ldw	r2,-20(fp)
    11c0:	10800a17 	ldw	r2,40(r2)
    11c4:	10800044 	addi	r2,r2,1
    11c8:	1081ffcc 	andi	r2,r2,2047
    11cc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    11d0:	e0bffb17 	ldw	r2,-20(fp)
    11d4:	10c00b17 	ldw	r3,44(r2)
    11d8:	e0bffe17 	ldw	r2,-8(fp)
    11dc:	18801526 	beq	r3,r2,1234 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    11e0:	e0bffc17 	ldw	r2,-16(fp)
    11e4:	10800037 	ldwio	r2,0(r2)
    11e8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    11ec:	e0bff917 	ldw	r2,-28(fp)
    11f0:	10a0000c 	andi	r2,r2,32768
    11f4:	10001126 	beq	r2,zero,123c <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    11f8:	e0bffb17 	ldw	r2,-20(fp)
    11fc:	10800a17 	ldw	r2,40(r2)
    1200:	e0fff917 	ldw	r3,-28(fp)
    1204:	1809883a 	mov	r4,r3
    1208:	e0fffb17 	ldw	r3,-20(fp)
    120c:	1885883a 	add	r2,r3,r2
    1210:	10800e04 	addi	r2,r2,56
    1214:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1218:	e0bffb17 	ldw	r2,-20(fp)
    121c:	10800a17 	ldw	r2,40(r2)
    1220:	10800044 	addi	r2,r2,1
    1224:	10c1ffcc 	andi	r3,r2,2047
    1228:	e0bffb17 	ldw	r2,-20(fp)
    122c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    1230:	003fe206 	br	11bc <__alt_data_end+0xfc0011bc>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    1234:	0001883a 	nop
    1238:	00000106 	br	1240 <altera_avalon_jtag_uart_irq+0xe4>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    123c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    1240:	e0bff917 	ldw	r2,-28(fp)
    1244:	10bfffec 	andhi	r2,r2,65535
    1248:	10000f26 	beq	r2,zero,1288 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    124c:	e0bffb17 	ldw	r2,-20(fp)
    1250:	10c00817 	ldw	r3,32(r2)
    1254:	00bfff84 	movi	r2,-2
    1258:	1886703a 	and	r3,r3,r2
    125c:	e0bffb17 	ldw	r2,-20(fp)
    1260:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    1264:	e0bffc17 	ldw	r2,-16(fp)
    1268:	10800104 	addi	r2,r2,4
    126c:	1007883a 	mov	r3,r2
    1270:	e0bffb17 	ldw	r2,-20(fp)
    1274:	10800817 	ldw	r2,32(r2)
    1278:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    127c:	e0bffc17 	ldw	r2,-16(fp)
    1280:	10800104 	addi	r2,r2,4
    1284:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    1288:	e0bffd17 	ldw	r2,-12(fp)
    128c:	1080800c 	andi	r2,r2,512
    1290:	103fbe26 	beq	r2,zero,118c <__alt_data_end+0xfc00118c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    1294:	e0bffd17 	ldw	r2,-12(fp)
    1298:	1004d43a 	srli	r2,r2,16
    129c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    12a0:	00001406 	br	12f4 <altera_avalon_jtag_uart_irq+0x198>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    12a4:	e0bffc17 	ldw	r2,-16(fp)
    12a8:	e0fffb17 	ldw	r3,-20(fp)
    12ac:	18c00d17 	ldw	r3,52(r3)
    12b0:	e13ffb17 	ldw	r4,-20(fp)
    12b4:	20c7883a 	add	r3,r4,r3
    12b8:	18c20e04 	addi	r3,r3,2104
    12bc:	18c00003 	ldbu	r3,0(r3)
    12c0:	18c03fcc 	andi	r3,r3,255
    12c4:	18c0201c 	xori	r3,r3,128
    12c8:	18ffe004 	addi	r3,r3,-128
    12cc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    12d0:	e0bffb17 	ldw	r2,-20(fp)
    12d4:	10800d17 	ldw	r2,52(r2)
    12d8:	10800044 	addi	r2,r2,1
    12dc:	10c1ffcc 	andi	r3,r2,2047
    12e0:	e0bffb17 	ldw	r2,-20(fp)
    12e4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    12e8:	e0bffa17 	ldw	r2,-24(fp)
    12ec:	10bfffc4 	addi	r2,r2,-1
    12f0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    12f4:	e0bffa17 	ldw	r2,-24(fp)
    12f8:	10000526 	beq	r2,zero,1310 <altera_avalon_jtag_uart_irq+0x1b4>
    12fc:	e0bffb17 	ldw	r2,-20(fp)
    1300:	10c00d17 	ldw	r3,52(r2)
    1304:	e0bffb17 	ldw	r2,-20(fp)
    1308:	10800c17 	ldw	r2,48(r2)
    130c:	18bfe51e 	bne	r3,r2,12a4 <__alt_data_end+0xfc0012a4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    1310:	e0bffa17 	ldw	r2,-24(fp)
    1314:	103f9d26 	beq	r2,zero,118c <__alt_data_end+0xfc00118c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    1318:	e0bffb17 	ldw	r2,-20(fp)
    131c:	10c00817 	ldw	r3,32(r2)
    1320:	00bfff44 	movi	r2,-3
    1324:	1886703a 	and	r3,r3,r2
    1328:	e0bffb17 	ldw	r2,-20(fp)
    132c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1330:	e0bffb17 	ldw	r2,-20(fp)
    1334:	10800017 	ldw	r2,0(r2)
    1338:	10800104 	addi	r2,r2,4
    133c:	1007883a 	mov	r3,r2
    1340:	e0bffb17 	ldw	r2,-20(fp)
    1344:	10800817 	ldw	r2,32(r2)
    1348:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    134c:	e0bffc17 	ldw	r2,-16(fp)
    1350:	10800104 	addi	r2,r2,4
    1354:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    1358:	003f8c06 	br	118c <__alt_data_end+0xfc00118c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    135c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    1360:	0001883a 	nop
    1364:	e037883a 	mov	sp,fp
    1368:	df000017 	ldw	fp,0(sp)
    136c:	dec00104 	addi	sp,sp,4
    1370:	f800283a 	ret

00001374 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    1374:	f811883a 	mov	r8,ra
    1378:	0000ac80 	call	ac8 <_mcount>
    137c:	403f883a 	mov	ra,r8
    1380:	defff804 	addi	sp,sp,-32
    1384:	df000715 	stw	fp,28(sp)
    1388:	df000704 	addi	fp,sp,28
    138c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    1390:	e0bffb17 	ldw	r2,-20(fp)
    1394:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    1398:	e0bff917 	ldw	r2,-28(fp)
    139c:	10800017 	ldw	r2,0(r2)
    13a0:	10800104 	addi	r2,r2,4
    13a4:	10800037 	ldwio	r2,0(r2)
    13a8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    13ac:	e0bffa17 	ldw	r2,-24(fp)
    13b0:	1081000c 	andi	r2,r2,1024
    13b4:	10000b26 	beq	r2,zero,13e4 <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    13b8:	e0bff917 	ldw	r2,-28(fp)
    13bc:	10800017 	ldw	r2,0(r2)
    13c0:	10800104 	addi	r2,r2,4
    13c4:	1007883a 	mov	r3,r2
    13c8:	e0bff917 	ldw	r2,-28(fp)
    13cc:	10800817 	ldw	r2,32(r2)
    13d0:	10810014 	ori	r2,r2,1024
    13d4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    13d8:	e0bff917 	ldw	r2,-28(fp)
    13dc:	10000915 	stw	zero,36(r2)
    13e0:	00000a06 	br	140c <altera_avalon_jtag_uart_timeout+0x98>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    13e4:	e0bff917 	ldw	r2,-28(fp)
    13e8:	10c00917 	ldw	r3,36(r2)
    13ec:	00a00034 	movhi	r2,32768
    13f0:	10bfff04 	addi	r2,r2,-4
    13f4:	10c00536 	bltu	r2,r3,140c <altera_avalon_jtag_uart_timeout+0x98>
    sp->host_inactive++;
    13f8:	e0bff917 	ldw	r2,-28(fp)
    13fc:	10800917 	ldw	r2,36(r2)
    1400:	10c00044 	addi	r3,r2,1
    1404:	e0bff917 	ldw	r2,-28(fp)
    1408:	10c00915 	stw	r3,36(r2)
    140c:	d0a7e717 	ldw	r2,-24676(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    1410:	e037883a 	mov	sp,fp
    1414:	df000017 	ldw	fp,0(sp)
    1418:	dec00104 	addi	sp,sp,4
    141c:	f800283a 	ret

00001420 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    1420:	f811883a 	mov	r8,ra
    1424:	0000ac80 	call	ac8 <_mcount>
    1428:	403f883a 	mov	ra,r8
    142c:	defffd04 	addi	sp,sp,-12
    1430:	df000215 	stw	fp,8(sp)
    1434:	df000204 	addi	fp,sp,8
    1438:	e13ffe15 	stw	r4,-8(fp)
    143c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    1440:	00000506 	br	1458 <altera_avalon_jtag_uart_close+0x38>
    if (flags & O_NONBLOCK) {
    1444:	e0bfff17 	ldw	r2,-4(fp)
    1448:	1090000c 	andi	r2,r2,16384
    144c:	10000226 	beq	r2,zero,1458 <altera_avalon_jtag_uart_close+0x38>
      return -EWOULDBLOCK; 
    1450:	00bffd44 	movi	r2,-11
    1454:	00000b06 	br	1484 <altera_avalon_jtag_uart_close+0x64>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    1458:	e0bffe17 	ldw	r2,-8(fp)
    145c:	10c00d17 	ldw	r3,52(r2)
    1460:	e0bffe17 	ldw	r2,-8(fp)
    1464:	10800c17 	ldw	r2,48(r2)
    1468:	18800526 	beq	r3,r2,1480 <altera_avalon_jtag_uart_close+0x60>
    146c:	e0bffe17 	ldw	r2,-8(fp)
    1470:	10c00917 	ldw	r3,36(r2)
    1474:	e0bffe17 	ldw	r2,-8(fp)
    1478:	10800117 	ldw	r2,4(r2)
    147c:	18bff136 	bltu	r3,r2,1444 <__alt_data_end+0xfc001444>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    1480:	0005883a 	mov	r2,zero
}
    1484:	e037883a 	mov	sp,fp
    1488:	df000017 	ldw	fp,0(sp)
    148c:	dec00104 	addi	sp,sp,4
    1490:	f800283a 	ret

00001494 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    1494:	f811883a 	mov	r8,ra
    1498:	0000ac80 	call	ac8 <_mcount>
    149c:	403f883a 	mov	ra,r8
    14a0:	defffa04 	addi	sp,sp,-24
    14a4:	df000515 	stw	fp,20(sp)
    14a8:	df000504 	addi	fp,sp,20
    14ac:	e13ffd15 	stw	r4,-12(fp)
    14b0:	e17ffe15 	stw	r5,-8(fp)
    14b4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    14b8:	00bff9c4 	movi	r2,-25
    14bc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    14c0:	e0bffe17 	ldw	r2,-8(fp)
    14c4:	10da8060 	cmpeqi	r3,r2,27137
    14c8:	1800031e 	bne	r3,zero,14d8 <altera_avalon_jtag_uart_ioctl+0x44>
    14cc:	109a80a0 	cmpeqi	r2,r2,27138
    14d0:	1000181e 	bne	r2,zero,1534 <altera_avalon_jtag_uart_ioctl+0xa0>
      rc = 0;
    }
    break;

  default:
    break;
    14d4:	00002906 	br	157c <altera_avalon_jtag_uart_ioctl+0xe8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    14d8:	e0bffd17 	ldw	r2,-12(fp)
    14dc:	10c00117 	ldw	r3,4(r2)
    14e0:	00a00034 	movhi	r2,32768
    14e4:	10bfffc4 	addi	r2,r2,-1
    14e8:	18802126 	beq	r3,r2,1570 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      int timeout = *((int *)arg);
    14ec:	e0bfff17 	ldw	r2,-4(fp)
    14f0:	10800017 	ldw	r2,0(r2)
    14f4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    14f8:	e0bffc17 	ldw	r2,-16(fp)
    14fc:	10800090 	cmplti	r2,r2,2
    1500:	1000061e 	bne	r2,zero,151c <altera_avalon_jtag_uart_ioctl+0x88>
    1504:	e0fffc17 	ldw	r3,-16(fp)
    1508:	00a00034 	movhi	r2,32768
    150c:	10bfffc4 	addi	r2,r2,-1
    1510:	18800226 	beq	r3,r2,151c <altera_avalon_jtag_uart_ioctl+0x88>
    1514:	e0bffc17 	ldw	r2,-16(fp)
    1518:	00000206 	br	1524 <altera_avalon_jtag_uart_ioctl+0x90>
    151c:	00a00034 	movhi	r2,32768
    1520:	10bfff84 	addi	r2,r2,-2
    1524:	e0fffd17 	ldw	r3,-12(fp)
    1528:	18800115 	stw	r2,4(r3)
      rc = 0;
    152c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    1530:	00000f06 	br	1570 <altera_avalon_jtag_uart_ioctl+0xdc>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    1534:	e0bffd17 	ldw	r2,-12(fp)
    1538:	10c00117 	ldw	r3,4(r2)
    153c:	00a00034 	movhi	r2,32768
    1540:	10bfffc4 	addi	r2,r2,-1
    1544:	18800c26 	beq	r3,r2,1578 <altera_avalon_jtag_uart_ioctl+0xe4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    1548:	e0bffd17 	ldw	r2,-12(fp)
    154c:	10c00917 	ldw	r3,36(r2)
    1550:	e0bffd17 	ldw	r2,-12(fp)
    1554:	10800117 	ldw	r2,4(r2)
    1558:	1885803a 	cmpltu	r2,r3,r2
    155c:	10c03fcc 	andi	r3,r2,255
    1560:	e0bfff17 	ldw	r2,-4(fp)
    1564:	10c00015 	stw	r3,0(r2)
      rc = 0;
    1568:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    156c:	00000206 	br	1578 <altera_avalon_jtag_uart_ioctl+0xe4>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    1570:	0001883a 	nop
    1574:	00000106 	br	157c <altera_avalon_jtag_uart_ioctl+0xe8>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    1578:	0001883a 	nop

  default:
    break;
  }

  return rc;
    157c:	e0bffb17 	ldw	r2,-20(fp)
}
    1580:	e037883a 	mov	sp,fp
    1584:	df000017 	ldw	fp,0(sp)
    1588:	dec00104 	addi	sp,sp,4
    158c:	f800283a 	ret

00001590 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    1590:	f811883a 	mov	r8,ra
    1594:	0000ac80 	call	ac8 <_mcount>
    1598:	403f883a 	mov	ra,r8
    159c:	defff304 	addi	sp,sp,-52
    15a0:	dfc00c15 	stw	ra,48(sp)
    15a4:	df000b15 	stw	fp,44(sp)
    15a8:	df000b04 	addi	fp,sp,44
    15ac:	e13ffc15 	stw	r4,-16(fp)
    15b0:	e17ffd15 	stw	r5,-12(fp)
    15b4:	e1bffe15 	stw	r6,-8(fp)
    15b8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    15bc:	e0bffd17 	ldw	r2,-12(fp)
    15c0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    15c4:	00004706 	br	16e4 <altera_avalon_jtag_uart_read+0x154>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    15c8:	e0bffc17 	ldw	r2,-16(fp)
    15cc:	10800a17 	ldw	r2,40(r2)
    15d0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    15d4:	e0bffc17 	ldw	r2,-16(fp)
    15d8:	10800b17 	ldw	r2,44(r2)
    15dc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    15e0:	e0fff717 	ldw	r3,-36(fp)
    15e4:	e0bff817 	ldw	r2,-32(fp)
    15e8:	18800536 	bltu	r3,r2,1600 <altera_avalon_jtag_uart_read+0x70>
        n = in - out;
    15ec:	e0fff717 	ldw	r3,-36(fp)
    15f0:	e0bff817 	ldw	r2,-32(fp)
    15f4:	1885c83a 	sub	r2,r3,r2
    15f8:	e0bff615 	stw	r2,-40(fp)
    15fc:	00000406 	br	1610 <altera_avalon_jtag_uart_read+0x80>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    1600:	00c20004 	movi	r3,2048
    1604:	e0bff817 	ldw	r2,-32(fp)
    1608:	1885c83a 	sub	r2,r3,r2
    160c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    1610:	e0bff617 	ldw	r2,-40(fp)
    1614:	10001e26 	beq	r2,zero,1690 <altera_avalon_jtag_uart_read+0x100>
        break; /* No more data available */

      if (n > space)
    1618:	e0fffe17 	ldw	r3,-8(fp)
    161c:	e0bff617 	ldw	r2,-40(fp)
    1620:	1880022e 	bgeu	r3,r2,162c <altera_avalon_jtag_uart_read+0x9c>
        n = space;
    1624:	e0bffe17 	ldw	r2,-8(fp)
    1628:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    162c:	e0bffc17 	ldw	r2,-16(fp)
    1630:	10c00e04 	addi	r3,r2,56
    1634:	e0bff817 	ldw	r2,-32(fp)
    1638:	1885883a 	add	r2,r3,r2
    163c:	e1bff617 	ldw	r6,-40(fp)
    1640:	100b883a 	mov	r5,r2
    1644:	e13ff517 	ldw	r4,-44(fp)
    1648:	00035000 	call	3500 <memcpy>
      ptr   += n;
    164c:	e0fff517 	ldw	r3,-44(fp)
    1650:	e0bff617 	ldw	r2,-40(fp)
    1654:	1885883a 	add	r2,r3,r2
    1658:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    165c:	e0fffe17 	ldw	r3,-8(fp)
    1660:	e0bff617 	ldw	r2,-40(fp)
    1664:	1885c83a 	sub	r2,r3,r2
    1668:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    166c:	e0fff817 	ldw	r3,-32(fp)
    1670:	e0bff617 	ldw	r2,-40(fp)
    1674:	1885883a 	add	r2,r3,r2
    1678:	10c1ffcc 	andi	r3,r2,2047
    167c:	e0bffc17 	ldw	r2,-16(fp)
    1680:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    1684:	e0bffe17 	ldw	r2,-8(fp)
    1688:	00bfcf16 	blt	zero,r2,15c8 <__alt_data_end+0xfc0015c8>
    168c:	00000106 	br	1694 <altera_avalon_jtag_uart_read+0x104>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    1690:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    1694:	e0fff517 	ldw	r3,-44(fp)
    1698:	e0bffd17 	ldw	r2,-12(fp)
    169c:	1880141e 	bne	r3,r2,16f0 <altera_avalon_jtag_uart_read+0x160>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    16a0:	e0bfff17 	ldw	r2,-4(fp)
    16a4:	1090000c 	andi	r2,r2,16384
    16a8:	1000131e 	bne	r2,zero,16f8 <altera_avalon_jtag_uart_read+0x168>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    16ac:	0001883a 	nop
    16b0:	e0bffc17 	ldw	r2,-16(fp)
    16b4:	10c00a17 	ldw	r3,40(r2)
    16b8:	e0bff717 	ldw	r2,-36(fp)
    16bc:	1880051e 	bne	r3,r2,16d4 <altera_avalon_jtag_uart_read+0x144>
    16c0:	e0bffc17 	ldw	r2,-16(fp)
    16c4:	10c00917 	ldw	r3,36(r2)
    16c8:	e0bffc17 	ldw	r2,-16(fp)
    16cc:	10800117 	ldw	r2,4(r2)
    16d0:	18bff736 	bltu	r3,r2,16b0 <__alt_data_end+0xfc0016b0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    16d4:	e0bffc17 	ldw	r2,-16(fp)
    16d8:	10c00a17 	ldw	r3,40(r2)
    16dc:	e0bff717 	ldw	r2,-36(fp)
    16e0:	18800726 	beq	r3,r2,1700 <altera_avalon_jtag_uart_read+0x170>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    16e4:	e0bffe17 	ldw	r2,-8(fp)
    16e8:	00bfb716 	blt	zero,r2,15c8 <__alt_data_end+0xfc0015c8>
    16ec:	00000506 	br	1704 <altera_avalon_jtag_uart_read+0x174>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    16f0:	0001883a 	nop
    16f4:	00000306 	br	1704 <altera_avalon_jtag_uart_read+0x174>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    16f8:	0001883a 	nop
    16fc:	00000106 	br	1704 <altera_avalon_jtag_uart_read+0x174>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    1700:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    1704:	e0fff517 	ldw	r3,-44(fp)
    1708:	e0bffd17 	ldw	r2,-12(fp)
    170c:	18801826 	beq	r3,r2,1770 <altera_avalon_jtag_uart_read+0x1e0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1710:	0005303a 	rdctl	r2,status
    1714:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1718:	e0fffb17 	ldw	r3,-20(fp)
    171c:	00bfff84 	movi	r2,-2
    1720:	1884703a 	and	r2,r3,r2
    1724:	1001703a 	wrctl	status,r2
  
  return context;
    1728:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    172c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    1730:	e0bffc17 	ldw	r2,-16(fp)
    1734:	10800817 	ldw	r2,32(r2)
    1738:	10c00054 	ori	r3,r2,1
    173c:	e0bffc17 	ldw	r2,-16(fp)
    1740:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1744:	e0bffc17 	ldw	r2,-16(fp)
    1748:	10800017 	ldw	r2,0(r2)
    174c:	10800104 	addi	r2,r2,4
    1750:	1007883a 	mov	r3,r2
    1754:	e0bffc17 	ldw	r2,-16(fp)
    1758:	10800817 	ldw	r2,32(r2)
    175c:	18800035 	stwio	r2,0(r3)
    1760:	e0bffa17 	ldw	r2,-24(fp)
    1764:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1768:	e0bff917 	ldw	r2,-28(fp)
    176c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    1770:	e0fff517 	ldw	r3,-44(fp)
    1774:	e0bffd17 	ldw	r2,-12(fp)
    1778:	18800426 	beq	r3,r2,178c <altera_avalon_jtag_uart_read+0x1fc>
    return ptr - buffer;
    177c:	e0fff517 	ldw	r3,-44(fp)
    1780:	e0bffd17 	ldw	r2,-12(fp)
    1784:	1885c83a 	sub	r2,r3,r2
    1788:	00000606 	br	17a4 <altera_avalon_jtag_uart_read+0x214>
  else if (flags & O_NONBLOCK)
    178c:	e0bfff17 	ldw	r2,-4(fp)
    1790:	1090000c 	andi	r2,r2,16384
    1794:	10000226 	beq	r2,zero,17a0 <altera_avalon_jtag_uart_read+0x210>
    return -EWOULDBLOCK;
    1798:	00bffd44 	movi	r2,-11
    179c:	00000106 	br	17a4 <altera_avalon_jtag_uart_read+0x214>
  else
    return -EIO;
    17a0:	00bffec4 	movi	r2,-5
}
    17a4:	e037883a 	mov	sp,fp
    17a8:	dfc00117 	ldw	ra,4(sp)
    17ac:	df000017 	ldw	fp,0(sp)
    17b0:	dec00204 	addi	sp,sp,8
    17b4:	f800283a 	ret

000017b8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    17b8:	f811883a 	mov	r8,ra
    17bc:	0000ac80 	call	ac8 <_mcount>
    17c0:	403f883a 	mov	ra,r8
    17c4:	defff304 	addi	sp,sp,-52
    17c8:	dfc00c15 	stw	ra,48(sp)
    17cc:	df000b15 	stw	fp,44(sp)
    17d0:	df000b04 	addi	fp,sp,44
    17d4:	e13ffc15 	stw	r4,-16(fp)
    17d8:	e17ffd15 	stw	r5,-12(fp)
    17dc:	e1bffe15 	stw	r6,-8(fp)
    17e0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    17e4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    17e8:	e0bffd17 	ldw	r2,-12(fp)
    17ec:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    17f0:	00003706 	br	18d0 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    17f4:	e0bffc17 	ldw	r2,-16(fp)
    17f8:	10800c17 	ldw	r2,48(r2)
    17fc:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    1800:	e0bffc17 	ldw	r2,-16(fp)
    1804:	10800d17 	ldw	r2,52(r2)
    1808:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    180c:	e0fff917 	ldw	r3,-28(fp)
    1810:	e0bff517 	ldw	r2,-44(fp)
    1814:	1880062e 	bgeu	r3,r2,1830 <altera_avalon_jtag_uart_write+0x78>
        n = out - 1 - in;
    1818:	e0fff517 	ldw	r3,-44(fp)
    181c:	e0bff917 	ldw	r2,-28(fp)
    1820:	1885c83a 	sub	r2,r3,r2
    1824:	10bfffc4 	addi	r2,r2,-1
    1828:	e0bff615 	stw	r2,-40(fp)
    182c:	00000b06 	br	185c <altera_avalon_jtag_uart_write+0xa4>
      else if (out > 0)
    1830:	e0bff517 	ldw	r2,-44(fp)
    1834:	10000526 	beq	r2,zero,184c <altera_avalon_jtag_uart_write+0x94>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    1838:	00c20004 	movi	r3,2048
    183c:	e0bff917 	ldw	r2,-28(fp)
    1840:	1885c83a 	sub	r2,r3,r2
    1844:	e0bff615 	stw	r2,-40(fp)
    1848:	00000406 	br	185c <altera_avalon_jtag_uart_write+0xa4>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    184c:	00c1ffc4 	movi	r3,2047
    1850:	e0bff917 	ldw	r2,-28(fp)
    1854:	1885c83a 	sub	r2,r3,r2
    1858:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    185c:	e0bff617 	ldw	r2,-40(fp)
    1860:	10001e26 	beq	r2,zero,18dc <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    1864:	e0fffe17 	ldw	r3,-8(fp)
    1868:	e0bff617 	ldw	r2,-40(fp)
    186c:	1880022e 	bgeu	r3,r2,1878 <altera_avalon_jtag_uart_write+0xc0>
        n = count;
    1870:	e0bffe17 	ldw	r2,-8(fp)
    1874:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    1878:	e0bffc17 	ldw	r2,-16(fp)
    187c:	10c20e04 	addi	r3,r2,2104
    1880:	e0bff917 	ldw	r2,-28(fp)
    1884:	1885883a 	add	r2,r3,r2
    1888:	e1bff617 	ldw	r6,-40(fp)
    188c:	e17ffd17 	ldw	r5,-12(fp)
    1890:	1009883a 	mov	r4,r2
    1894:	00035000 	call	3500 <memcpy>
      ptr   += n;
    1898:	e0fffd17 	ldw	r3,-12(fp)
    189c:	e0bff617 	ldw	r2,-40(fp)
    18a0:	1885883a 	add	r2,r3,r2
    18a4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    18a8:	e0fffe17 	ldw	r3,-8(fp)
    18ac:	e0bff617 	ldw	r2,-40(fp)
    18b0:	1885c83a 	sub	r2,r3,r2
    18b4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    18b8:	e0fff917 	ldw	r3,-28(fp)
    18bc:	e0bff617 	ldw	r2,-40(fp)
    18c0:	1885883a 	add	r2,r3,r2
    18c4:	10c1ffcc 	andi	r3,r2,2047
    18c8:	e0bffc17 	ldw	r2,-16(fp)
    18cc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    18d0:	e0bffe17 	ldw	r2,-8(fp)
    18d4:	00bfc716 	blt	zero,r2,17f4 <__alt_data_end+0xfc0017f4>
    18d8:	00000106 	br	18e0 <altera_avalon_jtag_uart_write+0x128>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    18dc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    18e0:	0005303a 	rdctl	r2,status
    18e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    18e8:	e0fffb17 	ldw	r3,-20(fp)
    18ec:	00bfff84 	movi	r2,-2
    18f0:	1884703a 	and	r2,r3,r2
    18f4:	1001703a 	wrctl	status,r2
  
  return context;
    18f8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    18fc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    1900:	e0bffc17 	ldw	r2,-16(fp)
    1904:	10800817 	ldw	r2,32(r2)
    1908:	10c00094 	ori	r3,r2,2
    190c:	e0bffc17 	ldw	r2,-16(fp)
    1910:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1914:	e0bffc17 	ldw	r2,-16(fp)
    1918:	10800017 	ldw	r2,0(r2)
    191c:	10800104 	addi	r2,r2,4
    1920:	1007883a 	mov	r3,r2
    1924:	e0bffc17 	ldw	r2,-16(fp)
    1928:	10800817 	ldw	r2,32(r2)
    192c:	18800035 	stwio	r2,0(r3)
    1930:	e0bffa17 	ldw	r2,-24(fp)
    1934:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1938:	e0bff817 	ldw	r2,-32(fp)
    193c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    1940:	e0bffe17 	ldw	r2,-8(fp)
    1944:	0080100e 	bge	zero,r2,1988 <altera_avalon_jtag_uart_write+0x1d0>
    {
      if (flags & O_NONBLOCK)
    1948:	e0bfff17 	ldw	r2,-4(fp)
    194c:	1090000c 	andi	r2,r2,16384
    1950:	1000101e 	bne	r2,zero,1994 <altera_avalon_jtag_uart_write+0x1dc>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    1954:	0001883a 	nop
    1958:	e0bffc17 	ldw	r2,-16(fp)
    195c:	10c00d17 	ldw	r3,52(r2)
    1960:	e0bff517 	ldw	r2,-44(fp)
    1964:	1880051e 	bne	r3,r2,197c <altera_avalon_jtag_uart_write+0x1c4>
    1968:	e0bffc17 	ldw	r2,-16(fp)
    196c:	10c00917 	ldw	r3,36(r2)
    1970:	e0bffc17 	ldw	r2,-16(fp)
    1974:	10800117 	ldw	r2,4(r2)
    1978:	18bff736 	bltu	r3,r2,1958 <__alt_data_end+0xfc001958>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    197c:	e0bffc17 	ldw	r2,-16(fp)
    1980:	10800917 	ldw	r2,36(r2)
    1984:	1000051e 	bne	r2,zero,199c <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
    1988:	e0bffe17 	ldw	r2,-8(fp)
    198c:	00bfd016 	blt	zero,r2,18d0 <__alt_data_end+0xfc0018d0>
    1990:	00000306 	br	19a0 <altera_avalon_jtag_uart_write+0x1e8>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    1994:	0001883a 	nop
    1998:	00000106 	br	19a0 <altera_avalon_jtag_uart_write+0x1e8>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    199c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    19a0:	e0fffd17 	ldw	r3,-12(fp)
    19a4:	e0bff717 	ldw	r2,-36(fp)
    19a8:	18800426 	beq	r3,r2,19bc <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    19ac:	e0fffd17 	ldw	r3,-12(fp)
    19b0:	e0bff717 	ldw	r2,-36(fp)
    19b4:	1885c83a 	sub	r2,r3,r2
    19b8:	00000606 	br	19d4 <altera_avalon_jtag_uart_write+0x21c>
  else if (flags & O_NONBLOCK)
    19bc:	e0bfff17 	ldw	r2,-4(fp)
    19c0:	1090000c 	andi	r2,r2,16384
    19c4:	10000226 	beq	r2,zero,19d0 <altera_avalon_jtag_uart_write+0x218>
    return -EWOULDBLOCK;
    19c8:	00bffd44 	movi	r2,-11
    19cc:	00000106 	br	19d4 <altera_avalon_jtag_uart_write+0x21c>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    19d0:	00bffec4 	movi	r2,-5
}
    19d4:	e037883a 	mov	sp,fp
    19d8:	dfc00117 	ldw	ra,4(sp)
    19dc:	df000017 	ldw	fp,0(sp)
    19e0:	dec00204 	addi	sp,sp,8
    19e4:	f800283a 	ret

000019e8 <perf_get_section_time>:

#include "altera_avalon_performance_counter.h"
#include "system.h"

alt_u64 perf_get_section_time (void* hw_base_address, int which_section)
{
    19e8:	f811883a 	mov	r8,ra
    19ec:	0000ac80 	call	ac8 <_mcount>
    19f0:	403f883a 	mov	ra,r8
    19f4:	defff904 	addi	sp,sp,-28
    19f8:	df000615 	stw	fp,24(sp)
    19fc:	df000604 	addi	fp,sp,24
    1a00:	e13ffe15 	stw	r4,-8(fp)
    1a04:	e17fff15 	stw	r5,-4(fp)
  alt_u32 lo;
  alt_u32 hi;
  alt_u64 result = 0;
    1a08:	e03ffa15 	stw	zero,-24(fp)
    1a0c:	e03ffb15 	stw	zero,-20(fp)

  PERF_STOP_MEASURING(hw_base_address);
    1a10:	000b883a 	mov	r5,zero
    1a14:	e13ffe17 	ldw	r4,-8(fp)
    1a18:	21400035 	stwio	r5,0(r4)
  lo = IORD(hw_base_address, ( which_section*4   ));
    1a1c:	e13fff17 	ldw	r4,-4(fp)
    1a20:	2008913a 	slli	r4,r4,4
    1a24:	200b883a 	mov	r5,r4
    1a28:	e13ffe17 	ldw	r4,-8(fp)
    1a2c:	2149883a 	add	r4,r4,r5
    1a30:	21000037 	ldwio	r4,0(r4)
    1a34:	e13ffc15 	stw	r4,-16(fp)
  hi = IORD(hw_base_address, ((which_section*4)+1));
    1a38:	e13fff17 	ldw	r4,-4(fp)
    1a3c:	2008913a 	slli	r4,r4,4
    1a40:	21000104 	addi	r4,r4,4
    1a44:	200b883a 	mov	r5,r4
    1a48:	e13ffe17 	ldw	r4,-8(fp)
    1a4c:	2149883a 	add	r4,r4,r5
    1a50:	21000037 	ldwio	r4,0(r4)
    1a54:	e13ffd15 	stw	r4,-12(fp)

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
    1a58:	e13ffd17 	ldw	r4,-12(fp)
    1a5c:	2011883a 	mov	r8,r4
    1a60:	0013883a 	mov	r9,zero
    1a64:	4006983a 	sll	r3,r8,zero
    1a68:	0005883a 	mov	r2,zero
           ((alt_u64)(((alt_u64) lo)                 ))  ;
    1a6c:	e13ffc17 	ldw	r4,-16(fp)
    1a70:	200d883a 	mov	r6,r4
    1a74:	000f883a 	mov	r7,zero

  PERF_STOP_MEASURING(hw_base_address);
  lo = IORD(hw_base_address, ( which_section*4   ));
  hi = IORD(hw_base_address, ((which_section*4)+1));

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
    1a78:	1188b03a 	or	r4,r2,r6
    1a7c:	e13ffa15 	stw	r4,-24(fp)
    1a80:	19c4b03a 	or	r2,r3,r7
    1a84:	e0bffb15 	stw	r2,-20(fp)
           ((alt_u64)(((alt_u64) lo)                 ))  ;
  return result;
    1a88:	e0bffa17 	ldw	r2,-24(fp)
    1a8c:	e0fffb17 	ldw	r3,-20(fp)
    1a90:	1009883a 	mov	r4,r2
    1a94:	180b883a 	mov	r5,r3
}
    1a98:	2005883a 	mov	r2,r4
    1a9c:	2807883a 	mov	r3,r5
    1aa0:	e037883a 	mov	sp,fp
    1aa4:	df000017 	ldw	fp,0(sp)
    1aa8:	dec00104 	addi	sp,sp,4
    1aac:	f800283a 	ret

00001ab0 <perf_get_total_time>:

alt_u64 perf_get_total_time   (void* hw_base_address)
{
    1ab0:	f811883a 	mov	r8,ra
    1ab4:	0000ac80 	call	ac8 <_mcount>
    1ab8:	403f883a 	mov	ra,r8
    1abc:	defffd04 	addi	sp,sp,-12
    1ac0:	dfc00215 	stw	ra,8(sp)
    1ac4:	df000115 	stw	fp,4(sp)
    1ac8:	df000104 	addi	fp,sp,4
    1acc:	e13fff15 	stw	r4,-4(fp)
  return perf_get_section_time (hw_base_address, 0);
    1ad0:	000b883a 	mov	r5,zero
    1ad4:	e13fff17 	ldw	r4,-4(fp)
    1ad8:	00019e80 	call	19e8 <perf_get_section_time>
    1adc:	100b883a 	mov	r5,r2
    1ae0:	180d883a 	mov	r6,r3
    1ae4:	2807883a 	mov	r3,r5
    1ae8:	3009883a 	mov	r4,r6
}
    1aec:	1805883a 	mov	r2,r3
    1af0:	2007883a 	mov	r3,r4
    1af4:	e037883a 	mov	sp,fp
    1af8:	dfc00117 	ldw	ra,4(sp)
    1afc:	df000017 	ldw	fp,0(sp)
    1b00:	dec00204 	addi	sp,sp,8
    1b04:	f800283a 	ret

00001b08 <perf_get_num_starts>:

alt_u32 perf_get_num_starts   (void* hw_base_address, int which_section)
{
    1b08:	f811883a 	mov	r8,ra
    1b0c:	0000ac80 	call	ac8 <_mcount>
    1b10:	403f883a 	mov	ra,r8
    1b14:	defffd04 	addi	sp,sp,-12
    1b18:	df000215 	stw	fp,8(sp)
    1b1c:	df000204 	addi	fp,sp,8
    1b20:	e13ffe15 	stw	r4,-8(fp)
    1b24:	e17fff15 	stw	r5,-4(fp)
  return IORD(hw_base_address, ((which_section*4)+2));
    1b28:	e0bfff17 	ldw	r2,-4(fp)
    1b2c:	1004913a 	slli	r2,r2,4
    1b30:	10800204 	addi	r2,r2,8
    1b34:	1007883a 	mov	r3,r2
    1b38:	e0bffe17 	ldw	r2,-8(fp)
    1b3c:	10c5883a 	add	r2,r2,r3
    1b40:	10800037 	ldwio	r2,0(r2)
}
    1b44:	e037883a 	mov	sp,fp
    1b48:	df000017 	ldw	fp,0(sp)
    1b4c:	dec00104 	addi	sp,sp,4
    1b50:	f800283a 	ret

00001b54 <alt_get_performance_counter_base>:
 * in Nios II IDE just like is done for the system clock timer and
 * timestamp timer.
 */
void* 
alt_get_performance_counter_base()
{
    1b54:	f811883a 	mov	r8,ra
    1b58:	0000ac80 	call	ac8 <_mcount>
    1b5c:	403f883a 	mov	ra,r8
    1b60:	deffff04 	addi	sp,sp,-4
    1b64:	df000015 	stw	fp,0(sp)
    1b68:	d839883a 	mov	fp,sp
#ifdef PERFORMANCE_COUNTER_0_BASE
    return (void*)PERFORMANCE_COUNTER_0_BASE;
    1b6c:	00810034 	movhi	r2,1024
    1b70:	10840004 	addi	r2,r2,4096
#else
    return (void*)0;
#endif
}
    1b74:	e037883a 	mov	sp,fp
    1b78:	df000017 	ldw	fp,0(sp)
    1b7c:	dec00104 	addi	sp,sp,4
    1b80:	f800283a 	ret

00001b84 <alt_get_cpu_freq>:
 * If the performance counter peripheral is in a different time domain,
 * this won't necessarily be the same frequency of the CPU.
 */
alt_u32 
alt_get_cpu_freq()
{
    1b84:	f811883a 	mov	r8,ra
    1b88:	0000ac80 	call	ac8 <_mcount>
    1b8c:	403f883a 	mov	ra,r8
    1b90:	deffff04 	addi	sp,sp,-4
    1b94:	df000015 	stw	fp,0(sp)
    1b98:	d839883a 	mov	fp,sp
    return ALT_CPU_FREQ;
    1b9c:	0080bef4 	movhi	r2,763
    1ba0:	10bc2004 	addi	r2,r2,-3968
}
    1ba4:	e037883a 	mov	sp,fp
    1ba8:	df000017 	ldw	fp,0(sp)
    1bac:	dec00104 	addi	sp,sp,4
    1bb0:	f800283a 	ret

00001bb4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    1bb4:	f811883a 	mov	r8,ra
    1bb8:	0000ac80 	call	ac8 <_mcount>
    1bbc:	403f883a 	mov	ra,r8
    1bc0:	defffa04 	addi	sp,sp,-24
    1bc4:	dfc00515 	stw	ra,20(sp)
    1bc8:	df000415 	stw	fp,16(sp)
    1bcc:	df000404 	addi	fp,sp,16
    1bd0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    1bd4:	0007883a 	mov	r3,zero
    1bd8:	e0bfff17 	ldw	r2,-4(fp)
    1bdc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    1be0:	e0bfff17 	ldw	r2,-4(fp)
    1be4:	10800104 	addi	r2,r2,4
    1be8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1bec:	0005303a 	rdctl	r2,status
    1bf0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1bf4:	e0fffd17 	ldw	r3,-12(fp)
    1bf8:	00bfff84 	movi	r2,-2
    1bfc:	1884703a 	and	r2,r3,r2
    1c00:	1001703a 	wrctl	status,r2
  
  return context;
    1c04:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    1c08:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    1c0c:	0002f2c0 	call	2f2c <alt_tick>
    1c10:	e0bffc17 	ldw	r2,-16(fp)
    1c14:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1c18:	e0bffe17 	ldw	r2,-8(fp)
    1c1c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    1c20:	0001883a 	nop
    1c24:	e037883a 	mov	sp,fp
    1c28:	dfc00117 	ldw	ra,4(sp)
    1c2c:	df000017 	ldw	fp,0(sp)
    1c30:	dec00204 	addi	sp,sp,8
    1c34:	f800283a 	ret

00001c38 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    1c38:	f811883a 	mov	r8,ra
    1c3c:	0000ac80 	call	ac8 <_mcount>
    1c40:	403f883a 	mov	ra,r8
    1c44:	defff804 	addi	sp,sp,-32
    1c48:	dfc00715 	stw	ra,28(sp)
    1c4c:	df000615 	stw	fp,24(sp)
    1c50:	df000604 	addi	fp,sp,24
    1c54:	e13ffc15 	stw	r4,-16(fp)
    1c58:	e17ffd15 	stw	r5,-12(fp)
    1c5c:	e1bffe15 	stw	r6,-8(fp)
    1c60:	e1ffff15 	stw	r7,-4(fp)
    1c64:	e0bfff17 	ldw	r2,-4(fp)
    1c68:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    1c6c:	d0a7e717 	ldw	r2,-24676(gp)
    1c70:	1000021e 	bne	r2,zero,1c7c <alt_avalon_timer_sc_init+0x44>
  {
    _alt_tick_rate = nticks;
    1c74:	e0bffb17 	ldw	r2,-20(fp)
    1c78:	d0a7e715 	stw	r2,-24676(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    1c7c:	e0bffc17 	ldw	r2,-16(fp)
    1c80:	10800104 	addi	r2,r2,4
    1c84:	00c001c4 	movi	r3,7
    1c88:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    1c8c:	d8000015 	stw	zero,0(sp)
    1c90:	e1fffc17 	ldw	r7,-16(fp)
    1c94:	01800034 	movhi	r6,0
    1c98:	3186ed04 	addi	r6,r6,7092
    1c9c:	e17ffe17 	ldw	r5,-8(fp)
    1ca0:	e13ffd17 	ldw	r4,-12(fp)
    1ca4:	00026b80 	call	26b8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    1ca8:	0001883a 	nop
    1cac:	e037883a 	mov	sp,fp
    1cb0:	dfc00117 	ldw	ra,4(sp)
    1cb4:	df000017 	ldw	fp,0(sp)
    1cb8:	dec00204 	addi	sp,sp,8
    1cbc:	f800283a 	ret

00001cc0 <perf_print_formatted_report>:

#ifndef SMALL_C_LIB 
int perf_print_formatted_report (void* perf_base, 
                                 alt_u32 clock_freq_hertz,
                                 int num_sections, ...)
{
    1cc0:	f811883a 	mov	r8,ra
    1cc4:	0000ac80 	call	ac8 <_mcount>
    1cc8:	403f883a 	mov	ra,r8
    1ccc:	deffe504 	addi	sp,sp,-108
    1cd0:	dfc01915 	stw	ra,100(sp)
    1cd4:	df001815 	stw	fp,96(sp)
    1cd8:	dcc01715 	stw	r19,92(sp)
    1cdc:	dc801615 	stw	r18,88(sp)
    1ce0:	dc401515 	stw	r17,84(sp)
    1ce4:	dc001415 	stw	r16,80(sp)
    1ce8:	df001804 	addi	fp,sp,96
    1cec:	e13ff915 	stw	r4,-28(fp)
    1cf0:	e17ffa15 	stw	r5,-24(fp)
    1cf4:	e1bffb15 	stw	r6,-20(fp)
    1cf8:	e1c00215 	stw	r7,8(fp)
  va_list name_args;
  double total_sec;
  alt_u64 total_clocks;
  alt_u64 section_clocks;
  char* section_name;
  int section_num = 1;
    1cfc:	00800044 	movi	r2,1
    1d00:	e0bfef15 	stw	r2,-68(fp)

  const char* separator = 
    1d04:	00800074 	movhi	r2,1
    1d08:	1083a304 	addi	r2,r2,3724
    1d0c:	e0bff015 	stw	r2,-64(fp)
    "+---------------+-----+-----------+---------------+-----------+\n";
  const char* column_header = 
    1d10:	00800074 	movhi	r2,1
    1d14:	1083b404 	addi	r2,r2,3792
    1d18:	e0bff115 	stw	r2,-60(fp)
    "| Section       |  %  | Time (sec)|  Time (clocks)|Occurrences|\n";

  PERF_STOP_MEASURING (perf_base);
    1d1c:	0007883a 	mov	r3,zero
    1d20:	e0bff917 	ldw	r2,-28(fp)
    1d24:	10c00035 	stwio	r3,0(r2)

  va_start (name_args, num_sections);
    1d28:	e0800204 	addi	r2,fp,8
    1d2c:	e0bff815 	stw	r2,-32(fp)

  total_clocks = perf_get_total_time (perf_base);
    1d30:	e13ff917 	ldw	r4,-28(fp)
    1d34:	0001ab00 	call	1ab0 <perf_get_total_time>
    1d38:	e0bff215 	stw	r2,-56(fp)
    1d3c:	e0fff315 	stw	r3,-52(fp)
  total_sec    = ((double)total_clocks) / clock_freq_hertz;
    1d40:	e13ff217 	ldw	r4,-56(fp)
    1d44:	e17ff317 	ldw	r5,-52(fp)
    1d48:	000d3180 	call	d318 <__floatundidf>
    1d4c:	1021883a 	mov	r16,r2
    1d50:	1823883a 	mov	r17,r3
    1d54:	e13ffa17 	ldw	r4,-24(fp)
    1d58:	00105f40 	call	105f4 <__floatunsidf>
    1d5c:	1009883a 	mov	r4,r2
    1d60:	180b883a 	mov	r5,r3
    1d64:	200d883a 	mov	r6,r4
    1d68:	280f883a 	mov	r7,r5
    1d6c:	8009883a 	mov	r4,r16
    1d70:	880b883a 	mov	r5,r17
    1d74:	000e8f40 	call	e8f4 <__divdf3>
    1d78:	1009883a 	mov	r4,r2
    1d7c:	180b883a 	mov	r5,r3
    1d80:	e13ff415 	stw	r4,-48(fp)
    1d84:	e17ff515 	stw	r5,-44(fp)

  // Print the total at the top:
  printf ("--Performance Counter Report--\nTotal Time: %3G seconds  (%lld clock-cycles)\n%s%s%s",
    1d88:	e0bff017 	ldw	r2,-64(fp)
    1d8c:	d8800315 	stw	r2,12(sp)
    1d90:	e0bff117 	ldw	r2,-60(fp)
    1d94:	d8800215 	stw	r2,8(sp)
    1d98:	e0bff017 	ldw	r2,-64(fp)
    1d9c:	d8800115 	stw	r2,4(sp)
    1da0:	e0bff317 	ldw	r2,-52(fp)
    1da4:	d8800015 	stw	r2,0(sp)
    1da8:	e1fff217 	ldw	r7,-56(fp)
    1dac:	e17ff417 	ldw	r5,-48(fp)
    1db0:	e1bff517 	ldw	r6,-44(fp)
    1db4:	01000074 	movhi	r4,1
    1db8:	2103c504 	addi	r4,r4,3860
    1dbc:	00037c00 	call	37c0 <printf>
          total_sec, total_clocks, separator, column_header, separator);

  section_name = va_arg(name_args, char*);
    1dc0:	e0bff817 	ldw	r2,-32(fp)
    1dc4:	10c00104 	addi	r3,r2,4
    1dc8:	e0fff815 	stw	r3,-32(fp)
    1dcc:	10800017 	ldw	r2,0(r2)
    1dd0:	e0bfee15 	stw	r2,-72(fp)

  for (section_num = 1; section_num <= num_sections; section_num++)
    1dd4:	00800044 	movi	r2,1
    1dd8:	e0bfef15 	stw	r2,-68(fp)
    1ddc:	00004e06 	br	1f18 <perf_print_formatted_report+0x258>
    {
      section_clocks = perf_get_section_time (perf_base, section_num);
    1de0:	e17fef17 	ldw	r5,-68(fp)
    1de4:	e13ff917 	ldw	r4,-28(fp)
    1de8:	00019e80 	call	19e8 <perf_get_section_time>
    1dec:	e0bff615 	stw	r2,-40(fp)
    1df0:	e0fff715 	stw	r3,-36(fp)

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
              section_name,
              ((((double) section_clocks)) * 100) / total_clocks,
    1df4:	e13ff617 	ldw	r4,-40(fp)
    1df8:	e17ff717 	ldw	r5,-36(fp)
    1dfc:	000d3180 	call	d318 <__floatundidf>
    1e00:	1011883a 	mov	r8,r2
    1e04:	1813883a 	mov	r9,r3
    1e08:	000d883a 	mov	r6,zero
    1e0c:	01d01674 	movhi	r7,16473
    1e10:	4009883a 	mov	r4,r8
    1e14:	480b883a 	mov	r5,r9
    1e18:	000f4540 	call	f454 <__muldf3>
    1e1c:	1009883a 	mov	r4,r2
    1e20:	180b883a 	mov	r5,r3
    1e24:	2021883a 	mov	r16,r4
    1e28:	2823883a 	mov	r17,r5

  for (section_num = 1; section_num <= num_sections; section_num++)
    {
      section_clocks = perf_get_section_time (perf_base, section_num);

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
    1e2c:	e13ff217 	ldw	r4,-56(fp)
    1e30:	e17ff317 	ldw	r5,-52(fp)
    1e34:	000d3180 	call	d318 <__floatundidf>
    1e38:	1009883a 	mov	r4,r2
    1e3c:	180b883a 	mov	r5,r3
    1e40:	200d883a 	mov	r6,r4
    1e44:	280f883a 	mov	r7,r5
    1e48:	8009883a 	mov	r4,r16
    1e4c:	880b883a 	mov	r5,r17
    1e50:	000e8f40 	call	e8f4 <__divdf3>
    1e54:	1009883a 	mov	r4,r2
    1e58:	180b883a 	mov	r5,r3
    1e5c:	2025883a 	mov	r18,r4
    1e60:	2827883a 	mov	r19,r5
              section_name,
              ((((double) section_clocks)) * 100) / total_clocks,
              (((double) section_clocks)) / clock_freq_hertz,
    1e64:	e13ff617 	ldw	r4,-40(fp)
    1e68:	e17ff717 	ldw	r5,-36(fp)
    1e6c:	000d3180 	call	d318 <__floatundidf>
    1e70:	1021883a 	mov	r16,r2
    1e74:	1823883a 	mov	r17,r3

  for (section_num = 1; section_num <= num_sections; section_num++)
    {
      section_clocks = perf_get_section_time (perf_base, section_num);

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
    1e78:	e13ffa17 	ldw	r4,-24(fp)
    1e7c:	00105f40 	call	105f4 <__floatunsidf>
    1e80:	1009883a 	mov	r4,r2
    1e84:	180b883a 	mov	r5,r3
    1e88:	200d883a 	mov	r6,r4
    1e8c:	280f883a 	mov	r7,r5
    1e90:	8009883a 	mov	r4,r16
    1e94:	880b883a 	mov	r5,r17
    1e98:	000e8f40 	call	e8f4 <__divdf3>
    1e9c:	1009883a 	mov	r4,r2
    1ea0:	180b883a 	mov	r5,r3
    1ea4:	2021883a 	mov	r16,r4
    1ea8:	2823883a 	mov	r17,r5
              section_name,
              ((((double) section_clocks)) * 100) / total_clocks,
              (((double) section_clocks)) / clock_freq_hertz,
              section_clocks,
              (unsigned int) perf_get_num_starts (perf_base, section_num),
    1eac:	e17fef17 	ldw	r5,-68(fp)
    1eb0:	e13ff917 	ldw	r4,-28(fp)
    1eb4:	0001b080 	call	1b08 <perf_get_num_starts>
    1eb8:	1007883a 	mov	r3,r2

  for (section_num = 1; section_num <= num_sections; section_num++)
    {
      section_clocks = perf_get_section_time (perf_base, section_num);

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
    1ebc:	e0bff017 	ldw	r2,-64(fp)
    1ec0:	d8800515 	stw	r2,20(sp)
    1ec4:	d8c00415 	stw	r3,16(sp)
    1ec8:	e0bff617 	ldw	r2,-40(fp)
    1ecc:	d8800215 	stw	r2,8(sp)
    1ed0:	e0bff717 	ldw	r2,-36(fp)
    1ed4:	d8800315 	stw	r2,12(sp)
    1ed8:	dc000015 	stw	r16,0(sp)
    1edc:	dc400115 	stw	r17,4(sp)
    1ee0:	900d883a 	mov	r6,r18
    1ee4:	980f883a 	mov	r7,r19
    1ee8:	e17fee17 	ldw	r5,-72(fp)
    1eec:	01000074 	movhi	r4,1
    1ef0:	2103da04 	addi	r4,r4,3944
    1ef4:	00037c00 	call	37c0 <printf>
              section_clocks,
              (unsigned int) perf_get_num_starts (perf_base, section_num),
              separator
              );

      section_name = va_arg(name_args, char*);
    1ef8:	e0bff817 	ldw	r2,-32(fp)
    1efc:	10c00104 	addi	r3,r2,4
    1f00:	e0fff815 	stw	r3,-32(fp)
    1f04:	10800017 	ldw	r2,0(r2)
    1f08:	e0bfee15 	stw	r2,-72(fp)
  printf ("--Performance Counter Report--\nTotal Time: %3G seconds  (%lld clock-cycles)\n%s%s%s",
          total_sec, total_clocks, separator, column_header, separator);

  section_name = va_arg(name_args, char*);

  for (section_num = 1; section_num <= num_sections; section_num++)
    1f0c:	e0bfef17 	ldw	r2,-68(fp)
    1f10:	10800044 	addi	r2,r2,1
    1f14:	e0bfef15 	stw	r2,-68(fp)
    1f18:	e0bfef17 	ldw	r2,-68(fp)
    1f1c:	e0fffb17 	ldw	r3,-20(fp)
    1f20:	18bfaf0e 	bge	r3,r2,1de0 <__alt_data_end+0xfc001de0>
      section_name = va_arg(name_args, char*);
    }

  va_end (name_args);

  return 0;
    1f24:	0005883a 	mov	r2,zero
}
    1f28:	e6fffc04 	addi	sp,fp,-16
    1f2c:	dfc00517 	ldw	ra,20(sp)
    1f30:	df000417 	ldw	fp,16(sp)
    1f34:	dcc00317 	ldw	r19,12(sp)
    1f38:	dc800217 	ldw	r18,8(sp)
    1f3c:	dc400117 	ldw	r17,4(sp)
    1f40:	dc000017 	ldw	r16,0(sp)
    1f44:	dec00704 	addi	sp,sp,28
    1f48:	f800283a 	ret

00001f4c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    1f4c:	f811883a 	mov	r8,ra
    1f50:	0000ac80 	call	ac8 <_mcount>
    1f54:	403f883a 	mov	ra,r8
    1f58:	defff504 	addi	sp,sp,-44
    1f5c:	df000a15 	stw	fp,40(sp)
    1f60:	df000a04 	addi	fp,sp,40
    1f64:	e13ffc15 	stw	r4,-16(fp)
    1f68:	e17ffd15 	stw	r5,-12(fp)
    1f6c:	e1bffe15 	stw	r6,-8(fp)
    1f70:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    1f74:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    1f78:	d0a7e717 	ldw	r2,-24676(gp)
  
  if (alt_ticks_per_second ())
    1f7c:	10003c26 	beq	r2,zero,2070 <alt_alarm_start+0x124>
  {
    if (alarm)
    1f80:	e0bffc17 	ldw	r2,-16(fp)
    1f84:	10003826 	beq	r2,zero,2068 <alt_alarm_start+0x11c>
    {
      alarm->callback = callback;
    1f88:	e0bffc17 	ldw	r2,-16(fp)
    1f8c:	e0fffe17 	ldw	r3,-8(fp)
    1f90:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    1f94:	e0bffc17 	ldw	r2,-16(fp)
    1f98:	e0ffff17 	ldw	r3,-4(fp)
    1f9c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1fa0:	0005303a 	rdctl	r2,status
    1fa4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1fa8:	e0fff917 	ldw	r3,-28(fp)
    1fac:	00bfff84 	movi	r2,-2
    1fb0:	1884703a 	and	r2,r3,r2
    1fb4:	1001703a 	wrctl	status,r2
  
  return context;
    1fb8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    1fbc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    1fc0:	d0a7e817 	ldw	r2,-24672(gp)
      
      current_nticks = alt_nticks();
    1fc4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    1fc8:	e0fffd17 	ldw	r3,-12(fp)
    1fcc:	e0bff617 	ldw	r2,-40(fp)
    1fd0:	1885883a 	add	r2,r3,r2
    1fd4:	10c00044 	addi	r3,r2,1
    1fd8:	e0bffc17 	ldw	r2,-16(fp)
    1fdc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    1fe0:	e0bffc17 	ldw	r2,-16(fp)
    1fe4:	10c00217 	ldw	r3,8(r2)
    1fe8:	e0bff617 	ldw	r2,-40(fp)
    1fec:	1880042e 	bgeu	r3,r2,2000 <alt_alarm_start+0xb4>
      {
        alarm->rollover = 1;
    1ff0:	e0bffc17 	ldw	r2,-16(fp)
    1ff4:	00c00044 	movi	r3,1
    1ff8:	10c00405 	stb	r3,16(r2)
    1ffc:	00000206 	br	2008 <alt_alarm_start+0xbc>
      }
      else
      {
        alarm->rollover = 0;
    2000:	e0bffc17 	ldw	r2,-16(fp)
    2004:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    2008:	e0bffc17 	ldw	r2,-16(fp)
    200c:	d0e00d04 	addi	r3,gp,-32716
    2010:	e0fffa15 	stw	r3,-24(fp)
    2014:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    2018:	e0bffb17 	ldw	r2,-20(fp)
    201c:	e0fffa17 	ldw	r3,-24(fp)
    2020:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    2024:	e0bffa17 	ldw	r2,-24(fp)
    2028:	10c00017 	ldw	r3,0(r2)
    202c:	e0bffb17 	ldw	r2,-20(fp)
    2030:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    2034:	e0bffa17 	ldw	r2,-24(fp)
    2038:	10800017 	ldw	r2,0(r2)
    203c:	e0fffb17 	ldw	r3,-20(fp)
    2040:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    2044:	e0bffa17 	ldw	r2,-24(fp)
    2048:	e0fffb17 	ldw	r3,-20(fp)
    204c:	10c00015 	stw	r3,0(r2)
    2050:	e0bff817 	ldw	r2,-32(fp)
    2054:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2058:	e0bff717 	ldw	r2,-36(fp)
    205c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    2060:	0005883a 	mov	r2,zero
    2064:	00000306 	br	2074 <alt_alarm_start+0x128>
    }
    else
    {
      return -EINVAL;
    2068:	00bffa84 	movi	r2,-22
    206c:	00000106 	br	2074 <alt_alarm_start+0x128>
    }
  }
  else
  {
    return -ENOTSUP;
    2070:	00bfde84 	movi	r2,-134
  }
}
    2074:	e037883a 	mov	sp,fp
    2078:	df000017 	ldw	fp,0(sp)
    207c:	dec00104 	addi	sp,sp,4
    2080:	f800283a 	ret

00002084 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2084:	f811883a 	mov	r8,ra
    2088:	0000ac80 	call	ac8 <_mcount>
    208c:	403f883a 	mov	ra,r8
    2090:	defffe04 	addi	sp,sp,-8
    2094:	dfc00115 	stw	ra,4(sp)
    2098:	df000015 	stw	fp,0(sp)
    209c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    20a0:	d0a00717 	ldw	r2,-32740(gp)
    20a4:	10000326 	beq	r2,zero,20b4 <alt_get_errno+0x30>
    20a8:	d0a00717 	ldw	r2,-32740(gp)
    20ac:	103ee83a 	callr	r2
    20b0:	00000106 	br	20b8 <alt_get_errno+0x34>
    20b4:	d0a7ea04 	addi	r2,gp,-24664
}
    20b8:	e037883a 	mov	sp,fp
    20bc:	dfc00117 	ldw	ra,4(sp)
    20c0:	df000017 	ldw	fp,0(sp)
    20c4:	dec00204 	addi	sp,sp,8
    20c8:	f800283a 	ret

000020cc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    20cc:	f811883a 	mov	r8,ra
    20d0:	0000ac80 	call	ac8 <_mcount>
    20d4:	403f883a 	mov	ra,r8
    20d8:	defffb04 	addi	sp,sp,-20
    20dc:	dfc00415 	stw	ra,16(sp)
    20e0:	df000315 	stw	fp,12(sp)
    20e4:	df000304 	addi	fp,sp,12
    20e8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    20ec:	e0bfff17 	ldw	r2,-4(fp)
    20f0:	10000616 	blt	r2,zero,210c <close+0x40>
    20f4:	e0bfff17 	ldw	r2,-4(fp)
    20f8:	10c00324 	muli	r3,r2,12
    20fc:	00800074 	movhi	r2,1
    2100:	1089ba04 	addi	r2,r2,9960
    2104:	1885883a 	add	r2,r3,r2
    2108:	00000106 	br	2110 <close+0x44>
    210c:	0005883a 	mov	r2,zero
    2110:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    2114:	e0bffd17 	ldw	r2,-12(fp)
    2118:	10001926 	beq	r2,zero,2180 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    211c:	e0bffd17 	ldw	r2,-12(fp)
    2120:	10800017 	ldw	r2,0(r2)
    2124:	10800417 	ldw	r2,16(r2)
    2128:	10000626 	beq	r2,zero,2144 <close+0x78>
    212c:	e0bffd17 	ldw	r2,-12(fp)
    2130:	10800017 	ldw	r2,0(r2)
    2134:	10800417 	ldw	r2,16(r2)
    2138:	e13ffd17 	ldw	r4,-12(fp)
    213c:	103ee83a 	callr	r2
    2140:	00000106 	br	2148 <close+0x7c>
    2144:	0005883a 	mov	r2,zero
    2148:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    214c:	e13fff17 	ldw	r4,-4(fp)
    2150:	0002d640 	call	2d64 <alt_release_fd>
    if (rval < 0)
    2154:	e0bffe17 	ldw	r2,-8(fp)
    2158:	1000070e 	bge	r2,zero,2178 <close+0xac>
    {
      ALT_ERRNO = -rval;
    215c:	00020840 	call	2084 <alt_get_errno>
    2160:	1007883a 	mov	r3,r2
    2164:	e0bffe17 	ldw	r2,-8(fp)
    2168:	0085c83a 	sub	r2,zero,r2
    216c:	18800015 	stw	r2,0(r3)
      return -1;
    2170:	00bfffc4 	movi	r2,-1
    2174:	00000706 	br	2194 <close+0xc8>
    }
    return 0;
    2178:	0005883a 	mov	r2,zero
    217c:	00000506 	br	2194 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    2180:	00020840 	call	2084 <alt_get_errno>
    2184:	1007883a 	mov	r3,r2
    2188:	00801444 	movi	r2,81
    218c:	18800015 	stw	r2,0(r3)
    return -1;
    2190:	00bfffc4 	movi	r2,-1
  }
}
    2194:	e037883a 	mov	sp,fp
    2198:	dfc00117 	ldw	ra,4(sp)
    219c:	df000017 	ldw	fp,0(sp)
    21a0:	dec00204 	addi	sp,sp,8
    21a4:	f800283a 	ret

000021a8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    21a8:	f811883a 	mov	r8,ra
    21ac:	0000ac80 	call	ac8 <_mcount>
    21b0:	403f883a 	mov	ra,r8
    21b4:	defffc04 	addi	sp,sp,-16
    21b8:	df000315 	stw	fp,12(sp)
    21bc:	df000304 	addi	fp,sp,12
    21c0:	e13ffd15 	stw	r4,-12(fp)
    21c4:	e17ffe15 	stw	r5,-8(fp)
    21c8:	e1bfff15 	stw	r6,-4(fp)
  return len;
    21cc:	e0bfff17 	ldw	r2,-4(fp)
}
    21d0:	e037883a 	mov	sp,fp
    21d4:	df000017 	ldw	fp,0(sp)
    21d8:	dec00104 	addi	sp,sp,4
    21dc:	f800283a 	ret

000021e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    21e0:	f811883a 	mov	r8,ra
    21e4:	0000ac80 	call	ac8 <_mcount>
    21e8:	403f883a 	mov	ra,r8
    21ec:	defffe04 	addi	sp,sp,-8
    21f0:	dfc00115 	stw	ra,4(sp)
    21f4:	df000015 	stw	fp,0(sp)
    21f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    21fc:	d0a00717 	ldw	r2,-32740(gp)
    2200:	10000326 	beq	r2,zero,2210 <alt_get_errno+0x30>
    2204:	d0a00717 	ldw	r2,-32740(gp)
    2208:	103ee83a 	callr	r2
    220c:	00000106 	br	2214 <alt_get_errno+0x34>
    2210:	d0a7ea04 	addi	r2,gp,-24664
}
    2214:	e037883a 	mov	sp,fp
    2218:	dfc00117 	ldw	ra,4(sp)
    221c:	df000017 	ldw	fp,0(sp)
    2220:	dec00204 	addi	sp,sp,8
    2224:	f800283a 	ret

00002228 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    2228:	f811883a 	mov	r8,ra
    222c:	0000ac80 	call	ac8 <_mcount>
    2230:	403f883a 	mov	ra,r8
    2234:	defffa04 	addi	sp,sp,-24
    2238:	dfc00515 	stw	ra,20(sp)
    223c:	df000415 	stw	fp,16(sp)
    2240:	df000404 	addi	fp,sp,16
    2244:	e13ffe15 	stw	r4,-8(fp)
    2248:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    224c:	e0bffe17 	ldw	r2,-8(fp)
    2250:	10000326 	beq	r2,zero,2260 <alt_dev_llist_insert+0x38>
    2254:	e0bffe17 	ldw	r2,-8(fp)
    2258:	10800217 	ldw	r2,8(r2)
    225c:	1000061e 	bne	r2,zero,2278 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    2260:	00021e00 	call	21e0 <alt_get_errno>
    2264:	1007883a 	mov	r3,r2
    2268:	00800584 	movi	r2,22
    226c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    2270:	00bffa84 	movi	r2,-22
    2274:	00001306 	br	22c4 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    2278:	e0bffe17 	ldw	r2,-8(fp)
    227c:	e0ffff17 	ldw	r3,-4(fp)
    2280:	e0fffc15 	stw	r3,-16(fp)
    2284:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    2288:	e0bffd17 	ldw	r2,-12(fp)
    228c:	e0fffc17 	ldw	r3,-16(fp)
    2290:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    2294:	e0bffc17 	ldw	r2,-16(fp)
    2298:	10c00017 	ldw	r3,0(r2)
    229c:	e0bffd17 	ldw	r2,-12(fp)
    22a0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    22a4:	e0bffc17 	ldw	r2,-16(fp)
    22a8:	10800017 	ldw	r2,0(r2)
    22ac:	e0fffd17 	ldw	r3,-12(fp)
    22b0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    22b4:	e0bffc17 	ldw	r2,-16(fp)
    22b8:	e0fffd17 	ldw	r3,-12(fp)
    22bc:	10c00015 	stw	r3,0(r2)

  return 0;  
    22c0:	0005883a 	mov	r2,zero
}
    22c4:	e037883a 	mov	sp,fp
    22c8:	dfc00117 	ldw	ra,4(sp)
    22cc:	df000017 	ldw	fp,0(sp)
    22d0:	dec00204 	addi	sp,sp,8
    22d4:	f800283a 	ret

000022d8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    22d8:	f811883a 	mov	r8,ra
    22dc:	0000ac80 	call	ac8 <_mcount>
    22e0:	403f883a 	mov	ra,r8
    22e4:	defffd04 	addi	sp,sp,-12
    22e8:	dfc00215 	stw	ra,8(sp)
    22ec:	df000115 	stw	fp,4(sp)
    22f0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    22f4:	00800074 	movhi	r2,1
    22f8:	10836704 	addi	r2,r2,3484
    22fc:	e0bfff15 	stw	r2,-4(fp)
    2300:	00000606 	br	231c <_do_ctors+0x44>
        (*ctor) (); 
    2304:	e0bfff17 	ldw	r2,-4(fp)
    2308:	10800017 	ldw	r2,0(r2)
    230c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    2310:	e0bfff17 	ldw	r2,-4(fp)
    2314:	10bfff04 	addi	r2,r2,-4
    2318:	e0bfff15 	stw	r2,-4(fp)
    231c:	e0ffff17 	ldw	r3,-4(fp)
    2320:	00800074 	movhi	r2,1
    2324:	10836804 	addi	r2,r2,3488
    2328:	18bff62e 	bgeu	r3,r2,2304 <__alt_data_end+0xfc002304>
        (*ctor) (); 
}
    232c:	0001883a 	nop
    2330:	e037883a 	mov	sp,fp
    2334:	dfc00117 	ldw	ra,4(sp)
    2338:	df000017 	ldw	fp,0(sp)
    233c:	dec00204 	addi	sp,sp,8
    2340:	f800283a 	ret

00002344 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    2344:	f811883a 	mov	r8,ra
    2348:	0000ac80 	call	ac8 <_mcount>
    234c:	403f883a 	mov	ra,r8
    2350:	defffd04 	addi	sp,sp,-12
    2354:	dfc00215 	stw	ra,8(sp)
    2358:	df000115 	stw	fp,4(sp)
    235c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    2360:	00800074 	movhi	r2,1
    2364:	10836704 	addi	r2,r2,3484
    2368:	e0bfff15 	stw	r2,-4(fp)
    236c:	00000606 	br	2388 <_do_dtors+0x44>
        (*dtor) (); 
    2370:	e0bfff17 	ldw	r2,-4(fp)
    2374:	10800017 	ldw	r2,0(r2)
    2378:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    237c:	e0bfff17 	ldw	r2,-4(fp)
    2380:	10bfff04 	addi	r2,r2,-4
    2384:	e0bfff15 	stw	r2,-4(fp)
    2388:	e0ffff17 	ldw	r3,-4(fp)
    238c:	00800074 	movhi	r2,1
    2390:	10836804 	addi	r2,r2,3488
    2394:	18bff62e 	bgeu	r3,r2,2370 <__alt_data_end+0xfc002370>
        (*dtor) (); 
}
    2398:	0001883a 	nop
    239c:	e037883a 	mov	sp,fp
    23a0:	dfc00117 	ldw	ra,4(sp)
    23a4:	df000017 	ldw	fp,0(sp)
    23a8:	dec00204 	addi	sp,sp,8
    23ac:	f800283a 	ret

000023b0 <mcount_allocate>:
 * because that's interrupt safe (and because we never free anything).
 *
 * For speed, we allocate a block of data at once.
 */
static __inline__ void * mcount_allocate(unsigned int size)
{
    23b0:	defffc04 	addi	sp,sp,-16
    23b4:	dfc00315 	stw	ra,12(sp)
    23b8:	df000215 	stw	fp,8(sp)
    23bc:	df000204 	addi	fp,sp,8
    23c0:	e13fff15 	stw	r4,-4(fp)
  void * data;

  if (size > mcount_slab_size)
    23c4:	d0a7e517 	ldw	r2,-24684(gp)
    23c8:	1007883a 	mov	r3,r2
    23cc:	e0bfff17 	ldw	r2,-4(fp)
    23d0:	1880052e 	bgeu	r3,r2,23e8 <mcount_allocate+0x38>
  {
    mcount_slab_ptr = sbrk(MCOUNT_SLAB_INCREMENT);
    23d4:	0100ff04 	movi	r4,1020
    23d8:	0002dd40 	call	2dd4 <sbrk>
    23dc:	d0a7e415 	stw	r2,-24688(gp)
    mcount_slab_size = MCOUNT_SLAB_INCREMENT;
    23e0:	0080ff04 	movi	r2,1020
    23e4:	d0a7e515 	stw	r2,-24684(gp)
  }

  data = mcount_slab_ptr;
    23e8:	d0a7e417 	ldw	r2,-24688(gp)
    23ec:	e0bffe15 	stw	r2,-8(fp)
  mcount_slab_ptr += size;
    23f0:	d0e7e417 	ldw	r3,-24688(gp)
    23f4:	e0bfff17 	ldw	r2,-4(fp)
    23f8:	1885883a 	add	r2,r3,r2
    23fc:	d0a7e415 	stw	r2,-24688(gp)
  mcount_slab_size -= size;
    2400:	d0a7e517 	ldw	r2,-24684(gp)
    2404:	1007883a 	mov	r3,r2
    2408:	e0bfff17 	ldw	r2,-4(fp)
    240c:	1885c83a 	sub	r2,r3,r2
    2410:	d0a7e515 	stw	r2,-24684(gp)

  return data;
    2414:	e0bffe17 	ldw	r2,-8(fp)
}
    2418:	e037883a 	mov	sp,fp
    241c:	dfc00117 	ldw	ra,4(sp)
    2420:	df000017 	ldw	fp,0(sp)
    2424:	dec00204 	addi	sp,sp,8
    2428:	f800283a 	ret

0000242c <__mcount_record>:
 *
 * The fast case, where we have already allocated a function arc, has been
 * handled by the assmebler code.
 */
void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)
{
    242c:	defff604 	addi	sp,sp,-40
    2430:	dfc00915 	stw	ra,36(sp)
    2434:	df000815 	stw	fp,32(sp)
    2438:	df000804 	addi	fp,sp,32
    243c:	e13ffc15 	stw	r4,-16(fp)
    2440:	e17ffd15 	stw	r5,-12(fp)
    2444:	e1bffe15 	stw	r6,-8(fp)
    2448:	e1ffff15 	stw	r7,-4(fp)
  struct mcount_fn_arc * arc_entry;

  /* Keep trying to start up the PC sampler until it is running.
   * (It can't start until the timer is going).
   */
  if (pcsample_need_init)
    244c:	d0a00817 	ldw	r2,-32736(gp)
    2450:	10000326 	beq	r2,zero,2460 <__mcount_record+0x34>
  {
    pcsample_need_init = 0;
    2454:	d0200815 	stw	zero,-32736(gp)
    pcsample_need_init = nios2_pcsample_init();
    2458:	000252c0 	call	252c <nios2_pcsample_init>
    245c:	d0a00815 	stw	r2,-32736(gp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2460:	0005303a 	rdctl	r2,status
    2464:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2468:	e0fffb17 	ldw	r3,-20(fp)
    246c:	00bfff84 	movi	r2,-2
    2470:	1884703a 	and	r2,r3,r2
    2474:	1001703a 	wrctl	status,r2
  
  return context;
    2478:	e0bffb17 	ldw	r2,-20(fp)
   * It's safe for the code above to be stepping through the chain and be
   * interrupted by this code modifying it - there is an edge case which will
   * leave two copies of the same arc on the list (both with count=1), but
   * this is dealt with on the host.
   */
  context = alt_irq_disable_all();
    247c:	e0bff915 	stw	r2,-28(fp)

  if (fn_entry == NULL)
    2480:	e0bffe17 	ldw	r2,-8(fp)
    2484:	10000f1e 	bne	r2,zero,24c4 <__mcount_record+0x98>
  {
    /* Add it to the list of functions we must output later. */
    fn_entry = (struct mcount_fn_entry *)mcount_allocate(sizeof(struct mcount_fn_entry));
    2488:	01000304 	movi	r4,12
    248c:	00023b00 	call	23b0 <mcount_allocate>
    2490:	e0bffe15 	stw	r2,-8(fp)

    fn_entry->self_pc = self_pc;
    2494:	e0bffe17 	ldw	r2,-8(fp)
    2498:	e0fffc17 	ldw	r3,-16(fp)
    249c:	10c00115 	stw	r3,4(r2)
    fn_entry->arc_head = NULL;
    24a0:	e0bffe17 	ldw	r2,-8(fp)
    24a4:	10000215 	stw	zero,8(r2)

    fn_entry->next = *fn_head;
    24a8:	e0bfff17 	ldw	r2,-4(fp)
    24ac:	10c00017 	ldw	r3,0(r2)
    24b0:	e0bffe17 	ldw	r2,-8(fp)
    24b4:	10c00015 	stw	r3,0(r2)
    *fn_head = fn_entry;
    24b8:	e0bfff17 	ldw	r2,-4(fp)
    24bc:	e0fffe17 	ldw	r3,-8(fp)
    24c0:	10c00015 	stw	r3,0(r2)
  }

  /* We will need a new list entry - if there was a list entry before
   * then the assembler code would have handled it. */
  arc_entry = (struct mcount_fn_arc *)mcount_allocate(sizeof(struct mcount_fn_arc));
    24c4:	01000304 	movi	r4,12
    24c8:	00023b00 	call	23b0 <mcount_allocate>
    24cc:	e0bffa15 	stw	r2,-24(fp)

  arc_entry->from_pc = from_pc;
    24d0:	e0bffa17 	ldw	r2,-24(fp)
    24d4:	e0fffd17 	ldw	r3,-12(fp)
    24d8:	10c00115 	stw	r3,4(r2)
  arc_entry->count = 1;
    24dc:	e0bffa17 	ldw	r2,-24(fp)
    24e0:	00c00044 	movi	r3,1
    24e4:	10c00215 	stw	r3,8(r2)

  arc_entry->next = fn_entry->arc_head;
    24e8:	e0bffe17 	ldw	r2,-8(fp)
    24ec:	10c00217 	ldw	r3,8(r2)
    24f0:	e0bffa17 	ldw	r2,-24(fp)
    24f4:	10c00015 	stw	r3,0(r2)
  fn_entry->arc_head = arc_entry;
    24f8:	e0bffe17 	ldw	r2,-8(fp)
    24fc:	e0fffa17 	ldw	r3,-24(fp)
    2500:	10c00215 	stw	r3,8(r2)
    2504:	e0bff917 	ldw	r2,-28(fp)
    2508:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    250c:	e0bff817 	ldw	r2,-32(fp)
    2510:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(context);
}
    2514:	0001883a 	nop
    2518:	e037883a 	mov	sp,fp
    251c:	dfc00117 	ldw	ra,4(sp)
    2520:	df000017 	ldw	fp,0(sp)
    2524:	dec00204 	addi	sp,sp,8
    2528:	f800283a 	ret

0000252c <nios2_pcsample_init>:
 * It is called the first time mcount is called, and on subsequent calls to
 * mcount until it returns zero. It initializes the pc histogram and turns on
 * timer driven pc sampling.
 */
static int nios2_pcsample_init(void)
{
    252c:	defffc04 	addi	sp,sp,-16
    2530:	dfc00315 	stw	ra,12(sp)
    2534:	df000215 	stw	fp,8(sp)
    2538:	df000204 	addi	fp,sp,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    253c:	d0a7e717 	ldw	r2,-24676(gp)
  unsigned int pcsamples_size; 

  /* We sample the PC every tick */
  unsigned int prof_rate = alt_ticks_per_second();
    2540:	e0bffe15 	stw	r2,-8(fp)
  if (prof_rate == 0)
    2544:	e0bffe17 	ldw	r2,-8(fp)
    2548:	1000021e 	bne	r2,zero,2554 <nios2_pcsample_init+0x28>
    return 1;
    254c:	00800044 	movi	r2,1
    2550:	00002406 	br	25e4 <nios2_pcsample_init+0xb8>

  /* allocate the histogram buffer s_pcsamples */
  pcsamples_size = (s_high_pc - s_low_pc)/PCSAMPLE_BYTES_PER_BUCKET;
    2554:	d0e00a17 	ldw	r3,-32728(gp)
    2558:	d0a00917 	ldw	r2,-32732(gp)
    255c:	1885c83a 	sub	r2,r3,r2
    2560:	1004d17a 	srli	r2,r2,5
    2564:	e0bfff15 	stw	r2,-4(fp)
  s_pcsamples    = (unsigned short*)sbrk(pcsamples_size * sizeof(unsigned short));
    2568:	e0bfff17 	ldw	r2,-4(fp)
    256c:	1085883a 	add	r2,r2,r2
    2570:	1009883a 	mov	r4,r2
    2574:	0002dd40 	call	2dd4 <sbrk>
    2578:	d0a7e315 	stw	r2,-24692(gp)

  if (s_pcsamples != 0)
    257c:	d0a7e317 	ldw	r2,-24692(gp)
    2580:	10001726 	beq	r2,zero,25e0 <nios2_pcsample_init+0xb4>
  {
    /* initialize the buffer to zero */
    memset(s_pcsamples, 0, pcsamples_size * sizeof(unsigned short));
    2584:	d0e7e317 	ldw	r3,-24692(gp)
    2588:	e0bfff17 	ldw	r2,-4(fp)
    258c:	1085883a 	add	r2,r2,r2
    2590:	100d883a 	mov	r6,r2
    2594:	000b883a 	mov	r5,zero
    2598:	1809883a 	mov	r4,r3
    259c:	00036540 	call	3654 <memset>

    alt_gmon_data[GMON_DATA_PROFILE_DATA] = (int)s_pcsamples;
    25a0:	d0a7e317 	ldw	r2,-24692(gp)
    25a4:	1007883a 	mov	r3,r2
    25a8:	00800074 	movhi	r2,1
    25ac:	108a1a04 	addi	r2,r2,10344
    25b0:	10c00215 	stw	r3,8(r2)
    alt_gmon_data[GMON_DATA_PROFILE_RATE] = prof_rate;
    25b4:	00800074 	movhi	r2,1
    25b8:	108a1a04 	addi	r2,r2,10344
    25bc:	e0fffe17 	ldw	r3,-8(fp)
    25c0:	10c00615 	stw	r3,24(r2)

    /* Sample every tick (it's cheap) */
    alt_alarm_start(&s_nios2_pcsample_alarm, 1, nios2_pcsample, 0);
    25c4:	000f883a 	mov	r7,zero
    25c8:	01800034 	movhi	r6,0
    25cc:	31897e04 	addi	r6,r6,9720
    25d0:	01400044 	movi	r5,1
    25d4:	01000074 	movhi	r4,1
    25d8:	21143d04 	addi	r4,r4,20724
    25dc:	0001f4c0 	call	1f4c <alt_alarm_start>
  }

  return 0;
    25e0:	0005883a 	mov	r2,zero
}
    25e4:	e037883a 	mov	sp,fp
    25e8:	dfc00117 	ldw	ra,4(sp)
    25ec:	df000017 	ldw	fp,0(sp)
    25f0:	dec00204 	addi	sp,sp,8
    25f4:	f800283a 	ret

000025f8 <nios2_pcsample>:

/*
 * Sample the PC value and store it in the histogram
 */
static alt_u32 nios2_pcsample(void* context)
{
    25f8:	defffc04 	addi	sp,sp,-16
    25fc:	df000315 	stw	fp,12(sp)
    2600:	df000304 	addi	fp,sp,12
    2604:	e13fff15 	stw	r4,-4(fp)
  unsigned int pc=0;
    2608:	e03ffd15 	stw	zero,-12(fp)

  /* read the exception return address - this will be
   * inaccurate if there are nested interrupts but we
   * assume that this is rare and the inaccuracy will
   * not be great */
  NIOS2_READ_EA(pc);
    260c:	e805883a 	mov	r2,ea
    2610:	e0bffd15 	stw	r2,-12(fp)

  /*
   * If we're within the profilable range then increment the relevant
   * bucket in the histogram
   */
  if (pc >= s_low_pc && pc < s_high_pc && s_pcsamples != 0)
    2614:	d0a00917 	ldw	r2,-32732(gp)
    2618:	e0fffd17 	ldw	r3,-12(fp)
    261c:	18801136 	bltu	r3,r2,2664 <nios2_pcsample+0x6c>
    2620:	d0a00a17 	ldw	r2,-32728(gp)
    2624:	e0fffd17 	ldw	r3,-12(fp)
    2628:	18800e2e 	bgeu	r3,r2,2664 <nios2_pcsample+0x6c>
    262c:	d0a7e317 	ldw	r2,-24692(gp)
    2630:	10000c26 	beq	r2,zero,2664 <nios2_pcsample+0x6c>
  {
    bucket = (pc - s_low_pc)/PCSAMPLE_BYTES_PER_BUCKET;
    2634:	d0a00917 	ldw	r2,-32732(gp)
    2638:	e0fffd17 	ldw	r3,-12(fp)
    263c:	1885c83a 	sub	r2,r3,r2
    2640:	1004d17a 	srli	r2,r2,5
    2644:	e0bffe15 	stw	r2,-8(fp)
    s_pcsamples[bucket]++;
    2648:	d0e7e317 	ldw	r3,-24692(gp)
    264c:	e0bffe17 	ldw	r2,-8(fp)
    2650:	1085883a 	add	r2,r2,r2
    2654:	1885883a 	add	r2,r3,r2
    2658:	10c0000b 	ldhu	r3,0(r2)
    265c:	18c00044 	addi	r3,r3,1
    2660:	10c0000d 	sth	r3,0(r2)
  }

  /* Sample every tick */
  return 1;
    2664:	00800044 	movi	r2,1
}
    2668:	e037883a 	mov	sp,fp
    266c:	df000017 	ldw	fp,0(sp)
    2670:	dec00104 	addi	sp,sp,4
    2674:	f800283a 	ret

00002678 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    2678:	f811883a 	mov	r8,ra
    267c:	0000ac80 	call	ac8 <_mcount>
    2680:	403f883a 	mov	ra,r8
    2684:	defffe04 	addi	sp,sp,-8
    2688:	dfc00115 	stw	ra,4(sp)
    268c:	df000015 	stw	fp,0(sp)
    2690:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    2694:	01440004 	movi	r5,4096
    2698:	0009883a 	mov	r4,zero
    269c:	00032d00 	call	32d0 <alt_icache_flush>
#endif
}
    26a0:	0001883a 	nop
    26a4:	e037883a 	mov	sp,fp
    26a8:	dfc00117 	ldw	ra,4(sp)
    26ac:	df000017 	ldw	fp,0(sp)
    26b0:	dec00204 	addi	sp,sp,8
    26b4:	f800283a 	ret

000026b8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    26b8:	f811883a 	mov	r8,ra
    26bc:	0000ac80 	call	ac8 <_mcount>
    26c0:	403f883a 	mov	ra,r8
    26c4:	defff904 	addi	sp,sp,-28
    26c8:	dfc00615 	stw	ra,24(sp)
    26cc:	df000515 	stw	fp,20(sp)
    26d0:	df000504 	addi	fp,sp,20
    26d4:	e13ffc15 	stw	r4,-16(fp)
    26d8:	e17ffd15 	stw	r5,-12(fp)
    26dc:	e1bffe15 	stw	r6,-8(fp)
    26e0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    26e4:	e0800217 	ldw	r2,8(fp)
    26e8:	d8800015 	stw	r2,0(sp)
    26ec:	e1ffff17 	ldw	r7,-4(fp)
    26f0:	e1bffe17 	ldw	r6,-8(fp)
    26f4:	e17ffd17 	ldw	r5,-12(fp)
    26f8:	e13ffc17 	ldw	r4,-16(fp)
    26fc:	00028980 	call	2898 <alt_iic_isr_register>
}  
    2700:	e037883a 	mov	sp,fp
    2704:	dfc00117 	ldw	ra,4(sp)
    2708:	df000017 	ldw	fp,0(sp)
    270c:	dec00204 	addi	sp,sp,8
    2710:	f800283a 	ret

00002714 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    2714:	f811883a 	mov	r8,ra
    2718:	0000ac80 	call	ac8 <_mcount>
    271c:	403f883a 	mov	ra,r8
    2720:	defff904 	addi	sp,sp,-28
    2724:	df000615 	stw	fp,24(sp)
    2728:	df000604 	addi	fp,sp,24
    272c:	e13ffe15 	stw	r4,-8(fp)
    2730:	e17fff15 	stw	r5,-4(fp)
    2734:	e0bfff17 	ldw	r2,-4(fp)
    2738:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    273c:	0005303a 	rdctl	r2,status
    2740:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2744:	e0fffb17 	ldw	r3,-20(fp)
    2748:	00bfff84 	movi	r2,-2
    274c:	1884703a 	and	r2,r3,r2
    2750:	1001703a 	wrctl	status,r2
  
  return context;
    2754:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    2758:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    275c:	00c00044 	movi	r3,1
    2760:	e0bffa17 	ldw	r2,-24(fp)
    2764:	1884983a 	sll	r2,r3,r2
    2768:	1007883a 	mov	r3,r2
    276c:	d0a7e617 	ldw	r2,-24680(gp)
    2770:	1884b03a 	or	r2,r3,r2
    2774:	d0a7e615 	stw	r2,-24680(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2778:	d0a7e617 	ldw	r2,-24680(gp)
    277c:	100170fa 	wrctl	ienable,r2
    2780:	e0bffc17 	ldw	r2,-16(fp)
    2784:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2788:	e0bffd17 	ldw	r2,-12(fp)
    278c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    2790:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    2794:	0001883a 	nop
}
    2798:	e037883a 	mov	sp,fp
    279c:	df000017 	ldw	fp,0(sp)
    27a0:	dec00104 	addi	sp,sp,4
    27a4:	f800283a 	ret

000027a8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    27a8:	f811883a 	mov	r8,ra
    27ac:	0000ac80 	call	ac8 <_mcount>
    27b0:	403f883a 	mov	ra,r8
    27b4:	defff904 	addi	sp,sp,-28
    27b8:	df000615 	stw	fp,24(sp)
    27bc:	df000604 	addi	fp,sp,24
    27c0:	e13ffe15 	stw	r4,-8(fp)
    27c4:	e17fff15 	stw	r5,-4(fp)
    27c8:	e0bfff17 	ldw	r2,-4(fp)
    27cc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    27d0:	0005303a 	rdctl	r2,status
    27d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    27d8:	e0fffb17 	ldw	r3,-20(fp)
    27dc:	00bfff84 	movi	r2,-2
    27e0:	1884703a 	and	r2,r3,r2
    27e4:	1001703a 	wrctl	status,r2
  
  return context;
    27e8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    27ec:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    27f0:	00c00044 	movi	r3,1
    27f4:	e0bffa17 	ldw	r2,-24(fp)
    27f8:	1884983a 	sll	r2,r3,r2
    27fc:	0084303a 	nor	r2,zero,r2
    2800:	1007883a 	mov	r3,r2
    2804:	d0a7e617 	ldw	r2,-24680(gp)
    2808:	1884703a 	and	r2,r3,r2
    280c:	d0a7e615 	stw	r2,-24680(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2810:	d0a7e617 	ldw	r2,-24680(gp)
    2814:	100170fa 	wrctl	ienable,r2
    2818:	e0bffc17 	ldw	r2,-16(fp)
    281c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2820:	e0bffd17 	ldw	r2,-12(fp)
    2824:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    2828:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    282c:	0001883a 	nop
}
    2830:	e037883a 	mov	sp,fp
    2834:	df000017 	ldw	fp,0(sp)
    2838:	dec00104 	addi	sp,sp,4
    283c:	f800283a 	ret

00002840 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    2840:	f811883a 	mov	r8,ra
    2844:	0000ac80 	call	ac8 <_mcount>
    2848:	403f883a 	mov	ra,r8
    284c:	defffc04 	addi	sp,sp,-16
    2850:	df000315 	stw	fp,12(sp)
    2854:	df000304 	addi	fp,sp,12
    2858:	e13ffe15 	stw	r4,-8(fp)
    285c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    2860:	000530fa 	rdctl	r2,ienable
    2864:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    2868:	00c00044 	movi	r3,1
    286c:	e0bfff17 	ldw	r2,-4(fp)
    2870:	1884983a 	sll	r2,r3,r2
    2874:	1007883a 	mov	r3,r2
    2878:	e0bffd17 	ldw	r2,-12(fp)
    287c:	1884703a 	and	r2,r3,r2
    2880:	1004c03a 	cmpne	r2,r2,zero
    2884:	10803fcc 	andi	r2,r2,255
}
    2888:	e037883a 	mov	sp,fp
    288c:	df000017 	ldw	fp,0(sp)
    2890:	dec00104 	addi	sp,sp,4
    2894:	f800283a 	ret

00002898 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    2898:	f811883a 	mov	r8,ra
    289c:	0000ac80 	call	ac8 <_mcount>
    28a0:	403f883a 	mov	ra,r8
    28a4:	defff504 	addi	sp,sp,-44
    28a8:	dfc00a15 	stw	ra,40(sp)
    28ac:	df000915 	stw	fp,36(sp)
    28b0:	df000904 	addi	fp,sp,36
    28b4:	e13ffc15 	stw	r4,-16(fp)
    28b8:	e17ffd15 	stw	r5,-12(fp)
    28bc:	e1bffe15 	stw	r6,-8(fp)
    28c0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    28c4:	00bffa84 	movi	r2,-22
    28c8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    28cc:	e0bffd17 	ldw	r2,-12(fp)
    28d0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    28d4:	e0bff817 	ldw	r2,-32(fp)
    28d8:	10800808 	cmpgei	r2,r2,32
    28dc:	1000271e 	bne	r2,zero,297c <alt_iic_isr_register+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    28e0:	0005303a 	rdctl	r2,status
    28e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    28e8:	e0fffb17 	ldw	r3,-20(fp)
    28ec:	00bfff84 	movi	r2,-2
    28f0:	1884703a 	and	r2,r3,r2
    28f4:	1001703a 	wrctl	status,r2
  
  return context;
    28f8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    28fc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    2900:	00800074 	movhi	r2,1
    2904:	109c5d04 	addi	r2,r2,29044
    2908:	e0fff817 	ldw	r3,-32(fp)
    290c:	180690fa 	slli	r3,r3,3
    2910:	10c5883a 	add	r2,r2,r3
    2914:	e0fffe17 	ldw	r3,-8(fp)
    2918:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    291c:	00800074 	movhi	r2,1
    2920:	109c5d04 	addi	r2,r2,29044
    2924:	e0fff817 	ldw	r3,-32(fp)
    2928:	180690fa 	slli	r3,r3,3
    292c:	10c5883a 	add	r2,r2,r3
    2930:	10800104 	addi	r2,r2,4
    2934:	e0ffff17 	ldw	r3,-4(fp)
    2938:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    293c:	e0bffe17 	ldw	r2,-8(fp)
    2940:	10000526 	beq	r2,zero,2958 <alt_iic_isr_register+0xc0>
    2944:	e0bff817 	ldw	r2,-32(fp)
    2948:	100b883a 	mov	r5,r2
    294c:	e13ffc17 	ldw	r4,-16(fp)
    2950:	00027140 	call	2714 <alt_ic_irq_enable>
    2954:	00000406 	br	2968 <alt_iic_isr_register+0xd0>
    2958:	e0bff817 	ldw	r2,-32(fp)
    295c:	100b883a 	mov	r5,r2
    2960:	e13ffc17 	ldw	r4,-16(fp)
    2964:	00027a80 	call	27a8 <alt_ic_irq_disable>
    2968:	e0bff715 	stw	r2,-36(fp)
    296c:	e0bffa17 	ldw	r2,-24(fp)
    2970:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2974:	e0bff917 	ldw	r2,-28(fp)
    2978:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    297c:	e0bff717 	ldw	r2,-36(fp)
}
    2980:	e037883a 	mov	sp,fp
    2984:	dfc00117 	ldw	ra,4(sp)
    2988:	df000017 	ldw	fp,0(sp)
    298c:	dec00204 	addi	sp,sp,8
    2990:	f800283a 	ret

00002994 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    2994:	f811883a 	mov	r8,ra
    2998:	0000ac80 	call	ac8 <_mcount>
    299c:	403f883a 	mov	ra,r8
    29a0:	defff904 	addi	sp,sp,-28
    29a4:	dfc00615 	stw	ra,24(sp)
    29a8:	df000515 	stw	fp,20(sp)
    29ac:	df000504 	addi	fp,sp,20
    29b0:	e13ffc15 	stw	r4,-16(fp)
    29b4:	e17ffd15 	stw	r5,-12(fp)
    29b8:	e1bffe15 	stw	r6,-8(fp)
    29bc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    29c0:	e1bfff17 	ldw	r6,-4(fp)
    29c4:	e17ffe17 	ldw	r5,-8(fp)
    29c8:	e13ffd17 	ldw	r4,-12(fp)
    29cc:	0002c040 	call	2c04 <open>
    29d0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    29d4:	e0bffb17 	ldw	r2,-20(fp)
    29d8:	10001c16 	blt	r2,zero,2a4c <alt_open_fd+0xb8>
  {
    fd->dev      = alt_fd_list[old].dev;
    29dc:	00800074 	movhi	r2,1
    29e0:	1089ba04 	addi	r2,r2,9960
    29e4:	e0fffb17 	ldw	r3,-20(fp)
    29e8:	18c00324 	muli	r3,r3,12
    29ec:	10c5883a 	add	r2,r2,r3
    29f0:	10c00017 	ldw	r3,0(r2)
    29f4:	e0bffc17 	ldw	r2,-16(fp)
    29f8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    29fc:	00800074 	movhi	r2,1
    2a00:	1089ba04 	addi	r2,r2,9960
    2a04:	e0fffb17 	ldw	r3,-20(fp)
    2a08:	18c00324 	muli	r3,r3,12
    2a0c:	10c5883a 	add	r2,r2,r3
    2a10:	10800104 	addi	r2,r2,4
    2a14:	10c00017 	ldw	r3,0(r2)
    2a18:	e0bffc17 	ldw	r2,-16(fp)
    2a1c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    2a20:	00800074 	movhi	r2,1
    2a24:	1089ba04 	addi	r2,r2,9960
    2a28:	e0fffb17 	ldw	r3,-20(fp)
    2a2c:	18c00324 	muli	r3,r3,12
    2a30:	10c5883a 	add	r2,r2,r3
    2a34:	10800204 	addi	r2,r2,8
    2a38:	10c00017 	ldw	r3,0(r2)
    2a3c:	e0bffc17 	ldw	r2,-16(fp)
    2a40:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    2a44:	e13ffb17 	ldw	r4,-20(fp)
    2a48:	0002d640 	call	2d64 <alt_release_fd>
  }
} 
    2a4c:	0001883a 	nop
    2a50:	e037883a 	mov	sp,fp
    2a54:	dfc00117 	ldw	ra,4(sp)
    2a58:	df000017 	ldw	fp,0(sp)
    2a5c:	dec00204 	addi	sp,sp,8
    2a60:	f800283a 	ret

00002a64 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    2a64:	f811883a 	mov	r8,ra
    2a68:	0000ac80 	call	ac8 <_mcount>
    2a6c:	403f883a 	mov	ra,r8
    2a70:	defffb04 	addi	sp,sp,-20
    2a74:	dfc00415 	stw	ra,16(sp)
    2a78:	df000315 	stw	fp,12(sp)
    2a7c:	df000304 	addi	fp,sp,12
    2a80:	e13ffd15 	stw	r4,-12(fp)
    2a84:	e17ffe15 	stw	r5,-8(fp)
    2a88:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    2a8c:	01c07fc4 	movi	r7,511
    2a90:	01800044 	movi	r6,1
    2a94:	e17ffd17 	ldw	r5,-12(fp)
    2a98:	01000074 	movhi	r4,1
    2a9c:	2109bd04 	addi	r4,r4,9972
    2aa0:	00029940 	call	2994 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    2aa4:	01c07fc4 	movi	r7,511
    2aa8:	000d883a 	mov	r6,zero
    2aac:	e17ffe17 	ldw	r5,-8(fp)
    2ab0:	01000074 	movhi	r4,1
    2ab4:	2109ba04 	addi	r4,r4,9960
    2ab8:	00029940 	call	2994 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    2abc:	01c07fc4 	movi	r7,511
    2ac0:	01800044 	movi	r6,1
    2ac4:	e17fff17 	ldw	r5,-4(fp)
    2ac8:	01000074 	movhi	r4,1
    2acc:	2109c004 	addi	r4,r4,9984
    2ad0:	00029940 	call	2994 <alt_open_fd>
}  
    2ad4:	0001883a 	nop
    2ad8:	e037883a 	mov	sp,fp
    2adc:	dfc00117 	ldw	ra,4(sp)
    2ae0:	df000017 	ldw	fp,0(sp)
    2ae4:	dec00204 	addi	sp,sp,8
    2ae8:	f800283a 	ret

00002aec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2aec:	f811883a 	mov	r8,ra
    2af0:	0000ac80 	call	ac8 <_mcount>
    2af4:	403f883a 	mov	ra,r8
    2af8:	defffe04 	addi	sp,sp,-8
    2afc:	dfc00115 	stw	ra,4(sp)
    2b00:	df000015 	stw	fp,0(sp)
    2b04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    2b08:	d0a00717 	ldw	r2,-32740(gp)
    2b0c:	10000326 	beq	r2,zero,2b1c <alt_get_errno+0x30>
    2b10:	d0a00717 	ldw	r2,-32740(gp)
    2b14:	103ee83a 	callr	r2
    2b18:	00000106 	br	2b20 <alt_get_errno+0x34>
    2b1c:	d0a7ea04 	addi	r2,gp,-24664
}
    2b20:	e037883a 	mov	sp,fp
    2b24:	dfc00117 	ldw	ra,4(sp)
    2b28:	df000017 	ldw	fp,0(sp)
    2b2c:	dec00204 	addi	sp,sp,8
    2b30:	f800283a 	ret

00002b34 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    2b34:	f811883a 	mov	r8,ra
    2b38:	0000ac80 	call	ac8 <_mcount>
    2b3c:	403f883a 	mov	ra,r8
    2b40:	defffd04 	addi	sp,sp,-12
    2b44:	df000215 	stw	fp,8(sp)
    2b48:	df000204 	addi	fp,sp,8
    2b4c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    2b50:	e0bfff17 	ldw	r2,-4(fp)
    2b54:	10800217 	ldw	r2,8(r2)
    2b58:	10d00034 	orhi	r3,r2,16384
    2b5c:	e0bfff17 	ldw	r2,-4(fp)
    2b60:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    2b64:	e03ffe15 	stw	zero,-8(fp)
    2b68:	00001d06 	br	2be0 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    2b6c:	00800074 	movhi	r2,1
    2b70:	1089ba04 	addi	r2,r2,9960
    2b74:	e0fffe17 	ldw	r3,-8(fp)
    2b78:	18c00324 	muli	r3,r3,12
    2b7c:	10c5883a 	add	r2,r2,r3
    2b80:	10c00017 	ldw	r3,0(r2)
    2b84:	e0bfff17 	ldw	r2,-4(fp)
    2b88:	10800017 	ldw	r2,0(r2)
    2b8c:	1880111e 	bne	r3,r2,2bd4 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    2b90:	00800074 	movhi	r2,1
    2b94:	1089ba04 	addi	r2,r2,9960
    2b98:	e0fffe17 	ldw	r3,-8(fp)
    2b9c:	18c00324 	muli	r3,r3,12
    2ba0:	10c5883a 	add	r2,r2,r3
    2ba4:	10800204 	addi	r2,r2,8
    2ba8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    2bac:	1000090e 	bge	r2,zero,2bd4 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    2bb0:	e0bffe17 	ldw	r2,-8(fp)
    2bb4:	10c00324 	muli	r3,r2,12
    2bb8:	00800074 	movhi	r2,1
    2bbc:	1089ba04 	addi	r2,r2,9960
    2bc0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    2bc4:	e0bfff17 	ldw	r2,-4(fp)
    2bc8:	18800226 	beq	r3,r2,2bd4 <alt_file_locked+0xa0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    2bcc:	00bffcc4 	movi	r2,-13
    2bd0:	00000806 	br	2bf4 <alt_file_locked+0xc0>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    2bd4:	e0bffe17 	ldw	r2,-8(fp)
    2bd8:	10800044 	addi	r2,r2,1
    2bdc:	e0bffe15 	stw	r2,-8(fp)
    2be0:	d0a00617 	ldw	r2,-32744(gp)
    2be4:	1007883a 	mov	r3,r2
    2be8:	e0bffe17 	ldw	r2,-8(fp)
    2bec:	18bfdf2e 	bgeu	r3,r2,2b6c <__alt_data_end+0xfc002b6c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    2bf0:	0005883a 	mov	r2,zero
}
    2bf4:	e037883a 	mov	sp,fp
    2bf8:	df000017 	ldw	fp,0(sp)
    2bfc:	dec00104 	addi	sp,sp,4
    2c00:	f800283a 	ret

00002c04 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    2c04:	f811883a 	mov	r8,ra
    2c08:	0000ac80 	call	ac8 <_mcount>
    2c0c:	403f883a 	mov	ra,r8
    2c10:	defff604 	addi	sp,sp,-40
    2c14:	dfc00915 	stw	ra,36(sp)
    2c18:	df000815 	stw	fp,32(sp)
    2c1c:	df000804 	addi	fp,sp,32
    2c20:	e13ffd15 	stw	r4,-12(fp)
    2c24:	e17ffe15 	stw	r5,-8(fp)
    2c28:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    2c2c:	00bfffc4 	movi	r2,-1
    2c30:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    2c34:	00bffb44 	movi	r2,-19
    2c38:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    2c3c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    2c40:	d1600404 	addi	r5,gp,-32752
    2c44:	e13ffd17 	ldw	r4,-12(fp)
    2c48:	00030700 	call	3070 <alt_find_dev>
    2c4c:	e0bff815 	stw	r2,-32(fp)
    2c50:	e0bff817 	ldw	r2,-32(fp)
    2c54:	1000051e 	bne	r2,zero,2c6c <open+0x68>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    2c58:	e13ffd17 	ldw	r4,-12(fp)
    2c5c:	000310c0 	call	310c <alt_find_file>
    2c60:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    2c64:	00800044 	movi	r2,1
    2c68:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    2c6c:	e0bff817 	ldw	r2,-32(fp)
    2c70:	10002926 	beq	r2,zero,2d18 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
    2c74:	e13ff817 	ldw	r4,-32(fp)
    2c78:	00032200 	call	3220 <alt_get_fd>
    2c7c:	e0bff915 	stw	r2,-28(fp)
    2c80:	e0bff917 	ldw	r2,-28(fp)
    2c84:	1000030e 	bge	r2,zero,2c94 <open+0x90>
    {
      status = index;
    2c88:	e0bff917 	ldw	r2,-28(fp)
    2c8c:	e0bffa15 	stw	r2,-24(fp)
    2c90:	00002306 	br	2d20 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
    2c94:	e0bff917 	ldw	r2,-28(fp)
    2c98:	10c00324 	muli	r3,r2,12
    2c9c:	00800074 	movhi	r2,1
    2ca0:	1089ba04 	addi	r2,r2,9960
    2ca4:	1885883a 	add	r2,r3,r2
    2ca8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    2cac:	e0fffe17 	ldw	r3,-8(fp)
    2cb0:	00900034 	movhi	r2,16384
    2cb4:	10bfffc4 	addi	r2,r2,-1
    2cb8:	1886703a 	and	r3,r3,r2
    2cbc:	e0bffc17 	ldw	r2,-16(fp)
    2cc0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    2cc4:	e0bffb17 	ldw	r2,-20(fp)
    2cc8:	1000051e 	bne	r2,zero,2ce0 <open+0xdc>
    2ccc:	e13ffc17 	ldw	r4,-16(fp)
    2cd0:	0002b340 	call	2b34 <alt_file_locked>
    2cd4:	e0bffa15 	stw	r2,-24(fp)
    2cd8:	e0bffa17 	ldw	r2,-24(fp)
    2cdc:	10001016 	blt	r2,zero,2d20 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    2ce0:	e0bff817 	ldw	r2,-32(fp)
    2ce4:	10800317 	ldw	r2,12(r2)
    2ce8:	10000826 	beq	r2,zero,2d0c <open+0x108>
    2cec:	e0bff817 	ldw	r2,-32(fp)
    2cf0:	10800317 	ldw	r2,12(r2)
    2cf4:	e1ffff17 	ldw	r7,-4(fp)
    2cf8:	e1bffe17 	ldw	r6,-8(fp)
    2cfc:	e17ffd17 	ldw	r5,-12(fp)
    2d00:	e13ffc17 	ldw	r4,-16(fp)
    2d04:	103ee83a 	callr	r2
    2d08:	00000106 	br	2d10 <open+0x10c>
    2d0c:	0005883a 	mov	r2,zero
    2d10:	e0bffa15 	stw	r2,-24(fp)
    2d14:	00000206 	br	2d20 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    2d18:	00bffb44 	movi	r2,-19
    2d1c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    2d20:	e0bffa17 	ldw	r2,-24(fp)
    2d24:	1000090e 	bge	r2,zero,2d4c <open+0x148>
  {
    alt_release_fd (index);  
    2d28:	e13ff917 	ldw	r4,-28(fp)
    2d2c:	0002d640 	call	2d64 <alt_release_fd>
    ALT_ERRNO = -status;
    2d30:	0002aec0 	call	2aec <alt_get_errno>
    2d34:	1007883a 	mov	r3,r2
    2d38:	e0bffa17 	ldw	r2,-24(fp)
    2d3c:	0085c83a 	sub	r2,zero,r2
    2d40:	18800015 	stw	r2,0(r3)
    return -1;
    2d44:	00bfffc4 	movi	r2,-1
    2d48:	00000106 	br	2d50 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
    2d4c:	e0bff917 	ldw	r2,-28(fp)
}
    2d50:	e037883a 	mov	sp,fp
    2d54:	dfc00117 	ldw	ra,4(sp)
    2d58:	df000017 	ldw	fp,0(sp)
    2d5c:	dec00204 	addi	sp,sp,8
    2d60:	f800283a 	ret

00002d64 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    2d64:	f811883a 	mov	r8,ra
    2d68:	0000ac80 	call	ac8 <_mcount>
    2d6c:	403f883a 	mov	ra,r8
    2d70:	defffe04 	addi	sp,sp,-8
    2d74:	df000115 	stw	fp,4(sp)
    2d78:	df000104 	addi	fp,sp,4
    2d7c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    2d80:	e0bfff17 	ldw	r2,-4(fp)
    2d84:	108000d0 	cmplti	r2,r2,3
    2d88:	10000d1e 	bne	r2,zero,2dc0 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
    2d8c:	00800074 	movhi	r2,1
    2d90:	1089ba04 	addi	r2,r2,9960
    2d94:	e0ffff17 	ldw	r3,-4(fp)
    2d98:	18c00324 	muli	r3,r3,12
    2d9c:	10c5883a 	add	r2,r2,r3
    2da0:	10800204 	addi	r2,r2,8
    2da4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    2da8:	00800074 	movhi	r2,1
    2dac:	1089ba04 	addi	r2,r2,9960
    2db0:	e0ffff17 	ldw	r3,-4(fp)
    2db4:	18c00324 	muli	r3,r3,12
    2db8:	10c5883a 	add	r2,r2,r3
    2dbc:	10000015 	stw	zero,0(r2)
  }
}
    2dc0:	0001883a 	nop
    2dc4:	e037883a 	mov	sp,fp
    2dc8:	df000017 	ldw	fp,0(sp)
    2dcc:	dec00104 	addi	sp,sp,4
    2dd0:	f800283a 	ret

00002dd4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    2dd4:	defff904 	addi	sp,sp,-28
    2dd8:	df000615 	stw	fp,24(sp)
    2ddc:	df000604 	addi	fp,sp,24
    2de0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2de4:	0005303a 	rdctl	r2,status
    2de8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2dec:	e0fffe17 	ldw	r3,-8(fp)
    2df0:	00bfff84 	movi	r2,-2
    2df4:	1884703a 	and	r2,r3,r2
    2df8:	1001703a 	wrctl	status,r2
  
  return context;
    2dfc:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    2e00:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    2e04:	d0a00c17 	ldw	r2,-32720(gp)
    2e08:	10c000c4 	addi	r3,r2,3
    2e0c:	00bfff04 	movi	r2,-4
    2e10:	1884703a 	and	r2,r3,r2
    2e14:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    2e18:	d0e00c17 	ldw	r3,-32720(gp)
    2e1c:	e0bfff17 	ldw	r2,-4(fp)
    2e20:	1887883a 	add	r3,r3,r2
    2e24:	00810034 	movhi	r2,1024
    2e28:	10800004 	addi	r2,r2,0
    2e2c:	10c0062e 	bgeu	r2,r3,2e48 <sbrk+0x74>
    2e30:	e0bffb17 	ldw	r2,-20(fp)
    2e34:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2e38:	e0bffa17 	ldw	r2,-24(fp)
    2e3c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    2e40:	00bfffc4 	movi	r2,-1
    2e44:	00000b06 	br	2e74 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    2e48:	d0a00c17 	ldw	r2,-32720(gp)
    2e4c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    2e50:	d0e00c17 	ldw	r3,-32720(gp)
    2e54:	e0bfff17 	ldw	r2,-4(fp)
    2e58:	1885883a 	add	r2,r3,r2
    2e5c:	d0a00c15 	stw	r2,-32720(gp)
    2e60:	e0bffb17 	ldw	r2,-20(fp)
    2e64:	e0bffc15 	stw	r2,-16(fp)
    2e68:	e0bffc17 	ldw	r2,-16(fp)
    2e6c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    2e70:	e0bffd17 	ldw	r2,-12(fp)
} 
    2e74:	e037883a 	mov	sp,fp
    2e78:	df000017 	ldw	fp,0(sp)
    2e7c:	dec00104 	addi	sp,sp,4
    2e80:	f800283a 	ret

00002e84 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    2e84:	f811883a 	mov	r8,ra
    2e88:	0000ac80 	call	ac8 <_mcount>
    2e8c:	403f883a 	mov	ra,r8
    2e90:	defffa04 	addi	sp,sp,-24
    2e94:	df000515 	stw	fp,20(sp)
    2e98:	df000504 	addi	fp,sp,20
    2e9c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2ea0:	0005303a 	rdctl	r2,status
    2ea4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2ea8:	e0fffc17 	ldw	r3,-16(fp)
    2eac:	00bfff84 	movi	r2,-2
    2eb0:	1884703a 	and	r2,r3,r2
    2eb4:	1001703a 	wrctl	status,r2
  
  return context;
    2eb8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    2ebc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    2ec0:	e0bfff17 	ldw	r2,-4(fp)
    2ec4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    2ec8:	e0bffd17 	ldw	r2,-12(fp)
    2ecc:	10800017 	ldw	r2,0(r2)
    2ed0:	e0fffd17 	ldw	r3,-12(fp)
    2ed4:	18c00117 	ldw	r3,4(r3)
    2ed8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    2edc:	e0bffd17 	ldw	r2,-12(fp)
    2ee0:	10800117 	ldw	r2,4(r2)
    2ee4:	e0fffd17 	ldw	r3,-12(fp)
    2ee8:	18c00017 	ldw	r3,0(r3)
    2eec:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    2ef0:	e0bffd17 	ldw	r2,-12(fp)
    2ef4:	e0fffd17 	ldw	r3,-12(fp)
    2ef8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    2efc:	e0bffd17 	ldw	r2,-12(fp)
    2f00:	e0fffd17 	ldw	r3,-12(fp)
    2f04:	10c00015 	stw	r3,0(r2)
    2f08:	e0bffb17 	ldw	r2,-20(fp)
    2f0c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2f10:	e0bffe17 	ldw	r2,-8(fp)
    2f14:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    2f18:	0001883a 	nop
    2f1c:	e037883a 	mov	sp,fp
    2f20:	df000017 	ldw	fp,0(sp)
    2f24:	dec00104 	addi	sp,sp,4
    2f28:	f800283a 	ret

00002f2c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    2f2c:	f811883a 	mov	r8,ra
    2f30:	0000ac80 	call	ac8 <_mcount>
    2f34:	403f883a 	mov	ra,r8
    2f38:	defffb04 	addi	sp,sp,-20
    2f3c:	dfc00415 	stw	ra,16(sp)
    2f40:	df000315 	stw	fp,12(sp)
    2f44:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    2f48:	d0a00d17 	ldw	r2,-32716(gp)
    2f4c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    2f50:	d0a7e817 	ldw	r2,-24672(gp)
    2f54:	10800044 	addi	r2,r2,1
    2f58:	d0a7e815 	stw	r2,-24672(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    2f5c:	00002e06 	br	3018 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    2f60:	e0bffd17 	ldw	r2,-12(fp)
    2f64:	10800017 	ldw	r2,0(r2)
    2f68:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    2f6c:	e0bffd17 	ldw	r2,-12(fp)
    2f70:	10800403 	ldbu	r2,16(r2)
    2f74:	10803fcc 	andi	r2,r2,255
    2f78:	10000426 	beq	r2,zero,2f8c <alt_tick+0x60>
    2f7c:	d0a7e817 	ldw	r2,-24672(gp)
    2f80:	1000021e 	bne	r2,zero,2f8c <alt_tick+0x60>
    {
      alarm->rollover = 0;
    2f84:	e0bffd17 	ldw	r2,-12(fp)
    2f88:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    2f8c:	e0bffd17 	ldw	r2,-12(fp)
    2f90:	10800217 	ldw	r2,8(r2)
    2f94:	d0e7e817 	ldw	r3,-24672(gp)
    2f98:	18801d36 	bltu	r3,r2,3010 <alt_tick+0xe4>
    2f9c:	e0bffd17 	ldw	r2,-12(fp)
    2fa0:	10800403 	ldbu	r2,16(r2)
    2fa4:	10803fcc 	andi	r2,r2,255
    2fa8:	1000191e 	bne	r2,zero,3010 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    2fac:	e0bffd17 	ldw	r2,-12(fp)
    2fb0:	10800317 	ldw	r2,12(r2)
    2fb4:	e0fffd17 	ldw	r3,-12(fp)
    2fb8:	18c00517 	ldw	r3,20(r3)
    2fbc:	1809883a 	mov	r4,r3
    2fc0:	103ee83a 	callr	r2
    2fc4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    2fc8:	e0bfff17 	ldw	r2,-4(fp)
    2fcc:	1000031e 	bne	r2,zero,2fdc <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    2fd0:	e13ffd17 	ldw	r4,-12(fp)
    2fd4:	0002e840 	call	2e84 <alt_alarm_stop>
    2fd8:	00000d06 	br	3010 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    2fdc:	e0bffd17 	ldw	r2,-12(fp)
    2fe0:	10c00217 	ldw	r3,8(r2)
    2fe4:	e0bfff17 	ldw	r2,-4(fp)
    2fe8:	1887883a 	add	r3,r3,r2
    2fec:	e0bffd17 	ldw	r2,-12(fp)
    2ff0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    2ff4:	e0bffd17 	ldw	r2,-12(fp)
    2ff8:	10c00217 	ldw	r3,8(r2)
    2ffc:	d0a7e817 	ldw	r2,-24672(gp)
    3000:	1880032e 	bgeu	r3,r2,3010 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    3004:	e0bffd17 	ldw	r2,-12(fp)
    3008:	00c00044 	movi	r3,1
    300c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    3010:	e0bffe17 	ldw	r2,-8(fp)
    3014:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    3018:	e0fffd17 	ldw	r3,-12(fp)
    301c:	d0a00d04 	addi	r2,gp,-32716
    3020:	18bfcf1e 	bne	r3,r2,2f60 <__alt_data_end+0xfc002f60>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    3024:	0001883a 	nop
}
    3028:	0001883a 	nop
    302c:	e037883a 	mov	sp,fp
    3030:	dfc00117 	ldw	ra,4(sp)
    3034:	df000017 	ldw	fp,0(sp)
    3038:	dec00204 	addi	sp,sp,8
    303c:	f800283a 	ret

00003040 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    3040:	f811883a 	mov	r8,ra
    3044:	0000ac80 	call	ac8 <_mcount>
    3048:	403f883a 	mov	ra,r8
    304c:	deffff04 	addi	sp,sp,-4
    3050:	df000015 	stw	fp,0(sp)
    3054:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    3058:	000170fa 	wrctl	ienable,zero
}
    305c:	0001883a 	nop
    3060:	e037883a 	mov	sp,fp
    3064:	df000017 	ldw	fp,0(sp)
    3068:	dec00104 	addi	sp,sp,4
    306c:	f800283a 	ret

00003070 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    3070:	f811883a 	mov	r8,ra
    3074:	0000ac80 	call	ac8 <_mcount>
    3078:	403f883a 	mov	ra,r8
    307c:	defffa04 	addi	sp,sp,-24
    3080:	dfc00515 	stw	ra,20(sp)
    3084:	df000415 	stw	fp,16(sp)
    3088:	df000404 	addi	fp,sp,16
    308c:	e13ffe15 	stw	r4,-8(fp)
    3090:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    3094:	e0bfff17 	ldw	r2,-4(fp)
    3098:	10800017 	ldw	r2,0(r2)
    309c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    30a0:	e13ffe17 	ldw	r4,-8(fp)
    30a4:	00039880 	call	3988 <strlen>
    30a8:	10800044 	addi	r2,r2,1
    30ac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    30b0:	00000d06 	br	30e8 <alt_find_dev+0x78>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    30b4:	e0bffc17 	ldw	r2,-16(fp)
    30b8:	10800217 	ldw	r2,8(r2)
    30bc:	e0fffd17 	ldw	r3,-12(fp)
    30c0:	180d883a 	mov	r6,r3
    30c4:	e17ffe17 	ldw	r5,-8(fp)
    30c8:	1009883a 	mov	r4,r2
    30cc:	00034780 	call	3478 <memcmp>
    30d0:	1000021e 	bne	r2,zero,30dc <alt_find_dev+0x6c>
    {
      /* match found */

      return next;
    30d4:	e0bffc17 	ldw	r2,-16(fp)
    30d8:	00000706 	br	30f8 <alt_find_dev+0x88>
    }
    next = (alt_dev*) next->llist.next;
    30dc:	e0bffc17 	ldw	r2,-16(fp)
    30e0:	10800017 	ldw	r2,0(r2)
    30e4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    30e8:	e0fffc17 	ldw	r3,-16(fp)
    30ec:	e0bfff17 	ldw	r2,-4(fp)
    30f0:	18bff01e 	bne	r3,r2,30b4 <__alt_data_end+0xfc0030b4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    30f4:	0005883a 	mov	r2,zero
}
    30f8:	e037883a 	mov	sp,fp
    30fc:	dfc00117 	ldw	ra,4(sp)
    3100:	df000017 	ldw	fp,0(sp)
    3104:	dec00204 	addi	sp,sp,8
    3108:	f800283a 	ret

0000310c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    310c:	f811883a 	mov	r8,ra
    3110:	0000ac80 	call	ac8 <_mcount>
    3114:	403f883a 	mov	ra,r8
    3118:	defffb04 	addi	sp,sp,-20
    311c:	dfc00415 	stw	ra,16(sp)
    3120:	df000315 	stw	fp,12(sp)
    3124:	df000304 	addi	fp,sp,12
    3128:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    312c:	d0a00217 	ldw	r2,-32760(gp)
    3130:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    3134:	00003106 	br	31fc <alt_find_file+0xf0>
  {
    len = strlen(next->name);
    3138:	e0bffd17 	ldw	r2,-12(fp)
    313c:	10800217 	ldw	r2,8(r2)
    3140:	1009883a 	mov	r4,r2
    3144:	00039880 	call	3988 <strlen>
    3148:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    314c:	e0bffd17 	ldw	r2,-12(fp)
    3150:	10c00217 	ldw	r3,8(r2)
    3154:	e0bffe17 	ldw	r2,-8(fp)
    3158:	10bfffc4 	addi	r2,r2,-1
    315c:	1885883a 	add	r2,r3,r2
    3160:	10800003 	ldbu	r2,0(r2)
    3164:	10803fcc 	andi	r2,r2,255
    3168:	1080201c 	xori	r2,r2,128
    316c:	10bfe004 	addi	r2,r2,-128
    3170:	10800bd8 	cmpnei	r2,r2,47
    3174:	1000031e 	bne	r2,zero,3184 <alt_find_file+0x78>
    {
      len -= 1;
    3178:	e0bffe17 	ldw	r2,-8(fp)
    317c:	10bfffc4 	addi	r2,r2,-1
    3180:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    3184:	e0bffe17 	ldw	r2,-8(fp)
    3188:	e0ffff17 	ldw	r3,-4(fp)
    318c:	1885883a 	add	r2,r3,r2
    3190:	10800003 	ldbu	r2,0(r2)
    3194:	10803fcc 	andi	r2,r2,255
    3198:	1080201c 	xori	r2,r2,128
    319c:	10bfe004 	addi	r2,r2,-128
    31a0:	10800be0 	cmpeqi	r2,r2,47
    31a4:	1000081e 	bne	r2,zero,31c8 <alt_find_file+0xbc>
    31a8:	e0bffe17 	ldw	r2,-8(fp)
    31ac:	e0ffff17 	ldw	r3,-4(fp)
    31b0:	1885883a 	add	r2,r3,r2
    31b4:	10800003 	ldbu	r2,0(r2)
    31b8:	10803fcc 	andi	r2,r2,255
    31bc:	1080201c 	xori	r2,r2,128
    31c0:	10bfe004 	addi	r2,r2,-128
    31c4:	10000a1e 	bne	r2,zero,31f0 <alt_find_file+0xe4>
        !memcmp (next->name, name, len))
    31c8:	e0bffd17 	ldw	r2,-12(fp)
    31cc:	10800217 	ldw	r2,8(r2)
    31d0:	e0fffe17 	ldw	r3,-8(fp)
    31d4:	180d883a 	mov	r6,r3
    31d8:	e17fff17 	ldw	r5,-4(fp)
    31dc:	1009883a 	mov	r4,r2
    31e0:	00034780 	call	3478 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    31e4:	1000021e 	bne	r2,zero,31f0 <alt_find_file+0xe4>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    31e8:	e0bffd17 	ldw	r2,-12(fp)
    31ec:	00000706 	br	320c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    31f0:	e0bffd17 	ldw	r2,-12(fp)
    31f4:	10800017 	ldw	r2,0(r2)
    31f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    31fc:	e0fffd17 	ldw	r3,-12(fp)
    3200:	d0a00204 	addi	r2,gp,-32760
    3204:	18bfcc1e 	bne	r3,r2,3138 <__alt_data_end+0xfc003138>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    3208:	0005883a 	mov	r2,zero
}
    320c:	e037883a 	mov	sp,fp
    3210:	dfc00117 	ldw	ra,4(sp)
    3214:	df000017 	ldw	fp,0(sp)
    3218:	dec00204 	addi	sp,sp,8
    321c:	f800283a 	ret

00003220 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    3220:	f811883a 	mov	r8,ra
    3224:	0000ac80 	call	ac8 <_mcount>
    3228:	403f883a 	mov	ra,r8
    322c:	defffc04 	addi	sp,sp,-16
    3230:	df000315 	stw	fp,12(sp)
    3234:	df000304 	addi	fp,sp,12
    3238:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    323c:	00bffa04 	movi	r2,-24
    3240:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    3244:	e03ffd15 	stw	zero,-12(fp)
    3248:	00001906 	br	32b0 <alt_get_fd+0x90>
  {
    if (!alt_fd_list[i].dev)
    324c:	00800074 	movhi	r2,1
    3250:	1089ba04 	addi	r2,r2,9960
    3254:	e0fffd17 	ldw	r3,-12(fp)
    3258:	18c00324 	muli	r3,r3,12
    325c:	10c5883a 	add	r2,r2,r3
    3260:	10800017 	ldw	r2,0(r2)
    3264:	10000f1e 	bne	r2,zero,32a4 <alt_get_fd+0x84>
    {
      alt_fd_list[i].dev = dev;
    3268:	00800074 	movhi	r2,1
    326c:	1089ba04 	addi	r2,r2,9960
    3270:	e0fffd17 	ldw	r3,-12(fp)
    3274:	18c00324 	muli	r3,r3,12
    3278:	10c5883a 	add	r2,r2,r3
    327c:	e0ffff17 	ldw	r3,-4(fp)
    3280:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    3284:	d0e00617 	ldw	r3,-32744(gp)
    3288:	e0bffd17 	ldw	r2,-12(fp)
    328c:	1880020e 	bge	r3,r2,3298 <alt_get_fd+0x78>
      {
        alt_max_fd = i;
    3290:	e0bffd17 	ldw	r2,-12(fp)
    3294:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
    3298:	e0bffd17 	ldw	r2,-12(fp)
    329c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    32a0:	00000606 	br	32bc <alt_get_fd+0x9c>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    32a4:	e0bffd17 	ldw	r2,-12(fp)
    32a8:	10800044 	addi	r2,r2,1
    32ac:	e0bffd15 	stw	r2,-12(fp)
    32b0:	e0bffd17 	ldw	r2,-12(fp)
    32b4:	10800810 	cmplti	r2,r2,32
    32b8:	103fe41e 	bne	r2,zero,324c <__alt_data_end+0xfc00324c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    32bc:	e0bffe17 	ldw	r2,-8(fp)
}
    32c0:	e037883a 	mov	sp,fp
    32c4:	df000017 	ldw	fp,0(sp)
    32c8:	dec00104 	addi	sp,sp,4
    32cc:	f800283a 	ret

000032d0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    32d0:	f811883a 	mov	r8,ra
    32d4:	0000ac80 	call	ac8 <_mcount>
    32d8:	403f883a 	mov	ra,r8
    32dc:	defffb04 	addi	sp,sp,-20
    32e0:	df000415 	stw	fp,16(sp)
    32e4:	df000404 	addi	fp,sp,16
    32e8:	e13ffe15 	stw	r4,-8(fp)
    32ec:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    32f0:	e0bfff17 	ldw	r2,-4(fp)
    32f4:	10840070 	cmpltui	r2,r2,4097
    32f8:	1000021e 	bne	r2,zero,3304 <alt_icache_flush+0x34>
  {
    len = NIOS2_ICACHE_SIZE;
    32fc:	00840004 	movi	r2,4096
    3300:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    3304:	e0fffe17 	ldw	r3,-8(fp)
    3308:	e0bfff17 	ldw	r2,-4(fp)
    330c:	1885883a 	add	r2,r3,r2
    3310:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    3314:	e0bffe17 	ldw	r2,-8(fp)
    3318:	e0bffc15 	stw	r2,-16(fp)
    331c:	00000506 	br	3334 <alt_icache_flush+0x64>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    3320:	e0bffc17 	ldw	r2,-16(fp)
    3324:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    3328:	e0bffc17 	ldw	r2,-16(fp)
    332c:	10800804 	addi	r2,r2,32
    3330:	e0bffc15 	stw	r2,-16(fp)
    3334:	e0fffc17 	ldw	r3,-16(fp)
    3338:	e0bffd17 	ldw	r2,-12(fp)
    333c:	18bff836 	bltu	r3,r2,3320 <__alt_data_end+0xfc003320>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    3340:	e0bffe17 	ldw	r2,-8(fp)
    3344:	108007cc 	andi	r2,r2,31
    3348:	10000226 	beq	r2,zero,3354 <alt_icache_flush+0x84>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    334c:	e0bffc17 	ldw	r2,-16(fp)
    3350:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    3354:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    3358:	0001883a 	nop
    335c:	e037883a 	mov	sp,fp
    3360:	df000017 	ldw	fp,0(sp)
    3364:	dec00104 	addi	sp,sp,4
    3368:	f800283a 	ret

0000336c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    336c:	f811883a 	mov	r8,ra
    3370:	0000ac80 	call	ac8 <_mcount>
    3374:	403f883a 	mov	ra,r8
    3378:	defffe04 	addi	sp,sp,-8
    337c:	df000115 	stw	fp,4(sp)
    3380:	df000104 	addi	fp,sp,4
    3384:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    3388:	e0bfff17 	ldw	r2,-4(fp)
    338c:	10bffe84 	addi	r2,r2,-6
    3390:	10c00428 	cmpgeui	r3,r2,16
    3394:	18001a1e 	bne	r3,zero,3400 <alt_exception_cause_generated_bad_addr+0x94>
    3398:	100690ba 	slli	r3,r2,2
    339c:	00800034 	movhi	r2,0
    33a0:	108cec04 	addi	r2,r2,13232
    33a4:	1885883a 	add	r2,r3,r2
    33a8:	10800017 	ldw	r2,0(r2)
    33ac:	1000683a 	jmp	r2
    33b0:	000033f0 	cmpltui	zero,zero,207
    33b4:	000033f0 	cmpltui	zero,zero,207
    33b8:	00003400 	call	340 <main+0x98>
    33bc:	00003400 	call	340 <main+0x98>
    33c0:	00003400 	call	340 <main+0x98>
    33c4:	000033f0 	cmpltui	zero,zero,207
    33c8:	000033f8 	rdprs	zero,zero,207
    33cc:	00003400 	call	340 <main+0x98>
    33d0:	000033f0 	cmpltui	zero,zero,207
    33d4:	000033f0 	cmpltui	zero,zero,207
    33d8:	00003400 	call	340 <main+0x98>
    33dc:	000033f0 	cmpltui	zero,zero,207
    33e0:	000033f8 	rdprs	zero,zero,207
    33e4:	00003400 	call	340 <main+0x98>
    33e8:	00003400 	call	340 <main+0x98>
    33ec:	000033f0 	cmpltui	zero,zero,207
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    33f0:	00800044 	movi	r2,1
    33f4:	00000306 	br	3404 <alt_exception_cause_generated_bad_addr+0x98>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    33f8:	0005883a 	mov	r2,zero
    33fc:	00000106 	br	3404 <alt_exception_cause_generated_bad_addr+0x98>

  default:
    return 0;
    3400:	0005883a 	mov	r2,zero
  }
}
    3404:	e037883a 	mov	sp,fp
    3408:	df000017 	ldw	fp,0(sp)
    340c:	dec00104 	addi	sp,sp,4
    3410:	f800283a 	ret

00003414 <atexit>:
    3414:	f811883a 	mov	r8,ra
    3418:	0000ac80 	call	ac8 <_mcount>
    341c:	403f883a 	mov	ra,r8
    3420:	000f883a 	mov	r7,zero
    3424:	200b883a 	mov	r5,r4
    3428:	000d883a 	mov	r6,zero
    342c:	0009883a 	mov	r4,zero
    3430:	0005ff01 	jmpi	5ff0 <__register_exitproc>

00003434 <exit>:
    3434:	f811883a 	mov	r8,ra
    3438:	0000ac80 	call	ac8 <_mcount>
    343c:	403f883a 	mov	ra,r8
    3440:	defffe04 	addi	sp,sp,-8
    3444:	dfc00115 	stw	ra,4(sp)
    3448:	dc000015 	stw	r16,0(sp)
    344c:	000b883a 	mov	r5,zero
    3450:	2021883a 	mov	r16,r4
    3454:	00061140 	call	6114 <__call_exitprocs>
    3458:	00800074 	movhi	r2,1
    345c:	108c5b04 	addi	r2,r2,12652
    3460:	11000017 	ldw	r4,0(r2)
    3464:	20800f17 	ldw	r2,60(r4)
    3468:	10000126 	beq	r2,zero,3470 <exit+0x3c>
    346c:	103ee83a 	callr	r2
    3470:	8009883a 	mov	r4,r16
    3474:	00107180 	call	10718 <_exit>

00003478 <memcmp>:
    3478:	f811883a 	mov	r8,ra
    347c:	0000ac80 	call	ac8 <_mcount>
    3480:	403f883a 	mov	ra,r8
    3484:	01c000c4 	movi	r7,3
    3488:	3980192e 	bgeu	r7,r6,34f0 <memcmp+0x78>
    348c:	2144b03a 	or	r2,r4,r5
    3490:	11c4703a 	and	r2,r2,r7
    3494:	10000f26 	beq	r2,zero,34d4 <memcmp+0x5c>
    3498:	20800003 	ldbu	r2,0(r4)
    349c:	28c00003 	ldbu	r3,0(r5)
    34a0:	10c0151e 	bne	r2,r3,34f8 <memcmp+0x80>
    34a4:	31bfff84 	addi	r6,r6,-2
    34a8:	01ffffc4 	movi	r7,-1
    34ac:	00000406 	br	34c0 <memcmp+0x48>
    34b0:	20800003 	ldbu	r2,0(r4)
    34b4:	28c00003 	ldbu	r3,0(r5)
    34b8:	31bfffc4 	addi	r6,r6,-1
    34bc:	10c00e1e 	bne	r2,r3,34f8 <memcmp+0x80>
    34c0:	21000044 	addi	r4,r4,1
    34c4:	29400044 	addi	r5,r5,1
    34c8:	31fff91e 	bne	r6,r7,34b0 <__alt_data_end+0xfc0034b0>
    34cc:	0005883a 	mov	r2,zero
    34d0:	f800283a 	ret
    34d4:	20c00017 	ldw	r3,0(r4)
    34d8:	28800017 	ldw	r2,0(r5)
    34dc:	18bfee1e 	bne	r3,r2,3498 <__alt_data_end+0xfc003498>
    34e0:	31bfff04 	addi	r6,r6,-4
    34e4:	21000104 	addi	r4,r4,4
    34e8:	29400104 	addi	r5,r5,4
    34ec:	39bff936 	bltu	r7,r6,34d4 <__alt_data_end+0xfc0034d4>
    34f0:	303fe91e 	bne	r6,zero,3498 <__alt_data_end+0xfc003498>
    34f4:	003ff506 	br	34cc <__alt_data_end+0xfc0034cc>
    34f8:	10c5c83a 	sub	r2,r2,r3
    34fc:	f800283a 	ret

00003500 <memcpy>:
    3500:	f811883a 	mov	r8,ra
    3504:	0000ac80 	call	ac8 <_mcount>
    3508:	403f883a 	mov	ra,r8
    350c:	defffd04 	addi	sp,sp,-12
    3510:	dfc00215 	stw	ra,8(sp)
    3514:	dc400115 	stw	r17,4(sp)
    3518:	dc000015 	stw	r16,0(sp)
    351c:	00c003c4 	movi	r3,15
    3520:	2005883a 	mov	r2,r4
    3524:	1980452e 	bgeu	r3,r6,363c <memcpy+0x13c>
    3528:	2906b03a 	or	r3,r5,r4
    352c:	18c000cc 	andi	r3,r3,3
    3530:	1800441e 	bne	r3,zero,3644 <memcpy+0x144>
    3534:	347ffc04 	addi	r17,r6,-16
    3538:	8822d13a 	srli	r17,r17,4
    353c:	28c00104 	addi	r3,r5,4
    3540:	23400104 	addi	r13,r4,4
    3544:	8820913a 	slli	r16,r17,4
    3548:	2b000204 	addi	r12,r5,8
    354c:	22c00204 	addi	r11,r4,8
    3550:	84000504 	addi	r16,r16,20
    3554:	2a800304 	addi	r10,r5,12
    3558:	22400304 	addi	r9,r4,12
    355c:	2c21883a 	add	r16,r5,r16
    3560:	2811883a 	mov	r8,r5
    3564:	200f883a 	mov	r7,r4
    3568:	41000017 	ldw	r4,0(r8)
    356c:	1fc00017 	ldw	ra,0(r3)
    3570:	63c00017 	ldw	r15,0(r12)
    3574:	39000015 	stw	r4,0(r7)
    3578:	53800017 	ldw	r14,0(r10)
    357c:	6fc00015 	stw	ra,0(r13)
    3580:	5bc00015 	stw	r15,0(r11)
    3584:	4b800015 	stw	r14,0(r9)
    3588:	18c00404 	addi	r3,r3,16
    358c:	39c00404 	addi	r7,r7,16
    3590:	42000404 	addi	r8,r8,16
    3594:	6b400404 	addi	r13,r13,16
    3598:	63000404 	addi	r12,r12,16
    359c:	5ac00404 	addi	r11,r11,16
    35a0:	52800404 	addi	r10,r10,16
    35a4:	4a400404 	addi	r9,r9,16
    35a8:	1c3fef1e 	bne	r3,r16,3568 <__alt_data_end+0xfc003568>
    35ac:	89c00044 	addi	r7,r17,1
    35b0:	380e913a 	slli	r7,r7,4
    35b4:	310003cc 	andi	r4,r6,15
    35b8:	02c000c4 	movi	r11,3
    35bc:	11c7883a 	add	r3,r2,r7
    35c0:	29cb883a 	add	r5,r5,r7
    35c4:	5900212e 	bgeu	r11,r4,364c <memcpy+0x14c>
    35c8:	1813883a 	mov	r9,r3
    35cc:	2811883a 	mov	r8,r5
    35d0:	200f883a 	mov	r7,r4
    35d4:	42800017 	ldw	r10,0(r8)
    35d8:	4a400104 	addi	r9,r9,4
    35dc:	39ffff04 	addi	r7,r7,-4
    35e0:	4abfff15 	stw	r10,-4(r9)
    35e4:	42000104 	addi	r8,r8,4
    35e8:	59fffa36 	bltu	r11,r7,35d4 <__alt_data_end+0xfc0035d4>
    35ec:	213fff04 	addi	r4,r4,-4
    35f0:	2008d0ba 	srli	r4,r4,2
    35f4:	318000cc 	andi	r6,r6,3
    35f8:	21000044 	addi	r4,r4,1
    35fc:	2109883a 	add	r4,r4,r4
    3600:	2109883a 	add	r4,r4,r4
    3604:	1907883a 	add	r3,r3,r4
    3608:	290b883a 	add	r5,r5,r4
    360c:	30000626 	beq	r6,zero,3628 <memcpy+0x128>
    3610:	198d883a 	add	r6,r3,r6
    3614:	29c00003 	ldbu	r7,0(r5)
    3618:	18c00044 	addi	r3,r3,1
    361c:	29400044 	addi	r5,r5,1
    3620:	19ffffc5 	stb	r7,-1(r3)
    3624:	19bffb1e 	bne	r3,r6,3614 <__alt_data_end+0xfc003614>
    3628:	dfc00217 	ldw	ra,8(sp)
    362c:	dc400117 	ldw	r17,4(sp)
    3630:	dc000017 	ldw	r16,0(sp)
    3634:	dec00304 	addi	sp,sp,12
    3638:	f800283a 	ret
    363c:	2007883a 	mov	r3,r4
    3640:	003ff206 	br	360c <__alt_data_end+0xfc00360c>
    3644:	2007883a 	mov	r3,r4
    3648:	003ff106 	br	3610 <__alt_data_end+0xfc003610>
    364c:	200d883a 	mov	r6,r4
    3650:	003fee06 	br	360c <__alt_data_end+0xfc00360c>

00003654 <memset>:
    3654:	f811883a 	mov	r8,ra
    3658:	0000ac80 	call	ac8 <_mcount>
    365c:	403f883a 	mov	ra,r8
    3660:	20c000cc 	andi	r3,r4,3
    3664:	2005883a 	mov	r2,r4
    3668:	18004326 	beq	r3,zero,3778 <memset+0x124>
    366c:	31ffffc4 	addi	r7,r6,-1
    3670:	30004026 	beq	r6,zero,3774 <memset+0x120>
    3674:	2813883a 	mov	r9,r5
    3678:	200d883a 	mov	r6,r4
    367c:	2007883a 	mov	r3,r4
    3680:	00000406 	br	3694 <memset+0x40>
    3684:	3a3fffc4 	addi	r8,r7,-1
    3688:	31800044 	addi	r6,r6,1
    368c:	38003926 	beq	r7,zero,3774 <memset+0x120>
    3690:	400f883a 	mov	r7,r8
    3694:	18c00044 	addi	r3,r3,1
    3698:	32400005 	stb	r9,0(r6)
    369c:	1a0000cc 	andi	r8,r3,3
    36a0:	403ff81e 	bne	r8,zero,3684 <__alt_data_end+0xfc003684>
    36a4:	010000c4 	movi	r4,3
    36a8:	21c02d2e 	bgeu	r4,r7,3760 <memset+0x10c>
    36ac:	29003fcc 	andi	r4,r5,255
    36b0:	200c923a 	slli	r6,r4,8
    36b4:	3108b03a 	or	r4,r6,r4
    36b8:	200c943a 	slli	r6,r4,16
    36bc:	218cb03a 	or	r6,r4,r6
    36c0:	010003c4 	movi	r4,15
    36c4:	21c0182e 	bgeu	r4,r7,3728 <memset+0xd4>
    36c8:	3b3ffc04 	addi	r12,r7,-16
    36cc:	6018d13a 	srli	r12,r12,4
    36d0:	1a000104 	addi	r8,r3,4
    36d4:	1ac00204 	addi	r11,r3,8
    36d8:	6008913a 	slli	r4,r12,4
    36dc:	1a800304 	addi	r10,r3,12
    36e0:	1813883a 	mov	r9,r3
    36e4:	21000504 	addi	r4,r4,20
    36e8:	1909883a 	add	r4,r3,r4
    36ec:	49800015 	stw	r6,0(r9)
    36f0:	41800015 	stw	r6,0(r8)
    36f4:	59800015 	stw	r6,0(r11)
    36f8:	51800015 	stw	r6,0(r10)
    36fc:	42000404 	addi	r8,r8,16
    3700:	4a400404 	addi	r9,r9,16
    3704:	5ac00404 	addi	r11,r11,16
    3708:	52800404 	addi	r10,r10,16
    370c:	413ff71e 	bne	r8,r4,36ec <__alt_data_end+0xfc0036ec>
    3710:	63000044 	addi	r12,r12,1
    3714:	6018913a 	slli	r12,r12,4
    3718:	39c003cc 	andi	r7,r7,15
    371c:	010000c4 	movi	r4,3
    3720:	1b07883a 	add	r3,r3,r12
    3724:	21c00e2e 	bgeu	r4,r7,3760 <memset+0x10c>
    3728:	1813883a 	mov	r9,r3
    372c:	3811883a 	mov	r8,r7
    3730:	010000c4 	movi	r4,3
    3734:	49800015 	stw	r6,0(r9)
    3738:	423fff04 	addi	r8,r8,-4
    373c:	4a400104 	addi	r9,r9,4
    3740:	223ffc36 	bltu	r4,r8,3734 <__alt_data_end+0xfc003734>
    3744:	393fff04 	addi	r4,r7,-4
    3748:	2008d0ba 	srli	r4,r4,2
    374c:	39c000cc 	andi	r7,r7,3
    3750:	21000044 	addi	r4,r4,1
    3754:	2109883a 	add	r4,r4,r4
    3758:	2109883a 	add	r4,r4,r4
    375c:	1907883a 	add	r3,r3,r4
    3760:	38000426 	beq	r7,zero,3774 <memset+0x120>
    3764:	19cf883a 	add	r7,r3,r7
    3768:	19400005 	stb	r5,0(r3)
    376c:	18c00044 	addi	r3,r3,1
    3770:	38fffd1e 	bne	r7,r3,3768 <__alt_data_end+0xfc003768>
    3774:	f800283a 	ret
    3778:	2007883a 	mov	r3,r4
    377c:	300f883a 	mov	r7,r6
    3780:	003fc806 	br	36a4 <__alt_data_end+0xfc0036a4>

00003784 <_printf_r>:
    3784:	f811883a 	mov	r8,ra
    3788:	0000ac80 	call	ac8 <_mcount>
    378c:	403f883a 	mov	ra,r8
    3790:	defffd04 	addi	sp,sp,-12
    3794:	dfc00015 	stw	ra,0(sp)
    3798:	2805883a 	mov	r2,r5
    379c:	d9800115 	stw	r6,4(sp)
    37a0:	d9c00215 	stw	r7,8(sp)
    37a4:	21400217 	ldw	r5,8(r4)
    37a8:	d9c00104 	addi	r7,sp,4
    37ac:	100d883a 	mov	r6,r2
    37b0:	0003a2c0 	call	3a2c <___vfprintf_internal_r>
    37b4:	dfc00017 	ldw	ra,0(sp)
    37b8:	dec00304 	addi	sp,sp,12
    37bc:	f800283a 	ret

000037c0 <printf>:
    37c0:	f811883a 	mov	r8,ra
    37c4:	0000ac80 	call	ac8 <_mcount>
    37c8:	403f883a 	mov	ra,r8
    37cc:	defffc04 	addi	sp,sp,-16
    37d0:	dfc00015 	stw	ra,0(sp)
    37d4:	d9400115 	stw	r5,4(sp)
    37d8:	d9800215 	stw	r6,8(sp)
    37dc:	d9c00315 	stw	r7,12(sp)
    37e0:	00800074 	movhi	r2,1
    37e4:	108c5c04 	addi	r2,r2,12656
    37e8:	10800017 	ldw	r2,0(r2)
    37ec:	200b883a 	mov	r5,r4
    37f0:	d9800104 	addi	r6,sp,4
    37f4:	11000217 	ldw	r4,8(r2)
    37f8:	0005c300 	call	5c30 <__vfprintf_internal>
    37fc:	dfc00017 	ldw	ra,0(sp)
    3800:	dec00404 	addi	sp,sp,16
    3804:	f800283a 	ret

00003808 <_putc_r>:
    3808:	f811883a 	mov	r8,ra
    380c:	0000ac80 	call	ac8 <_mcount>
    3810:	403f883a 	mov	ra,r8
    3814:	defffc04 	addi	sp,sp,-16
    3818:	dfc00315 	stw	ra,12(sp)
    381c:	dc000215 	stw	r16,8(sp)
    3820:	2021883a 	mov	r16,r4
    3824:	20000226 	beq	r4,zero,3830 <_putc_r+0x28>
    3828:	20800e17 	ldw	r2,56(r4)
    382c:	10001b26 	beq	r2,zero,389c <_putc_r+0x94>
    3830:	30800217 	ldw	r2,8(r6)
    3834:	10bfffc4 	addi	r2,r2,-1
    3838:	30800215 	stw	r2,8(r6)
    383c:	10000a16 	blt	r2,zero,3868 <_putc_r+0x60>
    3840:	30800017 	ldw	r2,0(r6)
    3844:	11400005 	stb	r5,0(r2)
    3848:	30800017 	ldw	r2,0(r6)
    384c:	10c00044 	addi	r3,r2,1
    3850:	30c00015 	stw	r3,0(r6)
    3854:	10800003 	ldbu	r2,0(r2)
    3858:	dfc00317 	ldw	ra,12(sp)
    385c:	dc000217 	ldw	r16,8(sp)
    3860:	dec00404 	addi	sp,sp,16
    3864:	f800283a 	ret
    3868:	30c00617 	ldw	r3,24(r6)
    386c:	10c00616 	blt	r2,r3,3888 <_putc_r+0x80>
    3870:	30800017 	ldw	r2,0(r6)
    3874:	00c00284 	movi	r3,10
    3878:	11400005 	stb	r5,0(r2)
    387c:	30800017 	ldw	r2,0(r6)
    3880:	11400003 	ldbu	r5,0(r2)
    3884:	28fff11e 	bne	r5,r3,384c <__alt_data_end+0xfc00384c>
    3888:	8009883a 	mov	r4,r16
    388c:	dfc00317 	ldw	ra,12(sp)
    3890:	dc000217 	ldw	r16,8(sp)
    3894:	dec00404 	addi	sp,sp,16
    3898:	0005d201 	jmpi	5d20 <__swbuf_r>
    389c:	d9400015 	stw	r5,0(sp)
    38a0:	d9800115 	stw	r6,4(sp)
    38a4:	00081b00 	call	81b0 <__sinit>
    38a8:	d9800117 	ldw	r6,4(sp)
    38ac:	d9400017 	ldw	r5,0(sp)
    38b0:	003fdf06 	br	3830 <__alt_data_end+0xfc003830>

000038b4 <putc>:
    38b4:	f811883a 	mov	r8,ra
    38b8:	0000ac80 	call	ac8 <_mcount>
    38bc:	403f883a 	mov	ra,r8
    38c0:	defffc04 	addi	sp,sp,-16
    38c4:	dfc00315 	stw	ra,12(sp)
    38c8:	dc400215 	stw	r17,8(sp)
    38cc:	dc000115 	stw	r16,4(sp)
    38d0:	00800074 	movhi	r2,1
    38d4:	108c5c04 	addi	r2,r2,12656
    38d8:	14000017 	ldw	r16,0(r2)
    38dc:	2023883a 	mov	r17,r4
    38e0:	80000226 	beq	r16,zero,38ec <putc+0x38>
    38e4:	80800e17 	ldw	r2,56(r16)
    38e8:	10001a26 	beq	r2,zero,3954 <putc+0xa0>
    38ec:	28800217 	ldw	r2,8(r5)
    38f0:	10bfffc4 	addi	r2,r2,-1
    38f4:	28800215 	stw	r2,8(r5)
    38f8:	10000b16 	blt	r2,zero,3928 <putc+0x74>
    38fc:	28800017 	ldw	r2,0(r5)
    3900:	14400005 	stb	r17,0(r2)
    3904:	28800017 	ldw	r2,0(r5)
    3908:	10c00044 	addi	r3,r2,1
    390c:	28c00015 	stw	r3,0(r5)
    3910:	10800003 	ldbu	r2,0(r2)
    3914:	dfc00317 	ldw	ra,12(sp)
    3918:	dc400217 	ldw	r17,8(sp)
    391c:	dc000117 	ldw	r16,4(sp)
    3920:	dec00404 	addi	sp,sp,16
    3924:	f800283a 	ret
    3928:	28c00617 	ldw	r3,24(r5)
    392c:	10c00e16 	blt	r2,r3,3968 <putc+0xb4>
    3930:	28800017 	ldw	r2,0(r5)
    3934:	01000284 	movi	r4,10
    3938:	14400005 	stb	r17,0(r2)
    393c:	28800017 	ldw	r2,0(r5)
    3940:	10c00003 	ldbu	r3,0(r2)
    3944:	193ff01e 	bne	r3,r4,3908 <__alt_data_end+0xfc003908>
    3948:	280d883a 	mov	r6,r5
    394c:	180b883a 	mov	r5,r3
    3950:	00000706 	br	3970 <putc+0xbc>
    3954:	8009883a 	mov	r4,r16
    3958:	d9400015 	stw	r5,0(sp)
    395c:	00081b00 	call	81b0 <__sinit>
    3960:	d9400017 	ldw	r5,0(sp)
    3964:	003fe106 	br	38ec <__alt_data_end+0xfc0038ec>
    3968:	280d883a 	mov	r6,r5
    396c:	880b883a 	mov	r5,r17
    3970:	8009883a 	mov	r4,r16
    3974:	dfc00317 	ldw	ra,12(sp)
    3978:	dc400217 	ldw	r17,8(sp)
    397c:	dc000117 	ldw	r16,4(sp)
    3980:	dec00404 	addi	sp,sp,16
    3984:	0005d201 	jmpi	5d20 <__swbuf_r>

00003988 <strlen>:
    3988:	f811883a 	mov	r8,ra
    398c:	0000ac80 	call	ac8 <_mcount>
    3990:	403f883a 	mov	ra,r8
    3994:	208000cc 	andi	r2,r4,3
    3998:	10002026 	beq	r2,zero,3a1c <strlen+0x94>
    399c:	20800007 	ldb	r2,0(r4)
    39a0:	10002026 	beq	r2,zero,3a24 <strlen+0x9c>
    39a4:	2005883a 	mov	r2,r4
    39a8:	00000206 	br	39b4 <strlen+0x2c>
    39ac:	10c00007 	ldb	r3,0(r2)
    39b0:	18001826 	beq	r3,zero,3a14 <strlen+0x8c>
    39b4:	10800044 	addi	r2,r2,1
    39b8:	10c000cc 	andi	r3,r2,3
    39bc:	183ffb1e 	bne	r3,zero,39ac <__alt_data_end+0xfc0039ac>
    39c0:	10c00017 	ldw	r3,0(r2)
    39c4:	01ffbff4 	movhi	r7,65279
    39c8:	39ffbfc4 	addi	r7,r7,-257
    39cc:	00ca303a 	nor	r5,zero,r3
    39d0:	01a02074 	movhi	r6,32897
    39d4:	19c7883a 	add	r3,r3,r7
    39d8:	31a02004 	addi	r6,r6,-32640
    39dc:	1946703a 	and	r3,r3,r5
    39e0:	1986703a 	and	r3,r3,r6
    39e4:	1800091e 	bne	r3,zero,3a0c <strlen+0x84>
    39e8:	10800104 	addi	r2,r2,4
    39ec:	10c00017 	ldw	r3,0(r2)
    39f0:	19cb883a 	add	r5,r3,r7
    39f4:	00c6303a 	nor	r3,zero,r3
    39f8:	28c6703a 	and	r3,r5,r3
    39fc:	1986703a 	and	r3,r3,r6
    3a00:	183ff926 	beq	r3,zero,39e8 <__alt_data_end+0xfc0039e8>
    3a04:	00000106 	br	3a0c <strlen+0x84>
    3a08:	10800044 	addi	r2,r2,1
    3a0c:	10c00007 	ldb	r3,0(r2)
    3a10:	183ffd1e 	bne	r3,zero,3a08 <__alt_data_end+0xfc003a08>
    3a14:	1105c83a 	sub	r2,r2,r4
    3a18:	f800283a 	ret
    3a1c:	2005883a 	mov	r2,r4
    3a20:	003fe706 	br	39c0 <__alt_data_end+0xfc0039c0>
    3a24:	0005883a 	mov	r2,zero
    3a28:	003ffb06 	br	3a18 <__alt_data_end+0xfc003a18>

00003a2c <___vfprintf_internal_r>:
    3a2c:	f811883a 	mov	r8,ra
    3a30:	0000ac80 	call	ac8 <_mcount>
    3a34:	403f883a 	mov	ra,r8
    3a38:	deffb804 	addi	sp,sp,-288
    3a3c:	dfc04715 	stw	ra,284(sp)
    3a40:	df004615 	stw	fp,280(sp)
    3a44:	ddc04515 	stw	r23,276(sp)
    3a48:	dd804415 	stw	r22,272(sp)
    3a4c:	dd404315 	stw	r21,268(sp)
    3a50:	dd004215 	stw	r20,264(sp)
    3a54:	dcc04115 	stw	r19,260(sp)
    3a58:	dc804015 	stw	r18,256(sp)
    3a5c:	dc403f15 	stw	r17,252(sp)
    3a60:	dc003e15 	stw	r16,248(sp)
    3a64:	d9002c15 	stw	r4,176(sp)
    3a68:	282f883a 	mov	r23,r5
    3a6c:	302b883a 	mov	r21,r6
    3a70:	d9c02d15 	stw	r7,180(sp)
    3a74:	00089280 	call	8928 <_localeconv_r>
    3a78:	10800017 	ldw	r2,0(r2)
    3a7c:	1009883a 	mov	r4,r2
    3a80:	d8803415 	stw	r2,208(sp)
    3a84:	00039880 	call	3988 <strlen>
    3a88:	d8803715 	stw	r2,220(sp)
    3a8c:	d8802c17 	ldw	r2,176(sp)
    3a90:	10000226 	beq	r2,zero,3a9c <___vfprintf_internal_r+0x70>
    3a94:	10800e17 	ldw	r2,56(r2)
    3a98:	1000f926 	beq	r2,zero,3e80 <___vfprintf_internal_r+0x454>
    3a9c:	b880030b 	ldhu	r2,12(r23)
    3aa0:	10c8000c 	andi	r3,r2,8192
    3aa4:	1800061e 	bne	r3,zero,3ac0 <___vfprintf_internal_r+0x94>
    3aa8:	b9001917 	ldw	r4,100(r23)
    3aac:	00f7ffc4 	movi	r3,-8193
    3ab0:	10880014 	ori	r2,r2,8192
    3ab4:	20c6703a 	and	r3,r4,r3
    3ab8:	b880030d 	sth	r2,12(r23)
    3abc:	b8c01915 	stw	r3,100(r23)
    3ac0:	10c0020c 	andi	r3,r2,8
    3ac4:	1800c126 	beq	r3,zero,3dcc <___vfprintf_internal_r+0x3a0>
    3ac8:	b8c00417 	ldw	r3,16(r23)
    3acc:	1800bf26 	beq	r3,zero,3dcc <___vfprintf_internal_r+0x3a0>
    3ad0:	1080068c 	andi	r2,r2,26
    3ad4:	00c00284 	movi	r3,10
    3ad8:	10c0c426 	beq	r2,r3,3dec <___vfprintf_internal_r+0x3c0>
    3adc:	d8c00404 	addi	r3,sp,16
    3ae0:	05000074 	movhi	r20,1
    3ae4:	d9001e04 	addi	r4,sp,120
    3ae8:	a503f784 	addi	r20,r20,4062
    3aec:	d8c01e15 	stw	r3,120(sp)
    3af0:	d8002015 	stw	zero,128(sp)
    3af4:	d8001f15 	stw	zero,124(sp)
    3af8:	d8003315 	stw	zero,204(sp)
    3afc:	d8003615 	stw	zero,216(sp)
    3b00:	d8003815 	stw	zero,224(sp)
    3b04:	1811883a 	mov	r8,r3
    3b08:	d8003915 	stw	zero,228(sp)
    3b0c:	d8003a15 	stw	zero,232(sp)
    3b10:	d8002f15 	stw	zero,188(sp)
    3b14:	d9002815 	stw	r4,160(sp)
    3b18:	a8800007 	ldb	r2,0(r21)
    3b1c:	10027b26 	beq	r2,zero,450c <___vfprintf_internal_r+0xae0>
    3b20:	00c00944 	movi	r3,37
    3b24:	a821883a 	mov	r16,r21
    3b28:	10c0021e 	bne	r2,r3,3b34 <___vfprintf_internal_r+0x108>
    3b2c:	00001406 	br	3b80 <___vfprintf_internal_r+0x154>
    3b30:	10c00326 	beq	r2,r3,3b40 <___vfprintf_internal_r+0x114>
    3b34:	84000044 	addi	r16,r16,1
    3b38:	80800007 	ldb	r2,0(r16)
    3b3c:	103ffc1e 	bne	r2,zero,3b30 <__alt_data_end+0xfc003b30>
    3b40:	8563c83a 	sub	r17,r16,r21
    3b44:	88000e26 	beq	r17,zero,3b80 <___vfprintf_internal_r+0x154>
    3b48:	d8c02017 	ldw	r3,128(sp)
    3b4c:	d8801f17 	ldw	r2,124(sp)
    3b50:	45400015 	stw	r21,0(r8)
    3b54:	1c47883a 	add	r3,r3,r17
    3b58:	10800044 	addi	r2,r2,1
    3b5c:	d8c02015 	stw	r3,128(sp)
    3b60:	44400115 	stw	r17,4(r8)
    3b64:	d8801f15 	stw	r2,124(sp)
    3b68:	00c001c4 	movi	r3,7
    3b6c:	1880a716 	blt	r3,r2,3e0c <___vfprintf_internal_r+0x3e0>
    3b70:	42000204 	addi	r8,r8,8
    3b74:	d9402f17 	ldw	r5,188(sp)
    3b78:	2c4b883a 	add	r5,r5,r17
    3b7c:	d9402f15 	stw	r5,188(sp)
    3b80:	80800007 	ldb	r2,0(r16)
    3b84:	1000a826 	beq	r2,zero,3e28 <___vfprintf_internal_r+0x3fc>
    3b88:	84400047 	ldb	r17,1(r16)
    3b8c:	00bfffc4 	movi	r2,-1
    3b90:	85400044 	addi	r21,r16,1
    3b94:	d8002785 	stb	zero,158(sp)
    3b98:	0007883a 	mov	r3,zero
    3b9c:	000f883a 	mov	r7,zero
    3ba0:	d8802915 	stw	r2,164(sp)
    3ba4:	d8003115 	stw	zero,196(sp)
    3ba8:	0025883a 	mov	r18,zero
    3bac:	01401604 	movi	r5,88
    3bb0:	01800244 	movi	r6,9
    3bb4:	02800a84 	movi	r10,42
    3bb8:	02401b04 	movi	r9,108
    3bbc:	ad400044 	addi	r21,r21,1
    3bc0:	88bff804 	addi	r2,r17,-32
    3bc4:	28830436 	bltu	r5,r2,47d8 <___vfprintf_internal_r+0xdac>
    3bc8:	100490ba 	slli	r2,r2,2
    3bcc:	01000034 	movhi	r4,0
    3bd0:	210ef804 	addi	r4,r4,15328
    3bd4:	1105883a 	add	r2,r2,r4
    3bd8:	10800017 	ldw	r2,0(r2)
    3bdc:	1000683a 	jmp	r2
    3be0:	000046f8 	rdprs	zero,zero,283
    3be4:	000047d8 	cmpnei	zero,zero,287
    3be8:	000047d8 	cmpnei	zero,zero,287
    3bec:	00004718 	cmpnei	zero,zero,284
    3bf0:	000047d8 	cmpnei	zero,zero,287
    3bf4:	000047d8 	cmpnei	zero,zero,287
    3bf8:	000047d8 	cmpnei	zero,zero,287
    3bfc:	000047d8 	cmpnei	zero,zero,287
    3c00:	000047d8 	cmpnei	zero,zero,287
    3c04:	000047d8 	cmpnei	zero,zero,287
    3c08:	00003e8c 	andi	zero,zero,250
    3c0c:	00004634 	movhi	zero,280
    3c10:	000047d8 	cmpnei	zero,zero,287
    3c14:	00003d54 	movui	zero,245
    3c18:	00003eb4 	movhi	zero,250
    3c1c:	000047d8 	cmpnei	zero,zero,287
    3c20:	00003ef4 	movhi	zero,251
    3c24:	00003f00 	call	3f0 <main+0x148>
    3c28:	00003f00 	call	3f0 <main+0x148>
    3c2c:	00003f00 	call	3f0 <main+0x148>
    3c30:	00003f00 	call	3f0 <main+0x148>
    3c34:	00003f00 	call	3f0 <main+0x148>
    3c38:	00003f00 	call	3f0 <main+0x148>
    3c3c:	00003f00 	call	3f0 <main+0x148>
    3c40:	00003f00 	call	3f0 <main+0x148>
    3c44:	00003f00 	call	3f0 <main+0x148>
    3c48:	000047d8 	cmpnei	zero,zero,287
    3c4c:	000047d8 	cmpnei	zero,zero,287
    3c50:	000047d8 	cmpnei	zero,zero,287
    3c54:	000047d8 	cmpnei	zero,zero,287
    3c58:	000047d8 	cmpnei	zero,zero,287
    3c5c:	000047d8 	cmpnei	zero,zero,287
    3c60:	000047d8 	cmpnei	zero,zero,287
    3c64:	000047d8 	cmpnei	zero,zero,287
    3c68:	000047d8 	cmpnei	zero,zero,287
    3c6c:	000047d8 	cmpnei	zero,zero,287
    3c70:	00003f34 	movhi	zero,252
    3c74:	00003ff0 	cmpltui	zero,zero,255
    3c78:	000047d8 	cmpnei	zero,zero,287
    3c7c:	00003ff0 	cmpltui	zero,zero,255
    3c80:	000047d8 	cmpnei	zero,zero,287
    3c84:	000047d8 	cmpnei	zero,zero,287
    3c88:	000047d8 	cmpnei	zero,zero,287
    3c8c:	000047d8 	cmpnei	zero,zero,287
    3c90:	00004090 	cmplti	zero,zero,258
    3c94:	000047d8 	cmpnei	zero,zero,287
    3c98:	000047d8 	cmpnei	zero,zero,287
    3c9c:	0000409c 	xori	zero,zero,258
    3ca0:	000047d8 	cmpnei	zero,zero,287
    3ca4:	000047d8 	cmpnei	zero,zero,287
    3ca8:	000047d8 	cmpnei	zero,zero,287
    3cac:	000047d8 	cmpnei	zero,zero,287
    3cb0:	000047d8 	cmpnei	zero,zero,287
    3cb4:	00004514 	movui	zero,276
    3cb8:	000047d8 	cmpnei	zero,zero,287
    3cbc:	000047d8 	cmpnei	zero,zero,287
    3cc0:	00004574 	movhi	zero,277
    3cc4:	000047d8 	cmpnei	zero,zero,287
    3cc8:	000047d8 	cmpnei	zero,zero,287
    3ccc:	000047d8 	cmpnei	zero,zero,287
    3cd0:	000047d8 	cmpnei	zero,zero,287
    3cd4:	000047d8 	cmpnei	zero,zero,287
    3cd8:	000047d8 	cmpnei	zero,zero,287
    3cdc:	000047d8 	cmpnei	zero,zero,287
    3ce0:	000047d8 	cmpnei	zero,zero,287
    3ce4:	000047d8 	cmpnei	zero,zero,287
    3ce8:	000047d8 	cmpnei	zero,zero,287
    3cec:	00004784 	movi	zero,286
    3cf0:	00004724 	muli	zero,zero,284
    3cf4:	00003ff0 	cmpltui	zero,zero,255
    3cf8:	00003ff0 	cmpltui	zero,zero,255
    3cfc:	00003ff0 	cmpltui	zero,zero,255
    3d00:	00004734 	movhi	zero,284
    3d04:	00004724 	muli	zero,zero,284
    3d08:	000047d8 	cmpnei	zero,zero,287
    3d0c:	000047d8 	cmpnei	zero,zero,287
    3d10:	00004740 	call	474 <write_data+0x40>
    3d14:	000047d8 	cmpnei	zero,zero,287
    3d18:	00004750 	cmplti	zero,zero,285
    3d1c:	00004624 	muli	zero,zero,280
    3d20:	00003d60 	cmpeqi	zero,zero,245
    3d24:	00004644 	movi	zero,281
    3d28:	000047d8 	cmpnei	zero,zero,287
    3d2c:	00004650 	cmplti	zero,zero,281
    3d30:	000047d8 	cmpnei	zero,zero,287
    3d34:	000046ac 	andhi	zero,zero,282
    3d38:	000047d8 	cmpnei	zero,zero,287
    3d3c:	000047d8 	cmpnei	zero,zero,287
    3d40:	000046bc 	xorhi	zero,zero,282
    3d44:	d9003117 	ldw	r4,196(sp)
    3d48:	d8802d15 	stw	r2,180(sp)
    3d4c:	0109c83a 	sub	r4,zero,r4
    3d50:	d9003115 	stw	r4,196(sp)
    3d54:	94800114 	ori	r18,r18,4
    3d58:	ac400007 	ldb	r17,0(r21)
    3d5c:	003f9706 	br	3bbc <__alt_data_end+0xfc003bbc>
    3d60:	00800c04 	movi	r2,48
    3d64:	d9002d17 	ldw	r4,180(sp)
    3d68:	d9402917 	ldw	r5,164(sp)
    3d6c:	d8802705 	stb	r2,156(sp)
    3d70:	00801e04 	movi	r2,120
    3d74:	d8802745 	stb	r2,157(sp)
    3d78:	d8002785 	stb	zero,158(sp)
    3d7c:	20c00104 	addi	r3,r4,4
    3d80:	24c00017 	ldw	r19,0(r4)
    3d84:	002d883a 	mov	r22,zero
    3d88:	90800094 	ori	r2,r18,2
    3d8c:	28029a16 	blt	r5,zero,47f8 <___vfprintf_internal_r+0xdcc>
    3d90:	00bfdfc4 	movi	r2,-129
    3d94:	90a4703a 	and	r18,r18,r2
    3d98:	d8c02d15 	stw	r3,180(sp)
    3d9c:	94800094 	ori	r18,r18,2
    3da0:	9802871e 	bne	r19,zero,47c0 <___vfprintf_internal_r+0xd94>
    3da4:	00800074 	movhi	r2,1
    3da8:	1083f004 	addi	r2,r2,4032
    3dac:	d8803915 	stw	r2,228(sp)
    3db0:	04401e04 	movi	r17,120
    3db4:	d8802917 	ldw	r2,164(sp)
    3db8:	0039883a 	mov	fp,zero
    3dbc:	1001e926 	beq	r2,zero,4564 <___vfprintf_internal_r+0xb38>
    3dc0:	0027883a 	mov	r19,zero
    3dc4:	002d883a 	mov	r22,zero
    3dc8:	00020506 	br	45e0 <___vfprintf_internal_r+0xbb4>
    3dcc:	d9002c17 	ldw	r4,176(sp)
    3dd0:	b80b883a 	mov	r5,r23
    3dd4:	0005e900 	call	5e90 <__swsetup_r>
    3dd8:	1005ac1e 	bne	r2,zero,548c <___vfprintf_internal_r+0x1a60>
    3ddc:	b880030b 	ldhu	r2,12(r23)
    3de0:	00c00284 	movi	r3,10
    3de4:	1080068c 	andi	r2,r2,26
    3de8:	10ff3c1e 	bne	r2,r3,3adc <__alt_data_end+0xfc003adc>
    3dec:	b880038f 	ldh	r2,14(r23)
    3df0:	103f3a16 	blt	r2,zero,3adc <__alt_data_end+0xfc003adc>
    3df4:	d9c02d17 	ldw	r7,180(sp)
    3df8:	d9002c17 	ldw	r4,176(sp)
    3dfc:	a80d883a 	mov	r6,r21
    3e00:	b80b883a 	mov	r5,r23
    3e04:	0005c580 	call	5c58 <__sbprintf>
    3e08:	00001106 	br	3e50 <___vfprintf_internal_r+0x424>
    3e0c:	d9002c17 	ldw	r4,176(sp)
    3e10:	d9801e04 	addi	r6,sp,120
    3e14:	b80b883a 	mov	r5,r23
    3e18:	000a9640 	call	a964 <__sprint_r>
    3e1c:	1000081e 	bne	r2,zero,3e40 <___vfprintf_internal_r+0x414>
    3e20:	da000404 	addi	r8,sp,16
    3e24:	003f5306 	br	3b74 <__alt_data_end+0xfc003b74>
    3e28:	d8802017 	ldw	r2,128(sp)
    3e2c:	10000426 	beq	r2,zero,3e40 <___vfprintf_internal_r+0x414>
    3e30:	d9002c17 	ldw	r4,176(sp)
    3e34:	d9801e04 	addi	r6,sp,120
    3e38:	b80b883a 	mov	r5,r23
    3e3c:	000a9640 	call	a964 <__sprint_r>
    3e40:	b880030b 	ldhu	r2,12(r23)
    3e44:	1080100c 	andi	r2,r2,64
    3e48:	1005901e 	bne	r2,zero,548c <___vfprintf_internal_r+0x1a60>
    3e4c:	d8802f17 	ldw	r2,188(sp)
    3e50:	dfc04717 	ldw	ra,284(sp)
    3e54:	df004617 	ldw	fp,280(sp)
    3e58:	ddc04517 	ldw	r23,276(sp)
    3e5c:	dd804417 	ldw	r22,272(sp)
    3e60:	dd404317 	ldw	r21,268(sp)
    3e64:	dd004217 	ldw	r20,264(sp)
    3e68:	dcc04117 	ldw	r19,260(sp)
    3e6c:	dc804017 	ldw	r18,256(sp)
    3e70:	dc403f17 	ldw	r17,252(sp)
    3e74:	dc003e17 	ldw	r16,248(sp)
    3e78:	dec04804 	addi	sp,sp,288
    3e7c:	f800283a 	ret
    3e80:	d9002c17 	ldw	r4,176(sp)
    3e84:	00081b00 	call	81b0 <__sinit>
    3e88:	003f0406 	br	3a9c <__alt_data_end+0xfc003a9c>
    3e8c:	d8802d17 	ldw	r2,180(sp)
    3e90:	d9002d17 	ldw	r4,180(sp)
    3e94:	10800017 	ldw	r2,0(r2)
    3e98:	d8803115 	stw	r2,196(sp)
    3e9c:	20800104 	addi	r2,r4,4
    3ea0:	d9003117 	ldw	r4,196(sp)
    3ea4:	203fa716 	blt	r4,zero,3d44 <__alt_data_end+0xfc003d44>
    3ea8:	d8802d15 	stw	r2,180(sp)
    3eac:	ac400007 	ldb	r17,0(r21)
    3eb0:	003f4206 	br	3bbc <__alt_data_end+0xfc003bbc>
    3eb4:	ac400007 	ldb	r17,0(r21)
    3eb8:	aac00044 	addi	r11,r21,1
    3ebc:	8a872826 	beq	r17,r10,5b60 <___vfprintf_internal_r+0x2134>
    3ec0:	88bff404 	addi	r2,r17,-48
    3ec4:	0009883a 	mov	r4,zero
    3ec8:	30867d36 	bltu	r6,r2,58c0 <___vfprintf_internal_r+0x1e94>
    3ecc:	5c400007 	ldb	r17,0(r11)
    3ed0:	210002a4 	muli	r4,r4,10
    3ed4:	5d400044 	addi	r21,r11,1
    3ed8:	a817883a 	mov	r11,r21
    3edc:	2089883a 	add	r4,r4,r2
    3ee0:	88bff404 	addi	r2,r17,-48
    3ee4:	30bff92e 	bgeu	r6,r2,3ecc <__alt_data_end+0xfc003ecc>
    3ee8:	2005c916 	blt	r4,zero,5610 <___vfprintf_internal_r+0x1be4>
    3eec:	d9002915 	stw	r4,164(sp)
    3ef0:	003f3306 	br	3bc0 <__alt_data_end+0xfc003bc0>
    3ef4:	94802014 	ori	r18,r18,128
    3ef8:	ac400007 	ldb	r17,0(r21)
    3efc:	003f2f06 	br	3bbc <__alt_data_end+0xfc003bbc>
    3f00:	a809883a 	mov	r4,r21
    3f04:	d8003115 	stw	zero,196(sp)
    3f08:	88bff404 	addi	r2,r17,-48
    3f0c:	0017883a 	mov	r11,zero
    3f10:	24400007 	ldb	r17,0(r4)
    3f14:	5ac002a4 	muli	r11,r11,10
    3f18:	ad400044 	addi	r21,r21,1
    3f1c:	a809883a 	mov	r4,r21
    3f20:	12d7883a 	add	r11,r2,r11
    3f24:	88bff404 	addi	r2,r17,-48
    3f28:	30bff92e 	bgeu	r6,r2,3f10 <__alt_data_end+0xfc003f10>
    3f2c:	dac03115 	stw	r11,196(sp)
    3f30:	003f2306 	br	3bc0 <__alt_data_end+0xfc003bc0>
    3f34:	18c03fcc 	andi	r3,r3,255
    3f38:	18072b1e 	bne	r3,zero,5be8 <___vfprintf_internal_r+0x21bc>
    3f3c:	94800414 	ori	r18,r18,16
    3f40:	9080080c 	andi	r2,r18,32
    3f44:	10037b26 	beq	r2,zero,4d34 <___vfprintf_internal_r+0x1308>
    3f48:	d9402d17 	ldw	r5,180(sp)
    3f4c:	28800117 	ldw	r2,4(r5)
    3f50:	2cc00017 	ldw	r19,0(r5)
    3f54:	29400204 	addi	r5,r5,8
    3f58:	d9402d15 	stw	r5,180(sp)
    3f5c:	102d883a 	mov	r22,r2
    3f60:	10044b16 	blt	r2,zero,5090 <___vfprintf_internal_r+0x1664>
    3f64:	d9402917 	ldw	r5,164(sp)
    3f68:	df002783 	ldbu	fp,158(sp)
    3f6c:	2803bc16 	blt	r5,zero,4e60 <___vfprintf_internal_r+0x1434>
    3f70:	00ffdfc4 	movi	r3,-129
    3f74:	9d84b03a 	or	r2,r19,r22
    3f78:	90e4703a 	and	r18,r18,r3
    3f7c:	10017726 	beq	r2,zero,455c <___vfprintf_internal_r+0xb30>
    3f80:	b0038326 	beq	r22,zero,4d90 <___vfprintf_internal_r+0x1364>
    3f84:	dc402a15 	stw	r17,168(sp)
    3f88:	dc001e04 	addi	r16,sp,120
    3f8c:	b023883a 	mov	r17,r22
    3f90:	402d883a 	mov	r22,r8
    3f94:	9809883a 	mov	r4,r19
    3f98:	880b883a 	mov	r5,r17
    3f9c:	01800284 	movi	r6,10
    3fa0:	000f883a 	mov	r7,zero
    3fa4:	000d9180 	call	d918 <__umoddi3>
    3fa8:	10800c04 	addi	r2,r2,48
    3fac:	843fffc4 	addi	r16,r16,-1
    3fb0:	9809883a 	mov	r4,r19
    3fb4:	880b883a 	mov	r5,r17
    3fb8:	80800005 	stb	r2,0(r16)
    3fbc:	01800284 	movi	r6,10
    3fc0:	000f883a 	mov	r7,zero
    3fc4:	000d3940 	call	d394 <__udivdi3>
    3fc8:	1027883a 	mov	r19,r2
    3fcc:	10c4b03a 	or	r2,r2,r3
    3fd0:	1823883a 	mov	r17,r3
    3fd4:	103fef1e 	bne	r2,zero,3f94 <__alt_data_end+0xfc003f94>
    3fd8:	d8c02817 	ldw	r3,160(sp)
    3fdc:	dc402a17 	ldw	r17,168(sp)
    3fe0:	b011883a 	mov	r8,r22
    3fe4:	1c07c83a 	sub	r3,r3,r16
    3fe8:	d8c02e15 	stw	r3,184(sp)
    3fec:	00005906 	br	4154 <___vfprintf_internal_r+0x728>
    3ff0:	18c03fcc 	andi	r3,r3,255
    3ff4:	1806fa1e 	bne	r3,zero,5be0 <___vfprintf_internal_r+0x21b4>
    3ff8:	9080020c 	andi	r2,r18,8
    3ffc:	10048a26 	beq	r2,zero,5228 <___vfprintf_internal_r+0x17fc>
    4000:	d8c02d17 	ldw	r3,180(sp)
    4004:	d9002d17 	ldw	r4,180(sp)
    4008:	d9402d17 	ldw	r5,180(sp)
    400c:	18c00017 	ldw	r3,0(r3)
    4010:	21000117 	ldw	r4,4(r4)
    4014:	29400204 	addi	r5,r5,8
    4018:	d8c03615 	stw	r3,216(sp)
    401c:	d9003815 	stw	r4,224(sp)
    4020:	d9402d15 	stw	r5,180(sp)
    4024:	d9003617 	ldw	r4,216(sp)
    4028:	d9403817 	ldw	r5,224(sp)
    402c:	da003d15 	stw	r8,244(sp)
    4030:	04000044 	movi	r16,1
    4034:	000a5240 	call	a524 <__fpclassifyd>
    4038:	da003d17 	ldw	r8,244(sp)
    403c:	14041f1e 	bne	r2,r16,50bc <___vfprintf_internal_r+0x1690>
    4040:	d9003617 	ldw	r4,216(sp)
    4044:	d9403817 	ldw	r5,224(sp)
    4048:	000d883a 	mov	r6,zero
    404c:	000f883a 	mov	r7,zero
    4050:	000f35c0 	call	f35c <__ledf2>
    4054:	da003d17 	ldw	r8,244(sp)
    4058:	1005be16 	blt	r2,zero,5754 <___vfprintf_internal_r+0x1d28>
    405c:	df002783 	ldbu	fp,158(sp)
    4060:	008011c4 	movi	r2,71
    4064:	1445330e 	bge	r2,r17,5534 <___vfprintf_internal_r+0x1b08>
    4068:	04000074 	movhi	r16,1
    406c:	8403e804 	addi	r16,r16,4000
    4070:	00c000c4 	movi	r3,3
    4074:	00bfdfc4 	movi	r2,-129
    4078:	d8c02a15 	stw	r3,168(sp)
    407c:	90a4703a 	and	r18,r18,r2
    4080:	d8c02e15 	stw	r3,184(sp)
    4084:	d8002915 	stw	zero,164(sp)
    4088:	d8003215 	stw	zero,200(sp)
    408c:	00003706 	br	416c <___vfprintf_internal_r+0x740>
    4090:	94800214 	ori	r18,r18,8
    4094:	ac400007 	ldb	r17,0(r21)
    4098:	003ec806 	br	3bbc <__alt_data_end+0xfc003bbc>
    409c:	18c03fcc 	andi	r3,r3,255
    40a0:	1806db1e 	bne	r3,zero,5c10 <___vfprintf_internal_r+0x21e4>
    40a4:	94800414 	ori	r18,r18,16
    40a8:	9080080c 	andi	r2,r18,32
    40ac:	1002d826 	beq	r2,zero,4c10 <___vfprintf_internal_r+0x11e4>
    40b0:	d9402d17 	ldw	r5,180(sp)
    40b4:	d8c02917 	ldw	r3,164(sp)
    40b8:	d8002785 	stb	zero,158(sp)
    40bc:	28800204 	addi	r2,r5,8
    40c0:	2cc00017 	ldw	r19,0(r5)
    40c4:	2d800117 	ldw	r22,4(r5)
    40c8:	18048f16 	blt	r3,zero,5308 <___vfprintf_internal_r+0x18dc>
    40cc:	013fdfc4 	movi	r4,-129
    40d0:	9d86b03a 	or	r3,r19,r22
    40d4:	d8802d15 	stw	r2,180(sp)
    40d8:	9124703a 	and	r18,r18,r4
    40dc:	1802d91e 	bne	r3,zero,4c44 <___vfprintf_internal_r+0x1218>
    40e0:	d8c02917 	ldw	r3,164(sp)
    40e4:	0039883a 	mov	fp,zero
    40e8:	1805c326 	beq	r3,zero,57f8 <___vfprintf_internal_r+0x1dcc>
    40ec:	0027883a 	mov	r19,zero
    40f0:	002d883a 	mov	r22,zero
    40f4:	dc001e04 	addi	r16,sp,120
    40f8:	9806d0fa 	srli	r3,r19,3
    40fc:	b008977a 	slli	r4,r22,29
    4100:	b02cd0fa 	srli	r22,r22,3
    4104:	9cc001cc 	andi	r19,r19,7
    4108:	98800c04 	addi	r2,r19,48
    410c:	843fffc4 	addi	r16,r16,-1
    4110:	20e6b03a 	or	r19,r4,r3
    4114:	80800005 	stb	r2,0(r16)
    4118:	9d86b03a 	or	r3,r19,r22
    411c:	183ff61e 	bne	r3,zero,40f8 <__alt_data_end+0xfc0040f8>
    4120:	90c0004c 	andi	r3,r18,1
    4124:	18013b26 	beq	r3,zero,4614 <___vfprintf_internal_r+0xbe8>
    4128:	10803fcc 	andi	r2,r2,255
    412c:	1080201c 	xori	r2,r2,128
    4130:	10bfe004 	addi	r2,r2,-128
    4134:	00c00c04 	movi	r3,48
    4138:	10c13626 	beq	r2,r3,4614 <___vfprintf_internal_r+0xbe8>
    413c:	80ffffc5 	stb	r3,-1(r16)
    4140:	d8c02817 	ldw	r3,160(sp)
    4144:	80bfffc4 	addi	r2,r16,-1
    4148:	1021883a 	mov	r16,r2
    414c:	1887c83a 	sub	r3,r3,r2
    4150:	d8c02e15 	stw	r3,184(sp)
    4154:	d8802e17 	ldw	r2,184(sp)
    4158:	d9002917 	ldw	r4,164(sp)
    415c:	1100010e 	bge	r2,r4,4164 <___vfprintf_internal_r+0x738>
    4160:	2005883a 	mov	r2,r4
    4164:	d8802a15 	stw	r2,168(sp)
    4168:	d8003215 	stw	zero,200(sp)
    416c:	e7003fcc 	andi	fp,fp,255
    4170:	e700201c 	xori	fp,fp,128
    4174:	e73fe004 	addi	fp,fp,-128
    4178:	e0000326 	beq	fp,zero,4188 <___vfprintf_internal_r+0x75c>
    417c:	d8c02a17 	ldw	r3,168(sp)
    4180:	18c00044 	addi	r3,r3,1
    4184:	d8c02a15 	stw	r3,168(sp)
    4188:	90c0008c 	andi	r3,r18,2
    418c:	d8c02b15 	stw	r3,172(sp)
    4190:	18000326 	beq	r3,zero,41a0 <___vfprintf_internal_r+0x774>
    4194:	d8c02a17 	ldw	r3,168(sp)
    4198:	18c00084 	addi	r3,r3,2
    419c:	d8c02a15 	stw	r3,168(sp)
    41a0:	90c0210c 	andi	r3,r18,132
    41a4:	d8c03015 	stw	r3,192(sp)
    41a8:	1801a31e 	bne	r3,zero,4838 <___vfprintf_internal_r+0xe0c>
    41ac:	d9003117 	ldw	r4,196(sp)
    41b0:	d8c02a17 	ldw	r3,168(sp)
    41b4:	20e7c83a 	sub	r19,r4,r3
    41b8:	04c19f0e 	bge	zero,r19,4838 <___vfprintf_internal_r+0xe0c>
    41bc:	02400404 	movi	r9,16
    41c0:	d8c02017 	ldw	r3,128(sp)
    41c4:	d8801f17 	ldw	r2,124(sp)
    41c8:	4cc50d0e 	bge	r9,r19,5600 <___vfprintf_internal_r+0x1bd4>
    41cc:	01400074 	movhi	r5,1
    41d0:	2943fb84 	addi	r5,r5,4078
    41d4:	dc403b15 	stw	r17,236(sp)
    41d8:	d9403515 	stw	r5,212(sp)
    41dc:	9823883a 	mov	r17,r19
    41e0:	482d883a 	mov	r22,r9
    41e4:	9027883a 	mov	r19,r18
    41e8:	070001c4 	movi	fp,7
    41ec:	8025883a 	mov	r18,r16
    41f0:	dc002c17 	ldw	r16,176(sp)
    41f4:	00000306 	br	4204 <___vfprintf_internal_r+0x7d8>
    41f8:	8c7ffc04 	addi	r17,r17,-16
    41fc:	42000204 	addi	r8,r8,8
    4200:	b440130e 	bge	r22,r17,4250 <___vfprintf_internal_r+0x824>
    4204:	01000074 	movhi	r4,1
    4208:	18c00404 	addi	r3,r3,16
    420c:	10800044 	addi	r2,r2,1
    4210:	2103fb84 	addi	r4,r4,4078
    4214:	41000015 	stw	r4,0(r8)
    4218:	45800115 	stw	r22,4(r8)
    421c:	d8c02015 	stw	r3,128(sp)
    4220:	d8801f15 	stw	r2,124(sp)
    4224:	e0bff40e 	bge	fp,r2,41f8 <__alt_data_end+0xfc0041f8>
    4228:	d9801e04 	addi	r6,sp,120
    422c:	b80b883a 	mov	r5,r23
    4230:	8009883a 	mov	r4,r16
    4234:	000a9640 	call	a964 <__sprint_r>
    4238:	103f011e 	bne	r2,zero,3e40 <__alt_data_end+0xfc003e40>
    423c:	8c7ffc04 	addi	r17,r17,-16
    4240:	d8c02017 	ldw	r3,128(sp)
    4244:	d8801f17 	ldw	r2,124(sp)
    4248:	da000404 	addi	r8,sp,16
    424c:	b47fed16 	blt	r22,r17,4204 <__alt_data_end+0xfc004204>
    4250:	9021883a 	mov	r16,r18
    4254:	9825883a 	mov	r18,r19
    4258:	8827883a 	mov	r19,r17
    425c:	dc403b17 	ldw	r17,236(sp)
    4260:	d9403517 	ldw	r5,212(sp)
    4264:	98c7883a 	add	r3,r19,r3
    4268:	10800044 	addi	r2,r2,1
    426c:	41400015 	stw	r5,0(r8)
    4270:	44c00115 	stw	r19,4(r8)
    4274:	d8c02015 	stw	r3,128(sp)
    4278:	d8801f15 	stw	r2,124(sp)
    427c:	010001c4 	movi	r4,7
    4280:	2082a316 	blt	r4,r2,4d10 <___vfprintf_internal_r+0x12e4>
    4284:	df002787 	ldb	fp,158(sp)
    4288:	42000204 	addi	r8,r8,8
    428c:	e0000c26 	beq	fp,zero,42c0 <___vfprintf_internal_r+0x894>
    4290:	d8801f17 	ldw	r2,124(sp)
    4294:	d9002784 	addi	r4,sp,158
    4298:	18c00044 	addi	r3,r3,1
    429c:	10800044 	addi	r2,r2,1
    42a0:	41000015 	stw	r4,0(r8)
    42a4:	01000044 	movi	r4,1
    42a8:	41000115 	stw	r4,4(r8)
    42ac:	d8c02015 	stw	r3,128(sp)
    42b0:	d8801f15 	stw	r2,124(sp)
    42b4:	010001c4 	movi	r4,7
    42b8:	20823c16 	blt	r4,r2,4bac <___vfprintf_internal_r+0x1180>
    42bc:	42000204 	addi	r8,r8,8
    42c0:	d8802b17 	ldw	r2,172(sp)
    42c4:	10000c26 	beq	r2,zero,42f8 <___vfprintf_internal_r+0x8cc>
    42c8:	d8801f17 	ldw	r2,124(sp)
    42cc:	d9002704 	addi	r4,sp,156
    42d0:	18c00084 	addi	r3,r3,2
    42d4:	10800044 	addi	r2,r2,1
    42d8:	41000015 	stw	r4,0(r8)
    42dc:	01000084 	movi	r4,2
    42e0:	41000115 	stw	r4,4(r8)
    42e4:	d8c02015 	stw	r3,128(sp)
    42e8:	d8801f15 	stw	r2,124(sp)
    42ec:	010001c4 	movi	r4,7
    42f0:	20823616 	blt	r4,r2,4bcc <___vfprintf_internal_r+0x11a0>
    42f4:	42000204 	addi	r8,r8,8
    42f8:	d9003017 	ldw	r4,192(sp)
    42fc:	00802004 	movi	r2,128
    4300:	20819926 	beq	r4,r2,4968 <___vfprintf_internal_r+0xf3c>
    4304:	d9402917 	ldw	r5,164(sp)
    4308:	d8802e17 	ldw	r2,184(sp)
    430c:	28adc83a 	sub	r22,r5,r2
    4310:	0580310e 	bge	zero,r22,43d8 <___vfprintf_internal_r+0x9ac>
    4314:	07000404 	movi	fp,16
    4318:	d8801f17 	ldw	r2,124(sp)
    431c:	e584140e 	bge	fp,r22,5370 <___vfprintf_internal_r+0x1944>
    4320:	01400074 	movhi	r5,1
    4324:	2943f784 	addi	r5,r5,4062
    4328:	dc402915 	stw	r17,164(sp)
    432c:	d9402b15 	stw	r5,172(sp)
    4330:	b023883a 	mov	r17,r22
    4334:	04c001c4 	movi	r19,7
    4338:	a82d883a 	mov	r22,r21
    433c:	902b883a 	mov	r21,r18
    4340:	8025883a 	mov	r18,r16
    4344:	dc002c17 	ldw	r16,176(sp)
    4348:	00000306 	br	4358 <___vfprintf_internal_r+0x92c>
    434c:	8c7ffc04 	addi	r17,r17,-16
    4350:	42000204 	addi	r8,r8,8
    4354:	e440110e 	bge	fp,r17,439c <___vfprintf_internal_r+0x970>
    4358:	18c00404 	addi	r3,r3,16
    435c:	10800044 	addi	r2,r2,1
    4360:	45000015 	stw	r20,0(r8)
    4364:	47000115 	stw	fp,4(r8)
    4368:	d8c02015 	stw	r3,128(sp)
    436c:	d8801f15 	stw	r2,124(sp)
    4370:	98bff60e 	bge	r19,r2,434c <__alt_data_end+0xfc00434c>
    4374:	d9801e04 	addi	r6,sp,120
    4378:	b80b883a 	mov	r5,r23
    437c:	8009883a 	mov	r4,r16
    4380:	000a9640 	call	a964 <__sprint_r>
    4384:	103eae1e 	bne	r2,zero,3e40 <__alt_data_end+0xfc003e40>
    4388:	8c7ffc04 	addi	r17,r17,-16
    438c:	d8c02017 	ldw	r3,128(sp)
    4390:	d8801f17 	ldw	r2,124(sp)
    4394:	da000404 	addi	r8,sp,16
    4398:	e47fef16 	blt	fp,r17,4358 <__alt_data_end+0xfc004358>
    439c:	9021883a 	mov	r16,r18
    43a0:	a825883a 	mov	r18,r21
    43a4:	b02b883a 	mov	r21,r22
    43a8:	882d883a 	mov	r22,r17
    43ac:	dc402917 	ldw	r17,164(sp)
    43b0:	d9002b17 	ldw	r4,172(sp)
    43b4:	1d87883a 	add	r3,r3,r22
    43b8:	10800044 	addi	r2,r2,1
    43bc:	41000015 	stw	r4,0(r8)
    43c0:	45800115 	stw	r22,4(r8)
    43c4:	d8c02015 	stw	r3,128(sp)
    43c8:	d8801f15 	stw	r2,124(sp)
    43cc:	010001c4 	movi	r4,7
    43d0:	2081ee16 	blt	r4,r2,4b8c <___vfprintf_internal_r+0x1160>
    43d4:	42000204 	addi	r8,r8,8
    43d8:	9080400c 	andi	r2,r18,256
    43dc:	1001181e 	bne	r2,zero,4840 <___vfprintf_internal_r+0xe14>
    43e0:	d9402e17 	ldw	r5,184(sp)
    43e4:	d8801f17 	ldw	r2,124(sp)
    43e8:	44000015 	stw	r16,0(r8)
    43ec:	1947883a 	add	r3,r3,r5
    43f0:	10800044 	addi	r2,r2,1
    43f4:	41400115 	stw	r5,4(r8)
    43f8:	d8c02015 	stw	r3,128(sp)
    43fc:	d8801f15 	stw	r2,124(sp)
    4400:	010001c4 	movi	r4,7
    4404:	2081d316 	blt	r4,r2,4b54 <___vfprintf_internal_r+0x1128>
    4408:	42000204 	addi	r8,r8,8
    440c:	9480010c 	andi	r18,r18,4
    4410:	90003226 	beq	r18,zero,44dc <___vfprintf_internal_r+0xab0>
    4414:	d9403117 	ldw	r5,196(sp)
    4418:	d8802a17 	ldw	r2,168(sp)
    441c:	28a1c83a 	sub	r16,r5,r2
    4420:	04002e0e 	bge	zero,r16,44dc <___vfprintf_internal_r+0xab0>
    4424:	04400404 	movi	r17,16
    4428:	d8801f17 	ldw	r2,124(sp)
    442c:	8c04a20e 	bge	r17,r16,56b8 <___vfprintf_internal_r+0x1c8c>
    4430:	01400074 	movhi	r5,1
    4434:	2943fb84 	addi	r5,r5,4078
    4438:	d9403515 	stw	r5,212(sp)
    443c:	048001c4 	movi	r18,7
    4440:	dcc02c17 	ldw	r19,176(sp)
    4444:	00000306 	br	4454 <___vfprintf_internal_r+0xa28>
    4448:	843ffc04 	addi	r16,r16,-16
    444c:	42000204 	addi	r8,r8,8
    4450:	8c00130e 	bge	r17,r16,44a0 <___vfprintf_internal_r+0xa74>
    4454:	01000074 	movhi	r4,1
    4458:	18c00404 	addi	r3,r3,16
    445c:	10800044 	addi	r2,r2,1
    4460:	2103fb84 	addi	r4,r4,4078
    4464:	41000015 	stw	r4,0(r8)
    4468:	44400115 	stw	r17,4(r8)
    446c:	d8c02015 	stw	r3,128(sp)
    4470:	d8801f15 	stw	r2,124(sp)
    4474:	90bff40e 	bge	r18,r2,4448 <__alt_data_end+0xfc004448>
    4478:	d9801e04 	addi	r6,sp,120
    447c:	b80b883a 	mov	r5,r23
    4480:	9809883a 	mov	r4,r19
    4484:	000a9640 	call	a964 <__sprint_r>
    4488:	103e6d1e 	bne	r2,zero,3e40 <__alt_data_end+0xfc003e40>
    448c:	843ffc04 	addi	r16,r16,-16
    4490:	d8c02017 	ldw	r3,128(sp)
    4494:	d8801f17 	ldw	r2,124(sp)
    4498:	da000404 	addi	r8,sp,16
    449c:	8c3fed16 	blt	r17,r16,4454 <__alt_data_end+0xfc004454>
    44a0:	d9403517 	ldw	r5,212(sp)
    44a4:	1c07883a 	add	r3,r3,r16
    44a8:	10800044 	addi	r2,r2,1
    44ac:	41400015 	stw	r5,0(r8)
    44b0:	44000115 	stw	r16,4(r8)
    44b4:	d8c02015 	stw	r3,128(sp)
    44b8:	d8801f15 	stw	r2,124(sp)
    44bc:	010001c4 	movi	r4,7
    44c0:	2080060e 	bge	r4,r2,44dc <___vfprintf_internal_r+0xab0>
    44c4:	d9002c17 	ldw	r4,176(sp)
    44c8:	d9801e04 	addi	r6,sp,120
    44cc:	b80b883a 	mov	r5,r23
    44d0:	000a9640 	call	a964 <__sprint_r>
    44d4:	103e5a1e 	bne	r2,zero,3e40 <__alt_data_end+0xfc003e40>
    44d8:	d8c02017 	ldw	r3,128(sp)
    44dc:	d8803117 	ldw	r2,196(sp)
    44e0:	d9002a17 	ldw	r4,168(sp)
    44e4:	1100010e 	bge	r2,r4,44ec <___vfprintf_internal_r+0xac0>
    44e8:	2005883a 	mov	r2,r4
    44ec:	d9402f17 	ldw	r5,188(sp)
    44f0:	288b883a 	add	r5,r5,r2
    44f4:	d9402f15 	stw	r5,188(sp)
    44f8:	18019e1e 	bne	r3,zero,4b74 <___vfprintf_internal_r+0x1148>
    44fc:	a8800007 	ldb	r2,0(r21)
    4500:	d8001f15 	stw	zero,124(sp)
    4504:	da000404 	addi	r8,sp,16
    4508:	103d851e 	bne	r2,zero,3b20 <__alt_data_end+0xfc003b20>
    450c:	a821883a 	mov	r16,r21
    4510:	003d9b06 	br	3b80 <__alt_data_end+0xfc003b80>
    4514:	18c03fcc 	andi	r3,r3,255
    4518:	1805c11e 	bne	r3,zero,5c20 <___vfprintf_internal_r+0x21f4>
    451c:	94800414 	ori	r18,r18,16
    4520:	9080080c 	andi	r2,r18,32
    4524:	10020c26 	beq	r2,zero,4d58 <___vfprintf_internal_r+0x132c>
    4528:	d8802d17 	ldw	r2,180(sp)
    452c:	d9002917 	ldw	r4,164(sp)
    4530:	d8002785 	stb	zero,158(sp)
    4534:	10c00204 	addi	r3,r2,8
    4538:	14c00017 	ldw	r19,0(r2)
    453c:	15800117 	ldw	r22,4(r2)
    4540:	20040f16 	blt	r4,zero,5580 <___vfprintf_internal_r+0x1b54>
    4544:	013fdfc4 	movi	r4,-129
    4548:	9d84b03a 	or	r2,r19,r22
    454c:	d8c02d15 	stw	r3,180(sp)
    4550:	9124703a 	and	r18,r18,r4
    4554:	0039883a 	mov	fp,zero
    4558:	103e891e 	bne	r2,zero,3f80 <__alt_data_end+0xfc003f80>
    455c:	d9002917 	ldw	r4,164(sp)
    4560:	2002c11e 	bne	r4,zero,5068 <___vfprintf_internal_r+0x163c>
    4564:	d8002915 	stw	zero,164(sp)
    4568:	d8002e15 	stw	zero,184(sp)
    456c:	dc001e04 	addi	r16,sp,120
    4570:	003ef806 	br	4154 <__alt_data_end+0xfc004154>
    4574:	18c03fcc 	andi	r3,r3,255
    4578:	18059d1e 	bne	r3,zero,5bf0 <___vfprintf_internal_r+0x21c4>
    457c:	01400074 	movhi	r5,1
    4580:	2943eb04 	addi	r5,r5,4012
    4584:	d9403915 	stw	r5,228(sp)
    4588:	9080080c 	andi	r2,r18,32
    458c:	10005226 	beq	r2,zero,46d8 <___vfprintf_internal_r+0xcac>
    4590:	d8802d17 	ldw	r2,180(sp)
    4594:	14c00017 	ldw	r19,0(r2)
    4598:	15800117 	ldw	r22,4(r2)
    459c:	10800204 	addi	r2,r2,8
    45a0:	d8802d15 	stw	r2,180(sp)
    45a4:	9080004c 	andi	r2,r18,1
    45a8:	10019026 	beq	r2,zero,4bec <___vfprintf_internal_r+0x11c0>
    45ac:	9d84b03a 	or	r2,r19,r22
    45b0:	10036926 	beq	r2,zero,5358 <___vfprintf_internal_r+0x192c>
    45b4:	d8c02917 	ldw	r3,164(sp)
    45b8:	00800c04 	movi	r2,48
    45bc:	d8802705 	stb	r2,156(sp)
    45c0:	dc402745 	stb	r17,157(sp)
    45c4:	d8002785 	stb	zero,158(sp)
    45c8:	90800094 	ori	r2,r18,2
    45cc:	18045d16 	blt	r3,zero,5744 <___vfprintf_internal_r+0x1d18>
    45d0:	00bfdfc4 	movi	r2,-129
    45d4:	90a4703a 	and	r18,r18,r2
    45d8:	94800094 	ori	r18,r18,2
    45dc:	0039883a 	mov	fp,zero
    45e0:	d9003917 	ldw	r4,228(sp)
    45e4:	dc001e04 	addi	r16,sp,120
    45e8:	988003cc 	andi	r2,r19,15
    45ec:	b006973a 	slli	r3,r22,28
    45f0:	2085883a 	add	r2,r4,r2
    45f4:	9826d13a 	srli	r19,r19,4
    45f8:	10800003 	ldbu	r2,0(r2)
    45fc:	b02cd13a 	srli	r22,r22,4
    4600:	843fffc4 	addi	r16,r16,-1
    4604:	1ce6b03a 	or	r19,r3,r19
    4608:	80800005 	stb	r2,0(r16)
    460c:	9d84b03a 	or	r2,r19,r22
    4610:	103ff51e 	bne	r2,zero,45e8 <__alt_data_end+0xfc0045e8>
    4614:	d8c02817 	ldw	r3,160(sp)
    4618:	1c07c83a 	sub	r3,r3,r16
    461c:	d8c02e15 	stw	r3,184(sp)
    4620:	003ecc06 	br	4154 <__alt_data_end+0xfc004154>
    4624:	18c03fcc 	andi	r3,r3,255
    4628:	183e9f26 	beq	r3,zero,40a8 <__alt_data_end+0xfc0040a8>
    462c:	d9c02785 	stb	r7,158(sp)
    4630:	003e9d06 	br	40a8 <__alt_data_end+0xfc0040a8>
    4634:	00c00044 	movi	r3,1
    4638:	01c00ac4 	movi	r7,43
    463c:	ac400007 	ldb	r17,0(r21)
    4640:	003d5e06 	br	3bbc <__alt_data_end+0xfc003bbc>
    4644:	94800814 	ori	r18,r18,32
    4648:	ac400007 	ldb	r17,0(r21)
    464c:	003d5b06 	br	3bbc <__alt_data_end+0xfc003bbc>
    4650:	d8c02d17 	ldw	r3,180(sp)
    4654:	d8002785 	stb	zero,158(sp)
    4658:	1c000017 	ldw	r16,0(r3)
    465c:	1cc00104 	addi	r19,r3,4
    4660:	80041926 	beq	r16,zero,56c8 <___vfprintf_internal_r+0x1c9c>
    4664:	d9002917 	ldw	r4,164(sp)
    4668:	2003d016 	blt	r4,zero,55ac <___vfprintf_internal_r+0x1b80>
    466c:	200d883a 	mov	r6,r4
    4670:	000b883a 	mov	r5,zero
    4674:	8009883a 	mov	r4,r16
    4678:	da003d15 	stw	r8,244(sp)
    467c:	000935c0 	call	935c <memchr>
    4680:	da003d17 	ldw	r8,244(sp)
    4684:	10045426 	beq	r2,zero,57d8 <___vfprintf_internal_r+0x1dac>
    4688:	1405c83a 	sub	r2,r2,r16
    468c:	d8802e15 	stw	r2,184(sp)
    4690:	1003cc16 	blt	r2,zero,55c4 <___vfprintf_internal_r+0x1b98>
    4694:	df002783 	ldbu	fp,158(sp)
    4698:	d8802a15 	stw	r2,168(sp)
    469c:	dcc02d15 	stw	r19,180(sp)
    46a0:	d8002915 	stw	zero,164(sp)
    46a4:	d8003215 	stw	zero,200(sp)
    46a8:	003eb006 	br	416c <__alt_data_end+0xfc00416c>
    46ac:	18c03fcc 	andi	r3,r3,255
    46b0:	183f9b26 	beq	r3,zero,4520 <__alt_data_end+0xfc004520>
    46b4:	d9c02785 	stb	r7,158(sp)
    46b8:	003f9906 	br	4520 <__alt_data_end+0xfc004520>
    46bc:	18c03fcc 	andi	r3,r3,255
    46c0:	1805551e 	bne	r3,zero,5c18 <___vfprintf_internal_r+0x21ec>
    46c4:	01400074 	movhi	r5,1
    46c8:	2943f004 	addi	r5,r5,4032
    46cc:	d9403915 	stw	r5,228(sp)
    46d0:	9080080c 	andi	r2,r18,32
    46d4:	103fae1e 	bne	r2,zero,4590 <__alt_data_end+0xfc004590>
    46d8:	9080040c 	andi	r2,r18,16
    46dc:	1002de26 	beq	r2,zero,5258 <___vfprintf_internal_r+0x182c>
    46e0:	d8c02d17 	ldw	r3,180(sp)
    46e4:	002d883a 	mov	r22,zero
    46e8:	1cc00017 	ldw	r19,0(r3)
    46ec:	18c00104 	addi	r3,r3,4
    46f0:	d8c02d15 	stw	r3,180(sp)
    46f4:	003fab06 	br	45a4 <__alt_data_end+0xfc0045a4>
    46f8:	38803fcc 	andi	r2,r7,255
    46fc:	1080201c 	xori	r2,r2,128
    4700:	10bfe004 	addi	r2,r2,-128
    4704:	1002d21e 	bne	r2,zero,5250 <___vfprintf_internal_r+0x1824>
    4708:	00c00044 	movi	r3,1
    470c:	01c00804 	movi	r7,32
    4710:	ac400007 	ldb	r17,0(r21)
    4714:	003d2906 	br	3bbc <__alt_data_end+0xfc003bbc>
    4718:	94800054 	ori	r18,r18,1
    471c:	ac400007 	ldb	r17,0(r21)
    4720:	003d2606 	br	3bbc <__alt_data_end+0xfc003bbc>
    4724:	18c03fcc 	andi	r3,r3,255
    4728:	183e0526 	beq	r3,zero,3f40 <__alt_data_end+0xfc003f40>
    472c:	d9c02785 	stb	r7,158(sp)
    4730:	003e0306 	br	3f40 <__alt_data_end+0xfc003f40>
    4734:	94801014 	ori	r18,r18,64
    4738:	ac400007 	ldb	r17,0(r21)
    473c:	003d1f06 	br	3bbc <__alt_data_end+0xfc003bbc>
    4740:	ac400007 	ldb	r17,0(r21)
    4744:	8a438726 	beq	r17,r9,5564 <___vfprintf_internal_r+0x1b38>
    4748:	94800414 	ori	r18,r18,16
    474c:	003d1b06 	br	3bbc <__alt_data_end+0xfc003bbc>
    4750:	18c03fcc 	andi	r3,r3,255
    4754:	1805341e 	bne	r3,zero,5c28 <___vfprintf_internal_r+0x21fc>
    4758:	9080080c 	andi	r2,r18,32
    475c:	1002cd26 	beq	r2,zero,5294 <___vfprintf_internal_r+0x1868>
    4760:	d9402d17 	ldw	r5,180(sp)
    4764:	d9002f17 	ldw	r4,188(sp)
    4768:	28800017 	ldw	r2,0(r5)
    476c:	2007d7fa 	srai	r3,r4,31
    4770:	29400104 	addi	r5,r5,4
    4774:	d9402d15 	stw	r5,180(sp)
    4778:	11000015 	stw	r4,0(r2)
    477c:	10c00115 	stw	r3,4(r2)
    4780:	003ce506 	br	3b18 <__alt_data_end+0xfc003b18>
    4784:	d8c02d17 	ldw	r3,180(sp)
    4788:	d9002d17 	ldw	r4,180(sp)
    478c:	d8002785 	stb	zero,158(sp)
    4790:	18800017 	ldw	r2,0(r3)
    4794:	21000104 	addi	r4,r4,4
    4798:	00c00044 	movi	r3,1
    479c:	d8c02a15 	stw	r3,168(sp)
    47a0:	d8801405 	stb	r2,80(sp)
    47a4:	d9002d15 	stw	r4,180(sp)
    47a8:	d8c02e15 	stw	r3,184(sp)
    47ac:	d8002915 	stw	zero,164(sp)
    47b0:	d8003215 	stw	zero,200(sp)
    47b4:	dc001404 	addi	r16,sp,80
    47b8:	0039883a 	mov	fp,zero
    47bc:	003e7206 	br	4188 <__alt_data_end+0xfc004188>
    47c0:	01000074 	movhi	r4,1
    47c4:	2103f004 	addi	r4,r4,4032
    47c8:	0039883a 	mov	fp,zero
    47cc:	d9003915 	stw	r4,228(sp)
    47d0:	04401e04 	movi	r17,120
    47d4:	003f8206 	br	45e0 <__alt_data_end+0xfc0045e0>
    47d8:	18c03fcc 	andi	r3,r3,255
    47dc:	1805061e 	bne	r3,zero,5bf8 <___vfprintf_internal_r+0x21cc>
    47e0:	883d9126 	beq	r17,zero,3e28 <__alt_data_end+0xfc003e28>
    47e4:	00c00044 	movi	r3,1
    47e8:	d8c02a15 	stw	r3,168(sp)
    47ec:	dc401405 	stb	r17,80(sp)
    47f0:	d8002785 	stb	zero,158(sp)
    47f4:	003fec06 	br	47a8 <__alt_data_end+0xfc0047a8>
    47f8:	01400074 	movhi	r5,1
    47fc:	2943f004 	addi	r5,r5,4032
    4800:	d9403915 	stw	r5,228(sp)
    4804:	d8c02d15 	stw	r3,180(sp)
    4808:	1025883a 	mov	r18,r2
    480c:	04401e04 	movi	r17,120
    4810:	9d84b03a 	or	r2,r19,r22
    4814:	1000fc1e 	bne	r2,zero,4c08 <___vfprintf_internal_r+0x11dc>
    4818:	0039883a 	mov	fp,zero
    481c:	00800084 	movi	r2,2
    4820:	10803fcc 	andi	r2,r2,255
    4824:	00c00044 	movi	r3,1
    4828:	10c20f26 	beq	r2,r3,5068 <___vfprintf_internal_r+0x163c>
    482c:	00c00084 	movi	r3,2
    4830:	10fd6326 	beq	r2,r3,3dc0 <__alt_data_end+0xfc003dc0>
    4834:	003e2d06 	br	40ec <__alt_data_end+0xfc0040ec>
    4838:	d8c02017 	ldw	r3,128(sp)
    483c:	003e9306 	br	428c <__alt_data_end+0xfc00428c>
    4840:	00801944 	movi	r2,101
    4844:	14407e0e 	bge	r2,r17,4a40 <___vfprintf_internal_r+0x1014>
    4848:	d9003617 	ldw	r4,216(sp)
    484c:	d9403817 	ldw	r5,224(sp)
    4850:	000d883a 	mov	r6,zero
    4854:	000f883a 	mov	r7,zero
    4858:	d8c03c15 	stw	r3,240(sp)
    485c:	da003d15 	stw	r8,244(sp)
    4860:	000f1e80 	call	f1e8 <__eqdf2>
    4864:	d8c03c17 	ldw	r3,240(sp)
    4868:	da003d17 	ldw	r8,244(sp)
    486c:	1000f71e 	bne	r2,zero,4c4c <___vfprintf_internal_r+0x1220>
    4870:	d8801f17 	ldw	r2,124(sp)
    4874:	01000074 	movhi	r4,1
    4878:	2103f704 	addi	r4,r4,4060
    487c:	18c00044 	addi	r3,r3,1
    4880:	10800044 	addi	r2,r2,1
    4884:	41000015 	stw	r4,0(r8)
    4888:	01000044 	movi	r4,1
    488c:	41000115 	stw	r4,4(r8)
    4890:	d8c02015 	stw	r3,128(sp)
    4894:	d8801f15 	stw	r2,124(sp)
    4898:	010001c4 	movi	r4,7
    489c:	2082b816 	blt	r4,r2,5380 <___vfprintf_internal_r+0x1954>
    48a0:	42000204 	addi	r8,r8,8
    48a4:	d8802617 	ldw	r2,152(sp)
    48a8:	d9403317 	ldw	r5,204(sp)
    48ac:	11400216 	blt	r2,r5,48b8 <___vfprintf_internal_r+0xe8c>
    48b0:	9080004c 	andi	r2,r18,1
    48b4:	103ed526 	beq	r2,zero,440c <__alt_data_end+0xfc00440c>
    48b8:	d8803717 	ldw	r2,220(sp)
    48bc:	d9003417 	ldw	r4,208(sp)
    48c0:	d9403717 	ldw	r5,220(sp)
    48c4:	1887883a 	add	r3,r3,r2
    48c8:	d8801f17 	ldw	r2,124(sp)
    48cc:	41000015 	stw	r4,0(r8)
    48d0:	41400115 	stw	r5,4(r8)
    48d4:	10800044 	addi	r2,r2,1
    48d8:	d8c02015 	stw	r3,128(sp)
    48dc:	d8801f15 	stw	r2,124(sp)
    48e0:	010001c4 	movi	r4,7
    48e4:	20832916 	blt	r4,r2,558c <___vfprintf_internal_r+0x1b60>
    48e8:	42000204 	addi	r8,r8,8
    48ec:	d8803317 	ldw	r2,204(sp)
    48f0:	143fffc4 	addi	r16,r2,-1
    48f4:	043ec50e 	bge	zero,r16,440c <__alt_data_end+0xfc00440c>
    48f8:	04400404 	movi	r17,16
    48fc:	d8801f17 	ldw	r2,124(sp)
    4900:	8c00880e 	bge	r17,r16,4b24 <___vfprintf_internal_r+0x10f8>
    4904:	01400074 	movhi	r5,1
    4908:	2943f784 	addi	r5,r5,4062
    490c:	d9402b15 	stw	r5,172(sp)
    4910:	058001c4 	movi	r22,7
    4914:	dcc02c17 	ldw	r19,176(sp)
    4918:	00000306 	br	4928 <___vfprintf_internal_r+0xefc>
    491c:	42000204 	addi	r8,r8,8
    4920:	843ffc04 	addi	r16,r16,-16
    4924:	8c00820e 	bge	r17,r16,4b30 <___vfprintf_internal_r+0x1104>
    4928:	18c00404 	addi	r3,r3,16
    492c:	10800044 	addi	r2,r2,1
    4930:	45000015 	stw	r20,0(r8)
    4934:	44400115 	stw	r17,4(r8)
    4938:	d8c02015 	stw	r3,128(sp)
    493c:	d8801f15 	stw	r2,124(sp)
    4940:	b0bff60e 	bge	r22,r2,491c <__alt_data_end+0xfc00491c>
    4944:	d9801e04 	addi	r6,sp,120
    4948:	b80b883a 	mov	r5,r23
    494c:	9809883a 	mov	r4,r19
    4950:	000a9640 	call	a964 <__sprint_r>
    4954:	103d3a1e 	bne	r2,zero,3e40 <__alt_data_end+0xfc003e40>
    4958:	d8c02017 	ldw	r3,128(sp)
    495c:	d8801f17 	ldw	r2,124(sp)
    4960:	da000404 	addi	r8,sp,16
    4964:	003fee06 	br	4920 <__alt_data_end+0xfc004920>
    4968:	d9403117 	ldw	r5,196(sp)
    496c:	d8802a17 	ldw	r2,168(sp)
    4970:	28adc83a 	sub	r22,r5,r2
    4974:	05be630e 	bge	zero,r22,4304 <__alt_data_end+0xfc004304>
    4978:	07000404 	movi	fp,16
    497c:	d8801f17 	ldw	r2,124(sp)
    4980:	e5838f0e 	bge	fp,r22,57c0 <___vfprintf_internal_r+0x1d94>
    4984:	01400074 	movhi	r5,1
    4988:	2943f784 	addi	r5,r5,4062
    498c:	dc403015 	stw	r17,192(sp)
    4990:	d9402b15 	stw	r5,172(sp)
    4994:	b023883a 	mov	r17,r22
    4998:	04c001c4 	movi	r19,7
    499c:	a82d883a 	mov	r22,r21
    49a0:	902b883a 	mov	r21,r18
    49a4:	8025883a 	mov	r18,r16
    49a8:	dc002c17 	ldw	r16,176(sp)
    49ac:	00000306 	br	49bc <___vfprintf_internal_r+0xf90>
    49b0:	8c7ffc04 	addi	r17,r17,-16
    49b4:	42000204 	addi	r8,r8,8
    49b8:	e440110e 	bge	fp,r17,4a00 <___vfprintf_internal_r+0xfd4>
    49bc:	18c00404 	addi	r3,r3,16
    49c0:	10800044 	addi	r2,r2,1
    49c4:	45000015 	stw	r20,0(r8)
    49c8:	47000115 	stw	fp,4(r8)
    49cc:	d8c02015 	stw	r3,128(sp)
    49d0:	d8801f15 	stw	r2,124(sp)
    49d4:	98bff60e 	bge	r19,r2,49b0 <__alt_data_end+0xfc0049b0>
    49d8:	d9801e04 	addi	r6,sp,120
    49dc:	b80b883a 	mov	r5,r23
    49e0:	8009883a 	mov	r4,r16
    49e4:	000a9640 	call	a964 <__sprint_r>
    49e8:	103d151e 	bne	r2,zero,3e40 <__alt_data_end+0xfc003e40>
    49ec:	8c7ffc04 	addi	r17,r17,-16
    49f0:	d8c02017 	ldw	r3,128(sp)
    49f4:	d8801f17 	ldw	r2,124(sp)
    49f8:	da000404 	addi	r8,sp,16
    49fc:	e47fef16 	blt	fp,r17,49bc <__alt_data_end+0xfc0049bc>
    4a00:	9021883a 	mov	r16,r18
    4a04:	a825883a 	mov	r18,r21
    4a08:	b02b883a 	mov	r21,r22
    4a0c:	882d883a 	mov	r22,r17
    4a10:	dc403017 	ldw	r17,192(sp)
    4a14:	d9002b17 	ldw	r4,172(sp)
    4a18:	1d87883a 	add	r3,r3,r22
    4a1c:	10800044 	addi	r2,r2,1
    4a20:	41000015 	stw	r4,0(r8)
    4a24:	45800115 	stw	r22,4(r8)
    4a28:	d8c02015 	stw	r3,128(sp)
    4a2c:	d8801f15 	stw	r2,124(sp)
    4a30:	010001c4 	movi	r4,7
    4a34:	20818e16 	blt	r4,r2,5070 <___vfprintf_internal_r+0x1644>
    4a38:	42000204 	addi	r8,r8,8
    4a3c:	003e3106 	br	4304 <__alt_data_end+0xfc004304>
    4a40:	d9403317 	ldw	r5,204(sp)
    4a44:	00800044 	movi	r2,1
    4a48:	18c00044 	addi	r3,r3,1
    4a4c:	1141530e 	bge	r2,r5,4f9c <___vfprintf_internal_r+0x1570>
    4a50:	dc401f17 	ldw	r17,124(sp)
    4a54:	00800044 	movi	r2,1
    4a58:	40800115 	stw	r2,4(r8)
    4a5c:	8c400044 	addi	r17,r17,1
    4a60:	44000015 	stw	r16,0(r8)
    4a64:	d8c02015 	stw	r3,128(sp)
    4a68:	dc401f15 	stw	r17,124(sp)
    4a6c:	008001c4 	movi	r2,7
    4a70:	14416b16 	blt	r2,r17,5020 <___vfprintf_internal_r+0x15f4>
    4a74:	42000204 	addi	r8,r8,8
    4a78:	d8803717 	ldw	r2,220(sp)
    4a7c:	d9003417 	ldw	r4,208(sp)
    4a80:	8c400044 	addi	r17,r17,1
    4a84:	10c7883a 	add	r3,r2,r3
    4a88:	40800115 	stw	r2,4(r8)
    4a8c:	41000015 	stw	r4,0(r8)
    4a90:	d8c02015 	stw	r3,128(sp)
    4a94:	dc401f15 	stw	r17,124(sp)
    4a98:	008001c4 	movi	r2,7
    4a9c:	14416916 	blt	r2,r17,5044 <___vfprintf_internal_r+0x1618>
    4aa0:	45800204 	addi	r22,r8,8
    4aa4:	d9003617 	ldw	r4,216(sp)
    4aa8:	d9403817 	ldw	r5,224(sp)
    4aac:	000d883a 	mov	r6,zero
    4ab0:	000f883a 	mov	r7,zero
    4ab4:	d8c03c15 	stw	r3,240(sp)
    4ab8:	000f1e80 	call	f1e8 <__eqdf2>
    4abc:	d8c03c17 	ldw	r3,240(sp)
    4ac0:	1000bc26 	beq	r2,zero,4db4 <___vfprintf_internal_r+0x1388>
    4ac4:	d9403317 	ldw	r5,204(sp)
    4ac8:	84000044 	addi	r16,r16,1
    4acc:	8c400044 	addi	r17,r17,1
    4ad0:	28bfffc4 	addi	r2,r5,-1
    4ad4:	1887883a 	add	r3,r3,r2
    4ad8:	b0800115 	stw	r2,4(r22)
    4adc:	b4000015 	stw	r16,0(r22)
    4ae0:	d8c02015 	stw	r3,128(sp)
    4ae4:	dc401f15 	stw	r17,124(sp)
    4ae8:	008001c4 	movi	r2,7
    4aec:	14414316 	blt	r2,r17,4ffc <___vfprintf_internal_r+0x15d0>
    4af0:	b5800204 	addi	r22,r22,8
    4af4:	d9003a17 	ldw	r4,232(sp)
    4af8:	df0022c4 	addi	fp,sp,139
    4afc:	8c400044 	addi	r17,r17,1
    4b00:	20c7883a 	add	r3,r4,r3
    4b04:	b7000015 	stw	fp,0(r22)
    4b08:	b1000115 	stw	r4,4(r22)
    4b0c:	d8c02015 	stw	r3,128(sp)
    4b10:	dc401f15 	stw	r17,124(sp)
    4b14:	008001c4 	movi	r2,7
    4b18:	14400e16 	blt	r2,r17,4b54 <___vfprintf_internal_r+0x1128>
    4b1c:	b2000204 	addi	r8,r22,8
    4b20:	003e3a06 	br	440c <__alt_data_end+0xfc00440c>
    4b24:	01000074 	movhi	r4,1
    4b28:	2103f784 	addi	r4,r4,4062
    4b2c:	d9002b15 	stw	r4,172(sp)
    4b30:	d9002b17 	ldw	r4,172(sp)
    4b34:	1c07883a 	add	r3,r3,r16
    4b38:	44000115 	stw	r16,4(r8)
    4b3c:	41000015 	stw	r4,0(r8)
    4b40:	10800044 	addi	r2,r2,1
    4b44:	d8c02015 	stw	r3,128(sp)
    4b48:	d8801f15 	stw	r2,124(sp)
    4b4c:	010001c4 	movi	r4,7
    4b50:	20be2d0e 	bge	r4,r2,4408 <__alt_data_end+0xfc004408>
    4b54:	d9002c17 	ldw	r4,176(sp)
    4b58:	d9801e04 	addi	r6,sp,120
    4b5c:	b80b883a 	mov	r5,r23
    4b60:	000a9640 	call	a964 <__sprint_r>
    4b64:	103cb61e 	bne	r2,zero,3e40 <__alt_data_end+0xfc003e40>
    4b68:	d8c02017 	ldw	r3,128(sp)
    4b6c:	da000404 	addi	r8,sp,16
    4b70:	003e2606 	br	440c <__alt_data_end+0xfc00440c>
    4b74:	d9002c17 	ldw	r4,176(sp)
    4b78:	d9801e04 	addi	r6,sp,120
    4b7c:	b80b883a 	mov	r5,r23
    4b80:	000a9640 	call	a964 <__sprint_r>
    4b84:	103e5d26 	beq	r2,zero,44fc <__alt_data_end+0xfc0044fc>
    4b88:	003cad06 	br	3e40 <__alt_data_end+0xfc003e40>
    4b8c:	d9002c17 	ldw	r4,176(sp)
    4b90:	d9801e04 	addi	r6,sp,120
    4b94:	b80b883a 	mov	r5,r23
    4b98:	000a9640 	call	a964 <__sprint_r>
    4b9c:	103ca81e 	bne	r2,zero,3e40 <__alt_data_end+0xfc003e40>
    4ba0:	d8c02017 	ldw	r3,128(sp)
    4ba4:	da000404 	addi	r8,sp,16
    4ba8:	003e0b06 	br	43d8 <__alt_data_end+0xfc0043d8>
    4bac:	d9002c17 	ldw	r4,176(sp)
    4bb0:	d9801e04 	addi	r6,sp,120
    4bb4:	b80b883a 	mov	r5,r23
    4bb8:	000a9640 	call	a964 <__sprint_r>
    4bbc:	103ca01e 	bne	r2,zero,3e40 <__alt_data_end+0xfc003e40>
    4bc0:	d8c02017 	ldw	r3,128(sp)
    4bc4:	da000404 	addi	r8,sp,16
    4bc8:	003dbd06 	br	42c0 <__alt_data_end+0xfc0042c0>
    4bcc:	d9002c17 	ldw	r4,176(sp)
    4bd0:	d9801e04 	addi	r6,sp,120
    4bd4:	b80b883a 	mov	r5,r23
    4bd8:	000a9640 	call	a964 <__sprint_r>
    4bdc:	103c981e 	bne	r2,zero,3e40 <__alt_data_end+0xfc003e40>
    4be0:	d8c02017 	ldw	r3,128(sp)
    4be4:	da000404 	addi	r8,sp,16
    4be8:	003dc306 	br	42f8 <__alt_data_end+0xfc0042f8>
    4bec:	d8802917 	ldw	r2,164(sp)
    4bf0:	d8002785 	stb	zero,158(sp)
    4bf4:	103f0616 	blt	r2,zero,4810 <__alt_data_end+0xfc004810>
    4bf8:	00ffdfc4 	movi	r3,-129
    4bfc:	9d84b03a 	or	r2,r19,r22
    4c00:	90e4703a 	and	r18,r18,r3
    4c04:	103c6b26 	beq	r2,zero,3db4 <__alt_data_end+0xfc003db4>
    4c08:	0039883a 	mov	fp,zero
    4c0c:	003e7406 	br	45e0 <__alt_data_end+0xfc0045e0>
    4c10:	9080040c 	andi	r2,r18,16
    4c14:	1001b326 	beq	r2,zero,52e4 <___vfprintf_internal_r+0x18b8>
    4c18:	d9002d17 	ldw	r4,180(sp)
    4c1c:	d9402917 	ldw	r5,164(sp)
    4c20:	d8002785 	stb	zero,158(sp)
    4c24:	20800104 	addi	r2,r4,4
    4c28:	24c00017 	ldw	r19,0(r4)
    4c2c:	002d883a 	mov	r22,zero
    4c30:	2801b516 	blt	r5,zero,5308 <___vfprintf_internal_r+0x18dc>
    4c34:	00ffdfc4 	movi	r3,-129
    4c38:	d8802d15 	stw	r2,180(sp)
    4c3c:	90e4703a 	and	r18,r18,r3
    4c40:	983d2726 	beq	r19,zero,40e0 <__alt_data_end+0xfc0040e0>
    4c44:	0039883a 	mov	fp,zero
    4c48:	003d2a06 	br	40f4 <__alt_data_end+0xfc0040f4>
    4c4c:	dc402617 	ldw	r17,152(sp)
    4c50:	0441d30e 	bge	zero,r17,53a0 <___vfprintf_internal_r+0x1974>
    4c54:	dc403217 	ldw	r17,200(sp)
    4c58:	d8803317 	ldw	r2,204(sp)
    4c5c:	1440010e 	bge	r2,r17,4c64 <___vfprintf_internal_r+0x1238>
    4c60:	1023883a 	mov	r17,r2
    4c64:	04400a0e 	bge	zero,r17,4c90 <___vfprintf_internal_r+0x1264>
    4c68:	d8801f17 	ldw	r2,124(sp)
    4c6c:	1c47883a 	add	r3,r3,r17
    4c70:	44000015 	stw	r16,0(r8)
    4c74:	10800044 	addi	r2,r2,1
    4c78:	44400115 	stw	r17,4(r8)
    4c7c:	d8c02015 	stw	r3,128(sp)
    4c80:	d8801f15 	stw	r2,124(sp)
    4c84:	010001c4 	movi	r4,7
    4c88:	20826516 	blt	r4,r2,5620 <___vfprintf_internal_r+0x1bf4>
    4c8c:	42000204 	addi	r8,r8,8
    4c90:	88026116 	blt	r17,zero,5618 <___vfprintf_internal_r+0x1bec>
    4c94:	d9003217 	ldw	r4,200(sp)
    4c98:	2463c83a 	sub	r17,r4,r17
    4c9c:	04407b0e 	bge	zero,r17,4e8c <___vfprintf_internal_r+0x1460>
    4ca0:	05800404 	movi	r22,16
    4ca4:	d8801f17 	ldw	r2,124(sp)
    4ca8:	b4419d0e 	bge	r22,r17,5320 <___vfprintf_internal_r+0x18f4>
    4cac:	01000074 	movhi	r4,1
    4cb0:	2103f784 	addi	r4,r4,4062
    4cb4:	d9002b15 	stw	r4,172(sp)
    4cb8:	070001c4 	movi	fp,7
    4cbc:	dcc02c17 	ldw	r19,176(sp)
    4cc0:	00000306 	br	4cd0 <___vfprintf_internal_r+0x12a4>
    4cc4:	42000204 	addi	r8,r8,8
    4cc8:	8c7ffc04 	addi	r17,r17,-16
    4ccc:	b441970e 	bge	r22,r17,532c <___vfprintf_internal_r+0x1900>
    4cd0:	18c00404 	addi	r3,r3,16
    4cd4:	10800044 	addi	r2,r2,1
    4cd8:	45000015 	stw	r20,0(r8)
    4cdc:	45800115 	stw	r22,4(r8)
    4ce0:	d8c02015 	stw	r3,128(sp)
    4ce4:	d8801f15 	stw	r2,124(sp)
    4ce8:	e0bff60e 	bge	fp,r2,4cc4 <__alt_data_end+0xfc004cc4>
    4cec:	d9801e04 	addi	r6,sp,120
    4cf0:	b80b883a 	mov	r5,r23
    4cf4:	9809883a 	mov	r4,r19
    4cf8:	000a9640 	call	a964 <__sprint_r>
    4cfc:	103c501e 	bne	r2,zero,3e40 <__alt_data_end+0xfc003e40>
    4d00:	d8c02017 	ldw	r3,128(sp)
    4d04:	d8801f17 	ldw	r2,124(sp)
    4d08:	da000404 	addi	r8,sp,16
    4d0c:	003fee06 	br	4cc8 <__alt_data_end+0xfc004cc8>
    4d10:	d9002c17 	ldw	r4,176(sp)
    4d14:	d9801e04 	addi	r6,sp,120
    4d18:	b80b883a 	mov	r5,r23
    4d1c:	000a9640 	call	a964 <__sprint_r>
    4d20:	103c471e 	bne	r2,zero,3e40 <__alt_data_end+0xfc003e40>
    4d24:	d8c02017 	ldw	r3,128(sp)
    4d28:	df002787 	ldb	fp,158(sp)
    4d2c:	da000404 	addi	r8,sp,16
    4d30:	003d5606 	br	428c <__alt_data_end+0xfc00428c>
    4d34:	9080040c 	andi	r2,r18,16
    4d38:	10016126 	beq	r2,zero,52c0 <___vfprintf_internal_r+0x1894>
    4d3c:	d8802d17 	ldw	r2,180(sp)
    4d40:	14c00017 	ldw	r19,0(r2)
    4d44:	10800104 	addi	r2,r2,4
    4d48:	d8802d15 	stw	r2,180(sp)
    4d4c:	982dd7fa 	srai	r22,r19,31
    4d50:	b005883a 	mov	r2,r22
    4d54:	003c8206 	br	3f60 <__alt_data_end+0xfc003f60>
    4d58:	9080040c 	andi	r2,r18,16
    4d5c:	10003526 	beq	r2,zero,4e34 <___vfprintf_internal_r+0x1408>
    4d60:	d9402d17 	ldw	r5,180(sp)
    4d64:	d8c02917 	ldw	r3,164(sp)
    4d68:	d8002785 	stb	zero,158(sp)
    4d6c:	28800104 	addi	r2,r5,4
    4d70:	2cc00017 	ldw	r19,0(r5)
    4d74:	002d883a 	mov	r22,zero
    4d78:	18003716 	blt	r3,zero,4e58 <___vfprintf_internal_r+0x142c>
    4d7c:	00ffdfc4 	movi	r3,-129
    4d80:	d8802d15 	stw	r2,180(sp)
    4d84:	90e4703a 	and	r18,r18,r3
    4d88:	0039883a 	mov	fp,zero
    4d8c:	983df326 	beq	r19,zero,455c <__alt_data_end+0xfc00455c>
    4d90:	00800244 	movi	r2,9
    4d94:	14fc7b36 	bltu	r2,r19,3f84 <__alt_data_end+0xfc003f84>
    4d98:	d8c02817 	ldw	r3,160(sp)
    4d9c:	dc001dc4 	addi	r16,sp,119
    4da0:	9cc00c04 	addi	r19,r19,48
    4da4:	1c07c83a 	sub	r3,r3,r16
    4da8:	dcc01dc5 	stb	r19,119(sp)
    4dac:	d8c02e15 	stw	r3,184(sp)
    4db0:	003ce806 	br	4154 <__alt_data_end+0xfc004154>
    4db4:	d8803317 	ldw	r2,204(sp)
    4db8:	143fffc4 	addi	r16,r2,-1
    4dbc:	043f4d0e 	bge	zero,r16,4af4 <__alt_data_end+0xfc004af4>
    4dc0:	07000404 	movi	fp,16
    4dc4:	e400810e 	bge	fp,r16,4fcc <___vfprintf_internal_r+0x15a0>
    4dc8:	01400074 	movhi	r5,1
    4dcc:	2943f784 	addi	r5,r5,4062
    4dd0:	d9402b15 	stw	r5,172(sp)
    4dd4:	01c001c4 	movi	r7,7
    4dd8:	dcc02c17 	ldw	r19,176(sp)
    4ddc:	00000306 	br	4dec <___vfprintf_internal_r+0x13c0>
    4de0:	b5800204 	addi	r22,r22,8
    4de4:	843ffc04 	addi	r16,r16,-16
    4de8:	e4007b0e 	bge	fp,r16,4fd8 <___vfprintf_internal_r+0x15ac>
    4dec:	18c00404 	addi	r3,r3,16
    4df0:	8c400044 	addi	r17,r17,1
    4df4:	b5000015 	stw	r20,0(r22)
    4df8:	b7000115 	stw	fp,4(r22)
    4dfc:	d8c02015 	stw	r3,128(sp)
    4e00:	dc401f15 	stw	r17,124(sp)
    4e04:	3c7ff60e 	bge	r7,r17,4de0 <__alt_data_end+0xfc004de0>
    4e08:	d9801e04 	addi	r6,sp,120
    4e0c:	b80b883a 	mov	r5,r23
    4e10:	9809883a 	mov	r4,r19
    4e14:	d9c03c15 	stw	r7,240(sp)
    4e18:	000a9640 	call	a964 <__sprint_r>
    4e1c:	d9c03c17 	ldw	r7,240(sp)
    4e20:	103c071e 	bne	r2,zero,3e40 <__alt_data_end+0xfc003e40>
    4e24:	d8c02017 	ldw	r3,128(sp)
    4e28:	dc401f17 	ldw	r17,124(sp)
    4e2c:	dd800404 	addi	r22,sp,16
    4e30:	003fec06 	br	4de4 <__alt_data_end+0xfc004de4>
    4e34:	9080100c 	andi	r2,r18,64
    4e38:	d8002785 	stb	zero,158(sp)
    4e3c:	10010e26 	beq	r2,zero,5278 <___vfprintf_internal_r+0x184c>
    4e40:	d9002d17 	ldw	r4,180(sp)
    4e44:	d9402917 	ldw	r5,164(sp)
    4e48:	002d883a 	mov	r22,zero
    4e4c:	20800104 	addi	r2,r4,4
    4e50:	24c0000b 	ldhu	r19,0(r4)
    4e54:	283fc90e 	bge	r5,zero,4d7c <__alt_data_end+0xfc004d7c>
    4e58:	d8802d15 	stw	r2,180(sp)
    4e5c:	0039883a 	mov	fp,zero
    4e60:	9d84b03a 	or	r2,r19,r22
    4e64:	103c461e 	bne	r2,zero,3f80 <__alt_data_end+0xfc003f80>
    4e68:	00800044 	movi	r2,1
    4e6c:	003e6c06 	br	4820 <__alt_data_end+0xfc004820>
    4e70:	d9002c17 	ldw	r4,176(sp)
    4e74:	d9801e04 	addi	r6,sp,120
    4e78:	b80b883a 	mov	r5,r23
    4e7c:	000a9640 	call	a964 <__sprint_r>
    4e80:	103bef1e 	bne	r2,zero,3e40 <__alt_data_end+0xfc003e40>
    4e84:	d8c02017 	ldw	r3,128(sp)
    4e88:	da000404 	addi	r8,sp,16
    4e8c:	d9003217 	ldw	r4,200(sp)
    4e90:	d8802617 	ldw	r2,152(sp)
    4e94:	d9403317 	ldw	r5,204(sp)
    4e98:	8123883a 	add	r17,r16,r4
    4e9c:	11400216 	blt	r2,r5,4ea8 <___vfprintf_internal_r+0x147c>
    4ea0:	9100004c 	andi	r4,r18,1
    4ea4:	20000d26 	beq	r4,zero,4edc <___vfprintf_internal_r+0x14b0>
    4ea8:	d9003717 	ldw	r4,220(sp)
    4eac:	d9403417 	ldw	r5,208(sp)
    4eb0:	1907883a 	add	r3,r3,r4
    4eb4:	d9001f17 	ldw	r4,124(sp)
    4eb8:	41400015 	stw	r5,0(r8)
    4ebc:	d9403717 	ldw	r5,220(sp)
    4ec0:	21000044 	addi	r4,r4,1
    4ec4:	d8c02015 	stw	r3,128(sp)
    4ec8:	41400115 	stw	r5,4(r8)
    4ecc:	d9001f15 	stw	r4,124(sp)
    4ed0:	014001c4 	movi	r5,7
    4ed4:	2901e816 	blt	r5,r4,5678 <___vfprintf_internal_r+0x1c4c>
    4ed8:	42000204 	addi	r8,r8,8
    4edc:	d9003317 	ldw	r4,204(sp)
    4ee0:	8121883a 	add	r16,r16,r4
    4ee4:	2085c83a 	sub	r2,r4,r2
    4ee8:	8461c83a 	sub	r16,r16,r17
    4eec:	1400010e 	bge	r2,r16,4ef4 <___vfprintf_internal_r+0x14c8>
    4ef0:	1021883a 	mov	r16,r2
    4ef4:	04000a0e 	bge	zero,r16,4f20 <___vfprintf_internal_r+0x14f4>
    4ef8:	d9001f17 	ldw	r4,124(sp)
    4efc:	1c07883a 	add	r3,r3,r16
    4f00:	44400015 	stw	r17,0(r8)
    4f04:	21000044 	addi	r4,r4,1
    4f08:	44000115 	stw	r16,4(r8)
    4f0c:	d8c02015 	stw	r3,128(sp)
    4f10:	d9001f15 	stw	r4,124(sp)
    4f14:	014001c4 	movi	r5,7
    4f18:	2901fb16 	blt	r5,r4,5708 <___vfprintf_internal_r+0x1cdc>
    4f1c:	42000204 	addi	r8,r8,8
    4f20:	8001f716 	blt	r16,zero,5700 <___vfprintf_internal_r+0x1cd4>
    4f24:	1421c83a 	sub	r16,r2,r16
    4f28:	043d380e 	bge	zero,r16,440c <__alt_data_end+0xfc00440c>
    4f2c:	04400404 	movi	r17,16
    4f30:	d8801f17 	ldw	r2,124(sp)
    4f34:	8c3efb0e 	bge	r17,r16,4b24 <__alt_data_end+0xfc004b24>
    4f38:	01400074 	movhi	r5,1
    4f3c:	2943f784 	addi	r5,r5,4062
    4f40:	d9402b15 	stw	r5,172(sp)
    4f44:	058001c4 	movi	r22,7
    4f48:	dcc02c17 	ldw	r19,176(sp)
    4f4c:	00000306 	br	4f5c <___vfprintf_internal_r+0x1530>
    4f50:	42000204 	addi	r8,r8,8
    4f54:	843ffc04 	addi	r16,r16,-16
    4f58:	8c3ef50e 	bge	r17,r16,4b30 <__alt_data_end+0xfc004b30>
    4f5c:	18c00404 	addi	r3,r3,16
    4f60:	10800044 	addi	r2,r2,1
    4f64:	45000015 	stw	r20,0(r8)
    4f68:	44400115 	stw	r17,4(r8)
    4f6c:	d8c02015 	stw	r3,128(sp)
    4f70:	d8801f15 	stw	r2,124(sp)
    4f74:	b0bff60e 	bge	r22,r2,4f50 <__alt_data_end+0xfc004f50>
    4f78:	d9801e04 	addi	r6,sp,120
    4f7c:	b80b883a 	mov	r5,r23
    4f80:	9809883a 	mov	r4,r19
    4f84:	000a9640 	call	a964 <__sprint_r>
    4f88:	103bad1e 	bne	r2,zero,3e40 <__alt_data_end+0xfc003e40>
    4f8c:	d8c02017 	ldw	r3,128(sp)
    4f90:	d8801f17 	ldw	r2,124(sp)
    4f94:	da000404 	addi	r8,sp,16
    4f98:	003fee06 	br	4f54 <__alt_data_end+0xfc004f54>
    4f9c:	9088703a 	and	r4,r18,r2
    4fa0:	203eab1e 	bne	r4,zero,4a50 <__alt_data_end+0xfc004a50>
    4fa4:	dc401f17 	ldw	r17,124(sp)
    4fa8:	40800115 	stw	r2,4(r8)
    4fac:	44000015 	stw	r16,0(r8)
    4fb0:	8c400044 	addi	r17,r17,1
    4fb4:	d8c02015 	stw	r3,128(sp)
    4fb8:	dc401f15 	stw	r17,124(sp)
    4fbc:	008001c4 	movi	r2,7
    4fc0:	14400e16 	blt	r2,r17,4ffc <___vfprintf_internal_r+0x15d0>
    4fc4:	45800204 	addi	r22,r8,8
    4fc8:	003eca06 	br	4af4 <__alt_data_end+0xfc004af4>
    4fcc:	01000074 	movhi	r4,1
    4fd0:	2103f784 	addi	r4,r4,4062
    4fd4:	d9002b15 	stw	r4,172(sp)
    4fd8:	d8802b17 	ldw	r2,172(sp)
    4fdc:	1c07883a 	add	r3,r3,r16
    4fe0:	8c400044 	addi	r17,r17,1
    4fe4:	b0800015 	stw	r2,0(r22)
    4fe8:	b4000115 	stw	r16,4(r22)
    4fec:	d8c02015 	stw	r3,128(sp)
    4ff0:	dc401f15 	stw	r17,124(sp)
    4ff4:	008001c4 	movi	r2,7
    4ff8:	147ebd0e 	bge	r2,r17,4af0 <__alt_data_end+0xfc004af0>
    4ffc:	d9002c17 	ldw	r4,176(sp)
    5000:	d9801e04 	addi	r6,sp,120
    5004:	b80b883a 	mov	r5,r23
    5008:	000a9640 	call	a964 <__sprint_r>
    500c:	103b8c1e 	bne	r2,zero,3e40 <__alt_data_end+0xfc003e40>
    5010:	d8c02017 	ldw	r3,128(sp)
    5014:	dc401f17 	ldw	r17,124(sp)
    5018:	dd800404 	addi	r22,sp,16
    501c:	003eb506 	br	4af4 <__alt_data_end+0xfc004af4>
    5020:	d9002c17 	ldw	r4,176(sp)
    5024:	d9801e04 	addi	r6,sp,120
    5028:	b80b883a 	mov	r5,r23
    502c:	000a9640 	call	a964 <__sprint_r>
    5030:	103b831e 	bne	r2,zero,3e40 <__alt_data_end+0xfc003e40>
    5034:	d8c02017 	ldw	r3,128(sp)
    5038:	dc401f17 	ldw	r17,124(sp)
    503c:	da000404 	addi	r8,sp,16
    5040:	003e8d06 	br	4a78 <__alt_data_end+0xfc004a78>
    5044:	d9002c17 	ldw	r4,176(sp)
    5048:	d9801e04 	addi	r6,sp,120
    504c:	b80b883a 	mov	r5,r23
    5050:	000a9640 	call	a964 <__sprint_r>
    5054:	103b7a1e 	bne	r2,zero,3e40 <__alt_data_end+0xfc003e40>
    5058:	d8c02017 	ldw	r3,128(sp)
    505c:	dc401f17 	ldw	r17,124(sp)
    5060:	dd800404 	addi	r22,sp,16
    5064:	003e8f06 	br	4aa4 <__alt_data_end+0xfc004aa4>
    5068:	0027883a 	mov	r19,zero
    506c:	003f4a06 	br	4d98 <__alt_data_end+0xfc004d98>
    5070:	d9002c17 	ldw	r4,176(sp)
    5074:	d9801e04 	addi	r6,sp,120
    5078:	b80b883a 	mov	r5,r23
    507c:	000a9640 	call	a964 <__sprint_r>
    5080:	103b6f1e 	bne	r2,zero,3e40 <__alt_data_end+0xfc003e40>
    5084:	d8c02017 	ldw	r3,128(sp)
    5088:	da000404 	addi	r8,sp,16
    508c:	003c9d06 	br	4304 <__alt_data_end+0xfc004304>
    5090:	04e7c83a 	sub	r19,zero,r19
    5094:	9804c03a 	cmpne	r2,r19,zero
    5098:	05adc83a 	sub	r22,zero,r22
    509c:	b0adc83a 	sub	r22,r22,r2
    50a0:	d8802917 	ldw	r2,164(sp)
    50a4:	07000b44 	movi	fp,45
    50a8:	df002785 	stb	fp,158(sp)
    50ac:	10017b16 	blt	r2,zero,569c <___vfprintf_internal_r+0x1c70>
    50b0:	00bfdfc4 	movi	r2,-129
    50b4:	90a4703a 	and	r18,r18,r2
    50b8:	003bb106 	br	3f80 <__alt_data_end+0xfc003f80>
    50bc:	d9003617 	ldw	r4,216(sp)
    50c0:	d9403817 	ldw	r5,224(sp)
    50c4:	da003d15 	stw	r8,244(sp)
    50c8:	000a5240 	call	a524 <__fpclassifyd>
    50cc:	da003d17 	ldw	r8,244(sp)
    50d0:	1000f026 	beq	r2,zero,5494 <___vfprintf_internal_r+0x1a68>
    50d4:	d9002917 	ldw	r4,164(sp)
    50d8:	05bff7c4 	movi	r22,-33
    50dc:	00bfffc4 	movi	r2,-1
    50e0:	8dac703a 	and	r22,r17,r22
    50e4:	20820026 	beq	r4,r2,58e8 <___vfprintf_internal_r+0x1ebc>
    50e8:	008011c4 	movi	r2,71
    50ec:	b081f726 	beq	r22,r2,58cc <___vfprintf_internal_r+0x1ea0>
    50f0:	d9003817 	ldw	r4,224(sp)
    50f4:	90c04014 	ori	r3,r18,256
    50f8:	d8c02b15 	stw	r3,172(sp)
    50fc:	20021516 	blt	r4,zero,5954 <___vfprintf_internal_r+0x1f28>
    5100:	dcc03817 	ldw	r19,224(sp)
    5104:	d8002a05 	stb	zero,168(sp)
    5108:	00801984 	movi	r2,102
    510c:	8881f926 	beq	r17,r2,58f4 <___vfprintf_internal_r+0x1ec8>
    5110:	00801184 	movi	r2,70
    5114:	88821c26 	beq	r17,r2,5988 <___vfprintf_internal_r+0x1f5c>
    5118:	00801144 	movi	r2,69
    511c:	b081ef26 	beq	r22,r2,58dc <___vfprintf_internal_r+0x1eb0>
    5120:	d8c02917 	ldw	r3,164(sp)
    5124:	d8802104 	addi	r2,sp,132
    5128:	d8800315 	stw	r2,12(sp)
    512c:	d9403617 	ldw	r5,216(sp)
    5130:	d8802504 	addi	r2,sp,148
    5134:	d9002c17 	ldw	r4,176(sp)
    5138:	d8800215 	stw	r2,8(sp)
    513c:	d8802604 	addi	r2,sp,152
    5140:	d8c00015 	stw	r3,0(sp)
    5144:	d8800115 	stw	r2,4(sp)
    5148:	01c00084 	movi	r7,2
    514c:	980d883a 	mov	r6,r19
    5150:	d8c03c15 	stw	r3,240(sp)
    5154:	da003d15 	stw	r8,244(sp)
    5158:	00064ac0 	call	64ac <_dtoa_r>
    515c:	1021883a 	mov	r16,r2
    5160:	008019c4 	movi	r2,103
    5164:	d8c03c17 	ldw	r3,240(sp)
    5168:	da003d17 	ldw	r8,244(sp)
    516c:	88817126 	beq	r17,r2,5734 <___vfprintf_internal_r+0x1d08>
    5170:	008011c4 	movi	r2,71
    5174:	88829226 	beq	r17,r2,5bc0 <___vfprintf_internal_r+0x2194>
    5178:	80f9883a 	add	fp,r16,r3
    517c:	d9003617 	ldw	r4,216(sp)
    5180:	000d883a 	mov	r6,zero
    5184:	000f883a 	mov	r7,zero
    5188:	980b883a 	mov	r5,r19
    518c:	da003d15 	stw	r8,244(sp)
    5190:	000f1e80 	call	f1e8 <__eqdf2>
    5194:	da003d17 	ldw	r8,244(sp)
    5198:	10018d26 	beq	r2,zero,57d0 <___vfprintf_internal_r+0x1da4>
    519c:	d8802117 	ldw	r2,132(sp)
    51a0:	1700062e 	bgeu	r2,fp,51bc <___vfprintf_internal_r+0x1790>
    51a4:	01000c04 	movi	r4,48
    51a8:	10c00044 	addi	r3,r2,1
    51ac:	d8c02115 	stw	r3,132(sp)
    51b0:	11000005 	stb	r4,0(r2)
    51b4:	d8802117 	ldw	r2,132(sp)
    51b8:	173ffb36 	bltu	r2,fp,51a8 <__alt_data_end+0xfc0051a8>
    51bc:	1405c83a 	sub	r2,r2,r16
    51c0:	d8803315 	stw	r2,204(sp)
    51c4:	008011c4 	movi	r2,71
    51c8:	b0817626 	beq	r22,r2,57a4 <___vfprintf_internal_r+0x1d78>
    51cc:	00801944 	movi	r2,101
    51d0:	1442810e 	bge	r2,r17,5bd8 <___vfprintf_internal_r+0x21ac>
    51d4:	d8c02617 	ldw	r3,152(sp)
    51d8:	00801984 	movi	r2,102
    51dc:	d8c03215 	stw	r3,200(sp)
    51e0:	8881fe26 	beq	r17,r2,59dc <___vfprintf_internal_r+0x1fb0>
    51e4:	d8c03217 	ldw	r3,200(sp)
    51e8:	d9003317 	ldw	r4,204(sp)
    51ec:	1901dd16 	blt	r3,r4,5964 <___vfprintf_internal_r+0x1f38>
    51f0:	9480004c 	andi	r18,r18,1
    51f4:	90022b1e 	bne	r18,zero,5aa4 <___vfprintf_internal_r+0x2078>
    51f8:	1805883a 	mov	r2,r3
    51fc:	18028016 	blt	r3,zero,5c00 <___vfprintf_internal_r+0x21d4>
    5200:	d8c03217 	ldw	r3,200(sp)
    5204:	044019c4 	movi	r17,103
    5208:	d8c02e15 	stw	r3,184(sp)
    520c:	df002a07 	ldb	fp,168(sp)
    5210:	e001531e 	bne	fp,zero,5760 <___vfprintf_internal_r+0x1d34>
    5214:	df002783 	ldbu	fp,158(sp)
    5218:	d8802a15 	stw	r2,168(sp)
    521c:	dc802b17 	ldw	r18,172(sp)
    5220:	d8002915 	stw	zero,164(sp)
    5224:	003bd106 	br	416c <__alt_data_end+0xfc00416c>
    5228:	d8802d17 	ldw	r2,180(sp)
    522c:	d8c02d17 	ldw	r3,180(sp)
    5230:	d9002d17 	ldw	r4,180(sp)
    5234:	10800017 	ldw	r2,0(r2)
    5238:	18c00117 	ldw	r3,4(r3)
    523c:	21000204 	addi	r4,r4,8
    5240:	d8803615 	stw	r2,216(sp)
    5244:	d8c03815 	stw	r3,224(sp)
    5248:	d9002d15 	stw	r4,180(sp)
    524c:	003b7506 	br	4024 <__alt_data_end+0xfc004024>
    5250:	ac400007 	ldb	r17,0(r21)
    5254:	003a5906 	br	3bbc <__alt_data_end+0xfc003bbc>
    5258:	9080100c 	andi	r2,r18,64
    525c:	1000a826 	beq	r2,zero,5500 <___vfprintf_internal_r+0x1ad4>
    5260:	d9002d17 	ldw	r4,180(sp)
    5264:	002d883a 	mov	r22,zero
    5268:	24c0000b 	ldhu	r19,0(r4)
    526c:	21000104 	addi	r4,r4,4
    5270:	d9002d15 	stw	r4,180(sp)
    5274:	003ccb06 	br	45a4 <__alt_data_end+0xfc0045a4>
    5278:	d8c02d17 	ldw	r3,180(sp)
    527c:	d9002917 	ldw	r4,164(sp)
    5280:	002d883a 	mov	r22,zero
    5284:	18800104 	addi	r2,r3,4
    5288:	1cc00017 	ldw	r19,0(r3)
    528c:	203ebb0e 	bge	r4,zero,4d7c <__alt_data_end+0xfc004d7c>
    5290:	003ef106 	br	4e58 <__alt_data_end+0xfc004e58>
    5294:	9080040c 	andi	r2,r18,16
    5298:	1000921e 	bne	r2,zero,54e4 <___vfprintf_internal_r+0x1ab8>
    529c:	9480100c 	andi	r18,r18,64
    52a0:	90013926 	beq	r18,zero,5788 <___vfprintf_internal_r+0x1d5c>
    52a4:	d9002d17 	ldw	r4,180(sp)
    52a8:	d9402f17 	ldw	r5,188(sp)
    52ac:	20800017 	ldw	r2,0(r4)
    52b0:	21000104 	addi	r4,r4,4
    52b4:	d9002d15 	stw	r4,180(sp)
    52b8:	1140000d 	sth	r5,0(r2)
    52bc:	003a1606 	br	3b18 <__alt_data_end+0xfc003b18>
    52c0:	9080100c 	andi	r2,r18,64
    52c4:	10008026 	beq	r2,zero,54c8 <___vfprintf_internal_r+0x1a9c>
    52c8:	d8c02d17 	ldw	r3,180(sp)
    52cc:	1cc0000f 	ldh	r19,0(r3)
    52d0:	18c00104 	addi	r3,r3,4
    52d4:	d8c02d15 	stw	r3,180(sp)
    52d8:	982dd7fa 	srai	r22,r19,31
    52dc:	b005883a 	mov	r2,r22
    52e0:	003b1f06 	br	3f60 <__alt_data_end+0xfc003f60>
    52e4:	9080100c 	andi	r2,r18,64
    52e8:	d8002785 	stb	zero,158(sp)
    52ec:	10008a1e 	bne	r2,zero,5518 <___vfprintf_internal_r+0x1aec>
    52f0:	d9402d17 	ldw	r5,180(sp)
    52f4:	d8c02917 	ldw	r3,164(sp)
    52f8:	002d883a 	mov	r22,zero
    52fc:	28800104 	addi	r2,r5,4
    5300:	2cc00017 	ldw	r19,0(r5)
    5304:	183e4b0e 	bge	r3,zero,4c34 <__alt_data_end+0xfc004c34>
    5308:	9d86b03a 	or	r3,r19,r22
    530c:	d8802d15 	stw	r2,180(sp)
    5310:	183e4c1e 	bne	r3,zero,4c44 <__alt_data_end+0xfc004c44>
    5314:	0039883a 	mov	fp,zero
    5318:	0005883a 	mov	r2,zero
    531c:	003d4006 	br	4820 <__alt_data_end+0xfc004820>
    5320:	01400074 	movhi	r5,1
    5324:	2943f784 	addi	r5,r5,4062
    5328:	d9402b15 	stw	r5,172(sp)
    532c:	d9402b17 	ldw	r5,172(sp)
    5330:	1c47883a 	add	r3,r3,r17
    5334:	10800044 	addi	r2,r2,1
    5338:	41400015 	stw	r5,0(r8)
    533c:	44400115 	stw	r17,4(r8)
    5340:	d8c02015 	stw	r3,128(sp)
    5344:	d8801f15 	stw	r2,124(sp)
    5348:	010001c4 	movi	r4,7
    534c:	20bec816 	blt	r4,r2,4e70 <__alt_data_end+0xfc004e70>
    5350:	42000204 	addi	r8,r8,8
    5354:	003ecd06 	br	4e8c <__alt_data_end+0xfc004e8c>
    5358:	d9002917 	ldw	r4,164(sp)
    535c:	d8002785 	stb	zero,158(sp)
    5360:	203d2d16 	blt	r4,zero,4818 <__alt_data_end+0xfc004818>
    5364:	00bfdfc4 	movi	r2,-129
    5368:	90a4703a 	and	r18,r18,r2
    536c:	003a9106 	br	3db4 <__alt_data_end+0xfc003db4>
    5370:	01000074 	movhi	r4,1
    5374:	2103f784 	addi	r4,r4,4062
    5378:	d9002b15 	stw	r4,172(sp)
    537c:	003c0c06 	br	43b0 <__alt_data_end+0xfc0043b0>
    5380:	d9002c17 	ldw	r4,176(sp)
    5384:	d9801e04 	addi	r6,sp,120
    5388:	b80b883a 	mov	r5,r23
    538c:	000a9640 	call	a964 <__sprint_r>
    5390:	103aab1e 	bne	r2,zero,3e40 <__alt_data_end+0xfc003e40>
    5394:	d8c02017 	ldw	r3,128(sp)
    5398:	da000404 	addi	r8,sp,16
    539c:	003d4106 	br	48a4 <__alt_data_end+0xfc0048a4>
    53a0:	d8801f17 	ldw	r2,124(sp)
    53a4:	01400074 	movhi	r5,1
    53a8:	01000044 	movi	r4,1
    53ac:	18c00044 	addi	r3,r3,1
    53b0:	10800044 	addi	r2,r2,1
    53b4:	2943f704 	addi	r5,r5,4060
    53b8:	41000115 	stw	r4,4(r8)
    53bc:	41400015 	stw	r5,0(r8)
    53c0:	d8c02015 	stw	r3,128(sp)
    53c4:	d8801f15 	stw	r2,124(sp)
    53c8:	010001c4 	movi	r4,7
    53cc:	20805c16 	blt	r4,r2,5540 <___vfprintf_internal_r+0x1b14>
    53d0:	42000204 	addi	r8,r8,8
    53d4:	8800041e 	bne	r17,zero,53e8 <___vfprintf_internal_r+0x19bc>
    53d8:	d8803317 	ldw	r2,204(sp)
    53dc:	1000021e 	bne	r2,zero,53e8 <___vfprintf_internal_r+0x19bc>
    53e0:	9080004c 	andi	r2,r18,1
    53e4:	103c0926 	beq	r2,zero,440c <__alt_data_end+0xfc00440c>
    53e8:	d9003717 	ldw	r4,220(sp)
    53ec:	d8801f17 	ldw	r2,124(sp)
    53f0:	d9403417 	ldw	r5,208(sp)
    53f4:	20c7883a 	add	r3,r4,r3
    53f8:	10800044 	addi	r2,r2,1
    53fc:	41000115 	stw	r4,4(r8)
    5400:	41400015 	stw	r5,0(r8)
    5404:	d8c02015 	stw	r3,128(sp)
    5408:	d8801f15 	stw	r2,124(sp)
    540c:	010001c4 	movi	r4,7
    5410:	20812116 	blt	r4,r2,5898 <___vfprintf_internal_r+0x1e6c>
    5414:	42000204 	addi	r8,r8,8
    5418:	0463c83a 	sub	r17,zero,r17
    541c:	0440730e 	bge	zero,r17,55ec <___vfprintf_internal_r+0x1bc0>
    5420:	05800404 	movi	r22,16
    5424:	b440860e 	bge	r22,r17,5640 <___vfprintf_internal_r+0x1c14>
    5428:	01400074 	movhi	r5,1
    542c:	2943f784 	addi	r5,r5,4062
    5430:	d9402b15 	stw	r5,172(sp)
    5434:	070001c4 	movi	fp,7
    5438:	dcc02c17 	ldw	r19,176(sp)
    543c:	00000306 	br	544c <___vfprintf_internal_r+0x1a20>
    5440:	42000204 	addi	r8,r8,8
    5444:	8c7ffc04 	addi	r17,r17,-16
    5448:	b440800e 	bge	r22,r17,564c <___vfprintf_internal_r+0x1c20>
    544c:	18c00404 	addi	r3,r3,16
    5450:	10800044 	addi	r2,r2,1
    5454:	45000015 	stw	r20,0(r8)
    5458:	45800115 	stw	r22,4(r8)
    545c:	d8c02015 	stw	r3,128(sp)
    5460:	d8801f15 	stw	r2,124(sp)
    5464:	e0bff60e 	bge	fp,r2,5440 <__alt_data_end+0xfc005440>
    5468:	d9801e04 	addi	r6,sp,120
    546c:	b80b883a 	mov	r5,r23
    5470:	9809883a 	mov	r4,r19
    5474:	000a9640 	call	a964 <__sprint_r>
    5478:	103a711e 	bne	r2,zero,3e40 <__alt_data_end+0xfc003e40>
    547c:	d8c02017 	ldw	r3,128(sp)
    5480:	d8801f17 	ldw	r2,124(sp)
    5484:	da000404 	addi	r8,sp,16
    5488:	003fee06 	br	5444 <__alt_data_end+0xfc005444>
    548c:	00bfffc4 	movi	r2,-1
    5490:	003a6f06 	br	3e50 <__alt_data_end+0xfc003e50>
    5494:	008011c4 	movi	r2,71
    5498:	1440b816 	blt	r2,r17,577c <___vfprintf_internal_r+0x1d50>
    549c:	04000074 	movhi	r16,1
    54a0:	8403e904 	addi	r16,r16,4004
    54a4:	00c000c4 	movi	r3,3
    54a8:	00bfdfc4 	movi	r2,-129
    54ac:	d8c02a15 	stw	r3,168(sp)
    54b0:	90a4703a 	and	r18,r18,r2
    54b4:	df002783 	ldbu	fp,158(sp)
    54b8:	d8c02e15 	stw	r3,184(sp)
    54bc:	d8002915 	stw	zero,164(sp)
    54c0:	d8003215 	stw	zero,200(sp)
    54c4:	003b2906 	br	416c <__alt_data_end+0xfc00416c>
    54c8:	d9002d17 	ldw	r4,180(sp)
    54cc:	24c00017 	ldw	r19,0(r4)
    54d0:	21000104 	addi	r4,r4,4
    54d4:	d9002d15 	stw	r4,180(sp)
    54d8:	982dd7fa 	srai	r22,r19,31
    54dc:	b005883a 	mov	r2,r22
    54e0:	003a9f06 	br	3f60 <__alt_data_end+0xfc003f60>
    54e4:	d9402d17 	ldw	r5,180(sp)
    54e8:	d8c02f17 	ldw	r3,188(sp)
    54ec:	28800017 	ldw	r2,0(r5)
    54f0:	29400104 	addi	r5,r5,4
    54f4:	d9402d15 	stw	r5,180(sp)
    54f8:	10c00015 	stw	r3,0(r2)
    54fc:	00398606 	br	3b18 <__alt_data_end+0xfc003b18>
    5500:	d9402d17 	ldw	r5,180(sp)
    5504:	002d883a 	mov	r22,zero
    5508:	2cc00017 	ldw	r19,0(r5)
    550c:	29400104 	addi	r5,r5,4
    5510:	d9402d15 	stw	r5,180(sp)
    5514:	003c2306 	br	45a4 <__alt_data_end+0xfc0045a4>
    5518:	d8c02d17 	ldw	r3,180(sp)
    551c:	d9002917 	ldw	r4,164(sp)
    5520:	002d883a 	mov	r22,zero
    5524:	18800104 	addi	r2,r3,4
    5528:	1cc0000b 	ldhu	r19,0(r3)
    552c:	203dc10e 	bge	r4,zero,4c34 <__alt_data_end+0xfc004c34>
    5530:	003f7506 	br	5308 <__alt_data_end+0xfc005308>
    5534:	04000074 	movhi	r16,1
    5538:	8403e704 	addi	r16,r16,3996
    553c:	003acc06 	br	4070 <__alt_data_end+0xfc004070>
    5540:	d9002c17 	ldw	r4,176(sp)
    5544:	d9801e04 	addi	r6,sp,120
    5548:	b80b883a 	mov	r5,r23
    554c:	000a9640 	call	a964 <__sprint_r>
    5550:	103a3b1e 	bne	r2,zero,3e40 <__alt_data_end+0xfc003e40>
    5554:	dc402617 	ldw	r17,152(sp)
    5558:	d8c02017 	ldw	r3,128(sp)
    555c:	da000404 	addi	r8,sp,16
    5560:	003f9c06 	br	53d4 <__alt_data_end+0xfc0053d4>
    5564:	ac400043 	ldbu	r17,1(r21)
    5568:	94800814 	ori	r18,r18,32
    556c:	ad400044 	addi	r21,r21,1
    5570:	8c403fcc 	andi	r17,r17,255
    5574:	8c40201c 	xori	r17,r17,128
    5578:	8c7fe004 	addi	r17,r17,-128
    557c:	00398f06 	br	3bbc <__alt_data_end+0xfc003bbc>
    5580:	d8c02d15 	stw	r3,180(sp)
    5584:	0039883a 	mov	fp,zero
    5588:	003e3506 	br	4e60 <__alt_data_end+0xfc004e60>
    558c:	d9002c17 	ldw	r4,176(sp)
    5590:	d9801e04 	addi	r6,sp,120
    5594:	b80b883a 	mov	r5,r23
    5598:	000a9640 	call	a964 <__sprint_r>
    559c:	103a281e 	bne	r2,zero,3e40 <__alt_data_end+0xfc003e40>
    55a0:	d8c02017 	ldw	r3,128(sp)
    55a4:	da000404 	addi	r8,sp,16
    55a8:	003cd006 	br	48ec <__alt_data_end+0xfc0048ec>
    55ac:	8009883a 	mov	r4,r16
    55b0:	da003d15 	stw	r8,244(sp)
    55b4:	00039880 	call	3988 <strlen>
    55b8:	d8802e15 	stw	r2,184(sp)
    55bc:	da003d17 	ldw	r8,244(sp)
    55c0:	103c340e 	bge	r2,zero,4694 <__alt_data_end+0xfc004694>
    55c4:	0005883a 	mov	r2,zero
    55c8:	003c3206 	br	4694 <__alt_data_end+0xfc004694>
    55cc:	d9002c17 	ldw	r4,176(sp)
    55d0:	d9801e04 	addi	r6,sp,120
    55d4:	b80b883a 	mov	r5,r23
    55d8:	000a9640 	call	a964 <__sprint_r>
    55dc:	103a181e 	bne	r2,zero,3e40 <__alt_data_end+0xfc003e40>
    55e0:	d8c02017 	ldw	r3,128(sp)
    55e4:	d8801f17 	ldw	r2,124(sp)
    55e8:	da000404 	addi	r8,sp,16
    55ec:	d9403317 	ldw	r5,204(sp)
    55f0:	10800044 	addi	r2,r2,1
    55f4:	44000015 	stw	r16,0(r8)
    55f8:	28c7883a 	add	r3,r5,r3
    55fc:	003b7d06 	br	43f4 <__alt_data_end+0xfc0043f4>
    5600:	01000074 	movhi	r4,1
    5604:	2103fb84 	addi	r4,r4,4078
    5608:	d9003515 	stw	r4,212(sp)
    560c:	003b1406 	br	4260 <__alt_data_end+0xfc004260>
    5610:	013fffc4 	movi	r4,-1
    5614:	003a3506 	br	3eec <__alt_data_end+0xfc003eec>
    5618:	0023883a 	mov	r17,zero
    561c:	003d9d06 	br	4c94 <__alt_data_end+0xfc004c94>
    5620:	d9002c17 	ldw	r4,176(sp)
    5624:	d9801e04 	addi	r6,sp,120
    5628:	b80b883a 	mov	r5,r23
    562c:	000a9640 	call	a964 <__sprint_r>
    5630:	103a031e 	bne	r2,zero,3e40 <__alt_data_end+0xfc003e40>
    5634:	d8c02017 	ldw	r3,128(sp)
    5638:	da000404 	addi	r8,sp,16
    563c:	003d9406 	br	4c90 <__alt_data_end+0xfc004c90>
    5640:	01000074 	movhi	r4,1
    5644:	2103f784 	addi	r4,r4,4062
    5648:	d9002b15 	stw	r4,172(sp)
    564c:	d9002b17 	ldw	r4,172(sp)
    5650:	1c47883a 	add	r3,r3,r17
    5654:	10800044 	addi	r2,r2,1
    5658:	41000015 	stw	r4,0(r8)
    565c:	44400115 	stw	r17,4(r8)
    5660:	d8c02015 	stw	r3,128(sp)
    5664:	d8801f15 	stw	r2,124(sp)
    5668:	010001c4 	movi	r4,7
    566c:	20bfd716 	blt	r4,r2,55cc <__alt_data_end+0xfc0055cc>
    5670:	42000204 	addi	r8,r8,8
    5674:	003fdd06 	br	55ec <__alt_data_end+0xfc0055ec>
    5678:	d9002c17 	ldw	r4,176(sp)
    567c:	d9801e04 	addi	r6,sp,120
    5680:	b80b883a 	mov	r5,r23
    5684:	000a9640 	call	a964 <__sprint_r>
    5688:	1039ed1e 	bne	r2,zero,3e40 <__alt_data_end+0xfc003e40>
    568c:	d8802617 	ldw	r2,152(sp)
    5690:	d8c02017 	ldw	r3,128(sp)
    5694:	da000404 	addi	r8,sp,16
    5698:	003e1006 	br	4edc <__alt_data_end+0xfc004edc>
    569c:	00800044 	movi	r2,1
    56a0:	10803fcc 	andi	r2,r2,255
    56a4:	00c00044 	movi	r3,1
    56a8:	10fa3526 	beq	r2,r3,3f80 <__alt_data_end+0xfc003f80>
    56ac:	00c00084 	movi	r3,2
    56b0:	10fbcb26 	beq	r2,r3,45e0 <__alt_data_end+0xfc0045e0>
    56b4:	003a8f06 	br	40f4 <__alt_data_end+0xfc0040f4>
    56b8:	01000074 	movhi	r4,1
    56bc:	2103fb84 	addi	r4,r4,4078
    56c0:	d9003515 	stw	r4,212(sp)
    56c4:	003b7606 	br	44a0 <__alt_data_end+0xfc0044a0>
    56c8:	d8802917 	ldw	r2,164(sp)
    56cc:	00c00184 	movi	r3,6
    56d0:	1880012e 	bgeu	r3,r2,56d8 <___vfprintf_internal_r+0x1cac>
    56d4:	1805883a 	mov	r2,r3
    56d8:	d8802e15 	stw	r2,184(sp)
    56dc:	1000ef16 	blt	r2,zero,5a9c <___vfprintf_internal_r+0x2070>
    56e0:	04000074 	movhi	r16,1
    56e4:	d8802a15 	stw	r2,168(sp)
    56e8:	dcc02d15 	stw	r19,180(sp)
    56ec:	d8002915 	stw	zero,164(sp)
    56f0:	d8003215 	stw	zero,200(sp)
    56f4:	8403f504 	addi	r16,r16,4052
    56f8:	0039883a 	mov	fp,zero
    56fc:	003aa206 	br	4188 <__alt_data_end+0xfc004188>
    5700:	0021883a 	mov	r16,zero
    5704:	003e0706 	br	4f24 <__alt_data_end+0xfc004f24>
    5708:	d9002c17 	ldw	r4,176(sp)
    570c:	d9801e04 	addi	r6,sp,120
    5710:	b80b883a 	mov	r5,r23
    5714:	000a9640 	call	a964 <__sprint_r>
    5718:	1039c91e 	bne	r2,zero,3e40 <__alt_data_end+0xfc003e40>
    571c:	d8802617 	ldw	r2,152(sp)
    5720:	d9403317 	ldw	r5,204(sp)
    5724:	d8c02017 	ldw	r3,128(sp)
    5728:	da000404 	addi	r8,sp,16
    572c:	2885c83a 	sub	r2,r5,r2
    5730:	003dfb06 	br	4f20 <__alt_data_end+0xfc004f20>
    5734:	9080004c 	andi	r2,r18,1
    5738:	103e8f1e 	bne	r2,zero,5178 <__alt_data_end+0xfc005178>
    573c:	d8802117 	ldw	r2,132(sp)
    5740:	003e9e06 	br	51bc <__alt_data_end+0xfc0051bc>
    5744:	1025883a 	mov	r18,r2
    5748:	0039883a 	mov	fp,zero
    574c:	00800084 	movi	r2,2
    5750:	003fd306 	br	56a0 <__alt_data_end+0xfc0056a0>
    5754:	07000b44 	movi	fp,45
    5758:	df002785 	stb	fp,158(sp)
    575c:	003a4006 	br	4060 <__alt_data_end+0xfc004060>
    5760:	00c00b44 	movi	r3,45
    5764:	d8c02785 	stb	r3,158(sp)
    5768:	d8802a15 	stw	r2,168(sp)
    576c:	dc802b17 	ldw	r18,172(sp)
    5770:	d8002915 	stw	zero,164(sp)
    5774:	07000b44 	movi	fp,45
    5778:	003a8006 	br	417c <__alt_data_end+0xfc00417c>
    577c:	04000074 	movhi	r16,1
    5780:	8403ea04 	addi	r16,r16,4008
    5784:	003f4706 	br	54a4 <__alt_data_end+0xfc0054a4>
    5788:	d8c02d17 	ldw	r3,180(sp)
    578c:	d9002f17 	ldw	r4,188(sp)
    5790:	18800017 	ldw	r2,0(r3)
    5794:	18c00104 	addi	r3,r3,4
    5798:	d8c02d15 	stw	r3,180(sp)
    579c:	11000015 	stw	r4,0(r2)
    57a0:	0038dd06 	br	3b18 <__alt_data_end+0xfc003b18>
    57a4:	dd802617 	ldw	r22,152(sp)
    57a8:	00bfff44 	movi	r2,-3
    57ac:	b0801c16 	blt	r22,r2,5820 <___vfprintf_internal_r+0x1df4>
    57b0:	d9402917 	ldw	r5,164(sp)
    57b4:	2d801a16 	blt	r5,r22,5820 <___vfprintf_internal_r+0x1df4>
    57b8:	dd803215 	stw	r22,200(sp)
    57bc:	003e8906 	br	51e4 <__alt_data_end+0xfc0051e4>
    57c0:	01000074 	movhi	r4,1
    57c4:	2103f784 	addi	r4,r4,4062
    57c8:	d9002b15 	stw	r4,172(sp)
    57cc:	003c9106 	br	4a14 <__alt_data_end+0xfc004a14>
    57d0:	e005883a 	mov	r2,fp
    57d4:	003e7906 	br	51bc <__alt_data_end+0xfc0051bc>
    57d8:	d9402917 	ldw	r5,164(sp)
    57dc:	df002783 	ldbu	fp,158(sp)
    57e0:	dcc02d15 	stw	r19,180(sp)
    57e4:	d9402a15 	stw	r5,168(sp)
    57e8:	d9402e15 	stw	r5,184(sp)
    57ec:	d8002915 	stw	zero,164(sp)
    57f0:	d8003215 	stw	zero,200(sp)
    57f4:	003a5d06 	br	416c <__alt_data_end+0xfc00416c>
    57f8:	9080004c 	andi	r2,r18,1
    57fc:	0039883a 	mov	fp,zero
    5800:	10000426 	beq	r2,zero,5814 <___vfprintf_internal_r+0x1de8>
    5804:	00800c04 	movi	r2,48
    5808:	dc001dc4 	addi	r16,sp,119
    580c:	d8801dc5 	stb	r2,119(sp)
    5810:	003b8006 	br	4614 <__alt_data_end+0xfc004614>
    5814:	d8002e15 	stw	zero,184(sp)
    5818:	dc001e04 	addi	r16,sp,120
    581c:	003a4d06 	br	4154 <__alt_data_end+0xfc004154>
    5820:	8c7fff84 	addi	r17,r17,-2
    5824:	b5bfffc4 	addi	r22,r22,-1
    5828:	dd802615 	stw	r22,152(sp)
    582c:	dc4022c5 	stb	r17,139(sp)
    5830:	b000bf16 	blt	r22,zero,5b30 <___vfprintf_internal_r+0x2104>
    5834:	00800ac4 	movi	r2,43
    5838:	d8802305 	stb	r2,140(sp)
    583c:	00800244 	movi	r2,9
    5840:	15807016 	blt	r2,r22,5a04 <___vfprintf_internal_r+0x1fd8>
    5844:	00800c04 	movi	r2,48
    5848:	b5800c04 	addi	r22,r22,48
    584c:	d8802345 	stb	r2,141(sp)
    5850:	dd802385 	stb	r22,142(sp)
    5854:	d88023c4 	addi	r2,sp,143
    5858:	df0022c4 	addi	fp,sp,139
    585c:	d8c03317 	ldw	r3,204(sp)
    5860:	1739c83a 	sub	fp,r2,fp
    5864:	d9003317 	ldw	r4,204(sp)
    5868:	e0c7883a 	add	r3,fp,r3
    586c:	df003a15 	stw	fp,232(sp)
    5870:	d8c02e15 	stw	r3,184(sp)
    5874:	00800044 	movi	r2,1
    5878:	1100b30e 	bge	r2,r4,5b48 <___vfprintf_internal_r+0x211c>
    587c:	d8c02e17 	ldw	r3,184(sp)
    5880:	18c00044 	addi	r3,r3,1
    5884:	d8c02e15 	stw	r3,184(sp)
    5888:	1805883a 	mov	r2,r3
    588c:	1800ac16 	blt	r3,zero,5b40 <___vfprintf_internal_r+0x2114>
    5890:	d8003215 	stw	zero,200(sp)
    5894:	003e5d06 	br	520c <__alt_data_end+0xfc00520c>
    5898:	d9002c17 	ldw	r4,176(sp)
    589c:	d9801e04 	addi	r6,sp,120
    58a0:	b80b883a 	mov	r5,r23
    58a4:	000a9640 	call	a964 <__sprint_r>
    58a8:	1039651e 	bne	r2,zero,3e40 <__alt_data_end+0xfc003e40>
    58ac:	dc402617 	ldw	r17,152(sp)
    58b0:	d8c02017 	ldw	r3,128(sp)
    58b4:	d8801f17 	ldw	r2,124(sp)
    58b8:	da000404 	addi	r8,sp,16
    58bc:	003ed606 	br	5418 <__alt_data_end+0xfc005418>
    58c0:	582b883a 	mov	r21,r11
    58c4:	d8002915 	stw	zero,164(sp)
    58c8:	0038bd06 	br	3bc0 <__alt_data_end+0xfc003bc0>
    58cc:	d8802917 	ldw	r2,164(sp)
    58d0:	103e071e 	bne	r2,zero,50f0 <__alt_data_end+0xfc0050f0>
    58d4:	dc002915 	stw	r16,164(sp)
    58d8:	003e0506 	br	50f0 <__alt_data_end+0xfc0050f0>
    58dc:	d9002917 	ldw	r4,164(sp)
    58e0:	20c00044 	addi	r3,r4,1
    58e4:	003e0f06 	br	5124 <__alt_data_end+0xfc005124>
    58e8:	01400184 	movi	r5,6
    58ec:	d9402915 	stw	r5,164(sp)
    58f0:	003dff06 	br	50f0 <__alt_data_end+0xfc0050f0>
    58f4:	d8802104 	addi	r2,sp,132
    58f8:	d8800315 	stw	r2,12(sp)
    58fc:	d8802504 	addi	r2,sp,148
    5900:	d8800215 	stw	r2,8(sp)
    5904:	d8802604 	addi	r2,sp,152
    5908:	d8800115 	stw	r2,4(sp)
    590c:	d8802917 	ldw	r2,164(sp)
    5910:	d9403617 	ldw	r5,216(sp)
    5914:	d9002c17 	ldw	r4,176(sp)
    5918:	d8800015 	stw	r2,0(sp)
    591c:	01c000c4 	movi	r7,3
    5920:	980d883a 	mov	r6,r19
    5924:	da003d15 	stw	r8,244(sp)
    5928:	00064ac0 	call	64ac <_dtoa_r>
    592c:	d8c02917 	ldw	r3,164(sp)
    5930:	da003d17 	ldw	r8,244(sp)
    5934:	1021883a 	mov	r16,r2
    5938:	10f9883a 	add	fp,r2,r3
    593c:	81000007 	ldb	r4,0(r16)
    5940:	00800c04 	movi	r2,48
    5944:	20805e26 	beq	r4,r2,5ac0 <___vfprintf_internal_r+0x2094>
    5948:	d8c02617 	ldw	r3,152(sp)
    594c:	e0f9883a 	add	fp,fp,r3
    5950:	003e0a06 	br	517c <__alt_data_end+0xfc00517c>
    5954:	00c00b44 	movi	r3,45
    5958:	24e0003c 	xorhi	r19,r4,32768
    595c:	d8c02a05 	stb	r3,168(sp)
    5960:	003de906 	br	5108 <__alt_data_end+0xfc005108>
    5964:	d8c03217 	ldw	r3,200(sp)
    5968:	00c07a0e 	bge	zero,r3,5b54 <___vfprintf_internal_r+0x2128>
    596c:	00800044 	movi	r2,1
    5970:	d9003317 	ldw	r4,204(sp)
    5974:	1105883a 	add	r2,r2,r4
    5978:	d8802e15 	stw	r2,184(sp)
    597c:	10004e16 	blt	r2,zero,5ab8 <___vfprintf_internal_r+0x208c>
    5980:	044019c4 	movi	r17,103
    5984:	003e2106 	br	520c <__alt_data_end+0xfc00520c>
    5988:	d9002917 	ldw	r4,164(sp)
    598c:	d8802104 	addi	r2,sp,132
    5990:	d8800315 	stw	r2,12(sp)
    5994:	d9000015 	stw	r4,0(sp)
    5998:	d8802504 	addi	r2,sp,148
    599c:	d9403617 	ldw	r5,216(sp)
    59a0:	d9002c17 	ldw	r4,176(sp)
    59a4:	d8800215 	stw	r2,8(sp)
    59a8:	d8802604 	addi	r2,sp,152
    59ac:	d8800115 	stw	r2,4(sp)
    59b0:	01c000c4 	movi	r7,3
    59b4:	980d883a 	mov	r6,r19
    59b8:	da003d15 	stw	r8,244(sp)
    59bc:	00064ac0 	call	64ac <_dtoa_r>
    59c0:	d8c02917 	ldw	r3,164(sp)
    59c4:	da003d17 	ldw	r8,244(sp)
    59c8:	1021883a 	mov	r16,r2
    59cc:	00801184 	movi	r2,70
    59d0:	80f9883a 	add	fp,r16,r3
    59d4:	88bfd926 	beq	r17,r2,593c <__alt_data_end+0xfc00593c>
    59d8:	003de806 	br	517c <__alt_data_end+0xfc00517c>
    59dc:	d9002917 	ldw	r4,164(sp)
    59e0:	00c04d0e 	bge	zero,r3,5b18 <___vfprintf_internal_r+0x20ec>
    59e4:	2000441e 	bne	r4,zero,5af8 <___vfprintf_internal_r+0x20cc>
    59e8:	9480004c 	andi	r18,r18,1
    59ec:	9000421e 	bne	r18,zero,5af8 <___vfprintf_internal_r+0x20cc>
    59f0:	1805883a 	mov	r2,r3
    59f4:	18007016 	blt	r3,zero,5bb8 <___vfprintf_internal_r+0x218c>
    59f8:	d8c03217 	ldw	r3,200(sp)
    59fc:	d8c02e15 	stw	r3,184(sp)
    5a00:	003e0206 	br	520c <__alt_data_end+0xfc00520c>
    5a04:	df0022c4 	addi	fp,sp,139
    5a08:	dc002915 	stw	r16,164(sp)
    5a0c:	4027883a 	mov	r19,r8
    5a10:	e021883a 	mov	r16,fp
    5a14:	b009883a 	mov	r4,r22
    5a18:	01400284 	movi	r5,10
    5a1c:	000deec0 	call	deec <__modsi3>
    5a20:	10800c04 	addi	r2,r2,48
    5a24:	843fffc4 	addi	r16,r16,-1
    5a28:	b009883a 	mov	r4,r22
    5a2c:	01400284 	movi	r5,10
    5a30:	80800005 	stb	r2,0(r16)
    5a34:	000de5c0 	call	de5c <__divsi3>
    5a38:	102d883a 	mov	r22,r2
    5a3c:	00800244 	movi	r2,9
    5a40:	15bff416 	blt	r2,r22,5a14 <__alt_data_end+0xfc005a14>
    5a44:	9811883a 	mov	r8,r19
    5a48:	b0800c04 	addi	r2,r22,48
    5a4c:	8027883a 	mov	r19,r16
    5a50:	997fffc4 	addi	r5,r19,-1
    5a54:	98bfffc5 	stb	r2,-1(r19)
    5a58:	dc002917 	ldw	r16,164(sp)
    5a5c:	2f006a2e 	bgeu	r5,fp,5c08 <___vfprintf_internal_r+0x21dc>
    5a60:	d9c02384 	addi	r7,sp,142
    5a64:	3ccfc83a 	sub	r7,r7,r19
    5a68:	d9002344 	addi	r4,sp,141
    5a6c:	e1cf883a 	add	r7,fp,r7
    5a70:	00000106 	br	5a78 <___vfprintf_internal_r+0x204c>
    5a74:	28800003 	ldbu	r2,0(r5)
    5a78:	20800005 	stb	r2,0(r4)
    5a7c:	21000044 	addi	r4,r4,1
    5a80:	29400044 	addi	r5,r5,1
    5a84:	393ffb1e 	bne	r7,r4,5a74 <__alt_data_end+0xfc005a74>
    5a88:	d8802304 	addi	r2,sp,140
    5a8c:	14c5c83a 	sub	r2,r2,r19
    5a90:	d8c02344 	addi	r3,sp,141
    5a94:	1885883a 	add	r2,r3,r2
    5a98:	003f7006 	br	585c <__alt_data_end+0xfc00585c>
    5a9c:	0005883a 	mov	r2,zero
    5aa0:	003f0f06 	br	56e0 <__alt_data_end+0xfc0056e0>
    5aa4:	d8c03217 	ldw	r3,200(sp)
    5aa8:	18c00044 	addi	r3,r3,1
    5aac:	d8c02e15 	stw	r3,184(sp)
    5ab0:	1805883a 	mov	r2,r3
    5ab4:	183fb20e 	bge	r3,zero,5980 <__alt_data_end+0xfc005980>
    5ab8:	0005883a 	mov	r2,zero
    5abc:	003fb006 	br	5980 <__alt_data_end+0xfc005980>
    5ac0:	d9003617 	ldw	r4,216(sp)
    5ac4:	000d883a 	mov	r6,zero
    5ac8:	000f883a 	mov	r7,zero
    5acc:	980b883a 	mov	r5,r19
    5ad0:	d8c03c15 	stw	r3,240(sp)
    5ad4:	da003d15 	stw	r8,244(sp)
    5ad8:	000f1e80 	call	f1e8 <__eqdf2>
    5adc:	d8c03c17 	ldw	r3,240(sp)
    5ae0:	da003d17 	ldw	r8,244(sp)
    5ae4:	103f9826 	beq	r2,zero,5948 <__alt_data_end+0xfc005948>
    5ae8:	00800044 	movi	r2,1
    5aec:	10c7c83a 	sub	r3,r2,r3
    5af0:	d8c02615 	stw	r3,152(sp)
    5af4:	003f9506 	br	594c <__alt_data_end+0xfc00594c>
    5af8:	d9002917 	ldw	r4,164(sp)
    5afc:	d8c03217 	ldw	r3,200(sp)
    5b00:	20800044 	addi	r2,r4,1
    5b04:	1885883a 	add	r2,r3,r2
    5b08:	d8802e15 	stw	r2,184(sp)
    5b0c:	103dbf0e 	bge	r2,zero,520c <__alt_data_end+0xfc00520c>
    5b10:	0005883a 	mov	r2,zero
    5b14:	003dbd06 	br	520c <__alt_data_end+0xfc00520c>
    5b18:	2000211e 	bne	r4,zero,5ba0 <___vfprintf_internal_r+0x2174>
    5b1c:	9480004c 	andi	r18,r18,1
    5b20:	90001f1e 	bne	r18,zero,5ba0 <___vfprintf_internal_r+0x2174>
    5b24:	00800044 	movi	r2,1
    5b28:	d8802e15 	stw	r2,184(sp)
    5b2c:	003db706 	br	520c <__alt_data_end+0xfc00520c>
    5b30:	00800b44 	movi	r2,45
    5b34:	05adc83a 	sub	r22,zero,r22
    5b38:	d8802305 	stb	r2,140(sp)
    5b3c:	003f3f06 	br	583c <__alt_data_end+0xfc00583c>
    5b40:	0005883a 	mov	r2,zero
    5b44:	003f5206 	br	5890 <__alt_data_end+0xfc005890>
    5b48:	90a4703a 	and	r18,r18,r2
    5b4c:	903f4e26 	beq	r18,zero,5888 <__alt_data_end+0xfc005888>
    5b50:	003f4a06 	br	587c <__alt_data_end+0xfc00587c>
    5b54:	00800084 	movi	r2,2
    5b58:	10c5c83a 	sub	r2,r2,r3
    5b5c:	003f8406 	br	5970 <__alt_data_end+0xfc005970>
    5b60:	d8802d17 	ldw	r2,180(sp)
    5b64:	d9002d17 	ldw	r4,180(sp)
    5b68:	ac400043 	ldbu	r17,1(r21)
    5b6c:	10800017 	ldw	r2,0(r2)
    5b70:	582b883a 	mov	r21,r11
    5b74:	d8802915 	stw	r2,164(sp)
    5b78:	20800104 	addi	r2,r4,4
    5b7c:	d9002917 	ldw	r4,164(sp)
    5b80:	d8802d15 	stw	r2,180(sp)
    5b84:	203e7a0e 	bge	r4,zero,5570 <__alt_data_end+0xfc005570>
    5b88:	8c403fcc 	andi	r17,r17,255
    5b8c:	00bfffc4 	movi	r2,-1
    5b90:	8c40201c 	xori	r17,r17,128
    5b94:	d8802915 	stw	r2,164(sp)
    5b98:	8c7fe004 	addi	r17,r17,-128
    5b9c:	00380706 	br	3bbc <__alt_data_end+0xfc003bbc>
    5ba0:	d8c02917 	ldw	r3,164(sp)
    5ba4:	18c00084 	addi	r3,r3,2
    5ba8:	d8c02e15 	stw	r3,184(sp)
    5bac:	1805883a 	mov	r2,r3
    5bb0:	183d960e 	bge	r3,zero,520c <__alt_data_end+0xfc00520c>
    5bb4:	003fd606 	br	5b10 <__alt_data_end+0xfc005b10>
    5bb8:	0005883a 	mov	r2,zero
    5bbc:	003f8e06 	br	59f8 <__alt_data_end+0xfc0059f8>
    5bc0:	9080004c 	andi	r2,r18,1
    5bc4:	103f811e 	bne	r2,zero,59cc <__alt_data_end+0xfc0059cc>
    5bc8:	d8802117 	ldw	r2,132(sp)
    5bcc:	1405c83a 	sub	r2,r2,r16
    5bd0:	d8803315 	stw	r2,204(sp)
    5bd4:	b47ef326 	beq	r22,r17,57a4 <__alt_data_end+0xfc0057a4>
    5bd8:	dd802617 	ldw	r22,152(sp)
    5bdc:	003f1106 	br	5824 <__alt_data_end+0xfc005824>
    5be0:	d9c02785 	stb	r7,158(sp)
    5be4:	00390406 	br	3ff8 <__alt_data_end+0xfc003ff8>
    5be8:	d9c02785 	stb	r7,158(sp)
    5bec:	0038d306 	br	3f3c <__alt_data_end+0xfc003f3c>
    5bf0:	d9c02785 	stb	r7,158(sp)
    5bf4:	003a6106 	br	457c <__alt_data_end+0xfc00457c>
    5bf8:	d9c02785 	stb	r7,158(sp)
    5bfc:	003af806 	br	47e0 <__alt_data_end+0xfc0047e0>
    5c00:	0005883a 	mov	r2,zero
    5c04:	003d7e06 	br	5200 <__alt_data_end+0xfc005200>
    5c08:	d8802344 	addi	r2,sp,141
    5c0c:	003f1306 	br	585c <__alt_data_end+0xfc00585c>
    5c10:	d9c02785 	stb	r7,158(sp)
    5c14:	00392306 	br	40a4 <__alt_data_end+0xfc0040a4>
    5c18:	d9c02785 	stb	r7,158(sp)
    5c1c:	003aa906 	br	46c4 <__alt_data_end+0xfc0046c4>
    5c20:	d9c02785 	stb	r7,158(sp)
    5c24:	003a3d06 	br	451c <__alt_data_end+0xfc00451c>
    5c28:	d9c02785 	stb	r7,158(sp)
    5c2c:	003aca06 	br	4758 <__alt_data_end+0xfc004758>

00005c30 <__vfprintf_internal>:
    5c30:	f811883a 	mov	r8,ra
    5c34:	0000ac80 	call	ac8 <_mcount>
    5c38:	403f883a 	mov	ra,r8
    5c3c:	00800074 	movhi	r2,1
    5c40:	108c5c04 	addi	r2,r2,12656
    5c44:	300f883a 	mov	r7,r6
    5c48:	280d883a 	mov	r6,r5
    5c4c:	200b883a 	mov	r5,r4
    5c50:	11000017 	ldw	r4,0(r2)
    5c54:	0003a2c1 	jmpi	3a2c <___vfprintf_internal_r>

00005c58 <__sbprintf>:
    5c58:	f811883a 	mov	r8,ra
    5c5c:	0000ac80 	call	ac8 <_mcount>
    5c60:	403f883a 	mov	ra,r8
    5c64:	defee204 	addi	sp,sp,-1144
    5c68:	dfc11d15 	stw	ra,1140(sp)
    5c6c:	dc811c15 	stw	r18,1136(sp)
    5c70:	dc411b15 	stw	r17,1132(sp)
    5c74:	dc011a15 	stw	r16,1128(sp)
    5c78:	2880030b 	ldhu	r2,12(r5)
    5c7c:	2ac01917 	ldw	r11,100(r5)
    5c80:	2a80038b 	ldhu	r10,14(r5)
    5c84:	2a400717 	ldw	r9,28(r5)
    5c88:	2a000917 	ldw	r8,36(r5)
    5c8c:	00c10004 	movi	r3,1024
    5c90:	10bfff4c 	andi	r2,r2,65533
    5c94:	2821883a 	mov	r16,r5
    5c98:	d8cb883a 	add	r5,sp,r3
    5c9c:	2025883a 	mov	r18,r4
    5ca0:	d881030d 	sth	r2,1036(sp)
    5ca4:	dac11915 	stw	r11,1124(sp)
    5ca8:	da81038d 	sth	r10,1038(sp)
    5cac:	da410715 	stw	r9,1052(sp)
    5cb0:	da010915 	stw	r8,1060(sp)
    5cb4:	dec10015 	stw	sp,1024(sp)
    5cb8:	dec10415 	stw	sp,1040(sp)
    5cbc:	d8c10215 	stw	r3,1032(sp)
    5cc0:	d8c10515 	stw	r3,1044(sp)
    5cc4:	d8010615 	stw	zero,1048(sp)
    5cc8:	0003a2c0 	call	3a2c <___vfprintf_internal_r>
    5ccc:	1023883a 	mov	r17,r2
    5cd0:	10000416 	blt	r2,zero,5ce4 <__sbprintf+0x8c>
    5cd4:	d9410004 	addi	r5,sp,1024
    5cd8:	9009883a 	mov	r4,r18
    5cdc:	0007d680 	call	7d68 <_fflush_r>
    5ce0:	10000d1e 	bne	r2,zero,5d18 <__sbprintf+0xc0>
    5ce4:	d881030b 	ldhu	r2,1036(sp)
    5ce8:	1080100c 	andi	r2,r2,64
    5cec:	10000326 	beq	r2,zero,5cfc <__sbprintf+0xa4>
    5cf0:	8080030b 	ldhu	r2,12(r16)
    5cf4:	10801014 	ori	r2,r2,64
    5cf8:	8080030d 	sth	r2,12(r16)
    5cfc:	8805883a 	mov	r2,r17
    5d00:	dfc11d17 	ldw	ra,1140(sp)
    5d04:	dc811c17 	ldw	r18,1136(sp)
    5d08:	dc411b17 	ldw	r17,1132(sp)
    5d0c:	dc011a17 	ldw	r16,1128(sp)
    5d10:	dec11e04 	addi	sp,sp,1144
    5d14:	f800283a 	ret
    5d18:	047fffc4 	movi	r17,-1
    5d1c:	003ff106 	br	5ce4 <__alt_data_end+0xfc005ce4>

00005d20 <__swbuf_r>:
    5d20:	f811883a 	mov	r8,ra
    5d24:	0000ac80 	call	ac8 <_mcount>
    5d28:	403f883a 	mov	ra,r8
    5d2c:	defffb04 	addi	sp,sp,-20
    5d30:	dfc00415 	stw	ra,16(sp)
    5d34:	dcc00315 	stw	r19,12(sp)
    5d38:	dc800215 	stw	r18,8(sp)
    5d3c:	dc400115 	stw	r17,4(sp)
    5d40:	dc000015 	stw	r16,0(sp)
    5d44:	2025883a 	mov	r18,r4
    5d48:	2827883a 	mov	r19,r5
    5d4c:	3021883a 	mov	r16,r6
    5d50:	20000226 	beq	r4,zero,5d5c <__swbuf_r+0x3c>
    5d54:	20800e17 	ldw	r2,56(r4)
    5d58:	10004226 	beq	r2,zero,5e64 <__swbuf_r+0x144>
    5d5c:	80800617 	ldw	r2,24(r16)
    5d60:	8100030b 	ldhu	r4,12(r16)
    5d64:	80800215 	stw	r2,8(r16)
    5d68:	2080020c 	andi	r2,r4,8
    5d6c:	10003626 	beq	r2,zero,5e48 <__swbuf_r+0x128>
    5d70:	80c00417 	ldw	r3,16(r16)
    5d74:	18003426 	beq	r3,zero,5e48 <__swbuf_r+0x128>
    5d78:	2088000c 	andi	r2,r4,8192
    5d7c:	9c403fcc 	andi	r17,r19,255
    5d80:	10001a26 	beq	r2,zero,5dec <__swbuf_r+0xcc>
    5d84:	80800017 	ldw	r2,0(r16)
    5d88:	81000517 	ldw	r4,20(r16)
    5d8c:	10c7c83a 	sub	r3,r2,r3
    5d90:	1900200e 	bge	r3,r4,5e14 <__swbuf_r+0xf4>
    5d94:	18c00044 	addi	r3,r3,1
    5d98:	81000217 	ldw	r4,8(r16)
    5d9c:	11400044 	addi	r5,r2,1
    5da0:	81400015 	stw	r5,0(r16)
    5da4:	213fffc4 	addi	r4,r4,-1
    5da8:	81000215 	stw	r4,8(r16)
    5dac:	14c00005 	stb	r19,0(r2)
    5db0:	80800517 	ldw	r2,20(r16)
    5db4:	10c01e26 	beq	r2,r3,5e30 <__swbuf_r+0x110>
    5db8:	8080030b 	ldhu	r2,12(r16)
    5dbc:	1080004c 	andi	r2,r2,1
    5dc0:	10000226 	beq	r2,zero,5dcc <__swbuf_r+0xac>
    5dc4:	00800284 	movi	r2,10
    5dc8:	88801926 	beq	r17,r2,5e30 <__swbuf_r+0x110>
    5dcc:	8805883a 	mov	r2,r17
    5dd0:	dfc00417 	ldw	ra,16(sp)
    5dd4:	dcc00317 	ldw	r19,12(sp)
    5dd8:	dc800217 	ldw	r18,8(sp)
    5ddc:	dc400117 	ldw	r17,4(sp)
    5de0:	dc000017 	ldw	r16,0(sp)
    5de4:	dec00504 	addi	sp,sp,20
    5de8:	f800283a 	ret
    5dec:	81401917 	ldw	r5,100(r16)
    5df0:	00b7ffc4 	movi	r2,-8193
    5df4:	21080014 	ori	r4,r4,8192
    5df8:	2884703a 	and	r2,r5,r2
    5dfc:	80801915 	stw	r2,100(r16)
    5e00:	80800017 	ldw	r2,0(r16)
    5e04:	8100030d 	sth	r4,12(r16)
    5e08:	81000517 	ldw	r4,20(r16)
    5e0c:	10c7c83a 	sub	r3,r2,r3
    5e10:	193fe016 	blt	r3,r4,5d94 <__alt_data_end+0xfc005d94>
    5e14:	800b883a 	mov	r5,r16
    5e18:	9009883a 	mov	r4,r18
    5e1c:	0007d680 	call	7d68 <_fflush_r>
    5e20:	1000071e 	bne	r2,zero,5e40 <__swbuf_r+0x120>
    5e24:	80800017 	ldw	r2,0(r16)
    5e28:	00c00044 	movi	r3,1
    5e2c:	003fda06 	br	5d98 <__alt_data_end+0xfc005d98>
    5e30:	800b883a 	mov	r5,r16
    5e34:	9009883a 	mov	r4,r18
    5e38:	0007d680 	call	7d68 <_fflush_r>
    5e3c:	103fe326 	beq	r2,zero,5dcc <__alt_data_end+0xfc005dcc>
    5e40:	00bfffc4 	movi	r2,-1
    5e44:	003fe206 	br	5dd0 <__alt_data_end+0xfc005dd0>
    5e48:	800b883a 	mov	r5,r16
    5e4c:	9009883a 	mov	r4,r18
    5e50:	0005e900 	call	5e90 <__swsetup_r>
    5e54:	103ffa1e 	bne	r2,zero,5e40 <__alt_data_end+0xfc005e40>
    5e58:	8100030b 	ldhu	r4,12(r16)
    5e5c:	80c00417 	ldw	r3,16(r16)
    5e60:	003fc506 	br	5d78 <__alt_data_end+0xfc005d78>
    5e64:	00081b00 	call	81b0 <__sinit>
    5e68:	003fbc06 	br	5d5c <__alt_data_end+0xfc005d5c>

00005e6c <__swbuf>:
    5e6c:	f811883a 	mov	r8,ra
    5e70:	0000ac80 	call	ac8 <_mcount>
    5e74:	403f883a 	mov	ra,r8
    5e78:	00800074 	movhi	r2,1
    5e7c:	108c5c04 	addi	r2,r2,12656
    5e80:	280d883a 	mov	r6,r5
    5e84:	200b883a 	mov	r5,r4
    5e88:	11000017 	ldw	r4,0(r2)
    5e8c:	0005d201 	jmpi	5d20 <__swbuf_r>

00005e90 <__swsetup_r>:
    5e90:	f811883a 	mov	r8,ra
    5e94:	0000ac80 	call	ac8 <_mcount>
    5e98:	403f883a 	mov	ra,r8
    5e9c:	defffd04 	addi	sp,sp,-12
    5ea0:	dfc00215 	stw	ra,8(sp)
    5ea4:	dc400115 	stw	r17,4(sp)
    5ea8:	dc000015 	stw	r16,0(sp)
    5eac:	00800074 	movhi	r2,1
    5eb0:	108c5c04 	addi	r2,r2,12656
    5eb4:	2023883a 	mov	r17,r4
    5eb8:	11000017 	ldw	r4,0(r2)
    5ebc:	2821883a 	mov	r16,r5
    5ec0:	20000226 	beq	r4,zero,5ecc <__swsetup_r+0x3c>
    5ec4:	20800e17 	ldw	r2,56(r4)
    5ec8:	10003126 	beq	r2,zero,5f90 <__swsetup_r+0x100>
    5ecc:	8080030b 	ldhu	r2,12(r16)
    5ed0:	10c0020c 	andi	r3,r2,8
    5ed4:	1009883a 	mov	r4,r2
    5ed8:	18000f26 	beq	r3,zero,5f18 <__swsetup_r+0x88>
    5edc:	80c00417 	ldw	r3,16(r16)
    5ee0:	18001526 	beq	r3,zero,5f38 <__swsetup_r+0xa8>
    5ee4:	1100004c 	andi	r4,r2,1
    5ee8:	20001c1e 	bne	r4,zero,5f5c <__swsetup_r+0xcc>
    5eec:	1080008c 	andi	r2,r2,2
    5ef0:	1000291e 	bne	r2,zero,5f98 <__swsetup_r+0x108>
    5ef4:	80800517 	ldw	r2,20(r16)
    5ef8:	80800215 	stw	r2,8(r16)
    5efc:	18001c26 	beq	r3,zero,5f70 <__swsetup_r+0xe0>
    5f00:	0005883a 	mov	r2,zero
    5f04:	dfc00217 	ldw	ra,8(sp)
    5f08:	dc400117 	ldw	r17,4(sp)
    5f0c:	dc000017 	ldw	r16,0(sp)
    5f10:	dec00304 	addi	sp,sp,12
    5f14:	f800283a 	ret
    5f18:	2080040c 	andi	r2,r4,16
    5f1c:	10002e26 	beq	r2,zero,5fd8 <__swsetup_r+0x148>
    5f20:	2080010c 	andi	r2,r4,4
    5f24:	10001e1e 	bne	r2,zero,5fa0 <__swsetup_r+0x110>
    5f28:	80c00417 	ldw	r3,16(r16)
    5f2c:	20800214 	ori	r2,r4,8
    5f30:	8080030d 	sth	r2,12(r16)
    5f34:	183feb1e 	bne	r3,zero,5ee4 <__alt_data_end+0xfc005ee4>
    5f38:	1100a00c 	andi	r4,r2,640
    5f3c:	01408004 	movi	r5,512
    5f40:	217fe826 	beq	r4,r5,5ee4 <__alt_data_end+0xfc005ee4>
    5f44:	800b883a 	mov	r5,r16
    5f48:	8809883a 	mov	r4,r17
    5f4c:	000897c0 	call	897c <__smakebuf_r>
    5f50:	8080030b 	ldhu	r2,12(r16)
    5f54:	80c00417 	ldw	r3,16(r16)
    5f58:	003fe206 	br	5ee4 <__alt_data_end+0xfc005ee4>
    5f5c:	80800517 	ldw	r2,20(r16)
    5f60:	80000215 	stw	zero,8(r16)
    5f64:	0085c83a 	sub	r2,zero,r2
    5f68:	80800615 	stw	r2,24(r16)
    5f6c:	183fe41e 	bne	r3,zero,5f00 <__alt_data_end+0xfc005f00>
    5f70:	80c0030b 	ldhu	r3,12(r16)
    5f74:	0005883a 	mov	r2,zero
    5f78:	1900200c 	andi	r4,r3,128
    5f7c:	203fe126 	beq	r4,zero,5f04 <__alt_data_end+0xfc005f04>
    5f80:	18c01014 	ori	r3,r3,64
    5f84:	80c0030d 	sth	r3,12(r16)
    5f88:	00bfffc4 	movi	r2,-1
    5f8c:	003fdd06 	br	5f04 <__alt_data_end+0xfc005f04>
    5f90:	00081b00 	call	81b0 <__sinit>
    5f94:	003fcd06 	br	5ecc <__alt_data_end+0xfc005ecc>
    5f98:	0005883a 	mov	r2,zero
    5f9c:	003fd606 	br	5ef8 <__alt_data_end+0xfc005ef8>
    5fa0:	81400c17 	ldw	r5,48(r16)
    5fa4:	28000626 	beq	r5,zero,5fc0 <__swsetup_r+0x130>
    5fa8:	80801004 	addi	r2,r16,64
    5fac:	28800326 	beq	r5,r2,5fbc <__swsetup_r+0x12c>
    5fb0:	8809883a 	mov	r4,r17
    5fb4:	00083840 	call	8384 <_free_r>
    5fb8:	8100030b 	ldhu	r4,12(r16)
    5fbc:	80000c15 	stw	zero,48(r16)
    5fc0:	80c00417 	ldw	r3,16(r16)
    5fc4:	00bff6c4 	movi	r2,-37
    5fc8:	1108703a 	and	r4,r2,r4
    5fcc:	80000115 	stw	zero,4(r16)
    5fd0:	80c00015 	stw	r3,0(r16)
    5fd4:	003fd506 	br	5f2c <__alt_data_end+0xfc005f2c>
    5fd8:	00800244 	movi	r2,9
    5fdc:	88800015 	stw	r2,0(r17)
    5fe0:	20801014 	ori	r2,r4,64
    5fe4:	8080030d 	sth	r2,12(r16)
    5fe8:	00bfffc4 	movi	r2,-1
    5fec:	003fc506 	br	5f04 <__alt_data_end+0xfc005f04>

00005ff0 <__register_exitproc>:
    5ff0:	f811883a 	mov	r8,ra
    5ff4:	0000ac80 	call	ac8 <_mcount>
    5ff8:	403f883a 	mov	ra,r8
    5ffc:	defffa04 	addi	sp,sp,-24
    6000:	dfc00515 	stw	ra,20(sp)
    6004:	dc400415 	stw	r17,16(sp)
    6008:	dc000315 	stw	r16,12(sp)
    600c:	04000074 	movhi	r16,1
    6010:	840c5b04 	addi	r16,r16,12652
    6014:	80c00017 	ldw	r3,0(r16)
    6018:	2023883a 	mov	r17,r4
    601c:	18805217 	ldw	r2,328(r3)
    6020:	10003726 	beq	r2,zero,6100 <__register_exitproc+0x110>
    6024:	10c00117 	ldw	r3,4(r2)
    6028:	010007c4 	movi	r4,31
    602c:	20c00e16 	blt	r4,r3,6068 <__register_exitproc+0x78>
    6030:	1a000044 	addi	r8,r3,1
    6034:	8800221e 	bne	r17,zero,60c0 <__register_exitproc+0xd0>
    6038:	18c00084 	addi	r3,r3,2
    603c:	18c7883a 	add	r3,r3,r3
    6040:	18c7883a 	add	r3,r3,r3
    6044:	12000115 	stw	r8,4(r2)
    6048:	10c7883a 	add	r3,r2,r3
    604c:	19400015 	stw	r5,0(r3)
    6050:	0005883a 	mov	r2,zero
    6054:	dfc00517 	ldw	ra,20(sp)
    6058:	dc400417 	ldw	r17,16(sp)
    605c:	dc000317 	ldw	r16,12(sp)
    6060:	dec00604 	addi	sp,sp,24
    6064:	f800283a 	ret
    6068:	00800034 	movhi	r2,0
    606c:	10800004 	addi	r2,r2,0
    6070:	10002626 	beq	r2,zero,610c <__register_exitproc+0x11c>
    6074:	01006404 	movi	r4,400
    6078:	d9400015 	stw	r5,0(sp)
    607c:	d9800115 	stw	r6,4(sp)
    6080:	d9c00215 	stw	r7,8(sp)
    6084:	00000000 	call	0 <__alt_mem_sdram_controller_0>
    6088:	d9400017 	ldw	r5,0(sp)
    608c:	d9800117 	ldw	r6,4(sp)
    6090:	d9c00217 	ldw	r7,8(sp)
    6094:	10001d26 	beq	r2,zero,610c <__register_exitproc+0x11c>
    6098:	81000017 	ldw	r4,0(r16)
    609c:	10000115 	stw	zero,4(r2)
    60a0:	02000044 	movi	r8,1
    60a4:	22405217 	ldw	r9,328(r4)
    60a8:	0007883a 	mov	r3,zero
    60ac:	12400015 	stw	r9,0(r2)
    60b0:	20805215 	stw	r2,328(r4)
    60b4:	10006215 	stw	zero,392(r2)
    60b8:	10006315 	stw	zero,396(r2)
    60bc:	883fde26 	beq	r17,zero,6038 <__alt_data_end+0xfc006038>
    60c0:	18c9883a 	add	r4,r3,r3
    60c4:	2109883a 	add	r4,r4,r4
    60c8:	1109883a 	add	r4,r2,r4
    60cc:	21802215 	stw	r6,136(r4)
    60d0:	01800044 	movi	r6,1
    60d4:	12406217 	ldw	r9,392(r2)
    60d8:	30cc983a 	sll	r6,r6,r3
    60dc:	4992b03a 	or	r9,r9,r6
    60e0:	12406215 	stw	r9,392(r2)
    60e4:	21c04215 	stw	r7,264(r4)
    60e8:	01000084 	movi	r4,2
    60ec:	893fd21e 	bne	r17,r4,6038 <__alt_data_end+0xfc006038>
    60f0:	11006317 	ldw	r4,396(r2)
    60f4:	218cb03a 	or	r6,r4,r6
    60f8:	11806315 	stw	r6,396(r2)
    60fc:	003fce06 	br	6038 <__alt_data_end+0xfc006038>
    6100:	18805304 	addi	r2,r3,332
    6104:	18805215 	stw	r2,328(r3)
    6108:	003fc606 	br	6024 <__alt_data_end+0xfc006024>
    610c:	00bfffc4 	movi	r2,-1
    6110:	003fd006 	br	6054 <__alt_data_end+0xfc006054>

00006114 <__call_exitprocs>:
    6114:	f811883a 	mov	r8,ra
    6118:	0000ac80 	call	ac8 <_mcount>
    611c:	403f883a 	mov	ra,r8
    6120:	defff504 	addi	sp,sp,-44
    6124:	dfc00a15 	stw	ra,40(sp)
    6128:	df000915 	stw	fp,36(sp)
    612c:	ddc00815 	stw	r23,32(sp)
    6130:	dd800715 	stw	r22,28(sp)
    6134:	dd400615 	stw	r21,24(sp)
    6138:	dd000515 	stw	r20,20(sp)
    613c:	dcc00415 	stw	r19,16(sp)
    6140:	dc800315 	stw	r18,12(sp)
    6144:	dc400215 	stw	r17,8(sp)
    6148:	dc000115 	stw	r16,4(sp)
    614c:	04800044 	movi	r18,1
    6150:	d9000015 	stw	r4,0(sp)
    6154:	2839883a 	mov	fp,r5
    6158:	057fffc4 	movi	r21,-1
    615c:	00800074 	movhi	r2,1
    6160:	108c5b04 	addi	r2,r2,12652
    6164:	12000017 	ldw	r8,0(r2)
    6168:	45005217 	ldw	r20,328(r8)
    616c:	44c05204 	addi	r19,r8,328
    6170:	a0001c26 	beq	r20,zero,61e4 <__call_exitprocs+0xd0>
    6174:	a0800117 	ldw	r2,4(r20)
    6178:	15ffffc4 	addi	r23,r2,-1
    617c:	b8000d16 	blt	r23,zero,61b4 <__call_exitprocs+0xa0>
    6180:	14000044 	addi	r16,r2,1
    6184:	8421883a 	add	r16,r16,r16
    6188:	8421883a 	add	r16,r16,r16
    618c:	84402004 	addi	r17,r16,128
    6190:	a463883a 	add	r17,r20,r17
    6194:	a421883a 	add	r16,r20,r16
    6198:	e0001e26 	beq	fp,zero,6214 <__call_exitprocs+0x100>
    619c:	80804017 	ldw	r2,256(r16)
    61a0:	e0801c26 	beq	fp,r2,6214 <__call_exitprocs+0x100>
    61a4:	bdffffc4 	addi	r23,r23,-1
    61a8:	843fff04 	addi	r16,r16,-4
    61ac:	8c7fff04 	addi	r17,r17,-4
    61b0:	bd7ff91e 	bne	r23,r21,6198 <__alt_data_end+0xfc006198>
    61b4:	00800034 	movhi	r2,0
    61b8:	10800004 	addi	r2,r2,0
    61bc:	10000926 	beq	r2,zero,61e4 <__call_exitprocs+0xd0>
    61c0:	a0800117 	ldw	r2,4(r20)
    61c4:	1000301e 	bne	r2,zero,6288 <__call_exitprocs+0x174>
    61c8:	a0800017 	ldw	r2,0(r20)
    61cc:	10003226 	beq	r2,zero,6298 <__call_exitprocs+0x184>
    61d0:	a009883a 	mov	r4,r20
    61d4:	98800015 	stw	r2,0(r19)
    61d8:	00000000 	call	0 <__alt_mem_sdram_controller_0>
    61dc:	9d000017 	ldw	r20,0(r19)
    61e0:	a03fe41e 	bne	r20,zero,6174 <__alt_data_end+0xfc006174>
    61e4:	dfc00a17 	ldw	ra,40(sp)
    61e8:	df000917 	ldw	fp,36(sp)
    61ec:	ddc00817 	ldw	r23,32(sp)
    61f0:	dd800717 	ldw	r22,28(sp)
    61f4:	dd400617 	ldw	r21,24(sp)
    61f8:	dd000517 	ldw	r20,20(sp)
    61fc:	dcc00417 	ldw	r19,16(sp)
    6200:	dc800317 	ldw	r18,12(sp)
    6204:	dc400217 	ldw	r17,8(sp)
    6208:	dc000117 	ldw	r16,4(sp)
    620c:	dec00b04 	addi	sp,sp,44
    6210:	f800283a 	ret
    6214:	a0800117 	ldw	r2,4(r20)
    6218:	80c00017 	ldw	r3,0(r16)
    621c:	10bfffc4 	addi	r2,r2,-1
    6220:	15c01426 	beq	r2,r23,6274 <__call_exitprocs+0x160>
    6224:	80000015 	stw	zero,0(r16)
    6228:	183fde26 	beq	r3,zero,61a4 <__alt_data_end+0xfc0061a4>
    622c:	95c8983a 	sll	r4,r18,r23
    6230:	a0806217 	ldw	r2,392(r20)
    6234:	a5800117 	ldw	r22,4(r20)
    6238:	2084703a 	and	r2,r4,r2
    623c:	10000b26 	beq	r2,zero,626c <__call_exitprocs+0x158>
    6240:	a0806317 	ldw	r2,396(r20)
    6244:	2088703a 	and	r4,r4,r2
    6248:	20000c1e 	bne	r4,zero,627c <__call_exitprocs+0x168>
    624c:	89400017 	ldw	r5,0(r17)
    6250:	d9000017 	ldw	r4,0(sp)
    6254:	183ee83a 	callr	r3
    6258:	a0800117 	ldw	r2,4(r20)
    625c:	15bfbf1e 	bne	r2,r22,615c <__alt_data_end+0xfc00615c>
    6260:	98800017 	ldw	r2,0(r19)
    6264:	153fcf26 	beq	r2,r20,61a4 <__alt_data_end+0xfc0061a4>
    6268:	003fbc06 	br	615c <__alt_data_end+0xfc00615c>
    626c:	183ee83a 	callr	r3
    6270:	003ff906 	br	6258 <__alt_data_end+0xfc006258>
    6274:	a5c00115 	stw	r23,4(r20)
    6278:	003feb06 	br	6228 <__alt_data_end+0xfc006228>
    627c:	89000017 	ldw	r4,0(r17)
    6280:	183ee83a 	callr	r3
    6284:	003ff406 	br	6258 <__alt_data_end+0xfc006258>
    6288:	a0800017 	ldw	r2,0(r20)
    628c:	a027883a 	mov	r19,r20
    6290:	1029883a 	mov	r20,r2
    6294:	003fb606 	br	6170 <__alt_data_end+0xfc006170>
    6298:	0005883a 	mov	r2,zero
    629c:	003ffb06 	br	628c <__alt_data_end+0xfc00628c>

000062a0 <quorem>:
    62a0:	f811883a 	mov	r8,ra
    62a4:	0000ac80 	call	ac8 <_mcount>
    62a8:	403f883a 	mov	ra,r8
    62ac:	defff704 	addi	sp,sp,-36
    62b0:	dfc00815 	stw	ra,32(sp)
    62b4:	ddc00715 	stw	r23,28(sp)
    62b8:	dd800615 	stw	r22,24(sp)
    62bc:	dd400515 	stw	r21,20(sp)
    62c0:	dd000415 	stw	r20,16(sp)
    62c4:	dcc00315 	stw	r19,12(sp)
    62c8:	dc800215 	stw	r18,8(sp)
    62cc:	dc400115 	stw	r17,4(sp)
    62d0:	dc000015 	stw	r16,0(sp)
    62d4:	2c800417 	ldw	r18,16(r5)
    62d8:	20800417 	ldw	r2,16(r4)
    62dc:	14807116 	blt	r2,r18,64a4 <quorem+0x204>
    62e0:	94bfffc4 	addi	r18,r18,-1
    62e4:	94ad883a 	add	r22,r18,r18
    62e8:	b5ad883a 	add	r22,r22,r22
    62ec:	2c400504 	addi	r17,r5,20
    62f0:	8da9883a 	add	r20,r17,r22
    62f4:	25400504 	addi	r21,r4,20
    62f8:	282f883a 	mov	r23,r5
    62fc:	adad883a 	add	r22,r21,r22
    6300:	a1400017 	ldw	r5,0(r20)
    6304:	2021883a 	mov	r16,r4
    6308:	b1000017 	ldw	r4,0(r22)
    630c:	29400044 	addi	r5,r5,1
    6310:	000df6c0 	call	df6c <__udivsi3>
    6314:	1027883a 	mov	r19,r2
    6318:	10002c26 	beq	r2,zero,63cc <quorem+0x12c>
    631c:	a813883a 	mov	r9,r21
    6320:	880b883a 	mov	r5,r17
    6324:	0009883a 	mov	r4,zero
    6328:	000d883a 	mov	r6,zero
    632c:	2a000017 	ldw	r8,0(r5)
    6330:	49c00017 	ldw	r7,0(r9)
    6334:	29400104 	addi	r5,r5,4
    6338:	40bfffcc 	andi	r2,r8,65535
    633c:	14c5383a 	mul	r2,r2,r19
    6340:	4010d43a 	srli	r8,r8,16
    6344:	38ffffcc 	andi	r3,r7,65535
    6348:	1105883a 	add	r2,r2,r4
    634c:	1008d43a 	srli	r4,r2,16
    6350:	44d1383a 	mul	r8,r8,r19
    6354:	198d883a 	add	r6,r3,r6
    6358:	10ffffcc 	andi	r3,r2,65535
    635c:	30c7c83a 	sub	r3,r6,r3
    6360:	380ed43a 	srli	r7,r7,16
    6364:	4105883a 	add	r2,r8,r4
    6368:	180dd43a 	srai	r6,r3,16
    636c:	113fffcc 	andi	r4,r2,65535
    6370:	390fc83a 	sub	r7,r7,r4
    6374:	398d883a 	add	r6,r7,r6
    6378:	300e943a 	slli	r7,r6,16
    637c:	18ffffcc 	andi	r3,r3,65535
    6380:	1008d43a 	srli	r4,r2,16
    6384:	38ceb03a 	or	r7,r7,r3
    6388:	49c00015 	stw	r7,0(r9)
    638c:	300dd43a 	srai	r6,r6,16
    6390:	4a400104 	addi	r9,r9,4
    6394:	a17fe52e 	bgeu	r20,r5,632c <__alt_data_end+0xfc00632c>
    6398:	b0800017 	ldw	r2,0(r22)
    639c:	10000b1e 	bne	r2,zero,63cc <quorem+0x12c>
    63a0:	b0bfff04 	addi	r2,r22,-4
    63a4:	a880082e 	bgeu	r21,r2,63c8 <quorem+0x128>
    63a8:	b0ffff17 	ldw	r3,-4(r22)
    63ac:	18000326 	beq	r3,zero,63bc <quorem+0x11c>
    63b0:	00000506 	br	63c8 <quorem+0x128>
    63b4:	10c00017 	ldw	r3,0(r2)
    63b8:	1800031e 	bne	r3,zero,63c8 <quorem+0x128>
    63bc:	10bfff04 	addi	r2,r2,-4
    63c0:	94bfffc4 	addi	r18,r18,-1
    63c4:	a8bffb36 	bltu	r21,r2,63b4 <__alt_data_end+0xfc0063b4>
    63c8:	84800415 	stw	r18,16(r16)
    63cc:	b80b883a 	mov	r5,r23
    63d0:	8009883a 	mov	r4,r16
    63d4:	0009d8c0 	call	9d8c <__mcmp>
    63d8:	10002616 	blt	r2,zero,6474 <quorem+0x1d4>
    63dc:	9cc00044 	addi	r19,r19,1
    63e0:	a805883a 	mov	r2,r21
    63e4:	000b883a 	mov	r5,zero
    63e8:	11000017 	ldw	r4,0(r2)
    63ec:	89800017 	ldw	r6,0(r17)
    63f0:	10800104 	addi	r2,r2,4
    63f4:	20ffffcc 	andi	r3,r4,65535
    63f8:	194b883a 	add	r5,r3,r5
    63fc:	30ffffcc 	andi	r3,r6,65535
    6400:	28c7c83a 	sub	r3,r5,r3
    6404:	300cd43a 	srli	r6,r6,16
    6408:	2008d43a 	srli	r4,r4,16
    640c:	180bd43a 	srai	r5,r3,16
    6410:	18ffffcc 	andi	r3,r3,65535
    6414:	2189c83a 	sub	r4,r4,r6
    6418:	2149883a 	add	r4,r4,r5
    641c:	200c943a 	slli	r6,r4,16
    6420:	8c400104 	addi	r17,r17,4
    6424:	200bd43a 	srai	r5,r4,16
    6428:	30c6b03a 	or	r3,r6,r3
    642c:	10ffff15 	stw	r3,-4(r2)
    6430:	a47fed2e 	bgeu	r20,r17,63e8 <__alt_data_end+0xfc0063e8>
    6434:	9485883a 	add	r2,r18,r18
    6438:	1085883a 	add	r2,r2,r2
    643c:	a887883a 	add	r3,r21,r2
    6440:	18800017 	ldw	r2,0(r3)
    6444:	10000b1e 	bne	r2,zero,6474 <quorem+0x1d4>
    6448:	18bfff04 	addi	r2,r3,-4
    644c:	a880082e 	bgeu	r21,r2,6470 <quorem+0x1d0>
    6450:	18ffff17 	ldw	r3,-4(r3)
    6454:	18000326 	beq	r3,zero,6464 <quorem+0x1c4>
    6458:	00000506 	br	6470 <quorem+0x1d0>
    645c:	10c00017 	ldw	r3,0(r2)
    6460:	1800031e 	bne	r3,zero,6470 <quorem+0x1d0>
    6464:	10bfff04 	addi	r2,r2,-4
    6468:	94bfffc4 	addi	r18,r18,-1
    646c:	a8bffb36 	bltu	r21,r2,645c <__alt_data_end+0xfc00645c>
    6470:	84800415 	stw	r18,16(r16)
    6474:	9805883a 	mov	r2,r19
    6478:	dfc00817 	ldw	ra,32(sp)
    647c:	ddc00717 	ldw	r23,28(sp)
    6480:	dd800617 	ldw	r22,24(sp)
    6484:	dd400517 	ldw	r21,20(sp)
    6488:	dd000417 	ldw	r20,16(sp)
    648c:	dcc00317 	ldw	r19,12(sp)
    6490:	dc800217 	ldw	r18,8(sp)
    6494:	dc400117 	ldw	r17,4(sp)
    6498:	dc000017 	ldw	r16,0(sp)
    649c:	dec00904 	addi	sp,sp,36
    64a0:	f800283a 	ret
    64a4:	0005883a 	mov	r2,zero
    64a8:	003ff306 	br	6478 <__alt_data_end+0xfc006478>

000064ac <_dtoa_r>:
    64ac:	f811883a 	mov	r8,ra
    64b0:	0000ac80 	call	ac8 <_mcount>
    64b4:	403f883a 	mov	ra,r8
    64b8:	deffde04 	addi	sp,sp,-136
    64bc:	dfc02115 	stw	ra,132(sp)
    64c0:	df002015 	stw	fp,128(sp)
    64c4:	ddc01f15 	stw	r23,124(sp)
    64c8:	dd801e15 	stw	r22,120(sp)
    64cc:	dd401d15 	stw	r21,116(sp)
    64d0:	dd001c15 	stw	r20,112(sp)
    64d4:	dcc01b15 	stw	r19,108(sp)
    64d8:	dc801a15 	stw	r18,104(sp)
    64dc:	dc401915 	stw	r17,100(sp)
    64e0:	dc001815 	stw	r16,96(sp)
    64e4:	20801017 	ldw	r2,64(r4)
    64e8:	d9c00315 	stw	r7,12(sp)
    64ec:	2039883a 	mov	fp,r4
    64f0:	3023883a 	mov	r17,r6
    64f4:	2825883a 	mov	r18,r5
    64f8:	dc002417 	ldw	r16,144(sp)
    64fc:	3027883a 	mov	r19,r6
    6500:	10000826 	beq	r2,zero,6524 <_dtoa_r+0x78>
    6504:	21801117 	ldw	r6,68(r4)
    6508:	00c00044 	movi	r3,1
    650c:	100b883a 	mov	r5,r2
    6510:	1986983a 	sll	r3,r3,r6
    6514:	11800115 	stw	r6,4(r2)
    6518:	10c00215 	stw	r3,8(r2)
    651c:	00095000 	call	9500 <_Bfree>
    6520:	e0001015 	stw	zero,64(fp)
    6524:	88002e16 	blt	r17,zero,65e0 <_dtoa_r+0x134>
    6528:	80000015 	stw	zero,0(r16)
    652c:	889ffc2c 	andhi	r2,r17,32752
    6530:	00dffc34 	movhi	r3,32752
    6534:	10c01c26 	beq	r2,r3,65a8 <_dtoa_r+0xfc>
    6538:	000d883a 	mov	r6,zero
    653c:	000f883a 	mov	r7,zero
    6540:	9009883a 	mov	r4,r18
    6544:	980b883a 	mov	r5,r19
    6548:	000f1e80 	call	f1e8 <__eqdf2>
    654c:	10002b1e 	bne	r2,zero,65fc <_dtoa_r+0x150>
    6550:	d9c02317 	ldw	r7,140(sp)
    6554:	00800044 	movi	r2,1
    6558:	38800015 	stw	r2,0(r7)
    655c:	d8802517 	ldw	r2,148(sp)
    6560:	10019e26 	beq	r2,zero,6bdc <_dtoa_r+0x730>
    6564:	d8c02517 	ldw	r3,148(sp)
    6568:	00800074 	movhi	r2,1
    656c:	1083f744 	addi	r2,r2,4061
    6570:	18800015 	stw	r2,0(r3)
    6574:	10bfffc4 	addi	r2,r2,-1
    6578:	dfc02117 	ldw	ra,132(sp)
    657c:	df002017 	ldw	fp,128(sp)
    6580:	ddc01f17 	ldw	r23,124(sp)
    6584:	dd801e17 	ldw	r22,120(sp)
    6588:	dd401d17 	ldw	r21,116(sp)
    658c:	dd001c17 	ldw	r20,112(sp)
    6590:	dcc01b17 	ldw	r19,108(sp)
    6594:	dc801a17 	ldw	r18,104(sp)
    6598:	dc401917 	ldw	r17,100(sp)
    659c:	dc001817 	ldw	r16,96(sp)
    65a0:	dec02204 	addi	sp,sp,136
    65a4:	f800283a 	ret
    65a8:	d8c02317 	ldw	r3,140(sp)
    65ac:	0089c3c4 	movi	r2,9999
    65b0:	18800015 	stw	r2,0(r3)
    65b4:	90017726 	beq	r18,zero,6b94 <_dtoa_r+0x6e8>
    65b8:	00800074 	movhi	r2,1
    65bc:	10840304 	addi	r2,r2,4108
    65c0:	d9002517 	ldw	r4,148(sp)
    65c4:	203fec26 	beq	r4,zero,6578 <__alt_data_end+0xfc006578>
    65c8:	10c000c7 	ldb	r3,3(r2)
    65cc:	1801781e 	bne	r3,zero,6bb0 <_dtoa_r+0x704>
    65d0:	10c000c4 	addi	r3,r2,3
    65d4:	d9802517 	ldw	r6,148(sp)
    65d8:	30c00015 	stw	r3,0(r6)
    65dc:	003fe606 	br	6578 <__alt_data_end+0xfc006578>
    65e0:	04e00034 	movhi	r19,32768
    65e4:	9cffffc4 	addi	r19,r19,-1
    65e8:	00800044 	movi	r2,1
    65ec:	8ce6703a 	and	r19,r17,r19
    65f0:	80800015 	stw	r2,0(r16)
    65f4:	9823883a 	mov	r17,r19
    65f8:	003fcc06 	br	652c <__alt_data_end+0xfc00652c>
    65fc:	d8800204 	addi	r2,sp,8
    6600:	d8800015 	stw	r2,0(sp)
    6604:	d9c00104 	addi	r7,sp,4
    6608:	900b883a 	mov	r5,r18
    660c:	980d883a 	mov	r6,r19
    6610:	e009883a 	mov	r4,fp
    6614:	8820d53a 	srli	r16,r17,20
    6618:	000a1840 	call	a184 <__d2b>
    661c:	d8800915 	stw	r2,36(sp)
    6620:	8001651e 	bne	r16,zero,6bb8 <_dtoa_r+0x70c>
    6624:	dd800217 	ldw	r22,8(sp)
    6628:	dc000117 	ldw	r16,4(sp)
    662c:	00800804 	movi	r2,32
    6630:	b421883a 	add	r16,r22,r16
    6634:	80c10c84 	addi	r3,r16,1074
    6638:	10c2d10e 	bge	r2,r3,7180 <_dtoa_r+0xcd4>
    663c:	00801004 	movi	r2,64
    6640:	81010484 	addi	r4,r16,1042
    6644:	10c7c83a 	sub	r3,r2,r3
    6648:	9108d83a 	srl	r4,r18,r4
    664c:	88e2983a 	sll	r17,r17,r3
    6650:	2448b03a 	or	r4,r4,r17
    6654:	00105f40 	call	105f4 <__floatunsidf>
    6658:	017f8434 	movhi	r5,65040
    665c:	01800044 	movi	r6,1
    6660:	1009883a 	mov	r4,r2
    6664:	194b883a 	add	r5,r3,r5
    6668:	843fffc4 	addi	r16,r16,-1
    666c:	d9801115 	stw	r6,68(sp)
    6670:	000d883a 	mov	r6,zero
    6674:	01cffe34 	movhi	r7,16376
    6678:	000fb780 	call	fb78 <__subdf3>
    667c:	0198dbf4 	movhi	r6,25455
    6680:	01cff4f4 	movhi	r7,16339
    6684:	3190d844 	addi	r6,r6,17249
    6688:	39e1e9c4 	addi	r7,r7,-30809
    668c:	1009883a 	mov	r4,r2
    6690:	180b883a 	mov	r5,r3
    6694:	000f4540 	call	f454 <__muldf3>
    6698:	01a2d874 	movhi	r6,35681
    669c:	01cff1f4 	movhi	r7,16327
    66a0:	31b22cc4 	addi	r6,r6,-14157
    66a4:	39e28a04 	addi	r7,r7,-30168
    66a8:	180b883a 	mov	r5,r3
    66ac:	1009883a 	mov	r4,r2
    66b0:	000e03c0 	call	e03c <__adddf3>
    66b4:	8009883a 	mov	r4,r16
    66b8:	1029883a 	mov	r20,r2
    66bc:	1823883a 	mov	r17,r3
    66c0:	001050c0 	call	1050c <__floatsidf>
    66c4:	019427f4 	movhi	r6,20639
    66c8:	01cff4f4 	movhi	r7,16339
    66cc:	319e7ec4 	addi	r6,r6,31227
    66d0:	39d104c4 	addi	r7,r7,17427
    66d4:	1009883a 	mov	r4,r2
    66d8:	180b883a 	mov	r5,r3
    66dc:	000f4540 	call	f454 <__muldf3>
    66e0:	100d883a 	mov	r6,r2
    66e4:	180f883a 	mov	r7,r3
    66e8:	a009883a 	mov	r4,r20
    66ec:	880b883a 	mov	r5,r17
    66f0:	000e03c0 	call	e03c <__adddf3>
    66f4:	1009883a 	mov	r4,r2
    66f8:	180b883a 	mov	r5,r3
    66fc:	1029883a 	mov	r20,r2
    6700:	1823883a 	mov	r17,r3
    6704:	00104800 	call	10480 <__fixdfsi>
    6708:	000d883a 	mov	r6,zero
    670c:	000f883a 	mov	r7,zero
    6710:	a009883a 	mov	r4,r20
    6714:	880b883a 	mov	r5,r17
    6718:	d8800515 	stw	r2,20(sp)
    671c:	000f35c0 	call	f35c <__ledf2>
    6720:	10028716 	blt	r2,zero,7140 <_dtoa_r+0xc94>
    6724:	d8c00517 	ldw	r3,20(sp)
    6728:	00800584 	movi	r2,22
    672c:	10c27536 	bltu	r2,r3,7104 <_dtoa_r+0xc58>
    6730:	180490fa 	slli	r2,r3,3
    6734:	00c00074 	movhi	r3,1
    6738:	18c41e04 	addi	r3,r3,4216
    673c:	1885883a 	add	r2,r3,r2
    6740:	11000017 	ldw	r4,0(r2)
    6744:	11400117 	ldw	r5,4(r2)
    6748:	900d883a 	mov	r6,r18
    674c:	980f883a 	mov	r7,r19
    6750:	000f2780 	call	f278 <__gedf2>
    6754:	00828d0e 	bge	zero,r2,718c <_dtoa_r+0xce0>
    6758:	d9000517 	ldw	r4,20(sp)
    675c:	d8000e15 	stw	zero,56(sp)
    6760:	213fffc4 	addi	r4,r4,-1
    6764:	d9000515 	stw	r4,20(sp)
    6768:	b42dc83a 	sub	r22,r22,r16
    676c:	b5bfffc4 	addi	r22,r22,-1
    6770:	b0026f16 	blt	r22,zero,7130 <_dtoa_r+0xc84>
    6774:	d8000815 	stw	zero,32(sp)
    6778:	d9c00517 	ldw	r7,20(sp)
    677c:	38026416 	blt	r7,zero,7110 <_dtoa_r+0xc64>
    6780:	b1ed883a 	add	r22,r22,r7
    6784:	d9c00d15 	stw	r7,52(sp)
    6788:	d8000a15 	stw	zero,40(sp)
    678c:	d9800317 	ldw	r6,12(sp)
    6790:	00800244 	movi	r2,9
    6794:	11811436 	bltu	r2,r6,6be8 <_dtoa_r+0x73c>
    6798:	00800144 	movi	r2,5
    679c:	1184e10e 	bge	r2,r6,7b24 <_dtoa_r+0x1678>
    67a0:	31bfff04 	addi	r6,r6,-4
    67a4:	d9800315 	stw	r6,12(sp)
    67a8:	0023883a 	mov	r17,zero
    67ac:	d9800317 	ldw	r6,12(sp)
    67b0:	008000c4 	movi	r2,3
    67b4:	30836726 	beq	r6,r2,7554 <_dtoa_r+0x10a8>
    67b8:	1183410e 	bge	r2,r6,74c0 <_dtoa_r+0x1014>
    67bc:	d9c00317 	ldw	r7,12(sp)
    67c0:	00800104 	movi	r2,4
    67c4:	38827c26 	beq	r7,r2,71b8 <_dtoa_r+0xd0c>
    67c8:	00800144 	movi	r2,5
    67cc:	3884c41e 	bne	r7,r2,7ae0 <_dtoa_r+0x1634>
    67d0:	00800044 	movi	r2,1
    67d4:	d8800b15 	stw	r2,44(sp)
    67d8:	d8c00517 	ldw	r3,20(sp)
    67dc:	d9002217 	ldw	r4,136(sp)
    67e0:	1907883a 	add	r3,r3,r4
    67e4:	19800044 	addi	r6,r3,1
    67e8:	d8c00c15 	stw	r3,48(sp)
    67ec:	d9800615 	stw	r6,24(sp)
    67f0:	0183a40e 	bge	zero,r6,7684 <_dtoa_r+0x11d8>
    67f4:	d9800617 	ldw	r6,24(sp)
    67f8:	3021883a 	mov	r16,r6
    67fc:	e0001115 	stw	zero,68(fp)
    6800:	008005c4 	movi	r2,23
    6804:	1184c92e 	bgeu	r2,r6,7b2c <_dtoa_r+0x1680>
    6808:	00c00044 	movi	r3,1
    680c:	00800104 	movi	r2,4
    6810:	1085883a 	add	r2,r2,r2
    6814:	11000504 	addi	r4,r2,20
    6818:	180b883a 	mov	r5,r3
    681c:	18c00044 	addi	r3,r3,1
    6820:	313ffb2e 	bgeu	r6,r4,6810 <__alt_data_end+0xfc006810>
    6824:	e1401115 	stw	r5,68(fp)
    6828:	e009883a 	mov	r4,fp
    682c:	000944c0 	call	944c <_Balloc>
    6830:	d8800715 	stw	r2,28(sp)
    6834:	e0801015 	stw	r2,64(fp)
    6838:	00800384 	movi	r2,14
    683c:	1400f736 	bltu	r2,r16,6c1c <_dtoa_r+0x770>
    6840:	8800f626 	beq	r17,zero,6c1c <_dtoa_r+0x770>
    6844:	d9c00517 	ldw	r7,20(sp)
    6848:	01c39a0e 	bge	zero,r7,76b4 <_dtoa_r+0x1208>
    684c:	388003cc 	andi	r2,r7,15
    6850:	100490fa 	slli	r2,r2,3
    6854:	382bd13a 	srai	r21,r7,4
    6858:	00c00074 	movhi	r3,1
    685c:	18c41e04 	addi	r3,r3,4216
    6860:	1885883a 	add	r2,r3,r2
    6864:	a8c0040c 	andi	r3,r21,16
    6868:	12400017 	ldw	r9,0(r2)
    686c:	12000117 	ldw	r8,4(r2)
    6870:	18037926 	beq	r3,zero,7658 <_dtoa_r+0x11ac>
    6874:	00800074 	movhi	r2,1
    6878:	10841404 	addi	r2,r2,4176
    687c:	11800817 	ldw	r6,32(r2)
    6880:	11c00917 	ldw	r7,36(r2)
    6884:	9009883a 	mov	r4,r18
    6888:	980b883a 	mov	r5,r19
    688c:	da001715 	stw	r8,92(sp)
    6890:	da401615 	stw	r9,88(sp)
    6894:	000e8f40 	call	e8f4 <__divdf3>
    6898:	da001717 	ldw	r8,92(sp)
    689c:	da401617 	ldw	r9,88(sp)
    68a0:	ad4003cc 	andi	r21,r21,15
    68a4:	040000c4 	movi	r16,3
    68a8:	1023883a 	mov	r17,r2
    68ac:	1829883a 	mov	r20,r3
    68b0:	a8001126 	beq	r21,zero,68f8 <_dtoa_r+0x44c>
    68b4:	05c00074 	movhi	r23,1
    68b8:	bdc41404 	addi	r23,r23,4176
    68bc:	4805883a 	mov	r2,r9
    68c0:	4007883a 	mov	r3,r8
    68c4:	a980004c 	andi	r6,r21,1
    68c8:	1009883a 	mov	r4,r2
    68cc:	a82bd07a 	srai	r21,r21,1
    68d0:	180b883a 	mov	r5,r3
    68d4:	30000426 	beq	r6,zero,68e8 <_dtoa_r+0x43c>
    68d8:	b9800017 	ldw	r6,0(r23)
    68dc:	b9c00117 	ldw	r7,4(r23)
    68e0:	84000044 	addi	r16,r16,1
    68e4:	000f4540 	call	f454 <__muldf3>
    68e8:	bdc00204 	addi	r23,r23,8
    68ec:	a83ff51e 	bne	r21,zero,68c4 <__alt_data_end+0xfc0068c4>
    68f0:	1013883a 	mov	r9,r2
    68f4:	1811883a 	mov	r8,r3
    68f8:	480d883a 	mov	r6,r9
    68fc:	400f883a 	mov	r7,r8
    6900:	8809883a 	mov	r4,r17
    6904:	a00b883a 	mov	r5,r20
    6908:	000e8f40 	call	e8f4 <__divdf3>
    690c:	d8800f15 	stw	r2,60(sp)
    6910:	d8c01015 	stw	r3,64(sp)
    6914:	d8c00e17 	ldw	r3,56(sp)
    6918:	18000626 	beq	r3,zero,6934 <_dtoa_r+0x488>
    691c:	d9000f17 	ldw	r4,60(sp)
    6920:	d9401017 	ldw	r5,64(sp)
    6924:	000d883a 	mov	r6,zero
    6928:	01cffc34 	movhi	r7,16368
    692c:	000f35c0 	call	f35c <__ledf2>
    6930:	10040b16 	blt	r2,zero,7960 <_dtoa_r+0x14b4>
    6934:	8009883a 	mov	r4,r16
    6938:	001050c0 	call	1050c <__floatsidf>
    693c:	d9800f17 	ldw	r6,60(sp)
    6940:	d9c01017 	ldw	r7,64(sp)
    6944:	1009883a 	mov	r4,r2
    6948:	180b883a 	mov	r5,r3
    694c:	000f4540 	call	f454 <__muldf3>
    6950:	000d883a 	mov	r6,zero
    6954:	01d00734 	movhi	r7,16412
    6958:	1009883a 	mov	r4,r2
    695c:	180b883a 	mov	r5,r3
    6960:	000e03c0 	call	e03c <__adddf3>
    6964:	1021883a 	mov	r16,r2
    6968:	d8800617 	ldw	r2,24(sp)
    696c:	047f3034 	movhi	r17,64704
    6970:	1c63883a 	add	r17,r3,r17
    6974:	10031826 	beq	r2,zero,75d8 <_dtoa_r+0x112c>
    6978:	d8c00517 	ldw	r3,20(sp)
    697c:	db000617 	ldw	r12,24(sp)
    6980:	d8c01315 	stw	r3,76(sp)
    6984:	d9000b17 	ldw	r4,44(sp)
    6988:	20038f26 	beq	r4,zero,77c8 <_dtoa_r+0x131c>
    698c:	60bfffc4 	addi	r2,r12,-1
    6990:	100490fa 	slli	r2,r2,3
    6994:	00c00074 	movhi	r3,1
    6998:	18c41e04 	addi	r3,r3,4216
    699c:	1885883a 	add	r2,r3,r2
    69a0:	11800017 	ldw	r6,0(r2)
    69a4:	11c00117 	ldw	r7,4(r2)
    69a8:	d8800717 	ldw	r2,28(sp)
    69ac:	0009883a 	mov	r4,zero
    69b0:	014ff834 	movhi	r5,16352
    69b4:	db001615 	stw	r12,88(sp)
    69b8:	15c00044 	addi	r23,r2,1
    69bc:	000e8f40 	call	e8f4 <__divdf3>
    69c0:	800d883a 	mov	r6,r16
    69c4:	880f883a 	mov	r7,r17
    69c8:	1009883a 	mov	r4,r2
    69cc:	180b883a 	mov	r5,r3
    69d0:	000fb780 	call	fb78 <__subdf3>
    69d4:	d9401017 	ldw	r5,64(sp)
    69d8:	d9000f17 	ldw	r4,60(sp)
    69dc:	102b883a 	mov	r21,r2
    69e0:	d8c01215 	stw	r3,72(sp)
    69e4:	00104800 	call	10480 <__fixdfsi>
    69e8:	1009883a 	mov	r4,r2
    69ec:	1029883a 	mov	r20,r2
    69f0:	001050c0 	call	1050c <__floatsidf>
    69f4:	d9000f17 	ldw	r4,60(sp)
    69f8:	d9401017 	ldw	r5,64(sp)
    69fc:	100d883a 	mov	r6,r2
    6a00:	180f883a 	mov	r7,r3
    6a04:	000fb780 	call	fb78 <__subdf3>
    6a08:	1823883a 	mov	r17,r3
    6a0c:	d8c00717 	ldw	r3,28(sp)
    6a10:	d9401217 	ldw	r5,72(sp)
    6a14:	a2000c04 	addi	r8,r20,48
    6a18:	1021883a 	mov	r16,r2
    6a1c:	1a000005 	stb	r8,0(r3)
    6a20:	800d883a 	mov	r6,r16
    6a24:	880f883a 	mov	r7,r17
    6a28:	a809883a 	mov	r4,r21
    6a2c:	4029883a 	mov	r20,r8
    6a30:	000f2780 	call	f278 <__gedf2>
    6a34:	00841d16 	blt	zero,r2,7aac <_dtoa_r+0x1600>
    6a38:	800d883a 	mov	r6,r16
    6a3c:	880f883a 	mov	r7,r17
    6a40:	0009883a 	mov	r4,zero
    6a44:	014ffc34 	movhi	r5,16368
    6a48:	000fb780 	call	fb78 <__subdf3>
    6a4c:	d9401217 	ldw	r5,72(sp)
    6a50:	100d883a 	mov	r6,r2
    6a54:	180f883a 	mov	r7,r3
    6a58:	a809883a 	mov	r4,r21
    6a5c:	000f2780 	call	f278 <__gedf2>
    6a60:	db001617 	ldw	r12,88(sp)
    6a64:	00840e16 	blt	zero,r2,7aa0 <_dtoa_r+0x15f4>
    6a68:	00800044 	movi	r2,1
    6a6c:	13006b0e 	bge	r2,r12,6c1c <_dtoa_r+0x770>
    6a70:	d9000717 	ldw	r4,28(sp)
    6a74:	dd800f15 	stw	r22,60(sp)
    6a78:	dcc01015 	stw	r19,64(sp)
    6a7c:	2319883a 	add	r12,r4,r12
    6a80:	dcc01217 	ldw	r19,72(sp)
    6a84:	602d883a 	mov	r22,r12
    6a88:	dc801215 	stw	r18,72(sp)
    6a8c:	b825883a 	mov	r18,r23
    6a90:	00000906 	br	6ab8 <_dtoa_r+0x60c>
    6a94:	000fb780 	call	fb78 <__subdf3>
    6a98:	a80d883a 	mov	r6,r21
    6a9c:	980f883a 	mov	r7,r19
    6aa0:	1009883a 	mov	r4,r2
    6aa4:	180b883a 	mov	r5,r3
    6aa8:	000f35c0 	call	f35c <__ledf2>
    6aac:	1003e816 	blt	r2,zero,7a50 <_dtoa_r+0x15a4>
    6ab0:	b825883a 	mov	r18,r23
    6ab4:	bd83e926 	beq	r23,r22,7a5c <_dtoa_r+0x15b0>
    6ab8:	a809883a 	mov	r4,r21
    6abc:	980b883a 	mov	r5,r19
    6ac0:	000d883a 	mov	r6,zero
    6ac4:	01d00934 	movhi	r7,16420
    6ac8:	000f4540 	call	f454 <__muldf3>
    6acc:	000d883a 	mov	r6,zero
    6ad0:	01d00934 	movhi	r7,16420
    6ad4:	8009883a 	mov	r4,r16
    6ad8:	880b883a 	mov	r5,r17
    6adc:	102b883a 	mov	r21,r2
    6ae0:	1827883a 	mov	r19,r3
    6ae4:	000f4540 	call	f454 <__muldf3>
    6ae8:	180b883a 	mov	r5,r3
    6aec:	1009883a 	mov	r4,r2
    6af0:	1821883a 	mov	r16,r3
    6af4:	1023883a 	mov	r17,r2
    6af8:	00104800 	call	10480 <__fixdfsi>
    6afc:	1009883a 	mov	r4,r2
    6b00:	1029883a 	mov	r20,r2
    6b04:	001050c0 	call	1050c <__floatsidf>
    6b08:	8809883a 	mov	r4,r17
    6b0c:	800b883a 	mov	r5,r16
    6b10:	100d883a 	mov	r6,r2
    6b14:	180f883a 	mov	r7,r3
    6b18:	000fb780 	call	fb78 <__subdf3>
    6b1c:	a5000c04 	addi	r20,r20,48
    6b20:	a80d883a 	mov	r6,r21
    6b24:	980f883a 	mov	r7,r19
    6b28:	1009883a 	mov	r4,r2
    6b2c:	180b883a 	mov	r5,r3
    6b30:	95000005 	stb	r20,0(r18)
    6b34:	1021883a 	mov	r16,r2
    6b38:	1823883a 	mov	r17,r3
    6b3c:	000f35c0 	call	f35c <__ledf2>
    6b40:	bdc00044 	addi	r23,r23,1
    6b44:	800d883a 	mov	r6,r16
    6b48:	880f883a 	mov	r7,r17
    6b4c:	0009883a 	mov	r4,zero
    6b50:	014ffc34 	movhi	r5,16368
    6b54:	103fcf0e 	bge	r2,zero,6a94 <__alt_data_end+0xfc006a94>
    6b58:	d8c01317 	ldw	r3,76(sp)
    6b5c:	d8c00515 	stw	r3,20(sp)
    6b60:	d9400917 	ldw	r5,36(sp)
    6b64:	e009883a 	mov	r4,fp
    6b68:	00095000 	call	9500 <_Bfree>
    6b6c:	d9000517 	ldw	r4,20(sp)
    6b70:	d9802317 	ldw	r6,140(sp)
    6b74:	d9c02517 	ldw	r7,148(sp)
    6b78:	b8000005 	stb	zero,0(r23)
    6b7c:	20800044 	addi	r2,r4,1
    6b80:	30800015 	stw	r2,0(r6)
    6b84:	3802aa26 	beq	r7,zero,7630 <_dtoa_r+0x1184>
    6b88:	3dc00015 	stw	r23,0(r7)
    6b8c:	d8800717 	ldw	r2,28(sp)
    6b90:	003e7906 	br	6578 <__alt_data_end+0xfc006578>
    6b94:	00800434 	movhi	r2,16
    6b98:	10bfffc4 	addi	r2,r2,-1
    6b9c:	88a2703a 	and	r17,r17,r2
    6ba0:	883e851e 	bne	r17,zero,65b8 <__alt_data_end+0xfc0065b8>
    6ba4:	00800074 	movhi	r2,1
    6ba8:	10840004 	addi	r2,r2,4096
    6bac:	003e8406 	br	65c0 <__alt_data_end+0xfc0065c0>
    6bb0:	10c00204 	addi	r3,r2,8
    6bb4:	003e8706 	br	65d4 <__alt_data_end+0xfc0065d4>
    6bb8:	01400434 	movhi	r5,16
    6bbc:	297fffc4 	addi	r5,r5,-1
    6bc0:	994a703a 	and	r5,r19,r5
    6bc4:	9009883a 	mov	r4,r18
    6bc8:	843f0044 	addi	r16,r16,-1023
    6bcc:	294ffc34 	orhi	r5,r5,16368
    6bd0:	dd800217 	ldw	r22,8(sp)
    6bd4:	d8001115 	stw	zero,68(sp)
    6bd8:	003ea506 	br	6670 <__alt_data_end+0xfc006670>
    6bdc:	00800074 	movhi	r2,1
    6be0:	1083f704 	addi	r2,r2,4060
    6be4:	003e6406 	br	6578 <__alt_data_end+0xfc006578>
    6be8:	e0001115 	stw	zero,68(fp)
    6bec:	000b883a 	mov	r5,zero
    6bf0:	e009883a 	mov	r4,fp
    6bf4:	000944c0 	call	944c <_Balloc>
    6bf8:	01bfffc4 	movi	r6,-1
    6bfc:	01c00044 	movi	r7,1
    6c00:	d8800715 	stw	r2,28(sp)
    6c04:	d9800c15 	stw	r6,48(sp)
    6c08:	e0801015 	stw	r2,64(fp)
    6c0c:	d8000315 	stw	zero,12(sp)
    6c10:	d9c00b15 	stw	r7,44(sp)
    6c14:	d9800615 	stw	r6,24(sp)
    6c18:	d8002215 	stw	zero,136(sp)
    6c1c:	d8800117 	ldw	r2,4(sp)
    6c20:	10008916 	blt	r2,zero,6e48 <_dtoa_r+0x99c>
    6c24:	d9000517 	ldw	r4,20(sp)
    6c28:	00c00384 	movi	r3,14
    6c2c:	19008616 	blt	r3,r4,6e48 <_dtoa_r+0x99c>
    6c30:	200490fa 	slli	r2,r4,3
    6c34:	00c00074 	movhi	r3,1
    6c38:	d9802217 	ldw	r6,136(sp)
    6c3c:	18c41e04 	addi	r3,r3,4216
    6c40:	1885883a 	add	r2,r3,r2
    6c44:	14000017 	ldw	r16,0(r2)
    6c48:	14400117 	ldw	r17,4(r2)
    6c4c:	30016316 	blt	r6,zero,71dc <_dtoa_r+0xd30>
    6c50:	800d883a 	mov	r6,r16
    6c54:	880f883a 	mov	r7,r17
    6c58:	9009883a 	mov	r4,r18
    6c5c:	980b883a 	mov	r5,r19
    6c60:	000e8f40 	call	e8f4 <__divdf3>
    6c64:	180b883a 	mov	r5,r3
    6c68:	1009883a 	mov	r4,r2
    6c6c:	00104800 	call	10480 <__fixdfsi>
    6c70:	1009883a 	mov	r4,r2
    6c74:	102b883a 	mov	r21,r2
    6c78:	001050c0 	call	1050c <__floatsidf>
    6c7c:	800d883a 	mov	r6,r16
    6c80:	880f883a 	mov	r7,r17
    6c84:	1009883a 	mov	r4,r2
    6c88:	180b883a 	mov	r5,r3
    6c8c:	000f4540 	call	f454 <__muldf3>
    6c90:	100d883a 	mov	r6,r2
    6c94:	180f883a 	mov	r7,r3
    6c98:	9009883a 	mov	r4,r18
    6c9c:	980b883a 	mov	r5,r19
    6ca0:	000fb780 	call	fb78 <__subdf3>
    6ca4:	d9c00717 	ldw	r7,28(sp)
    6ca8:	1009883a 	mov	r4,r2
    6cac:	a8800c04 	addi	r2,r21,48
    6cb0:	38800005 	stb	r2,0(r7)
    6cb4:	3dc00044 	addi	r23,r7,1
    6cb8:	d9c00617 	ldw	r7,24(sp)
    6cbc:	01800044 	movi	r6,1
    6cc0:	180b883a 	mov	r5,r3
    6cc4:	2005883a 	mov	r2,r4
    6cc8:	39803826 	beq	r7,r6,6dac <_dtoa_r+0x900>
    6ccc:	000d883a 	mov	r6,zero
    6cd0:	01d00934 	movhi	r7,16420
    6cd4:	000f4540 	call	f454 <__muldf3>
    6cd8:	000d883a 	mov	r6,zero
    6cdc:	000f883a 	mov	r7,zero
    6ce0:	1009883a 	mov	r4,r2
    6ce4:	180b883a 	mov	r5,r3
    6ce8:	1025883a 	mov	r18,r2
    6cec:	1827883a 	mov	r19,r3
    6cf0:	000f1e80 	call	f1e8 <__eqdf2>
    6cf4:	103f9a26 	beq	r2,zero,6b60 <__alt_data_end+0xfc006b60>
    6cf8:	d9c00617 	ldw	r7,24(sp)
    6cfc:	d8c00717 	ldw	r3,28(sp)
    6d00:	b829883a 	mov	r20,r23
    6d04:	38bfffc4 	addi	r2,r7,-1
    6d08:	18ad883a 	add	r22,r3,r2
    6d0c:	00000a06 	br	6d38 <_dtoa_r+0x88c>
    6d10:	000f4540 	call	f454 <__muldf3>
    6d14:	000d883a 	mov	r6,zero
    6d18:	000f883a 	mov	r7,zero
    6d1c:	1009883a 	mov	r4,r2
    6d20:	180b883a 	mov	r5,r3
    6d24:	1025883a 	mov	r18,r2
    6d28:	1827883a 	mov	r19,r3
    6d2c:	b829883a 	mov	r20,r23
    6d30:	000f1e80 	call	f1e8 <__eqdf2>
    6d34:	103f8a26 	beq	r2,zero,6b60 <__alt_data_end+0xfc006b60>
    6d38:	800d883a 	mov	r6,r16
    6d3c:	880f883a 	mov	r7,r17
    6d40:	9009883a 	mov	r4,r18
    6d44:	980b883a 	mov	r5,r19
    6d48:	000e8f40 	call	e8f4 <__divdf3>
    6d4c:	180b883a 	mov	r5,r3
    6d50:	1009883a 	mov	r4,r2
    6d54:	00104800 	call	10480 <__fixdfsi>
    6d58:	1009883a 	mov	r4,r2
    6d5c:	102b883a 	mov	r21,r2
    6d60:	001050c0 	call	1050c <__floatsidf>
    6d64:	800d883a 	mov	r6,r16
    6d68:	880f883a 	mov	r7,r17
    6d6c:	1009883a 	mov	r4,r2
    6d70:	180b883a 	mov	r5,r3
    6d74:	000f4540 	call	f454 <__muldf3>
    6d78:	100d883a 	mov	r6,r2
    6d7c:	180f883a 	mov	r7,r3
    6d80:	9009883a 	mov	r4,r18
    6d84:	980b883a 	mov	r5,r19
    6d88:	000fb780 	call	fb78 <__subdf3>
    6d8c:	aa000c04 	addi	r8,r21,48
    6d90:	a2000005 	stb	r8,0(r20)
    6d94:	000d883a 	mov	r6,zero
    6d98:	01d00934 	movhi	r7,16420
    6d9c:	1009883a 	mov	r4,r2
    6da0:	180b883a 	mov	r5,r3
    6da4:	a5c00044 	addi	r23,r20,1
    6da8:	b53fd91e 	bne	r22,r20,6d10 <__alt_data_end+0xfc006d10>
    6dac:	100d883a 	mov	r6,r2
    6db0:	180f883a 	mov	r7,r3
    6db4:	1009883a 	mov	r4,r2
    6db8:	180b883a 	mov	r5,r3
    6dbc:	000e03c0 	call	e03c <__adddf3>
    6dc0:	100d883a 	mov	r6,r2
    6dc4:	180f883a 	mov	r7,r3
    6dc8:	8009883a 	mov	r4,r16
    6dcc:	880b883a 	mov	r5,r17
    6dd0:	1027883a 	mov	r19,r2
    6dd4:	1825883a 	mov	r18,r3
    6dd8:	000f35c0 	call	f35c <__ledf2>
    6ddc:	10000816 	blt	r2,zero,6e00 <_dtoa_r+0x954>
    6de0:	980d883a 	mov	r6,r19
    6de4:	900f883a 	mov	r7,r18
    6de8:	8009883a 	mov	r4,r16
    6dec:	880b883a 	mov	r5,r17
    6df0:	000f1e80 	call	f1e8 <__eqdf2>
    6df4:	103f5a1e 	bne	r2,zero,6b60 <__alt_data_end+0xfc006b60>
    6df8:	ad40004c 	andi	r21,r21,1
    6dfc:	a83f5826 	beq	r21,zero,6b60 <__alt_data_end+0xfc006b60>
    6e00:	bd3fffc3 	ldbu	r20,-1(r23)
    6e04:	b8bfffc4 	addi	r2,r23,-1
    6e08:	1007883a 	mov	r3,r2
    6e0c:	01400e44 	movi	r5,57
    6e10:	d9800717 	ldw	r6,28(sp)
    6e14:	00000506 	br	6e2c <_dtoa_r+0x980>
    6e18:	18ffffc4 	addi	r3,r3,-1
    6e1c:	11824726 	beq	r2,r6,773c <_dtoa_r+0x1290>
    6e20:	1d000003 	ldbu	r20,0(r3)
    6e24:	102f883a 	mov	r23,r2
    6e28:	10bfffc4 	addi	r2,r2,-1
    6e2c:	a1003fcc 	andi	r4,r20,255
    6e30:	2100201c 	xori	r4,r4,128
    6e34:	213fe004 	addi	r4,r4,-128
    6e38:	217ff726 	beq	r4,r5,6e18 <__alt_data_end+0xfc006e18>
    6e3c:	a2000044 	addi	r8,r20,1
    6e40:	12000005 	stb	r8,0(r2)
    6e44:	003f4606 	br	6b60 <__alt_data_end+0xfc006b60>
    6e48:	d9000b17 	ldw	r4,44(sp)
    6e4c:	2000c826 	beq	r4,zero,7170 <_dtoa_r+0xcc4>
    6e50:	d9800317 	ldw	r6,12(sp)
    6e54:	00c00044 	movi	r3,1
    6e58:	1980f90e 	bge	r3,r6,7240 <_dtoa_r+0xd94>
    6e5c:	d8800617 	ldw	r2,24(sp)
    6e60:	d8c00a17 	ldw	r3,40(sp)
    6e64:	157fffc4 	addi	r21,r2,-1
    6e68:	1d41f316 	blt	r3,r21,7638 <_dtoa_r+0x118c>
    6e6c:	1d6bc83a 	sub	r21,r3,r21
    6e70:	d9c00617 	ldw	r7,24(sp)
    6e74:	3802aa16 	blt	r7,zero,7920 <_dtoa_r+0x1474>
    6e78:	dd000817 	ldw	r20,32(sp)
    6e7c:	d8800617 	ldw	r2,24(sp)
    6e80:	d8c00817 	ldw	r3,32(sp)
    6e84:	01400044 	movi	r5,1
    6e88:	e009883a 	mov	r4,fp
    6e8c:	1887883a 	add	r3,r3,r2
    6e90:	d8c00815 	stw	r3,32(sp)
    6e94:	b0ad883a 	add	r22,r22,r2
    6e98:	00098a00 	call	98a0 <__i2b>
    6e9c:	1023883a 	mov	r17,r2
    6ea0:	a0000826 	beq	r20,zero,6ec4 <_dtoa_r+0xa18>
    6ea4:	0580070e 	bge	zero,r22,6ec4 <_dtoa_r+0xa18>
    6ea8:	a005883a 	mov	r2,r20
    6eac:	b500b916 	blt	r22,r20,7194 <_dtoa_r+0xce8>
    6eb0:	d9000817 	ldw	r4,32(sp)
    6eb4:	a0a9c83a 	sub	r20,r20,r2
    6eb8:	b0adc83a 	sub	r22,r22,r2
    6ebc:	2089c83a 	sub	r4,r4,r2
    6ec0:	d9000815 	stw	r4,32(sp)
    6ec4:	d9800a17 	ldw	r6,40(sp)
    6ec8:	0181810e 	bge	zero,r6,74d0 <_dtoa_r+0x1024>
    6ecc:	d9c00b17 	ldw	r7,44(sp)
    6ed0:	3800b326 	beq	r7,zero,71a0 <_dtoa_r+0xcf4>
    6ed4:	a800b226 	beq	r21,zero,71a0 <_dtoa_r+0xcf4>
    6ed8:	880b883a 	mov	r5,r17
    6edc:	a80d883a 	mov	r6,r21
    6ee0:	e009883a 	mov	r4,fp
    6ee4:	0009aec0 	call	9aec <__pow5mult>
    6ee8:	d9800917 	ldw	r6,36(sp)
    6eec:	100b883a 	mov	r5,r2
    6ef0:	e009883a 	mov	r4,fp
    6ef4:	1023883a 	mov	r17,r2
    6ef8:	00098e80 	call	98e8 <__multiply>
    6efc:	1021883a 	mov	r16,r2
    6f00:	d8800a17 	ldw	r2,40(sp)
    6f04:	d9400917 	ldw	r5,36(sp)
    6f08:	e009883a 	mov	r4,fp
    6f0c:	1545c83a 	sub	r2,r2,r21
    6f10:	d8800a15 	stw	r2,40(sp)
    6f14:	00095000 	call	9500 <_Bfree>
    6f18:	d8c00a17 	ldw	r3,40(sp)
    6f1c:	18009f1e 	bne	r3,zero,719c <_dtoa_r+0xcf0>
    6f20:	05c00044 	movi	r23,1
    6f24:	e009883a 	mov	r4,fp
    6f28:	b80b883a 	mov	r5,r23
    6f2c:	00098a00 	call	98a0 <__i2b>
    6f30:	d9000d17 	ldw	r4,52(sp)
    6f34:	102b883a 	mov	r21,r2
    6f38:	2000ce26 	beq	r4,zero,7274 <_dtoa_r+0xdc8>
    6f3c:	200d883a 	mov	r6,r4
    6f40:	100b883a 	mov	r5,r2
    6f44:	e009883a 	mov	r4,fp
    6f48:	0009aec0 	call	9aec <__pow5mult>
    6f4c:	d9800317 	ldw	r6,12(sp)
    6f50:	102b883a 	mov	r21,r2
    6f54:	b981810e 	bge	r23,r6,755c <_dtoa_r+0x10b0>
    6f58:	0027883a 	mov	r19,zero
    6f5c:	a8800417 	ldw	r2,16(r21)
    6f60:	05c00804 	movi	r23,32
    6f64:	10800104 	addi	r2,r2,4
    6f68:	1085883a 	add	r2,r2,r2
    6f6c:	1085883a 	add	r2,r2,r2
    6f70:	a885883a 	add	r2,r21,r2
    6f74:	11000017 	ldw	r4,0(r2)
    6f78:	00097700 	call	9770 <__hi0bits>
    6f7c:	b885c83a 	sub	r2,r23,r2
    6f80:	1585883a 	add	r2,r2,r22
    6f84:	108007cc 	andi	r2,r2,31
    6f88:	1000b326 	beq	r2,zero,7258 <_dtoa_r+0xdac>
    6f8c:	00c00804 	movi	r3,32
    6f90:	1887c83a 	sub	r3,r3,r2
    6f94:	01000104 	movi	r4,4
    6f98:	20c2cd0e 	bge	r4,r3,7ad0 <_dtoa_r+0x1624>
    6f9c:	00c00704 	movi	r3,28
    6fa0:	1885c83a 	sub	r2,r3,r2
    6fa4:	d8c00817 	ldw	r3,32(sp)
    6fa8:	a0a9883a 	add	r20,r20,r2
    6fac:	b0ad883a 	add	r22,r22,r2
    6fb0:	1887883a 	add	r3,r3,r2
    6fb4:	d8c00815 	stw	r3,32(sp)
    6fb8:	d9800817 	ldw	r6,32(sp)
    6fbc:	0180040e 	bge	zero,r6,6fd0 <_dtoa_r+0xb24>
    6fc0:	800b883a 	mov	r5,r16
    6fc4:	e009883a 	mov	r4,fp
    6fc8:	0009c380 	call	9c38 <__lshift>
    6fcc:	1021883a 	mov	r16,r2
    6fd0:	0580050e 	bge	zero,r22,6fe8 <_dtoa_r+0xb3c>
    6fd4:	a80b883a 	mov	r5,r21
    6fd8:	b00d883a 	mov	r6,r22
    6fdc:	e009883a 	mov	r4,fp
    6fe0:	0009c380 	call	9c38 <__lshift>
    6fe4:	102b883a 	mov	r21,r2
    6fe8:	d9c00e17 	ldw	r7,56(sp)
    6fec:	3801211e 	bne	r7,zero,7474 <_dtoa_r+0xfc8>
    6ff0:	d9800617 	ldw	r6,24(sp)
    6ff4:	0181380e 	bge	zero,r6,74d8 <_dtoa_r+0x102c>
    6ff8:	d8c00b17 	ldw	r3,44(sp)
    6ffc:	1800ab1e 	bne	r3,zero,72ac <_dtoa_r+0xe00>
    7000:	dc800717 	ldw	r18,28(sp)
    7004:	dcc00617 	ldw	r19,24(sp)
    7008:	9029883a 	mov	r20,r18
    700c:	00000206 	br	7018 <_dtoa_r+0xb6c>
    7010:	00095340 	call	9534 <__multadd>
    7014:	1021883a 	mov	r16,r2
    7018:	a80b883a 	mov	r5,r21
    701c:	8009883a 	mov	r4,r16
    7020:	00062a00 	call	62a0 <quorem>
    7024:	10800c04 	addi	r2,r2,48
    7028:	90800005 	stb	r2,0(r18)
    702c:	94800044 	addi	r18,r18,1
    7030:	9507c83a 	sub	r3,r18,r20
    7034:	000f883a 	mov	r7,zero
    7038:	01800284 	movi	r6,10
    703c:	800b883a 	mov	r5,r16
    7040:	e009883a 	mov	r4,fp
    7044:	1cfff216 	blt	r3,r19,7010 <__alt_data_end+0xfc007010>
    7048:	1011883a 	mov	r8,r2
    704c:	d8800617 	ldw	r2,24(sp)
    7050:	0082370e 	bge	zero,r2,7930 <_dtoa_r+0x1484>
    7054:	d9000717 	ldw	r4,28(sp)
    7058:	0025883a 	mov	r18,zero
    705c:	20af883a 	add	r23,r4,r2
    7060:	01800044 	movi	r6,1
    7064:	800b883a 	mov	r5,r16
    7068:	e009883a 	mov	r4,fp
    706c:	da001715 	stw	r8,92(sp)
    7070:	0009c380 	call	9c38 <__lshift>
    7074:	a80b883a 	mov	r5,r21
    7078:	1009883a 	mov	r4,r2
    707c:	d8800915 	stw	r2,36(sp)
    7080:	0009d8c0 	call	9d8c <__mcmp>
    7084:	da001717 	ldw	r8,92(sp)
    7088:	0081800e 	bge	zero,r2,768c <_dtoa_r+0x11e0>
    708c:	b93fffc3 	ldbu	r4,-1(r23)
    7090:	b8bfffc4 	addi	r2,r23,-1
    7094:	1007883a 	mov	r3,r2
    7098:	01800e44 	movi	r6,57
    709c:	d9c00717 	ldw	r7,28(sp)
    70a0:	00000506 	br	70b8 <_dtoa_r+0xc0c>
    70a4:	18ffffc4 	addi	r3,r3,-1
    70a8:	11c12326 	beq	r2,r7,7538 <_dtoa_r+0x108c>
    70ac:	19000003 	ldbu	r4,0(r3)
    70b0:	102f883a 	mov	r23,r2
    70b4:	10bfffc4 	addi	r2,r2,-1
    70b8:	21403fcc 	andi	r5,r4,255
    70bc:	2940201c 	xori	r5,r5,128
    70c0:	297fe004 	addi	r5,r5,-128
    70c4:	29bff726 	beq	r5,r6,70a4 <__alt_data_end+0xfc0070a4>
    70c8:	21000044 	addi	r4,r4,1
    70cc:	11000005 	stb	r4,0(r2)
    70d0:	a80b883a 	mov	r5,r21
    70d4:	e009883a 	mov	r4,fp
    70d8:	00095000 	call	9500 <_Bfree>
    70dc:	883ea026 	beq	r17,zero,6b60 <__alt_data_end+0xfc006b60>
    70e0:	90000426 	beq	r18,zero,70f4 <_dtoa_r+0xc48>
    70e4:	94400326 	beq	r18,r17,70f4 <_dtoa_r+0xc48>
    70e8:	900b883a 	mov	r5,r18
    70ec:	e009883a 	mov	r4,fp
    70f0:	00095000 	call	9500 <_Bfree>
    70f4:	880b883a 	mov	r5,r17
    70f8:	e009883a 	mov	r4,fp
    70fc:	00095000 	call	9500 <_Bfree>
    7100:	003e9706 	br	6b60 <__alt_data_end+0xfc006b60>
    7104:	01800044 	movi	r6,1
    7108:	d9800e15 	stw	r6,56(sp)
    710c:	003d9606 	br	6768 <__alt_data_end+0xfc006768>
    7110:	d8800817 	ldw	r2,32(sp)
    7114:	d8c00517 	ldw	r3,20(sp)
    7118:	d8000d15 	stw	zero,52(sp)
    711c:	10c5c83a 	sub	r2,r2,r3
    7120:	00c9c83a 	sub	r4,zero,r3
    7124:	d8800815 	stw	r2,32(sp)
    7128:	d9000a15 	stw	r4,40(sp)
    712c:	003d9706 	br	678c <__alt_data_end+0xfc00678c>
    7130:	05adc83a 	sub	r22,zero,r22
    7134:	dd800815 	stw	r22,32(sp)
    7138:	002d883a 	mov	r22,zero
    713c:	003d8e06 	br	6778 <__alt_data_end+0xfc006778>
    7140:	d9000517 	ldw	r4,20(sp)
    7144:	001050c0 	call	1050c <__floatsidf>
    7148:	100d883a 	mov	r6,r2
    714c:	180f883a 	mov	r7,r3
    7150:	a009883a 	mov	r4,r20
    7154:	880b883a 	mov	r5,r17
    7158:	000f1e80 	call	f1e8 <__eqdf2>
    715c:	103d7126 	beq	r2,zero,6724 <__alt_data_end+0xfc006724>
    7160:	d9c00517 	ldw	r7,20(sp)
    7164:	39ffffc4 	addi	r7,r7,-1
    7168:	d9c00515 	stw	r7,20(sp)
    716c:	003d6d06 	br	6724 <__alt_data_end+0xfc006724>
    7170:	dd400a17 	ldw	r21,40(sp)
    7174:	dd000817 	ldw	r20,32(sp)
    7178:	0023883a 	mov	r17,zero
    717c:	003f4806 	br	6ea0 <__alt_data_end+0xfc006ea0>
    7180:	10e3c83a 	sub	r17,r2,r3
    7184:	9448983a 	sll	r4,r18,r17
    7188:	003d3206 	br	6654 <__alt_data_end+0xfc006654>
    718c:	d8000e15 	stw	zero,56(sp)
    7190:	003d7506 	br	6768 <__alt_data_end+0xfc006768>
    7194:	b005883a 	mov	r2,r22
    7198:	003f4506 	br	6eb0 <__alt_data_end+0xfc006eb0>
    719c:	dc000915 	stw	r16,36(sp)
    71a0:	d9800a17 	ldw	r6,40(sp)
    71a4:	d9400917 	ldw	r5,36(sp)
    71a8:	e009883a 	mov	r4,fp
    71ac:	0009aec0 	call	9aec <__pow5mult>
    71b0:	1021883a 	mov	r16,r2
    71b4:	003f5a06 	br	6f20 <__alt_data_end+0xfc006f20>
    71b8:	01c00044 	movi	r7,1
    71bc:	d9c00b15 	stw	r7,44(sp)
    71c0:	d8802217 	ldw	r2,136(sp)
    71c4:	0081280e 	bge	zero,r2,7668 <_dtoa_r+0x11bc>
    71c8:	100d883a 	mov	r6,r2
    71cc:	1021883a 	mov	r16,r2
    71d0:	d8800c15 	stw	r2,48(sp)
    71d4:	d8800615 	stw	r2,24(sp)
    71d8:	003d8806 	br	67fc <__alt_data_end+0xfc0067fc>
    71dc:	d8800617 	ldw	r2,24(sp)
    71e0:	00be9b16 	blt	zero,r2,6c50 <__alt_data_end+0xfc006c50>
    71e4:	10010f1e 	bne	r2,zero,7624 <_dtoa_r+0x1178>
    71e8:	880b883a 	mov	r5,r17
    71ec:	000d883a 	mov	r6,zero
    71f0:	01d00534 	movhi	r7,16404
    71f4:	8009883a 	mov	r4,r16
    71f8:	000f4540 	call	f454 <__muldf3>
    71fc:	900d883a 	mov	r6,r18
    7200:	980f883a 	mov	r7,r19
    7204:	1009883a 	mov	r4,r2
    7208:	180b883a 	mov	r5,r3
    720c:	000f2780 	call	f278 <__gedf2>
    7210:	002b883a 	mov	r21,zero
    7214:	0023883a 	mov	r17,zero
    7218:	1000bf16 	blt	r2,zero,7518 <_dtoa_r+0x106c>
    721c:	d9802217 	ldw	r6,136(sp)
    7220:	ddc00717 	ldw	r23,28(sp)
    7224:	018c303a 	nor	r6,zero,r6
    7228:	d9800515 	stw	r6,20(sp)
    722c:	a80b883a 	mov	r5,r21
    7230:	e009883a 	mov	r4,fp
    7234:	00095000 	call	9500 <_Bfree>
    7238:	883e4926 	beq	r17,zero,6b60 <__alt_data_end+0xfc006b60>
    723c:	003fad06 	br	70f4 <__alt_data_end+0xfc0070f4>
    7240:	d9c01117 	ldw	r7,68(sp)
    7244:	3801bc26 	beq	r7,zero,7938 <_dtoa_r+0x148c>
    7248:	10810cc4 	addi	r2,r2,1075
    724c:	dd400a17 	ldw	r21,40(sp)
    7250:	dd000817 	ldw	r20,32(sp)
    7254:	003f0a06 	br	6e80 <__alt_data_end+0xfc006e80>
    7258:	00800704 	movi	r2,28
    725c:	d9000817 	ldw	r4,32(sp)
    7260:	a0a9883a 	add	r20,r20,r2
    7264:	b0ad883a 	add	r22,r22,r2
    7268:	2089883a 	add	r4,r4,r2
    726c:	d9000815 	stw	r4,32(sp)
    7270:	003f5106 	br	6fb8 <__alt_data_end+0xfc006fb8>
    7274:	d8c00317 	ldw	r3,12(sp)
    7278:	b8c1fc0e 	bge	r23,r3,7a6c <_dtoa_r+0x15c0>
    727c:	0027883a 	mov	r19,zero
    7280:	b805883a 	mov	r2,r23
    7284:	003f3e06 	br	6f80 <__alt_data_end+0xfc006f80>
    7288:	880b883a 	mov	r5,r17
    728c:	e009883a 	mov	r4,fp
    7290:	000f883a 	mov	r7,zero
    7294:	01800284 	movi	r6,10
    7298:	00095340 	call	9534 <__multadd>
    729c:	d9000c17 	ldw	r4,48(sp)
    72a0:	1023883a 	mov	r17,r2
    72a4:	0102040e 	bge	zero,r4,7ab8 <_dtoa_r+0x160c>
    72a8:	d9000615 	stw	r4,24(sp)
    72ac:	0500050e 	bge	zero,r20,72c4 <_dtoa_r+0xe18>
    72b0:	880b883a 	mov	r5,r17
    72b4:	a00d883a 	mov	r6,r20
    72b8:	e009883a 	mov	r4,fp
    72bc:	0009c380 	call	9c38 <__lshift>
    72c0:	1023883a 	mov	r17,r2
    72c4:	9801241e 	bne	r19,zero,7758 <_dtoa_r+0x12ac>
    72c8:	8829883a 	mov	r20,r17
    72cc:	d9000617 	ldw	r4,24(sp)
    72d0:	dcc00717 	ldw	r19,28(sp)
    72d4:	9480004c 	andi	r18,r18,1
    72d8:	20bfffc4 	addi	r2,r4,-1
    72dc:	9885883a 	add	r2,r19,r2
    72e0:	d8800415 	stw	r2,16(sp)
    72e4:	dc800615 	stw	r18,24(sp)
    72e8:	a80b883a 	mov	r5,r21
    72ec:	8009883a 	mov	r4,r16
    72f0:	00062a00 	call	62a0 <quorem>
    72f4:	880b883a 	mov	r5,r17
    72f8:	8009883a 	mov	r4,r16
    72fc:	102f883a 	mov	r23,r2
    7300:	0009d8c0 	call	9d8c <__mcmp>
    7304:	a80b883a 	mov	r5,r21
    7308:	a00d883a 	mov	r6,r20
    730c:	e009883a 	mov	r4,fp
    7310:	102d883a 	mov	r22,r2
    7314:	0009df80 	call	9df8 <__mdiff>
    7318:	1007883a 	mov	r3,r2
    731c:	10800317 	ldw	r2,12(r2)
    7320:	bc800c04 	addi	r18,r23,48
    7324:	180b883a 	mov	r5,r3
    7328:	10004e1e 	bne	r2,zero,7464 <_dtoa_r+0xfb8>
    732c:	8009883a 	mov	r4,r16
    7330:	d8c01615 	stw	r3,88(sp)
    7334:	0009d8c0 	call	9d8c <__mcmp>
    7338:	d8c01617 	ldw	r3,88(sp)
    733c:	e009883a 	mov	r4,fp
    7340:	d8801615 	stw	r2,88(sp)
    7344:	180b883a 	mov	r5,r3
    7348:	00095000 	call	9500 <_Bfree>
    734c:	d8801617 	ldw	r2,88(sp)
    7350:	1000041e 	bne	r2,zero,7364 <_dtoa_r+0xeb8>
    7354:	d9800317 	ldw	r6,12(sp)
    7358:	3000021e 	bne	r6,zero,7364 <_dtoa_r+0xeb8>
    735c:	d8c00617 	ldw	r3,24(sp)
    7360:	18003726 	beq	r3,zero,7440 <_dtoa_r+0xf94>
    7364:	b0002016 	blt	r22,zero,73e8 <_dtoa_r+0xf3c>
    7368:	b000041e 	bne	r22,zero,737c <_dtoa_r+0xed0>
    736c:	d9000317 	ldw	r4,12(sp)
    7370:	2000021e 	bne	r4,zero,737c <_dtoa_r+0xed0>
    7374:	d8c00617 	ldw	r3,24(sp)
    7378:	18001b26 	beq	r3,zero,73e8 <_dtoa_r+0xf3c>
    737c:	00810716 	blt	zero,r2,779c <_dtoa_r+0x12f0>
    7380:	d8c00417 	ldw	r3,16(sp)
    7384:	9d800044 	addi	r22,r19,1
    7388:	9c800005 	stb	r18,0(r19)
    738c:	b02f883a 	mov	r23,r22
    7390:	98c10626 	beq	r19,r3,77ac <_dtoa_r+0x1300>
    7394:	800b883a 	mov	r5,r16
    7398:	000f883a 	mov	r7,zero
    739c:	01800284 	movi	r6,10
    73a0:	e009883a 	mov	r4,fp
    73a4:	00095340 	call	9534 <__multadd>
    73a8:	1021883a 	mov	r16,r2
    73ac:	000f883a 	mov	r7,zero
    73b0:	01800284 	movi	r6,10
    73b4:	880b883a 	mov	r5,r17
    73b8:	e009883a 	mov	r4,fp
    73bc:	8d002526 	beq	r17,r20,7454 <_dtoa_r+0xfa8>
    73c0:	00095340 	call	9534 <__multadd>
    73c4:	a00b883a 	mov	r5,r20
    73c8:	000f883a 	mov	r7,zero
    73cc:	01800284 	movi	r6,10
    73d0:	e009883a 	mov	r4,fp
    73d4:	1023883a 	mov	r17,r2
    73d8:	00095340 	call	9534 <__multadd>
    73dc:	1029883a 	mov	r20,r2
    73e0:	b027883a 	mov	r19,r22
    73e4:	003fc006 	br	72e8 <__alt_data_end+0xfc0072e8>
    73e8:	9011883a 	mov	r8,r18
    73ec:	00800e0e 	bge	zero,r2,7428 <_dtoa_r+0xf7c>
    73f0:	800b883a 	mov	r5,r16
    73f4:	01800044 	movi	r6,1
    73f8:	e009883a 	mov	r4,fp
    73fc:	da001715 	stw	r8,92(sp)
    7400:	0009c380 	call	9c38 <__lshift>
    7404:	a80b883a 	mov	r5,r21
    7408:	1009883a 	mov	r4,r2
    740c:	1021883a 	mov	r16,r2
    7410:	0009d8c0 	call	9d8c <__mcmp>
    7414:	da001717 	ldw	r8,92(sp)
    7418:	0081960e 	bge	zero,r2,7a74 <_dtoa_r+0x15c8>
    741c:	00800e44 	movi	r2,57
    7420:	40817026 	beq	r8,r2,79e4 <_dtoa_r+0x1538>
    7424:	ba000c44 	addi	r8,r23,49
    7428:	8825883a 	mov	r18,r17
    742c:	9dc00044 	addi	r23,r19,1
    7430:	9a000005 	stb	r8,0(r19)
    7434:	a023883a 	mov	r17,r20
    7438:	dc000915 	stw	r16,36(sp)
    743c:	003f2406 	br	70d0 <__alt_data_end+0xfc0070d0>
    7440:	00800e44 	movi	r2,57
    7444:	9011883a 	mov	r8,r18
    7448:	90816626 	beq	r18,r2,79e4 <_dtoa_r+0x1538>
    744c:	05bff516 	blt	zero,r22,7424 <__alt_data_end+0xfc007424>
    7450:	003ff506 	br	7428 <__alt_data_end+0xfc007428>
    7454:	00095340 	call	9534 <__multadd>
    7458:	1023883a 	mov	r17,r2
    745c:	1029883a 	mov	r20,r2
    7460:	003fdf06 	br	73e0 <__alt_data_end+0xfc0073e0>
    7464:	e009883a 	mov	r4,fp
    7468:	00095000 	call	9500 <_Bfree>
    746c:	00800044 	movi	r2,1
    7470:	003fbc06 	br	7364 <__alt_data_end+0xfc007364>
    7474:	a80b883a 	mov	r5,r21
    7478:	8009883a 	mov	r4,r16
    747c:	0009d8c0 	call	9d8c <__mcmp>
    7480:	103edb0e 	bge	r2,zero,6ff0 <__alt_data_end+0xfc006ff0>
    7484:	800b883a 	mov	r5,r16
    7488:	000f883a 	mov	r7,zero
    748c:	01800284 	movi	r6,10
    7490:	e009883a 	mov	r4,fp
    7494:	00095340 	call	9534 <__multadd>
    7498:	1021883a 	mov	r16,r2
    749c:	d8800517 	ldw	r2,20(sp)
    74a0:	d8c00b17 	ldw	r3,44(sp)
    74a4:	10bfffc4 	addi	r2,r2,-1
    74a8:	d8800515 	stw	r2,20(sp)
    74ac:	183f761e 	bne	r3,zero,7288 <__alt_data_end+0xfc007288>
    74b0:	d9000c17 	ldw	r4,48(sp)
    74b4:	0101730e 	bge	zero,r4,7a84 <_dtoa_r+0x15d8>
    74b8:	d9000615 	stw	r4,24(sp)
    74bc:	003ed006 	br	7000 <__alt_data_end+0xfc007000>
    74c0:	00800084 	movi	r2,2
    74c4:	3081861e 	bne	r6,r2,7ae0 <_dtoa_r+0x1634>
    74c8:	d8000b15 	stw	zero,44(sp)
    74cc:	003f3c06 	br	71c0 <__alt_data_end+0xfc0071c0>
    74d0:	dc000917 	ldw	r16,36(sp)
    74d4:	003e9206 	br	6f20 <__alt_data_end+0xfc006f20>
    74d8:	d9c00317 	ldw	r7,12(sp)
    74dc:	00800084 	movi	r2,2
    74e0:	11fec50e 	bge	r2,r7,6ff8 <__alt_data_end+0xfc006ff8>
    74e4:	d9000617 	ldw	r4,24(sp)
    74e8:	20013c1e 	bne	r4,zero,79dc <_dtoa_r+0x1530>
    74ec:	a80b883a 	mov	r5,r21
    74f0:	000f883a 	mov	r7,zero
    74f4:	01800144 	movi	r6,5
    74f8:	e009883a 	mov	r4,fp
    74fc:	00095340 	call	9534 <__multadd>
    7500:	100b883a 	mov	r5,r2
    7504:	8009883a 	mov	r4,r16
    7508:	102b883a 	mov	r21,r2
    750c:	0009d8c0 	call	9d8c <__mcmp>
    7510:	dc000915 	stw	r16,36(sp)
    7514:	00bf410e 	bge	zero,r2,721c <__alt_data_end+0xfc00721c>
    7518:	d9c00717 	ldw	r7,28(sp)
    751c:	00800c44 	movi	r2,49
    7520:	38800005 	stb	r2,0(r7)
    7524:	d8800517 	ldw	r2,20(sp)
    7528:	3dc00044 	addi	r23,r7,1
    752c:	10800044 	addi	r2,r2,1
    7530:	d8800515 	stw	r2,20(sp)
    7534:	003f3d06 	br	722c <__alt_data_end+0xfc00722c>
    7538:	d9800517 	ldw	r6,20(sp)
    753c:	d9c00717 	ldw	r7,28(sp)
    7540:	00800c44 	movi	r2,49
    7544:	31800044 	addi	r6,r6,1
    7548:	d9800515 	stw	r6,20(sp)
    754c:	38800005 	stb	r2,0(r7)
    7550:	003edf06 	br	70d0 <__alt_data_end+0xfc0070d0>
    7554:	d8000b15 	stw	zero,44(sp)
    7558:	003c9f06 	br	67d8 <__alt_data_end+0xfc0067d8>
    755c:	903e7e1e 	bne	r18,zero,6f58 <__alt_data_end+0xfc006f58>
    7560:	00800434 	movhi	r2,16
    7564:	10bfffc4 	addi	r2,r2,-1
    7568:	9884703a 	and	r2,r19,r2
    756c:	1000ea1e 	bne	r2,zero,7918 <_dtoa_r+0x146c>
    7570:	9cdffc2c 	andhi	r19,r19,32752
    7574:	9800e826 	beq	r19,zero,7918 <_dtoa_r+0x146c>
    7578:	d9c00817 	ldw	r7,32(sp)
    757c:	b5800044 	addi	r22,r22,1
    7580:	04c00044 	movi	r19,1
    7584:	39c00044 	addi	r7,r7,1
    7588:	d9c00815 	stw	r7,32(sp)
    758c:	d8800d17 	ldw	r2,52(sp)
    7590:	103e721e 	bne	r2,zero,6f5c <__alt_data_end+0xfc006f5c>
    7594:	00800044 	movi	r2,1
    7598:	003e7906 	br	6f80 <__alt_data_end+0xfc006f80>
    759c:	8009883a 	mov	r4,r16
    75a0:	001050c0 	call	1050c <__floatsidf>
    75a4:	d9800f17 	ldw	r6,60(sp)
    75a8:	d9c01017 	ldw	r7,64(sp)
    75ac:	1009883a 	mov	r4,r2
    75b0:	180b883a 	mov	r5,r3
    75b4:	000f4540 	call	f454 <__muldf3>
    75b8:	000d883a 	mov	r6,zero
    75bc:	01d00734 	movhi	r7,16412
    75c0:	1009883a 	mov	r4,r2
    75c4:	180b883a 	mov	r5,r3
    75c8:	000e03c0 	call	e03c <__adddf3>
    75cc:	047f3034 	movhi	r17,64704
    75d0:	1021883a 	mov	r16,r2
    75d4:	1c63883a 	add	r17,r3,r17
    75d8:	d9000f17 	ldw	r4,60(sp)
    75dc:	d9401017 	ldw	r5,64(sp)
    75e0:	000d883a 	mov	r6,zero
    75e4:	01d00534 	movhi	r7,16404
    75e8:	000fb780 	call	fb78 <__subdf3>
    75ec:	800d883a 	mov	r6,r16
    75f0:	880f883a 	mov	r7,r17
    75f4:	1009883a 	mov	r4,r2
    75f8:	180b883a 	mov	r5,r3
    75fc:	102b883a 	mov	r21,r2
    7600:	1829883a 	mov	r20,r3
    7604:	000f2780 	call	f278 <__gedf2>
    7608:	00806c16 	blt	zero,r2,77bc <_dtoa_r+0x1310>
    760c:	89e0003c 	xorhi	r7,r17,32768
    7610:	800d883a 	mov	r6,r16
    7614:	a809883a 	mov	r4,r21
    7618:	a00b883a 	mov	r5,r20
    761c:	000f35c0 	call	f35c <__ledf2>
    7620:	103d7e0e 	bge	r2,zero,6c1c <__alt_data_end+0xfc006c1c>
    7624:	002b883a 	mov	r21,zero
    7628:	0023883a 	mov	r17,zero
    762c:	003efb06 	br	721c <__alt_data_end+0xfc00721c>
    7630:	d8800717 	ldw	r2,28(sp)
    7634:	003bd006 	br	6578 <__alt_data_end+0xfc006578>
    7638:	d9000a17 	ldw	r4,40(sp)
    763c:	d9800d17 	ldw	r6,52(sp)
    7640:	dd400a15 	stw	r21,40(sp)
    7644:	a905c83a 	sub	r2,r21,r4
    7648:	308d883a 	add	r6,r6,r2
    764c:	d9800d15 	stw	r6,52(sp)
    7650:	002b883a 	mov	r21,zero
    7654:	003e0606 	br	6e70 <__alt_data_end+0xfc006e70>
    7658:	9023883a 	mov	r17,r18
    765c:	9829883a 	mov	r20,r19
    7660:	04000084 	movi	r16,2
    7664:	003c9206 	br	68b0 <__alt_data_end+0xfc0068b0>
    7668:	04000044 	movi	r16,1
    766c:	dc000c15 	stw	r16,48(sp)
    7670:	dc000615 	stw	r16,24(sp)
    7674:	dc002215 	stw	r16,136(sp)
    7678:	e0001115 	stw	zero,68(fp)
    767c:	000b883a 	mov	r5,zero
    7680:	003c6906 	br	6828 <__alt_data_end+0xfc006828>
    7684:	3021883a 	mov	r16,r6
    7688:	003ffb06 	br	7678 <__alt_data_end+0xfc007678>
    768c:	1000021e 	bne	r2,zero,7698 <_dtoa_r+0x11ec>
    7690:	4200004c 	andi	r8,r8,1
    7694:	403e7d1e 	bne	r8,zero,708c <__alt_data_end+0xfc00708c>
    7698:	01000c04 	movi	r4,48
    769c:	00000106 	br	76a4 <_dtoa_r+0x11f8>
    76a0:	102f883a 	mov	r23,r2
    76a4:	b8bfffc4 	addi	r2,r23,-1
    76a8:	10c00007 	ldb	r3,0(r2)
    76ac:	193ffc26 	beq	r3,r4,76a0 <__alt_data_end+0xfc0076a0>
    76b0:	003e8706 	br	70d0 <__alt_data_end+0xfc0070d0>
    76b4:	d8800517 	ldw	r2,20(sp)
    76b8:	00a3c83a 	sub	r17,zero,r2
    76bc:	8800a426 	beq	r17,zero,7950 <_dtoa_r+0x14a4>
    76c0:	888003cc 	andi	r2,r17,15
    76c4:	100490fa 	slli	r2,r2,3
    76c8:	00c00074 	movhi	r3,1
    76cc:	18c41e04 	addi	r3,r3,4216
    76d0:	1885883a 	add	r2,r3,r2
    76d4:	11800017 	ldw	r6,0(r2)
    76d8:	11c00117 	ldw	r7,4(r2)
    76dc:	9009883a 	mov	r4,r18
    76e0:	980b883a 	mov	r5,r19
    76e4:	8823d13a 	srai	r17,r17,4
    76e8:	000f4540 	call	f454 <__muldf3>
    76ec:	d8800f15 	stw	r2,60(sp)
    76f0:	d8c01015 	stw	r3,64(sp)
    76f4:	8800e826 	beq	r17,zero,7a98 <_dtoa_r+0x15ec>
    76f8:	05000074 	movhi	r20,1
    76fc:	a5041404 	addi	r20,r20,4176
    7700:	04000084 	movi	r16,2
    7704:	8980004c 	andi	r6,r17,1
    7708:	1009883a 	mov	r4,r2
    770c:	8823d07a 	srai	r17,r17,1
    7710:	180b883a 	mov	r5,r3
    7714:	30000426 	beq	r6,zero,7728 <_dtoa_r+0x127c>
    7718:	a1800017 	ldw	r6,0(r20)
    771c:	a1c00117 	ldw	r7,4(r20)
    7720:	84000044 	addi	r16,r16,1
    7724:	000f4540 	call	f454 <__muldf3>
    7728:	a5000204 	addi	r20,r20,8
    772c:	883ff51e 	bne	r17,zero,7704 <__alt_data_end+0xfc007704>
    7730:	d8800f15 	stw	r2,60(sp)
    7734:	d8c01015 	stw	r3,64(sp)
    7738:	003c7606 	br	6914 <__alt_data_end+0xfc006914>
    773c:	00c00c04 	movi	r3,48
    7740:	10c00005 	stb	r3,0(r2)
    7744:	d8c00517 	ldw	r3,20(sp)
    7748:	bd3fffc3 	ldbu	r20,-1(r23)
    774c:	18c00044 	addi	r3,r3,1
    7750:	d8c00515 	stw	r3,20(sp)
    7754:	003db906 	br	6e3c <__alt_data_end+0xfc006e3c>
    7758:	89400117 	ldw	r5,4(r17)
    775c:	e009883a 	mov	r4,fp
    7760:	000944c0 	call	944c <_Balloc>
    7764:	89800417 	ldw	r6,16(r17)
    7768:	89400304 	addi	r5,r17,12
    776c:	11000304 	addi	r4,r2,12
    7770:	31800084 	addi	r6,r6,2
    7774:	318d883a 	add	r6,r6,r6
    7778:	318d883a 	add	r6,r6,r6
    777c:	1027883a 	mov	r19,r2
    7780:	00035000 	call	3500 <memcpy>
    7784:	01800044 	movi	r6,1
    7788:	980b883a 	mov	r5,r19
    778c:	e009883a 	mov	r4,fp
    7790:	0009c380 	call	9c38 <__lshift>
    7794:	1029883a 	mov	r20,r2
    7798:	003ecc06 	br	72cc <__alt_data_end+0xfc0072cc>
    779c:	00800e44 	movi	r2,57
    77a0:	90809026 	beq	r18,r2,79e4 <_dtoa_r+0x1538>
    77a4:	92000044 	addi	r8,r18,1
    77a8:	003f1f06 	br	7428 <__alt_data_end+0xfc007428>
    77ac:	9011883a 	mov	r8,r18
    77b0:	8825883a 	mov	r18,r17
    77b4:	a023883a 	mov	r17,r20
    77b8:	003e2906 	br	7060 <__alt_data_end+0xfc007060>
    77bc:	002b883a 	mov	r21,zero
    77c0:	0023883a 	mov	r17,zero
    77c4:	003f5406 	br	7518 <__alt_data_end+0xfc007518>
    77c8:	61bfffc4 	addi	r6,r12,-1
    77cc:	300490fa 	slli	r2,r6,3
    77d0:	00c00074 	movhi	r3,1
    77d4:	18c41e04 	addi	r3,r3,4216
    77d8:	1885883a 	add	r2,r3,r2
    77dc:	11000017 	ldw	r4,0(r2)
    77e0:	11400117 	ldw	r5,4(r2)
    77e4:	d8800717 	ldw	r2,28(sp)
    77e8:	880f883a 	mov	r7,r17
    77ec:	d9801215 	stw	r6,72(sp)
    77f0:	800d883a 	mov	r6,r16
    77f4:	db001615 	stw	r12,88(sp)
    77f8:	15c00044 	addi	r23,r2,1
    77fc:	000f4540 	call	f454 <__muldf3>
    7800:	d9401017 	ldw	r5,64(sp)
    7804:	d9000f17 	ldw	r4,60(sp)
    7808:	d8c01515 	stw	r3,84(sp)
    780c:	d8801415 	stw	r2,80(sp)
    7810:	00104800 	call	10480 <__fixdfsi>
    7814:	1009883a 	mov	r4,r2
    7818:	1021883a 	mov	r16,r2
    781c:	001050c0 	call	1050c <__floatsidf>
    7820:	d9000f17 	ldw	r4,60(sp)
    7824:	d9401017 	ldw	r5,64(sp)
    7828:	100d883a 	mov	r6,r2
    782c:	180f883a 	mov	r7,r3
    7830:	000fb780 	call	fb78 <__subdf3>
    7834:	1829883a 	mov	r20,r3
    7838:	d8c00717 	ldw	r3,28(sp)
    783c:	84000c04 	addi	r16,r16,48
    7840:	1023883a 	mov	r17,r2
    7844:	1c000005 	stb	r16,0(r3)
    7848:	db001617 	ldw	r12,88(sp)
    784c:	00800044 	movi	r2,1
    7850:	60802226 	beq	r12,r2,78dc <_dtoa_r+0x1430>
    7854:	d9c00717 	ldw	r7,28(sp)
    7858:	8805883a 	mov	r2,r17
    785c:	b82b883a 	mov	r21,r23
    7860:	3b19883a 	add	r12,r7,r12
    7864:	6023883a 	mov	r17,r12
    7868:	a007883a 	mov	r3,r20
    786c:	dc800f15 	stw	r18,60(sp)
    7870:	000d883a 	mov	r6,zero
    7874:	01d00934 	movhi	r7,16420
    7878:	1009883a 	mov	r4,r2
    787c:	180b883a 	mov	r5,r3
    7880:	000f4540 	call	f454 <__muldf3>
    7884:	180b883a 	mov	r5,r3
    7888:	1009883a 	mov	r4,r2
    788c:	1829883a 	mov	r20,r3
    7890:	1025883a 	mov	r18,r2
    7894:	00104800 	call	10480 <__fixdfsi>
    7898:	1009883a 	mov	r4,r2
    789c:	1021883a 	mov	r16,r2
    78a0:	001050c0 	call	1050c <__floatsidf>
    78a4:	100d883a 	mov	r6,r2
    78a8:	180f883a 	mov	r7,r3
    78ac:	9009883a 	mov	r4,r18
    78b0:	a00b883a 	mov	r5,r20
    78b4:	84000c04 	addi	r16,r16,48
    78b8:	000fb780 	call	fb78 <__subdf3>
    78bc:	ad400044 	addi	r21,r21,1
    78c0:	ac3fffc5 	stb	r16,-1(r21)
    78c4:	ac7fea1e 	bne	r21,r17,7870 <__alt_data_end+0xfc007870>
    78c8:	1023883a 	mov	r17,r2
    78cc:	d8801217 	ldw	r2,72(sp)
    78d0:	dc800f17 	ldw	r18,60(sp)
    78d4:	1829883a 	mov	r20,r3
    78d8:	b8af883a 	add	r23,r23,r2
    78dc:	d9001417 	ldw	r4,80(sp)
    78e0:	d9401517 	ldw	r5,84(sp)
    78e4:	000d883a 	mov	r6,zero
    78e8:	01cff834 	movhi	r7,16352
    78ec:	000e03c0 	call	e03c <__adddf3>
    78f0:	880d883a 	mov	r6,r17
    78f4:	a00f883a 	mov	r7,r20
    78f8:	1009883a 	mov	r4,r2
    78fc:	180b883a 	mov	r5,r3
    7900:	000f35c0 	call	f35c <__ledf2>
    7904:	10003e0e 	bge	r2,zero,7a00 <_dtoa_r+0x1554>
    7908:	d9001317 	ldw	r4,76(sp)
    790c:	bd3fffc3 	ldbu	r20,-1(r23)
    7910:	d9000515 	stw	r4,20(sp)
    7914:	003d3b06 	br	6e04 <__alt_data_end+0xfc006e04>
    7918:	0027883a 	mov	r19,zero
    791c:	003f1b06 	br	758c <__alt_data_end+0xfc00758c>
    7920:	d8800817 	ldw	r2,32(sp)
    7924:	11e9c83a 	sub	r20,r2,r7
    7928:	0005883a 	mov	r2,zero
    792c:	003d5406 	br	6e80 <__alt_data_end+0xfc006e80>
    7930:	00800044 	movi	r2,1
    7934:	003dc706 	br	7054 <__alt_data_end+0xfc007054>
    7938:	d8c00217 	ldw	r3,8(sp)
    793c:	00800d84 	movi	r2,54
    7940:	dd400a17 	ldw	r21,40(sp)
    7944:	10c5c83a 	sub	r2,r2,r3
    7948:	dd000817 	ldw	r20,32(sp)
    794c:	003d4c06 	br	6e80 <__alt_data_end+0xfc006e80>
    7950:	dc800f15 	stw	r18,60(sp)
    7954:	dcc01015 	stw	r19,64(sp)
    7958:	04000084 	movi	r16,2
    795c:	003bed06 	br	6914 <__alt_data_end+0xfc006914>
    7960:	d9000617 	ldw	r4,24(sp)
    7964:	203f0d26 	beq	r4,zero,759c <__alt_data_end+0xfc00759c>
    7968:	d9800c17 	ldw	r6,48(sp)
    796c:	01bcab0e 	bge	zero,r6,6c1c <__alt_data_end+0xfc006c1c>
    7970:	d9401017 	ldw	r5,64(sp)
    7974:	d9000f17 	ldw	r4,60(sp)
    7978:	000d883a 	mov	r6,zero
    797c:	01d00934 	movhi	r7,16420
    7980:	000f4540 	call	f454 <__muldf3>
    7984:	81000044 	addi	r4,r16,1
    7988:	d8800f15 	stw	r2,60(sp)
    798c:	d8c01015 	stw	r3,64(sp)
    7990:	001050c0 	call	1050c <__floatsidf>
    7994:	d9800f17 	ldw	r6,60(sp)
    7998:	d9c01017 	ldw	r7,64(sp)
    799c:	1009883a 	mov	r4,r2
    79a0:	180b883a 	mov	r5,r3
    79a4:	000f4540 	call	f454 <__muldf3>
    79a8:	01d00734 	movhi	r7,16412
    79ac:	000d883a 	mov	r6,zero
    79b0:	1009883a 	mov	r4,r2
    79b4:	180b883a 	mov	r5,r3
    79b8:	000e03c0 	call	e03c <__adddf3>
    79bc:	d9c00517 	ldw	r7,20(sp)
    79c0:	047f3034 	movhi	r17,64704
    79c4:	1021883a 	mov	r16,r2
    79c8:	39ffffc4 	addi	r7,r7,-1
    79cc:	d9c01315 	stw	r7,76(sp)
    79d0:	1c63883a 	add	r17,r3,r17
    79d4:	db000c17 	ldw	r12,48(sp)
    79d8:	003bea06 	br	6984 <__alt_data_end+0xfc006984>
    79dc:	dc000915 	stw	r16,36(sp)
    79e0:	003e0e06 	br	721c <__alt_data_end+0xfc00721c>
    79e4:	01000e44 	movi	r4,57
    79e8:	8825883a 	mov	r18,r17
    79ec:	9dc00044 	addi	r23,r19,1
    79f0:	99000005 	stb	r4,0(r19)
    79f4:	a023883a 	mov	r17,r20
    79f8:	dc000915 	stw	r16,36(sp)
    79fc:	003da406 	br	7090 <__alt_data_end+0xfc007090>
    7a00:	d9801417 	ldw	r6,80(sp)
    7a04:	d9c01517 	ldw	r7,84(sp)
    7a08:	0009883a 	mov	r4,zero
    7a0c:	014ff834 	movhi	r5,16352
    7a10:	000fb780 	call	fb78 <__subdf3>
    7a14:	880d883a 	mov	r6,r17
    7a18:	a00f883a 	mov	r7,r20
    7a1c:	1009883a 	mov	r4,r2
    7a20:	180b883a 	mov	r5,r3
    7a24:	000f2780 	call	f278 <__gedf2>
    7a28:	00bc7c0e 	bge	zero,r2,6c1c <__alt_data_end+0xfc006c1c>
    7a2c:	01000c04 	movi	r4,48
    7a30:	00000106 	br	7a38 <_dtoa_r+0x158c>
    7a34:	102f883a 	mov	r23,r2
    7a38:	b8bfffc4 	addi	r2,r23,-1
    7a3c:	10c00007 	ldb	r3,0(r2)
    7a40:	193ffc26 	beq	r3,r4,7a34 <__alt_data_end+0xfc007a34>
    7a44:	d9801317 	ldw	r6,76(sp)
    7a48:	d9800515 	stw	r6,20(sp)
    7a4c:	003c4406 	br	6b60 <__alt_data_end+0xfc006b60>
    7a50:	d9801317 	ldw	r6,76(sp)
    7a54:	d9800515 	stw	r6,20(sp)
    7a58:	003cea06 	br	6e04 <__alt_data_end+0xfc006e04>
    7a5c:	dd800f17 	ldw	r22,60(sp)
    7a60:	dcc01017 	ldw	r19,64(sp)
    7a64:	dc801217 	ldw	r18,72(sp)
    7a68:	003c6c06 	br	6c1c <__alt_data_end+0xfc006c1c>
    7a6c:	903e031e 	bne	r18,zero,727c <__alt_data_end+0xfc00727c>
    7a70:	003ebb06 	br	7560 <__alt_data_end+0xfc007560>
    7a74:	103e6c1e 	bne	r2,zero,7428 <__alt_data_end+0xfc007428>
    7a78:	4080004c 	andi	r2,r8,1
    7a7c:	103e6a26 	beq	r2,zero,7428 <__alt_data_end+0xfc007428>
    7a80:	003e6606 	br	741c <__alt_data_end+0xfc00741c>
    7a84:	d8c00317 	ldw	r3,12(sp)
    7a88:	00800084 	movi	r2,2
    7a8c:	10c02916 	blt	r2,r3,7b34 <_dtoa_r+0x1688>
    7a90:	d9000c17 	ldw	r4,48(sp)
    7a94:	003e8806 	br	74b8 <__alt_data_end+0xfc0074b8>
    7a98:	04000084 	movi	r16,2
    7a9c:	003b9d06 	br	6914 <__alt_data_end+0xfc006914>
    7aa0:	d9001317 	ldw	r4,76(sp)
    7aa4:	d9000515 	stw	r4,20(sp)
    7aa8:	003cd606 	br	6e04 <__alt_data_end+0xfc006e04>
    7aac:	d8801317 	ldw	r2,76(sp)
    7ab0:	d8800515 	stw	r2,20(sp)
    7ab4:	003c2a06 	br	6b60 <__alt_data_end+0xfc006b60>
    7ab8:	d9800317 	ldw	r6,12(sp)
    7abc:	00800084 	movi	r2,2
    7ac0:	11801516 	blt	r2,r6,7b18 <_dtoa_r+0x166c>
    7ac4:	d9c00c17 	ldw	r7,48(sp)
    7ac8:	d9c00615 	stw	r7,24(sp)
    7acc:	003df706 	br	72ac <__alt_data_end+0xfc0072ac>
    7ad0:	193d3926 	beq	r3,r4,6fb8 <__alt_data_end+0xfc006fb8>
    7ad4:	00c00f04 	movi	r3,60
    7ad8:	1885c83a 	sub	r2,r3,r2
    7adc:	003ddf06 	br	725c <__alt_data_end+0xfc00725c>
    7ae0:	e009883a 	mov	r4,fp
    7ae4:	e0001115 	stw	zero,68(fp)
    7ae8:	000b883a 	mov	r5,zero
    7aec:	000944c0 	call	944c <_Balloc>
    7af0:	d8800715 	stw	r2,28(sp)
    7af4:	d8c00717 	ldw	r3,28(sp)
    7af8:	00bfffc4 	movi	r2,-1
    7afc:	01000044 	movi	r4,1
    7b00:	d8800c15 	stw	r2,48(sp)
    7b04:	e0c01015 	stw	r3,64(fp)
    7b08:	d9000b15 	stw	r4,44(sp)
    7b0c:	d8800615 	stw	r2,24(sp)
    7b10:	d8002215 	stw	zero,136(sp)
    7b14:	003c4106 	br	6c1c <__alt_data_end+0xfc006c1c>
    7b18:	d8c00c17 	ldw	r3,48(sp)
    7b1c:	d8c00615 	stw	r3,24(sp)
    7b20:	003e7006 	br	74e4 <__alt_data_end+0xfc0074e4>
    7b24:	04400044 	movi	r17,1
    7b28:	003b2006 	br	67ac <__alt_data_end+0xfc0067ac>
    7b2c:	000b883a 	mov	r5,zero
    7b30:	003b3d06 	br	6828 <__alt_data_end+0xfc006828>
    7b34:	d8800c17 	ldw	r2,48(sp)
    7b38:	d8800615 	stw	r2,24(sp)
    7b3c:	003e6906 	br	74e4 <__alt_data_end+0xfc0074e4>

00007b40 <__sflush_r>:
    7b40:	f811883a 	mov	r8,ra
    7b44:	0000ac80 	call	ac8 <_mcount>
    7b48:	403f883a 	mov	ra,r8
    7b4c:	defffb04 	addi	sp,sp,-20
    7b50:	dfc00415 	stw	ra,16(sp)
    7b54:	dcc00315 	stw	r19,12(sp)
    7b58:	dc800215 	stw	r18,8(sp)
    7b5c:	dc400115 	stw	r17,4(sp)
    7b60:	dc000015 	stw	r16,0(sp)
    7b64:	2880030b 	ldhu	r2,12(r5)
    7b68:	2823883a 	mov	r17,r5
    7b6c:	2027883a 	mov	r19,r4
    7b70:	10c0020c 	andi	r3,r2,8
    7b74:	1800311e 	bne	r3,zero,7c3c <__sflush_r+0xfc>
    7b78:	28c00117 	ldw	r3,4(r5)
    7b7c:	10820014 	ori	r2,r2,2048
    7b80:	2880030d 	sth	r2,12(r5)
    7b84:	00c04b0e 	bge	zero,r3,7cb4 <__sflush_r+0x174>
    7b88:	8a000a17 	ldw	r8,40(r17)
    7b8c:	40002326 	beq	r8,zero,7c1c <__sflush_r+0xdc>
    7b90:	9c000017 	ldw	r16,0(r19)
    7b94:	10c4000c 	andi	r3,r2,4096
    7b98:	98000015 	stw	zero,0(r19)
    7b9c:	18004826 	beq	r3,zero,7cc0 <__sflush_r+0x180>
    7ba0:	89801417 	ldw	r6,80(r17)
    7ba4:	10c0010c 	andi	r3,r2,4
    7ba8:	18000626 	beq	r3,zero,7bc4 <__sflush_r+0x84>
    7bac:	88c00117 	ldw	r3,4(r17)
    7bb0:	88800c17 	ldw	r2,48(r17)
    7bb4:	30cdc83a 	sub	r6,r6,r3
    7bb8:	10000226 	beq	r2,zero,7bc4 <__sflush_r+0x84>
    7bbc:	88800f17 	ldw	r2,60(r17)
    7bc0:	308dc83a 	sub	r6,r6,r2
    7bc4:	89400717 	ldw	r5,28(r17)
    7bc8:	000f883a 	mov	r7,zero
    7bcc:	9809883a 	mov	r4,r19
    7bd0:	403ee83a 	callr	r8
    7bd4:	00ffffc4 	movi	r3,-1
    7bd8:	10c04426 	beq	r2,r3,7cec <__sflush_r+0x1ac>
    7bdc:	88c0030b 	ldhu	r3,12(r17)
    7be0:	89000417 	ldw	r4,16(r17)
    7be4:	88000115 	stw	zero,4(r17)
    7be8:	197dffcc 	andi	r5,r3,63487
    7bec:	8940030d 	sth	r5,12(r17)
    7bf0:	89000015 	stw	r4,0(r17)
    7bf4:	18c4000c 	andi	r3,r3,4096
    7bf8:	18002c1e 	bne	r3,zero,7cac <__sflush_r+0x16c>
    7bfc:	89400c17 	ldw	r5,48(r17)
    7c00:	9c000015 	stw	r16,0(r19)
    7c04:	28000526 	beq	r5,zero,7c1c <__sflush_r+0xdc>
    7c08:	88801004 	addi	r2,r17,64
    7c0c:	28800226 	beq	r5,r2,7c18 <__sflush_r+0xd8>
    7c10:	9809883a 	mov	r4,r19
    7c14:	00083840 	call	8384 <_free_r>
    7c18:	88000c15 	stw	zero,48(r17)
    7c1c:	0005883a 	mov	r2,zero
    7c20:	dfc00417 	ldw	ra,16(sp)
    7c24:	dcc00317 	ldw	r19,12(sp)
    7c28:	dc800217 	ldw	r18,8(sp)
    7c2c:	dc400117 	ldw	r17,4(sp)
    7c30:	dc000017 	ldw	r16,0(sp)
    7c34:	dec00504 	addi	sp,sp,20
    7c38:	f800283a 	ret
    7c3c:	2c800417 	ldw	r18,16(r5)
    7c40:	903ff626 	beq	r18,zero,7c1c <__alt_data_end+0xfc007c1c>
    7c44:	2c000017 	ldw	r16,0(r5)
    7c48:	108000cc 	andi	r2,r2,3
    7c4c:	2c800015 	stw	r18,0(r5)
    7c50:	84a1c83a 	sub	r16,r16,r18
    7c54:	1000131e 	bne	r2,zero,7ca4 <__sflush_r+0x164>
    7c58:	28800517 	ldw	r2,20(r5)
    7c5c:	88800215 	stw	r2,8(r17)
    7c60:	04000316 	blt	zero,r16,7c70 <__sflush_r+0x130>
    7c64:	003fed06 	br	7c1c <__alt_data_end+0xfc007c1c>
    7c68:	90a5883a 	add	r18,r18,r2
    7c6c:	043feb0e 	bge	zero,r16,7c1c <__alt_data_end+0xfc007c1c>
    7c70:	88800917 	ldw	r2,36(r17)
    7c74:	89400717 	ldw	r5,28(r17)
    7c78:	800f883a 	mov	r7,r16
    7c7c:	900d883a 	mov	r6,r18
    7c80:	9809883a 	mov	r4,r19
    7c84:	103ee83a 	callr	r2
    7c88:	80a1c83a 	sub	r16,r16,r2
    7c8c:	00bff616 	blt	zero,r2,7c68 <__alt_data_end+0xfc007c68>
    7c90:	88c0030b 	ldhu	r3,12(r17)
    7c94:	00bfffc4 	movi	r2,-1
    7c98:	18c01014 	ori	r3,r3,64
    7c9c:	88c0030d 	sth	r3,12(r17)
    7ca0:	003fdf06 	br	7c20 <__alt_data_end+0xfc007c20>
    7ca4:	0005883a 	mov	r2,zero
    7ca8:	003fec06 	br	7c5c <__alt_data_end+0xfc007c5c>
    7cac:	88801415 	stw	r2,80(r17)
    7cb0:	003fd206 	br	7bfc <__alt_data_end+0xfc007bfc>
    7cb4:	28c00f17 	ldw	r3,60(r5)
    7cb8:	00ffb316 	blt	zero,r3,7b88 <__alt_data_end+0xfc007b88>
    7cbc:	003fd706 	br	7c1c <__alt_data_end+0xfc007c1c>
    7cc0:	89400717 	ldw	r5,28(r17)
    7cc4:	000d883a 	mov	r6,zero
    7cc8:	01c00044 	movi	r7,1
    7ccc:	9809883a 	mov	r4,r19
    7cd0:	403ee83a 	callr	r8
    7cd4:	100d883a 	mov	r6,r2
    7cd8:	00bfffc4 	movi	r2,-1
    7cdc:	30801426 	beq	r6,r2,7d30 <__sflush_r+0x1f0>
    7ce0:	8880030b 	ldhu	r2,12(r17)
    7ce4:	8a000a17 	ldw	r8,40(r17)
    7ce8:	003fae06 	br	7ba4 <__alt_data_end+0xfc007ba4>
    7cec:	98c00017 	ldw	r3,0(r19)
    7cf0:	183fba26 	beq	r3,zero,7bdc <__alt_data_end+0xfc007bdc>
    7cf4:	01000744 	movi	r4,29
    7cf8:	19000626 	beq	r3,r4,7d14 <__sflush_r+0x1d4>
    7cfc:	01000584 	movi	r4,22
    7d00:	19000426 	beq	r3,r4,7d14 <__sflush_r+0x1d4>
    7d04:	88c0030b 	ldhu	r3,12(r17)
    7d08:	18c01014 	ori	r3,r3,64
    7d0c:	88c0030d 	sth	r3,12(r17)
    7d10:	003fc306 	br	7c20 <__alt_data_end+0xfc007c20>
    7d14:	8880030b 	ldhu	r2,12(r17)
    7d18:	88c00417 	ldw	r3,16(r17)
    7d1c:	88000115 	stw	zero,4(r17)
    7d20:	10bdffcc 	andi	r2,r2,63487
    7d24:	8880030d 	sth	r2,12(r17)
    7d28:	88c00015 	stw	r3,0(r17)
    7d2c:	003fb306 	br	7bfc <__alt_data_end+0xfc007bfc>
    7d30:	98800017 	ldw	r2,0(r19)
    7d34:	103fea26 	beq	r2,zero,7ce0 <__alt_data_end+0xfc007ce0>
    7d38:	00c00744 	movi	r3,29
    7d3c:	10c00226 	beq	r2,r3,7d48 <__sflush_r+0x208>
    7d40:	00c00584 	movi	r3,22
    7d44:	10c0031e 	bne	r2,r3,7d54 <__sflush_r+0x214>
    7d48:	9c000015 	stw	r16,0(r19)
    7d4c:	0005883a 	mov	r2,zero
    7d50:	003fb306 	br	7c20 <__alt_data_end+0xfc007c20>
    7d54:	88c0030b 	ldhu	r3,12(r17)
    7d58:	3005883a 	mov	r2,r6
    7d5c:	18c01014 	ori	r3,r3,64
    7d60:	88c0030d 	sth	r3,12(r17)
    7d64:	003fae06 	br	7c20 <__alt_data_end+0xfc007c20>

00007d68 <_fflush_r>:
    7d68:	f811883a 	mov	r8,ra
    7d6c:	0000ac80 	call	ac8 <_mcount>
    7d70:	403f883a 	mov	ra,r8
    7d74:	defffd04 	addi	sp,sp,-12
    7d78:	dfc00215 	stw	ra,8(sp)
    7d7c:	dc000115 	stw	r16,4(sp)
    7d80:	2021883a 	mov	r16,r4
    7d84:	20000226 	beq	r4,zero,7d90 <_fflush_r+0x28>
    7d88:	20800e17 	ldw	r2,56(r4)
    7d8c:	10000c26 	beq	r2,zero,7dc0 <_fflush_r+0x58>
    7d90:	2880030f 	ldh	r2,12(r5)
    7d94:	1000051e 	bne	r2,zero,7dac <_fflush_r+0x44>
    7d98:	0005883a 	mov	r2,zero
    7d9c:	dfc00217 	ldw	ra,8(sp)
    7da0:	dc000117 	ldw	r16,4(sp)
    7da4:	dec00304 	addi	sp,sp,12
    7da8:	f800283a 	ret
    7dac:	8009883a 	mov	r4,r16
    7db0:	dfc00217 	ldw	ra,8(sp)
    7db4:	dc000117 	ldw	r16,4(sp)
    7db8:	dec00304 	addi	sp,sp,12
    7dbc:	0007b401 	jmpi	7b40 <__sflush_r>
    7dc0:	d9400015 	stw	r5,0(sp)
    7dc4:	00081b00 	call	81b0 <__sinit>
    7dc8:	d9400017 	ldw	r5,0(sp)
    7dcc:	003ff006 	br	7d90 <__alt_data_end+0xfc007d90>

00007dd0 <fflush>:
    7dd0:	f811883a 	mov	r8,ra
    7dd4:	0000ac80 	call	ac8 <_mcount>
    7dd8:	403f883a 	mov	ra,r8
    7ddc:	20000526 	beq	r4,zero,7df4 <fflush+0x24>
    7de0:	00800074 	movhi	r2,1
    7de4:	108c5c04 	addi	r2,r2,12656
    7de8:	200b883a 	mov	r5,r4
    7dec:	11000017 	ldw	r4,0(r2)
    7df0:	0007d681 	jmpi	7d68 <_fflush_r>
    7df4:	00800074 	movhi	r2,1
    7df8:	108c5b04 	addi	r2,r2,12652
    7dfc:	11000017 	ldw	r4,0(r2)
    7e00:	01400034 	movhi	r5,0
    7e04:	295f5a04 	addi	r5,r5,32104
    7e08:	00087701 	jmpi	8770 <_fwalk_reent>

00007e0c <__fp_unlock>:
    7e0c:	f811883a 	mov	r8,ra
    7e10:	0000ac80 	call	ac8 <_mcount>
    7e14:	403f883a 	mov	ra,r8
    7e18:	0005883a 	mov	r2,zero
    7e1c:	f800283a 	ret

00007e20 <_cleanup_r>:
    7e20:	f811883a 	mov	r8,ra
    7e24:	0000ac80 	call	ac8 <_mcount>
    7e28:	403f883a 	mov	ra,r8
    7e2c:	01400074 	movhi	r5,1
    7e30:	29701f04 	addi	r5,r5,-16260
    7e34:	00087701 	jmpi	8770 <_fwalk_reent>

00007e38 <__sinit.part.1>:
    7e38:	f811883a 	mov	r8,ra
    7e3c:	0000ac80 	call	ac8 <_mcount>
    7e40:	403f883a 	mov	ra,r8
    7e44:	defff704 	addi	sp,sp,-36
    7e48:	dfc00815 	stw	ra,32(sp)
    7e4c:	ddc00715 	stw	r23,28(sp)
    7e50:	dd800615 	stw	r22,24(sp)
    7e54:	dd400515 	stw	r21,20(sp)
    7e58:	dd000415 	stw	r20,16(sp)
    7e5c:	dcc00315 	stw	r19,12(sp)
    7e60:	dc800215 	stw	r18,8(sp)
    7e64:	dc400115 	stw	r17,4(sp)
    7e68:	dc000015 	stw	r16,0(sp)
    7e6c:	00c00034 	movhi	r3,0
    7e70:	24000117 	ldw	r16,4(r4)
    7e74:	18df8804 	addi	r3,r3,32288
    7e78:	20c00f15 	stw	r3,60(r4)
    7e7c:	2080bb04 	addi	r2,r4,748
    7e80:	00c000c4 	movi	r3,3
    7e84:	20c0b915 	stw	r3,740(r4)
    7e88:	2080ba15 	stw	r2,744(r4)
    7e8c:	2000b815 	stw	zero,736(r4)
    7e90:	05c00204 	movi	r23,8
    7e94:	00800104 	movi	r2,4
    7e98:	2025883a 	mov	r18,r4
    7e9c:	b80d883a 	mov	r6,r23
    7ea0:	81001704 	addi	r4,r16,92
    7ea4:	000b883a 	mov	r5,zero
    7ea8:	80000015 	stw	zero,0(r16)
    7eac:	80000115 	stw	zero,4(r16)
    7eb0:	80000215 	stw	zero,8(r16)
    7eb4:	8080030d 	sth	r2,12(r16)
    7eb8:	80001915 	stw	zero,100(r16)
    7ebc:	8000038d 	sth	zero,14(r16)
    7ec0:	80000415 	stw	zero,16(r16)
    7ec4:	80000515 	stw	zero,20(r16)
    7ec8:	80000615 	stw	zero,24(r16)
    7ecc:	00036540 	call	3654 <memset>
    7ed0:	05800074 	movhi	r22,1
    7ed4:	94400217 	ldw	r17,8(r18)
    7ed8:	05400074 	movhi	r21,1
    7edc:	05000074 	movhi	r20,1
    7ee0:	04c00074 	movhi	r19,1
    7ee4:	b5a98104 	addi	r22,r22,-23036
    7ee8:	ad699e04 	addi	r21,r21,-22920
    7eec:	a529c004 	addi	r20,r20,-22784
    7ef0:	9ce9da04 	addi	r19,r19,-22680
    7ef4:	85800815 	stw	r22,32(r16)
    7ef8:	85400915 	stw	r21,36(r16)
    7efc:	85000a15 	stw	r20,40(r16)
    7f00:	84c00b15 	stw	r19,44(r16)
    7f04:	84000715 	stw	r16,28(r16)
    7f08:	00800284 	movi	r2,10
    7f0c:	8880030d 	sth	r2,12(r17)
    7f10:	00800044 	movi	r2,1
    7f14:	b80d883a 	mov	r6,r23
    7f18:	89001704 	addi	r4,r17,92
    7f1c:	000b883a 	mov	r5,zero
    7f20:	88000015 	stw	zero,0(r17)
    7f24:	88000115 	stw	zero,4(r17)
    7f28:	88000215 	stw	zero,8(r17)
    7f2c:	88001915 	stw	zero,100(r17)
    7f30:	8880038d 	sth	r2,14(r17)
    7f34:	88000415 	stw	zero,16(r17)
    7f38:	88000515 	stw	zero,20(r17)
    7f3c:	88000615 	stw	zero,24(r17)
    7f40:	00036540 	call	3654 <memset>
    7f44:	94000317 	ldw	r16,12(r18)
    7f48:	00800484 	movi	r2,18
    7f4c:	8c400715 	stw	r17,28(r17)
    7f50:	8d800815 	stw	r22,32(r17)
    7f54:	8d400915 	stw	r21,36(r17)
    7f58:	8d000a15 	stw	r20,40(r17)
    7f5c:	8cc00b15 	stw	r19,44(r17)
    7f60:	8080030d 	sth	r2,12(r16)
    7f64:	00800084 	movi	r2,2
    7f68:	80000015 	stw	zero,0(r16)
    7f6c:	80000115 	stw	zero,4(r16)
    7f70:	80000215 	stw	zero,8(r16)
    7f74:	80001915 	stw	zero,100(r16)
    7f78:	8080038d 	sth	r2,14(r16)
    7f7c:	80000415 	stw	zero,16(r16)
    7f80:	80000515 	stw	zero,20(r16)
    7f84:	80000615 	stw	zero,24(r16)
    7f88:	b80d883a 	mov	r6,r23
    7f8c:	000b883a 	mov	r5,zero
    7f90:	81001704 	addi	r4,r16,92
    7f94:	00036540 	call	3654 <memset>
    7f98:	00800044 	movi	r2,1
    7f9c:	84000715 	stw	r16,28(r16)
    7fa0:	85800815 	stw	r22,32(r16)
    7fa4:	85400915 	stw	r21,36(r16)
    7fa8:	85000a15 	stw	r20,40(r16)
    7fac:	84c00b15 	stw	r19,44(r16)
    7fb0:	90800e15 	stw	r2,56(r18)
    7fb4:	dfc00817 	ldw	ra,32(sp)
    7fb8:	ddc00717 	ldw	r23,28(sp)
    7fbc:	dd800617 	ldw	r22,24(sp)
    7fc0:	dd400517 	ldw	r21,20(sp)
    7fc4:	dd000417 	ldw	r20,16(sp)
    7fc8:	dcc00317 	ldw	r19,12(sp)
    7fcc:	dc800217 	ldw	r18,8(sp)
    7fd0:	dc400117 	ldw	r17,4(sp)
    7fd4:	dc000017 	ldw	r16,0(sp)
    7fd8:	dec00904 	addi	sp,sp,36
    7fdc:	f800283a 	ret

00007fe0 <__fp_lock>:
    7fe0:	f811883a 	mov	r8,ra
    7fe4:	0000ac80 	call	ac8 <_mcount>
    7fe8:	403f883a 	mov	ra,r8
    7fec:	0005883a 	mov	r2,zero
    7ff0:	f800283a 	ret

00007ff4 <__sfmoreglue>:
    7ff4:	f811883a 	mov	r8,ra
    7ff8:	0000ac80 	call	ac8 <_mcount>
    7ffc:	403f883a 	mov	ra,r8
    8000:	defffc04 	addi	sp,sp,-16
    8004:	dfc00315 	stw	ra,12(sp)
    8008:	dc800215 	stw	r18,8(sp)
    800c:	dc400115 	stw	r17,4(sp)
    8010:	dc000015 	stw	r16,0(sp)
    8014:	2c7fffc4 	addi	r17,r5,-1
    8018:	8c401a24 	muli	r17,r17,104
    801c:	2825883a 	mov	r18,r5
    8020:	89401d04 	addi	r5,r17,116
    8024:	0008b440 	call	8b44 <_malloc_r>
    8028:	1021883a 	mov	r16,r2
    802c:	10000726 	beq	r2,zero,804c <__sfmoreglue+0x58>
    8030:	11000304 	addi	r4,r2,12
    8034:	10000015 	stw	zero,0(r2)
    8038:	14800115 	stw	r18,4(r2)
    803c:	11000215 	stw	r4,8(r2)
    8040:	89801a04 	addi	r6,r17,104
    8044:	000b883a 	mov	r5,zero
    8048:	00036540 	call	3654 <memset>
    804c:	8005883a 	mov	r2,r16
    8050:	dfc00317 	ldw	ra,12(sp)
    8054:	dc800217 	ldw	r18,8(sp)
    8058:	dc400117 	ldw	r17,4(sp)
    805c:	dc000017 	ldw	r16,0(sp)
    8060:	dec00404 	addi	sp,sp,16
    8064:	f800283a 	ret

00008068 <__sfp>:
    8068:	f811883a 	mov	r8,ra
    806c:	0000ac80 	call	ac8 <_mcount>
    8070:	403f883a 	mov	ra,r8
    8074:	defffb04 	addi	sp,sp,-20
    8078:	dfc00415 	stw	ra,16(sp)
    807c:	dcc00315 	stw	r19,12(sp)
    8080:	dc800215 	stw	r18,8(sp)
    8084:	dc400115 	stw	r17,4(sp)
    8088:	dc000015 	stw	r16,0(sp)
    808c:	04000074 	movhi	r16,1
    8090:	840c5b04 	addi	r16,r16,12652
    8094:	2027883a 	mov	r19,r4
    8098:	81000017 	ldw	r4,0(r16)
    809c:	20800e17 	ldw	r2,56(r4)
    80a0:	1000021e 	bne	r2,zero,80ac <__sfp+0x44>
    80a4:	0007e380 	call	7e38 <__sinit.part.1>
    80a8:	81000017 	ldw	r4,0(r16)
    80ac:	2480b804 	addi	r18,r4,736
    80b0:	047fffc4 	movi	r17,-1
    80b4:	91000117 	ldw	r4,4(r18)
    80b8:	94000217 	ldw	r16,8(r18)
    80bc:	213fffc4 	addi	r4,r4,-1
    80c0:	20000a16 	blt	r4,zero,80ec <__sfp+0x84>
    80c4:	8080030f 	ldh	r2,12(r16)
    80c8:	10000c26 	beq	r2,zero,80fc <__sfp+0x94>
    80cc:	80c01d04 	addi	r3,r16,116
    80d0:	00000206 	br	80dc <__sfp+0x74>
    80d4:	18bfe60f 	ldh	r2,-104(r3)
    80d8:	10000826 	beq	r2,zero,80fc <__sfp+0x94>
    80dc:	213fffc4 	addi	r4,r4,-1
    80e0:	1c3ffd04 	addi	r16,r3,-12
    80e4:	18c01a04 	addi	r3,r3,104
    80e8:	247ffa1e 	bne	r4,r17,80d4 <__alt_data_end+0xfc0080d4>
    80ec:	90800017 	ldw	r2,0(r18)
    80f0:	10001d26 	beq	r2,zero,8168 <__sfp+0x100>
    80f4:	1025883a 	mov	r18,r2
    80f8:	003fee06 	br	80b4 <__alt_data_end+0xfc0080b4>
    80fc:	00bfffc4 	movi	r2,-1
    8100:	8080038d 	sth	r2,14(r16)
    8104:	00800044 	movi	r2,1
    8108:	8080030d 	sth	r2,12(r16)
    810c:	80001915 	stw	zero,100(r16)
    8110:	80000015 	stw	zero,0(r16)
    8114:	80000215 	stw	zero,8(r16)
    8118:	80000115 	stw	zero,4(r16)
    811c:	80000415 	stw	zero,16(r16)
    8120:	80000515 	stw	zero,20(r16)
    8124:	80000615 	stw	zero,24(r16)
    8128:	01800204 	movi	r6,8
    812c:	000b883a 	mov	r5,zero
    8130:	81001704 	addi	r4,r16,92
    8134:	00036540 	call	3654 <memset>
    8138:	8005883a 	mov	r2,r16
    813c:	80000c15 	stw	zero,48(r16)
    8140:	80000d15 	stw	zero,52(r16)
    8144:	80001115 	stw	zero,68(r16)
    8148:	80001215 	stw	zero,72(r16)
    814c:	dfc00417 	ldw	ra,16(sp)
    8150:	dcc00317 	ldw	r19,12(sp)
    8154:	dc800217 	ldw	r18,8(sp)
    8158:	dc400117 	ldw	r17,4(sp)
    815c:	dc000017 	ldw	r16,0(sp)
    8160:	dec00504 	addi	sp,sp,20
    8164:	f800283a 	ret
    8168:	01400104 	movi	r5,4
    816c:	9809883a 	mov	r4,r19
    8170:	0007ff40 	call	7ff4 <__sfmoreglue>
    8174:	90800015 	stw	r2,0(r18)
    8178:	103fde1e 	bne	r2,zero,80f4 <__alt_data_end+0xfc0080f4>
    817c:	00800304 	movi	r2,12
    8180:	98800015 	stw	r2,0(r19)
    8184:	0005883a 	mov	r2,zero
    8188:	003ff006 	br	814c <__alt_data_end+0xfc00814c>

0000818c <_cleanup>:
    818c:	f811883a 	mov	r8,ra
    8190:	0000ac80 	call	ac8 <_mcount>
    8194:	403f883a 	mov	ra,r8
    8198:	00800074 	movhi	r2,1
    819c:	108c5b04 	addi	r2,r2,12652
    81a0:	11000017 	ldw	r4,0(r2)
    81a4:	01400074 	movhi	r5,1
    81a8:	29701f04 	addi	r5,r5,-16260
    81ac:	00087701 	jmpi	8770 <_fwalk_reent>

000081b0 <__sinit>:
    81b0:	f811883a 	mov	r8,ra
    81b4:	0000ac80 	call	ac8 <_mcount>
    81b8:	403f883a 	mov	ra,r8
    81bc:	20800e17 	ldw	r2,56(r4)
    81c0:	10000126 	beq	r2,zero,81c8 <__sinit+0x18>
    81c4:	f800283a 	ret
    81c8:	0007e381 	jmpi	7e38 <__sinit.part.1>

000081cc <__sfp_lock_acquire>:
    81cc:	f811883a 	mov	r8,ra
    81d0:	0000ac80 	call	ac8 <_mcount>
    81d4:	403f883a 	mov	ra,r8
    81d8:	f800283a 	ret

000081dc <__sfp_lock_release>:
    81dc:	f811883a 	mov	r8,ra
    81e0:	0000ac80 	call	ac8 <_mcount>
    81e4:	403f883a 	mov	ra,r8
    81e8:	f800283a 	ret

000081ec <__sinit_lock_acquire>:
    81ec:	f811883a 	mov	r8,ra
    81f0:	0000ac80 	call	ac8 <_mcount>
    81f4:	403f883a 	mov	ra,r8
    81f8:	f800283a 	ret

000081fc <__sinit_lock_release>:
    81fc:	f811883a 	mov	r8,ra
    8200:	0000ac80 	call	ac8 <_mcount>
    8204:	403f883a 	mov	ra,r8
    8208:	f800283a 	ret

0000820c <__fp_lock_all>:
    820c:	f811883a 	mov	r8,ra
    8210:	0000ac80 	call	ac8 <_mcount>
    8214:	403f883a 	mov	ra,r8
    8218:	00800074 	movhi	r2,1
    821c:	108c5c04 	addi	r2,r2,12656
    8220:	11000017 	ldw	r4,0(r2)
    8224:	01400034 	movhi	r5,0
    8228:	295ff804 	addi	r5,r5,32736
    822c:	00086a01 	jmpi	86a0 <_fwalk>

00008230 <__fp_unlock_all>:
    8230:	f811883a 	mov	r8,ra
    8234:	0000ac80 	call	ac8 <_mcount>
    8238:	403f883a 	mov	ra,r8
    823c:	00800074 	movhi	r2,1
    8240:	108c5c04 	addi	r2,r2,12656
    8244:	11000017 	ldw	r4,0(r2)
    8248:	01400034 	movhi	r5,0
    824c:	295f8304 	addi	r5,r5,32268
    8250:	00086a01 	jmpi	86a0 <_fwalk>

00008254 <_malloc_trim_r>:
    8254:	f811883a 	mov	r8,ra
    8258:	0000ac80 	call	ac8 <_mcount>
    825c:	403f883a 	mov	ra,r8
    8260:	defffb04 	addi	sp,sp,-20
    8264:	dfc00415 	stw	ra,16(sp)
    8268:	dcc00315 	stw	r19,12(sp)
    826c:	dc800215 	stw	r18,8(sp)
    8270:	dc400115 	stw	r17,4(sp)
    8274:	dc000015 	stw	r16,0(sp)
    8278:	04c00074 	movhi	r19,1
    827c:	2821883a 	mov	r16,r5
    8280:	9ccb4a04 	addi	r19,r19,11560
    8284:	2025883a 	mov	r18,r4
    8288:	0010aa40 	call	10aa4 <__malloc_lock>
    828c:	98800217 	ldw	r2,8(r19)
    8290:	14400117 	ldw	r17,4(r2)
    8294:	00bfff04 	movi	r2,-4
    8298:	88a2703a 	and	r17,r17,r2
    829c:	8c21c83a 	sub	r16,r17,r16
    82a0:	8403fbc4 	addi	r16,r16,4079
    82a4:	8020d33a 	srli	r16,r16,12
    82a8:	0083ffc4 	movi	r2,4095
    82ac:	843fffc4 	addi	r16,r16,-1
    82b0:	8020933a 	slli	r16,r16,12
    82b4:	1400060e 	bge	r2,r16,82d0 <_malloc_trim_r+0x7c>
    82b8:	000b883a 	mov	r5,zero
    82bc:	9009883a 	mov	r4,r18
    82c0:	000a5a40 	call	a5a4 <_sbrk_r>
    82c4:	98c00217 	ldw	r3,8(r19)
    82c8:	1c47883a 	add	r3,r3,r17
    82cc:	10c00a26 	beq	r2,r3,82f8 <_malloc_trim_r+0xa4>
    82d0:	9009883a 	mov	r4,r18
    82d4:	0010ad40 	call	10ad4 <__malloc_unlock>
    82d8:	0005883a 	mov	r2,zero
    82dc:	dfc00417 	ldw	ra,16(sp)
    82e0:	dcc00317 	ldw	r19,12(sp)
    82e4:	dc800217 	ldw	r18,8(sp)
    82e8:	dc400117 	ldw	r17,4(sp)
    82ec:	dc000017 	ldw	r16,0(sp)
    82f0:	dec00504 	addi	sp,sp,20
    82f4:	f800283a 	ret
    82f8:	040bc83a 	sub	r5,zero,r16
    82fc:	9009883a 	mov	r4,r18
    8300:	000a5a40 	call	a5a4 <_sbrk_r>
    8304:	00ffffc4 	movi	r3,-1
    8308:	10c00d26 	beq	r2,r3,8340 <_malloc_trim_r+0xec>
    830c:	00c00074 	movhi	r3,1
    8310:	18d44304 	addi	r3,r3,20748
    8314:	18800017 	ldw	r2,0(r3)
    8318:	99000217 	ldw	r4,8(r19)
    831c:	8c23c83a 	sub	r17,r17,r16
    8320:	8c400054 	ori	r17,r17,1
    8324:	1421c83a 	sub	r16,r2,r16
    8328:	24400115 	stw	r17,4(r4)
    832c:	9009883a 	mov	r4,r18
    8330:	1c000015 	stw	r16,0(r3)
    8334:	0010ad40 	call	10ad4 <__malloc_unlock>
    8338:	00800044 	movi	r2,1
    833c:	003fe706 	br	82dc <__alt_data_end+0xfc0082dc>
    8340:	000b883a 	mov	r5,zero
    8344:	9009883a 	mov	r4,r18
    8348:	000a5a40 	call	a5a4 <_sbrk_r>
    834c:	99000217 	ldw	r4,8(r19)
    8350:	014003c4 	movi	r5,15
    8354:	1107c83a 	sub	r3,r2,r4
    8358:	28ffdd0e 	bge	r5,r3,82d0 <__alt_data_end+0xfc0082d0>
    835c:	01400074 	movhi	r5,1
    8360:	294c5e04 	addi	r5,r5,12664
    8364:	29400017 	ldw	r5,0(r5)
    8368:	18c00054 	ori	r3,r3,1
    836c:	20c00115 	stw	r3,4(r4)
    8370:	00c00074 	movhi	r3,1
    8374:	1145c83a 	sub	r2,r2,r5
    8378:	18d44304 	addi	r3,r3,20748
    837c:	18800015 	stw	r2,0(r3)
    8380:	003fd306 	br	82d0 <__alt_data_end+0xfc0082d0>

00008384 <_free_r>:
    8384:	f811883a 	mov	r8,ra
    8388:	0000ac80 	call	ac8 <_mcount>
    838c:	403f883a 	mov	ra,r8
    8390:	28004126 	beq	r5,zero,8498 <_free_r+0x114>
    8394:	defffd04 	addi	sp,sp,-12
    8398:	dfc00215 	stw	ra,8(sp)
    839c:	dc400115 	stw	r17,4(sp)
    83a0:	dc000015 	stw	r16,0(sp)
    83a4:	2821883a 	mov	r16,r5
    83a8:	2023883a 	mov	r17,r4
    83ac:	0010aa40 	call	10aa4 <__malloc_lock>
    83b0:	81ffff17 	ldw	r7,-4(r16)
    83b4:	00bfff84 	movi	r2,-2
    83b8:	01000074 	movhi	r4,1
    83bc:	81bffe04 	addi	r6,r16,-8
    83c0:	3884703a 	and	r2,r7,r2
    83c4:	210b4a04 	addi	r4,r4,11560
    83c8:	308b883a 	add	r5,r6,r2
    83cc:	2a400117 	ldw	r9,4(r5)
    83d0:	22000217 	ldw	r8,8(r4)
    83d4:	00ffff04 	movi	r3,-4
    83d8:	48c6703a 	and	r3,r9,r3
    83dc:	2a005726 	beq	r5,r8,853c <_free_r+0x1b8>
    83e0:	28c00115 	stw	r3,4(r5)
    83e4:	39c0004c 	andi	r7,r7,1
    83e8:	3800091e 	bne	r7,zero,8410 <_free_r+0x8c>
    83ec:	823ffe17 	ldw	r8,-8(r16)
    83f0:	22400204 	addi	r9,r4,8
    83f4:	320dc83a 	sub	r6,r6,r8
    83f8:	31c00217 	ldw	r7,8(r6)
    83fc:	1205883a 	add	r2,r2,r8
    8400:	3a406526 	beq	r7,r9,8598 <_free_r+0x214>
    8404:	32000317 	ldw	r8,12(r6)
    8408:	3a000315 	stw	r8,12(r7)
    840c:	41c00215 	stw	r7,8(r8)
    8410:	28cf883a 	add	r7,r5,r3
    8414:	39c00117 	ldw	r7,4(r7)
    8418:	39c0004c 	andi	r7,r7,1
    841c:	38003a26 	beq	r7,zero,8508 <_free_r+0x184>
    8420:	10c00054 	ori	r3,r2,1
    8424:	30c00115 	stw	r3,4(r6)
    8428:	3087883a 	add	r3,r6,r2
    842c:	18800015 	stw	r2,0(r3)
    8430:	00c07fc4 	movi	r3,511
    8434:	18801936 	bltu	r3,r2,849c <_free_r+0x118>
    8438:	1004d0fa 	srli	r2,r2,3
    843c:	01c00044 	movi	r7,1
    8440:	21400117 	ldw	r5,4(r4)
    8444:	10c00044 	addi	r3,r2,1
    8448:	18c7883a 	add	r3,r3,r3
    844c:	1005d0ba 	srai	r2,r2,2
    8450:	18c7883a 	add	r3,r3,r3
    8454:	18c7883a 	add	r3,r3,r3
    8458:	1907883a 	add	r3,r3,r4
    845c:	3884983a 	sll	r2,r7,r2
    8460:	19c00017 	ldw	r7,0(r3)
    8464:	1a3ffe04 	addi	r8,r3,-8
    8468:	1144b03a 	or	r2,r2,r5
    846c:	32000315 	stw	r8,12(r6)
    8470:	31c00215 	stw	r7,8(r6)
    8474:	20800115 	stw	r2,4(r4)
    8478:	19800015 	stw	r6,0(r3)
    847c:	39800315 	stw	r6,12(r7)
    8480:	8809883a 	mov	r4,r17
    8484:	dfc00217 	ldw	ra,8(sp)
    8488:	dc400117 	ldw	r17,4(sp)
    848c:	dc000017 	ldw	r16,0(sp)
    8490:	dec00304 	addi	sp,sp,12
    8494:	0010ad41 	jmpi	10ad4 <__malloc_unlock>
    8498:	f800283a 	ret
    849c:	100ad27a 	srli	r5,r2,9
    84a0:	00c00104 	movi	r3,4
    84a4:	19404a36 	bltu	r3,r5,85d0 <_free_r+0x24c>
    84a8:	100ad1ba 	srli	r5,r2,6
    84ac:	28c00e44 	addi	r3,r5,57
    84b0:	18c7883a 	add	r3,r3,r3
    84b4:	29400e04 	addi	r5,r5,56
    84b8:	18c7883a 	add	r3,r3,r3
    84bc:	18c7883a 	add	r3,r3,r3
    84c0:	1909883a 	add	r4,r3,r4
    84c4:	20c00017 	ldw	r3,0(r4)
    84c8:	01c00074 	movhi	r7,1
    84cc:	213ffe04 	addi	r4,r4,-8
    84d0:	39cb4a04 	addi	r7,r7,11560
    84d4:	20c04426 	beq	r4,r3,85e8 <_free_r+0x264>
    84d8:	01ffff04 	movi	r7,-4
    84dc:	19400117 	ldw	r5,4(r3)
    84e0:	29ca703a 	and	r5,r5,r7
    84e4:	1140022e 	bgeu	r2,r5,84f0 <_free_r+0x16c>
    84e8:	18c00217 	ldw	r3,8(r3)
    84ec:	20fffb1e 	bne	r4,r3,84dc <__alt_data_end+0xfc0084dc>
    84f0:	19000317 	ldw	r4,12(r3)
    84f4:	31000315 	stw	r4,12(r6)
    84f8:	30c00215 	stw	r3,8(r6)
    84fc:	21800215 	stw	r6,8(r4)
    8500:	19800315 	stw	r6,12(r3)
    8504:	003fde06 	br	8480 <__alt_data_end+0xfc008480>
    8508:	29c00217 	ldw	r7,8(r5)
    850c:	10c5883a 	add	r2,r2,r3
    8510:	00c00074 	movhi	r3,1
    8514:	18cb4c04 	addi	r3,r3,11568
    8518:	38c03b26 	beq	r7,r3,8608 <_free_r+0x284>
    851c:	2a000317 	ldw	r8,12(r5)
    8520:	11400054 	ori	r5,r2,1
    8524:	3087883a 	add	r3,r6,r2
    8528:	3a000315 	stw	r8,12(r7)
    852c:	41c00215 	stw	r7,8(r8)
    8530:	31400115 	stw	r5,4(r6)
    8534:	18800015 	stw	r2,0(r3)
    8538:	003fbd06 	br	8430 <__alt_data_end+0xfc008430>
    853c:	39c0004c 	andi	r7,r7,1
    8540:	10c5883a 	add	r2,r2,r3
    8544:	3800071e 	bne	r7,zero,8564 <_free_r+0x1e0>
    8548:	81fffe17 	ldw	r7,-8(r16)
    854c:	31cdc83a 	sub	r6,r6,r7
    8550:	30c00317 	ldw	r3,12(r6)
    8554:	31400217 	ldw	r5,8(r6)
    8558:	11c5883a 	add	r2,r2,r7
    855c:	28c00315 	stw	r3,12(r5)
    8560:	19400215 	stw	r5,8(r3)
    8564:	10c00054 	ori	r3,r2,1
    8568:	30c00115 	stw	r3,4(r6)
    856c:	00c00074 	movhi	r3,1
    8570:	18cc5f04 	addi	r3,r3,12668
    8574:	18c00017 	ldw	r3,0(r3)
    8578:	21800215 	stw	r6,8(r4)
    857c:	10ffc036 	bltu	r2,r3,8480 <__alt_data_end+0xfc008480>
    8580:	00800074 	movhi	r2,1
    8584:	10943c04 	addi	r2,r2,20720
    8588:	11400017 	ldw	r5,0(r2)
    858c:	8809883a 	mov	r4,r17
    8590:	00082540 	call	8254 <_malloc_trim_r>
    8594:	003fba06 	br	8480 <__alt_data_end+0xfc008480>
    8598:	28c9883a 	add	r4,r5,r3
    859c:	21000117 	ldw	r4,4(r4)
    85a0:	2100004c 	andi	r4,r4,1
    85a4:	2000391e 	bne	r4,zero,868c <_free_r+0x308>
    85a8:	29c00217 	ldw	r7,8(r5)
    85ac:	29000317 	ldw	r4,12(r5)
    85b0:	1885883a 	add	r2,r3,r2
    85b4:	10c00054 	ori	r3,r2,1
    85b8:	39000315 	stw	r4,12(r7)
    85bc:	21c00215 	stw	r7,8(r4)
    85c0:	30c00115 	stw	r3,4(r6)
    85c4:	308d883a 	add	r6,r6,r2
    85c8:	30800015 	stw	r2,0(r6)
    85cc:	003fac06 	br	8480 <__alt_data_end+0xfc008480>
    85d0:	00c00504 	movi	r3,20
    85d4:	19401536 	bltu	r3,r5,862c <_free_r+0x2a8>
    85d8:	28c01704 	addi	r3,r5,92
    85dc:	18c7883a 	add	r3,r3,r3
    85e0:	294016c4 	addi	r5,r5,91
    85e4:	003fb406 	br	84b8 <__alt_data_end+0xfc0084b8>
    85e8:	280bd0ba 	srai	r5,r5,2
    85ec:	00c00044 	movi	r3,1
    85f0:	38800117 	ldw	r2,4(r7)
    85f4:	194a983a 	sll	r5,r3,r5
    85f8:	2007883a 	mov	r3,r4
    85fc:	2884b03a 	or	r2,r5,r2
    8600:	38800115 	stw	r2,4(r7)
    8604:	003fbb06 	br	84f4 <__alt_data_end+0xfc0084f4>
    8608:	21800515 	stw	r6,20(r4)
    860c:	21800415 	stw	r6,16(r4)
    8610:	10c00054 	ori	r3,r2,1
    8614:	31c00315 	stw	r7,12(r6)
    8618:	31c00215 	stw	r7,8(r6)
    861c:	30c00115 	stw	r3,4(r6)
    8620:	308d883a 	add	r6,r6,r2
    8624:	30800015 	stw	r2,0(r6)
    8628:	003f9506 	br	8480 <__alt_data_end+0xfc008480>
    862c:	00c01504 	movi	r3,84
    8630:	19400536 	bltu	r3,r5,8648 <_free_r+0x2c4>
    8634:	100ad33a 	srli	r5,r2,12
    8638:	28c01bc4 	addi	r3,r5,111
    863c:	18c7883a 	add	r3,r3,r3
    8640:	29401b84 	addi	r5,r5,110
    8644:	003f9c06 	br	84b8 <__alt_data_end+0xfc0084b8>
    8648:	00c05504 	movi	r3,340
    864c:	19400536 	bltu	r3,r5,8664 <_free_r+0x2e0>
    8650:	100ad3fa 	srli	r5,r2,15
    8654:	28c01e04 	addi	r3,r5,120
    8658:	18c7883a 	add	r3,r3,r3
    865c:	29401dc4 	addi	r5,r5,119
    8660:	003f9506 	br	84b8 <__alt_data_end+0xfc0084b8>
    8664:	00c15504 	movi	r3,1364
    8668:	19400536 	bltu	r3,r5,8680 <_free_r+0x2fc>
    866c:	100ad4ba 	srli	r5,r2,18
    8670:	28c01f44 	addi	r3,r5,125
    8674:	18c7883a 	add	r3,r3,r3
    8678:	29401f04 	addi	r5,r5,124
    867c:	003f8e06 	br	84b8 <__alt_data_end+0xfc0084b8>
    8680:	00c03f84 	movi	r3,254
    8684:	01401f84 	movi	r5,126
    8688:	003f8b06 	br	84b8 <__alt_data_end+0xfc0084b8>
    868c:	10c00054 	ori	r3,r2,1
    8690:	30c00115 	stw	r3,4(r6)
    8694:	308d883a 	add	r6,r6,r2
    8698:	30800015 	stw	r2,0(r6)
    869c:	003f7806 	br	8480 <__alt_data_end+0xfc008480>

000086a0 <_fwalk>:
    86a0:	f811883a 	mov	r8,ra
    86a4:	0000ac80 	call	ac8 <_mcount>
    86a8:	403f883a 	mov	ra,r8
    86ac:	defff704 	addi	sp,sp,-36
    86b0:	dfc00815 	stw	ra,32(sp)
    86b4:	ddc00715 	stw	r23,28(sp)
    86b8:	dd800615 	stw	r22,24(sp)
    86bc:	dd400515 	stw	r21,20(sp)
    86c0:	dd000415 	stw	r20,16(sp)
    86c4:	dcc00315 	stw	r19,12(sp)
    86c8:	dc800215 	stw	r18,8(sp)
    86cc:	dc400115 	stw	r17,4(sp)
    86d0:	dc000015 	stw	r16,0(sp)
    86d4:	2500b804 	addi	r20,r4,736
    86d8:	a0002326 	beq	r20,zero,8768 <_fwalk+0xc8>
    86dc:	282b883a 	mov	r21,r5
    86e0:	002f883a 	mov	r23,zero
    86e4:	05800044 	movi	r22,1
    86e8:	04ffffc4 	movi	r19,-1
    86ec:	a4400117 	ldw	r17,4(r20)
    86f0:	a4800217 	ldw	r18,8(r20)
    86f4:	8c7fffc4 	addi	r17,r17,-1
    86f8:	88000d16 	blt	r17,zero,8730 <_fwalk+0x90>
    86fc:	94000304 	addi	r16,r18,12
    8700:	94800384 	addi	r18,r18,14
    8704:	8080000b 	ldhu	r2,0(r16)
    8708:	8c7fffc4 	addi	r17,r17,-1
    870c:	813ffd04 	addi	r4,r16,-12
    8710:	b080042e 	bgeu	r22,r2,8724 <_fwalk+0x84>
    8714:	9080000f 	ldh	r2,0(r18)
    8718:	14c00226 	beq	r2,r19,8724 <_fwalk+0x84>
    871c:	a83ee83a 	callr	r21
    8720:	b8aeb03a 	or	r23,r23,r2
    8724:	84001a04 	addi	r16,r16,104
    8728:	94801a04 	addi	r18,r18,104
    872c:	8cfff51e 	bne	r17,r19,8704 <__alt_data_end+0xfc008704>
    8730:	a5000017 	ldw	r20,0(r20)
    8734:	a03fed1e 	bne	r20,zero,86ec <__alt_data_end+0xfc0086ec>
    8738:	b805883a 	mov	r2,r23
    873c:	dfc00817 	ldw	ra,32(sp)
    8740:	ddc00717 	ldw	r23,28(sp)
    8744:	dd800617 	ldw	r22,24(sp)
    8748:	dd400517 	ldw	r21,20(sp)
    874c:	dd000417 	ldw	r20,16(sp)
    8750:	dcc00317 	ldw	r19,12(sp)
    8754:	dc800217 	ldw	r18,8(sp)
    8758:	dc400117 	ldw	r17,4(sp)
    875c:	dc000017 	ldw	r16,0(sp)
    8760:	dec00904 	addi	sp,sp,36
    8764:	f800283a 	ret
    8768:	002f883a 	mov	r23,zero
    876c:	003ff206 	br	8738 <__alt_data_end+0xfc008738>

00008770 <_fwalk_reent>:
    8770:	f811883a 	mov	r8,ra
    8774:	0000ac80 	call	ac8 <_mcount>
    8778:	403f883a 	mov	ra,r8
    877c:	defff704 	addi	sp,sp,-36
    8780:	dfc00815 	stw	ra,32(sp)
    8784:	ddc00715 	stw	r23,28(sp)
    8788:	dd800615 	stw	r22,24(sp)
    878c:	dd400515 	stw	r21,20(sp)
    8790:	dd000415 	stw	r20,16(sp)
    8794:	dcc00315 	stw	r19,12(sp)
    8798:	dc800215 	stw	r18,8(sp)
    879c:	dc400115 	stw	r17,4(sp)
    87a0:	dc000015 	stw	r16,0(sp)
    87a4:	2500b804 	addi	r20,r4,736
    87a8:	a0002326 	beq	r20,zero,8838 <_fwalk_reent+0xc8>
    87ac:	282b883a 	mov	r21,r5
    87b0:	2027883a 	mov	r19,r4
    87b4:	002f883a 	mov	r23,zero
    87b8:	05800044 	movi	r22,1
    87bc:	04bfffc4 	movi	r18,-1
    87c0:	a4400117 	ldw	r17,4(r20)
    87c4:	a4000217 	ldw	r16,8(r20)
    87c8:	8c7fffc4 	addi	r17,r17,-1
    87cc:	88000c16 	blt	r17,zero,8800 <_fwalk_reent+0x90>
    87d0:	84000304 	addi	r16,r16,12
    87d4:	8080000b 	ldhu	r2,0(r16)
    87d8:	8c7fffc4 	addi	r17,r17,-1
    87dc:	817ffd04 	addi	r5,r16,-12
    87e0:	b080052e 	bgeu	r22,r2,87f8 <_fwalk_reent+0x88>
    87e4:	8080008f 	ldh	r2,2(r16)
    87e8:	9809883a 	mov	r4,r19
    87ec:	14800226 	beq	r2,r18,87f8 <_fwalk_reent+0x88>
    87f0:	a83ee83a 	callr	r21
    87f4:	b8aeb03a 	or	r23,r23,r2
    87f8:	84001a04 	addi	r16,r16,104
    87fc:	8cbff51e 	bne	r17,r18,87d4 <__alt_data_end+0xfc0087d4>
    8800:	a5000017 	ldw	r20,0(r20)
    8804:	a03fee1e 	bne	r20,zero,87c0 <__alt_data_end+0xfc0087c0>
    8808:	b805883a 	mov	r2,r23
    880c:	dfc00817 	ldw	ra,32(sp)
    8810:	ddc00717 	ldw	r23,28(sp)
    8814:	dd800617 	ldw	r22,24(sp)
    8818:	dd400517 	ldw	r21,20(sp)
    881c:	dd000417 	ldw	r20,16(sp)
    8820:	dcc00317 	ldw	r19,12(sp)
    8824:	dc800217 	ldw	r18,8(sp)
    8828:	dc400117 	ldw	r17,4(sp)
    882c:	dc000017 	ldw	r16,0(sp)
    8830:	dec00904 	addi	sp,sp,36
    8834:	f800283a 	ret
    8838:	002f883a 	mov	r23,zero
    883c:	003ff206 	br	8808 <__alt_data_end+0xfc008808>

00008840 <_setlocale_r>:
    8840:	f811883a 	mov	r8,ra
    8844:	0000ac80 	call	ac8 <_mcount>
    8848:	403f883a 	mov	ra,r8
    884c:	30001b26 	beq	r6,zero,88bc <_setlocale_r+0x7c>
    8850:	defffe04 	addi	sp,sp,-8
    8854:	dfc00115 	stw	ra,4(sp)
    8858:	dc000015 	stw	r16,0(sp)
    885c:	01400074 	movhi	r5,1
    8860:	29440404 	addi	r5,r5,4112
    8864:	3009883a 	mov	r4,r6
    8868:	3021883a 	mov	r16,r6
    886c:	000a77c0 	call	a77c <strcmp>
    8870:	1000061e 	bne	r2,zero,888c <_setlocale_r+0x4c>
    8874:	00800074 	movhi	r2,1
    8878:	1083e604 	addi	r2,r2,3992
    887c:	dfc00117 	ldw	ra,4(sp)
    8880:	dc000017 	ldw	r16,0(sp)
    8884:	dec00204 	addi	sp,sp,8
    8888:	f800283a 	ret
    888c:	01400074 	movhi	r5,1
    8890:	2943e604 	addi	r5,r5,3992
    8894:	8009883a 	mov	r4,r16
    8898:	000a77c0 	call	a77c <strcmp>
    889c:	103ff526 	beq	r2,zero,8874 <__alt_data_end+0xfc008874>
    88a0:	01400074 	movhi	r5,1
    88a4:	2943ef04 	addi	r5,r5,4028
    88a8:	8009883a 	mov	r4,r16
    88ac:	000a77c0 	call	a77c <strcmp>
    88b0:	103ff026 	beq	r2,zero,8874 <__alt_data_end+0xfc008874>
    88b4:	0005883a 	mov	r2,zero
    88b8:	003ff006 	br	887c <__alt_data_end+0xfc00887c>
    88bc:	00800074 	movhi	r2,1
    88c0:	1083e604 	addi	r2,r2,3992
    88c4:	f800283a 	ret

000088c8 <__locale_charset>:
    88c8:	f811883a 	mov	r8,ra
    88cc:	0000ac80 	call	ac8 <_mcount>
    88d0:	403f883a 	mov	ra,r8
    88d4:	00800074 	movhi	r2,1
    88d8:	108b3404 	addi	r2,r2,11472
    88dc:	f800283a 	ret

000088e0 <__locale_mb_cur_max>:
    88e0:	f811883a 	mov	r8,ra
    88e4:	0000ac80 	call	ac8 <_mcount>
    88e8:	403f883a 	mov	ra,r8
    88ec:	00800074 	movhi	r2,1
    88f0:	108c5d04 	addi	r2,r2,12660
    88f4:	10800017 	ldw	r2,0(r2)
    88f8:	f800283a 	ret

000088fc <__locale_msgcharset>:
    88fc:	f811883a 	mov	r8,ra
    8900:	0000ac80 	call	ac8 <_mcount>
    8904:	403f883a 	mov	ra,r8
    8908:	00800074 	movhi	r2,1
    890c:	108b2c04 	addi	r2,r2,11440
    8910:	f800283a 	ret

00008914 <__locale_cjk_lang>:
    8914:	f811883a 	mov	r8,ra
    8918:	0000ac80 	call	ac8 <_mcount>
    891c:	403f883a 	mov	ra,r8
    8920:	0005883a 	mov	r2,zero
    8924:	f800283a 	ret

00008928 <_localeconv_r>:
    8928:	f811883a 	mov	r8,ra
    892c:	0000ac80 	call	ac8 <_mcount>
    8930:	403f883a 	mov	ra,r8
    8934:	00800074 	movhi	r2,1
    8938:	108b3c04 	addi	r2,r2,11504
    893c:	f800283a 	ret

00008940 <setlocale>:
    8940:	f811883a 	mov	r8,ra
    8944:	0000ac80 	call	ac8 <_mcount>
    8948:	403f883a 	mov	ra,r8
    894c:	00800074 	movhi	r2,1
    8950:	108c5c04 	addi	r2,r2,12656
    8954:	280d883a 	mov	r6,r5
    8958:	200b883a 	mov	r5,r4
    895c:	11000017 	ldw	r4,0(r2)
    8960:	00088401 	jmpi	8840 <_setlocale_r>

00008964 <localeconv>:
    8964:	f811883a 	mov	r8,ra
    8968:	0000ac80 	call	ac8 <_mcount>
    896c:	403f883a 	mov	ra,r8
    8970:	00800074 	movhi	r2,1
    8974:	108b3c04 	addi	r2,r2,11504
    8978:	f800283a 	ret

0000897c <__smakebuf_r>:
    897c:	f811883a 	mov	r8,ra
    8980:	0000ac80 	call	ac8 <_mcount>
    8984:	403f883a 	mov	ra,r8
    8988:	2880030b 	ldhu	r2,12(r5)
    898c:	10c0008c 	andi	r3,r2,2
    8990:	1800411e 	bne	r3,zero,8a98 <__smakebuf_r+0x11c>
    8994:	deffec04 	addi	sp,sp,-80
    8998:	dfc01315 	stw	ra,76(sp)
    899c:	dcc01215 	stw	r19,72(sp)
    89a0:	dc801115 	stw	r18,68(sp)
    89a4:	dc401015 	stw	r17,64(sp)
    89a8:	dc000f15 	stw	r16,60(sp)
    89ac:	2821883a 	mov	r16,r5
    89b0:	2940038f 	ldh	r5,14(r5)
    89b4:	2023883a 	mov	r17,r4
    89b8:	28001c16 	blt	r5,zero,8a2c <__smakebuf_r+0xb0>
    89bc:	d80d883a 	mov	r6,sp
    89c0:	000c3c40 	call	c3c4 <_fstat_r>
    89c4:	10001816 	blt	r2,zero,8a28 <__smakebuf_r+0xac>
    89c8:	d8800117 	ldw	r2,4(sp)
    89cc:	00e00014 	movui	r3,32768
    89d0:	10bc000c 	andi	r2,r2,61440
    89d4:	14c80020 	cmpeqi	r19,r2,8192
    89d8:	10c03726 	beq	r2,r3,8ab8 <__smakebuf_r+0x13c>
    89dc:	80c0030b 	ldhu	r3,12(r16)
    89e0:	18c20014 	ori	r3,r3,2048
    89e4:	80c0030d 	sth	r3,12(r16)
    89e8:	00c80004 	movi	r3,8192
    89ec:	10c0521e 	bne	r2,r3,8b38 <__smakebuf_r+0x1bc>
    89f0:	8140038f 	ldh	r5,14(r16)
    89f4:	8809883a 	mov	r4,r17
    89f8:	000c8f40 	call	c8f4 <_isatty_r>
    89fc:	10004c26 	beq	r2,zero,8b30 <__smakebuf_r+0x1b4>
    8a00:	8080030b 	ldhu	r2,12(r16)
    8a04:	80c010c4 	addi	r3,r16,67
    8a08:	80c00015 	stw	r3,0(r16)
    8a0c:	10800054 	ori	r2,r2,1
    8a10:	8080030d 	sth	r2,12(r16)
    8a14:	00800044 	movi	r2,1
    8a18:	80c00415 	stw	r3,16(r16)
    8a1c:	80800515 	stw	r2,20(r16)
    8a20:	04810004 	movi	r18,1024
    8a24:	00000706 	br	8a44 <__smakebuf_r+0xc8>
    8a28:	8080030b 	ldhu	r2,12(r16)
    8a2c:	10c0200c 	andi	r3,r2,128
    8a30:	18001f1e 	bne	r3,zero,8ab0 <__smakebuf_r+0x134>
    8a34:	04810004 	movi	r18,1024
    8a38:	10820014 	ori	r2,r2,2048
    8a3c:	8080030d 	sth	r2,12(r16)
    8a40:	0027883a 	mov	r19,zero
    8a44:	900b883a 	mov	r5,r18
    8a48:	8809883a 	mov	r4,r17
    8a4c:	0008b440 	call	8b44 <_malloc_r>
    8a50:	10002c26 	beq	r2,zero,8b04 <__smakebuf_r+0x188>
    8a54:	80c0030b 	ldhu	r3,12(r16)
    8a58:	01000034 	movhi	r4,0
    8a5c:	211f8804 	addi	r4,r4,32288
    8a60:	89000f15 	stw	r4,60(r17)
    8a64:	18c02014 	ori	r3,r3,128
    8a68:	80c0030d 	sth	r3,12(r16)
    8a6c:	80800015 	stw	r2,0(r16)
    8a70:	80800415 	stw	r2,16(r16)
    8a74:	84800515 	stw	r18,20(r16)
    8a78:	98001a1e 	bne	r19,zero,8ae4 <__smakebuf_r+0x168>
    8a7c:	dfc01317 	ldw	ra,76(sp)
    8a80:	dcc01217 	ldw	r19,72(sp)
    8a84:	dc801117 	ldw	r18,68(sp)
    8a88:	dc401017 	ldw	r17,64(sp)
    8a8c:	dc000f17 	ldw	r16,60(sp)
    8a90:	dec01404 	addi	sp,sp,80
    8a94:	f800283a 	ret
    8a98:	288010c4 	addi	r2,r5,67
    8a9c:	28800015 	stw	r2,0(r5)
    8aa0:	28800415 	stw	r2,16(r5)
    8aa4:	00800044 	movi	r2,1
    8aa8:	28800515 	stw	r2,20(r5)
    8aac:	f800283a 	ret
    8ab0:	04801004 	movi	r18,64
    8ab4:	003fe006 	br	8a38 <__alt_data_end+0xfc008a38>
    8ab8:	81000a17 	ldw	r4,40(r16)
    8abc:	00c00074 	movhi	r3,1
    8ac0:	18e9c004 	addi	r3,r3,-22784
    8ac4:	20ffc51e 	bne	r4,r3,89dc <__alt_data_end+0xfc0089dc>
    8ac8:	8080030b 	ldhu	r2,12(r16)
    8acc:	04810004 	movi	r18,1024
    8ad0:	84801315 	stw	r18,76(r16)
    8ad4:	1484b03a 	or	r2,r2,r18
    8ad8:	8080030d 	sth	r2,12(r16)
    8adc:	0027883a 	mov	r19,zero
    8ae0:	003fd806 	br	8a44 <__alt_data_end+0xfc008a44>
    8ae4:	8140038f 	ldh	r5,14(r16)
    8ae8:	8809883a 	mov	r4,r17
    8aec:	000c8f40 	call	c8f4 <_isatty_r>
    8af0:	103fe226 	beq	r2,zero,8a7c <__alt_data_end+0xfc008a7c>
    8af4:	8080030b 	ldhu	r2,12(r16)
    8af8:	10800054 	ori	r2,r2,1
    8afc:	8080030d 	sth	r2,12(r16)
    8b00:	003fde06 	br	8a7c <__alt_data_end+0xfc008a7c>
    8b04:	8080030b 	ldhu	r2,12(r16)
    8b08:	10c0800c 	andi	r3,r2,512
    8b0c:	183fdb1e 	bne	r3,zero,8a7c <__alt_data_end+0xfc008a7c>
    8b10:	10800094 	ori	r2,r2,2
    8b14:	80c010c4 	addi	r3,r16,67
    8b18:	8080030d 	sth	r2,12(r16)
    8b1c:	00800044 	movi	r2,1
    8b20:	80c00015 	stw	r3,0(r16)
    8b24:	80c00415 	stw	r3,16(r16)
    8b28:	80800515 	stw	r2,20(r16)
    8b2c:	003fd306 	br	8a7c <__alt_data_end+0xfc008a7c>
    8b30:	04810004 	movi	r18,1024
    8b34:	003fc306 	br	8a44 <__alt_data_end+0xfc008a44>
    8b38:	0027883a 	mov	r19,zero
    8b3c:	04810004 	movi	r18,1024
    8b40:	003fc006 	br	8a44 <__alt_data_end+0xfc008a44>

00008b44 <_malloc_r>:
    8b44:	f811883a 	mov	r8,ra
    8b48:	0000ac80 	call	ac8 <_mcount>
    8b4c:	403f883a 	mov	ra,r8
    8b50:	defff504 	addi	sp,sp,-44
    8b54:	dfc00a15 	stw	ra,40(sp)
    8b58:	df000915 	stw	fp,36(sp)
    8b5c:	ddc00815 	stw	r23,32(sp)
    8b60:	dd800715 	stw	r22,28(sp)
    8b64:	dd400615 	stw	r21,24(sp)
    8b68:	dd000515 	stw	r20,20(sp)
    8b6c:	dcc00415 	stw	r19,16(sp)
    8b70:	dc800315 	stw	r18,12(sp)
    8b74:	dc400215 	stw	r17,8(sp)
    8b78:	dc000115 	stw	r16,4(sp)
    8b7c:	00c00584 	movi	r3,22
    8b80:	288002c4 	addi	r2,r5,11
    8b84:	2025883a 	mov	r18,r4
    8b88:	18807f2e 	bgeu	r3,r2,8d88 <_malloc_r+0x244>
    8b8c:	047ffe04 	movi	r17,-8
    8b90:	1462703a 	and	r17,r2,r17
    8b94:	8800a316 	blt	r17,zero,8e24 <_malloc_r+0x2e0>
    8b98:	8940a236 	bltu	r17,r5,8e24 <_malloc_r+0x2e0>
    8b9c:	0010aa40 	call	10aa4 <__malloc_lock>
    8ba0:	00807dc4 	movi	r2,503
    8ba4:	1441e92e 	bgeu	r2,r17,934c <_malloc_r+0x808>
    8ba8:	8804d27a 	srli	r2,r17,9
    8bac:	1000a126 	beq	r2,zero,8e34 <_malloc_r+0x2f0>
    8bb0:	00c00104 	movi	r3,4
    8bb4:	18811e36 	bltu	r3,r2,9030 <_malloc_r+0x4ec>
    8bb8:	8804d1ba 	srli	r2,r17,6
    8bbc:	12000e44 	addi	r8,r2,57
    8bc0:	11c00e04 	addi	r7,r2,56
    8bc4:	4209883a 	add	r4,r8,r8
    8bc8:	04c00074 	movhi	r19,1
    8bcc:	2109883a 	add	r4,r4,r4
    8bd0:	9ccb4a04 	addi	r19,r19,11560
    8bd4:	2109883a 	add	r4,r4,r4
    8bd8:	9909883a 	add	r4,r19,r4
    8bdc:	24000117 	ldw	r16,4(r4)
    8be0:	213ffe04 	addi	r4,r4,-8
    8be4:	24009726 	beq	r4,r16,8e44 <_malloc_r+0x300>
    8be8:	80800117 	ldw	r2,4(r16)
    8bec:	01bfff04 	movi	r6,-4
    8bf0:	014003c4 	movi	r5,15
    8bf4:	1184703a 	and	r2,r2,r6
    8bf8:	1447c83a 	sub	r3,r2,r17
    8bfc:	28c00716 	blt	r5,r3,8c1c <_malloc_r+0xd8>
    8c00:	1800920e 	bge	r3,zero,8e4c <_malloc_r+0x308>
    8c04:	84000317 	ldw	r16,12(r16)
    8c08:	24008e26 	beq	r4,r16,8e44 <_malloc_r+0x300>
    8c0c:	80800117 	ldw	r2,4(r16)
    8c10:	1184703a 	and	r2,r2,r6
    8c14:	1447c83a 	sub	r3,r2,r17
    8c18:	28fff90e 	bge	r5,r3,8c00 <__alt_data_end+0xfc008c00>
    8c1c:	3809883a 	mov	r4,r7
    8c20:	01800074 	movhi	r6,1
    8c24:	9c000417 	ldw	r16,16(r19)
    8c28:	318b4a04 	addi	r6,r6,11560
    8c2c:	32000204 	addi	r8,r6,8
    8c30:	82013426 	beq	r16,r8,9104 <_malloc_r+0x5c0>
    8c34:	80c00117 	ldw	r3,4(r16)
    8c38:	00bfff04 	movi	r2,-4
    8c3c:	188e703a 	and	r7,r3,r2
    8c40:	3c45c83a 	sub	r2,r7,r17
    8c44:	00c003c4 	movi	r3,15
    8c48:	18811f16 	blt	r3,r2,90c8 <_malloc_r+0x584>
    8c4c:	32000515 	stw	r8,20(r6)
    8c50:	32000415 	stw	r8,16(r6)
    8c54:	10007f0e 	bge	r2,zero,8e54 <_malloc_r+0x310>
    8c58:	00807fc4 	movi	r2,511
    8c5c:	11c0fd36 	bltu	r2,r7,9054 <_malloc_r+0x510>
    8c60:	3806d0fa 	srli	r3,r7,3
    8c64:	01c00044 	movi	r7,1
    8c68:	30800117 	ldw	r2,4(r6)
    8c6c:	19400044 	addi	r5,r3,1
    8c70:	294b883a 	add	r5,r5,r5
    8c74:	1807d0ba 	srai	r3,r3,2
    8c78:	294b883a 	add	r5,r5,r5
    8c7c:	294b883a 	add	r5,r5,r5
    8c80:	298b883a 	add	r5,r5,r6
    8c84:	38c6983a 	sll	r3,r7,r3
    8c88:	29c00017 	ldw	r7,0(r5)
    8c8c:	2a7ffe04 	addi	r9,r5,-8
    8c90:	1886b03a 	or	r3,r3,r2
    8c94:	82400315 	stw	r9,12(r16)
    8c98:	81c00215 	stw	r7,8(r16)
    8c9c:	30c00115 	stw	r3,4(r6)
    8ca0:	2c000015 	stw	r16,0(r5)
    8ca4:	3c000315 	stw	r16,12(r7)
    8ca8:	2005d0ba 	srai	r2,r4,2
    8cac:	01400044 	movi	r5,1
    8cb0:	288a983a 	sll	r5,r5,r2
    8cb4:	19406f36 	bltu	r3,r5,8e74 <_malloc_r+0x330>
    8cb8:	28c4703a 	and	r2,r5,r3
    8cbc:	10000a1e 	bne	r2,zero,8ce8 <_malloc_r+0x1a4>
    8cc0:	00bfff04 	movi	r2,-4
    8cc4:	294b883a 	add	r5,r5,r5
    8cc8:	2088703a 	and	r4,r4,r2
    8ccc:	28c4703a 	and	r2,r5,r3
    8cd0:	21000104 	addi	r4,r4,4
    8cd4:	1000041e 	bne	r2,zero,8ce8 <_malloc_r+0x1a4>
    8cd8:	294b883a 	add	r5,r5,r5
    8cdc:	28c4703a 	and	r2,r5,r3
    8ce0:	21000104 	addi	r4,r4,4
    8ce4:	103ffc26 	beq	r2,zero,8cd8 <__alt_data_end+0xfc008cd8>
    8ce8:	02bfff04 	movi	r10,-4
    8cec:	024003c4 	movi	r9,15
    8cf0:	21800044 	addi	r6,r4,1
    8cf4:	318d883a 	add	r6,r6,r6
    8cf8:	318d883a 	add	r6,r6,r6
    8cfc:	318d883a 	add	r6,r6,r6
    8d00:	998d883a 	add	r6,r19,r6
    8d04:	333ffe04 	addi	r12,r6,-8
    8d08:	2017883a 	mov	r11,r4
    8d0c:	31800104 	addi	r6,r6,4
    8d10:	34000017 	ldw	r16,0(r6)
    8d14:	31fffd04 	addi	r7,r6,-12
    8d18:	81c0041e 	bne	r16,r7,8d2c <_malloc_r+0x1e8>
    8d1c:	0000fb06 	br	910c <_malloc_r+0x5c8>
    8d20:	1801030e 	bge	r3,zero,9130 <_malloc_r+0x5ec>
    8d24:	84000317 	ldw	r16,12(r16)
    8d28:	81c0f826 	beq	r16,r7,910c <_malloc_r+0x5c8>
    8d2c:	80800117 	ldw	r2,4(r16)
    8d30:	1284703a 	and	r2,r2,r10
    8d34:	1447c83a 	sub	r3,r2,r17
    8d38:	48fff90e 	bge	r9,r3,8d20 <__alt_data_end+0xfc008d20>
    8d3c:	80800317 	ldw	r2,12(r16)
    8d40:	81000217 	ldw	r4,8(r16)
    8d44:	89400054 	ori	r5,r17,1
    8d48:	81400115 	stw	r5,4(r16)
    8d4c:	20800315 	stw	r2,12(r4)
    8d50:	11000215 	stw	r4,8(r2)
    8d54:	8463883a 	add	r17,r16,r17
    8d58:	9c400515 	stw	r17,20(r19)
    8d5c:	9c400415 	stw	r17,16(r19)
    8d60:	18800054 	ori	r2,r3,1
    8d64:	88800115 	stw	r2,4(r17)
    8d68:	8a000315 	stw	r8,12(r17)
    8d6c:	8a000215 	stw	r8,8(r17)
    8d70:	88e3883a 	add	r17,r17,r3
    8d74:	88c00015 	stw	r3,0(r17)
    8d78:	9009883a 	mov	r4,r18
    8d7c:	0010ad40 	call	10ad4 <__malloc_unlock>
    8d80:	80800204 	addi	r2,r16,8
    8d84:	00001b06 	br	8df4 <_malloc_r+0x2b0>
    8d88:	04400404 	movi	r17,16
    8d8c:	89402536 	bltu	r17,r5,8e24 <_malloc_r+0x2e0>
    8d90:	0010aa40 	call	10aa4 <__malloc_lock>
    8d94:	00800184 	movi	r2,6
    8d98:	01000084 	movi	r4,2
    8d9c:	04c00074 	movhi	r19,1
    8da0:	1085883a 	add	r2,r2,r2
    8da4:	9ccb4a04 	addi	r19,r19,11560
    8da8:	1085883a 	add	r2,r2,r2
    8dac:	9885883a 	add	r2,r19,r2
    8db0:	14000117 	ldw	r16,4(r2)
    8db4:	10fffe04 	addi	r3,r2,-8
    8db8:	80c0d926 	beq	r16,r3,9120 <_malloc_r+0x5dc>
    8dbc:	80c00117 	ldw	r3,4(r16)
    8dc0:	81000317 	ldw	r4,12(r16)
    8dc4:	00bfff04 	movi	r2,-4
    8dc8:	1884703a 	and	r2,r3,r2
    8dcc:	81400217 	ldw	r5,8(r16)
    8dd0:	8085883a 	add	r2,r16,r2
    8dd4:	10c00117 	ldw	r3,4(r2)
    8dd8:	29000315 	stw	r4,12(r5)
    8ddc:	21400215 	stw	r5,8(r4)
    8de0:	18c00054 	ori	r3,r3,1
    8de4:	10c00115 	stw	r3,4(r2)
    8de8:	9009883a 	mov	r4,r18
    8dec:	0010ad40 	call	10ad4 <__malloc_unlock>
    8df0:	80800204 	addi	r2,r16,8
    8df4:	dfc00a17 	ldw	ra,40(sp)
    8df8:	df000917 	ldw	fp,36(sp)
    8dfc:	ddc00817 	ldw	r23,32(sp)
    8e00:	dd800717 	ldw	r22,28(sp)
    8e04:	dd400617 	ldw	r21,24(sp)
    8e08:	dd000517 	ldw	r20,20(sp)
    8e0c:	dcc00417 	ldw	r19,16(sp)
    8e10:	dc800317 	ldw	r18,12(sp)
    8e14:	dc400217 	ldw	r17,8(sp)
    8e18:	dc000117 	ldw	r16,4(sp)
    8e1c:	dec00b04 	addi	sp,sp,44
    8e20:	f800283a 	ret
    8e24:	00800304 	movi	r2,12
    8e28:	90800015 	stw	r2,0(r18)
    8e2c:	0005883a 	mov	r2,zero
    8e30:	003ff006 	br	8df4 <__alt_data_end+0xfc008df4>
    8e34:	01002004 	movi	r4,128
    8e38:	02001004 	movi	r8,64
    8e3c:	01c00fc4 	movi	r7,63
    8e40:	003f6106 	br	8bc8 <__alt_data_end+0xfc008bc8>
    8e44:	4009883a 	mov	r4,r8
    8e48:	003f7506 	br	8c20 <__alt_data_end+0xfc008c20>
    8e4c:	81000317 	ldw	r4,12(r16)
    8e50:	003fde06 	br	8dcc <__alt_data_end+0xfc008dcc>
    8e54:	81c5883a 	add	r2,r16,r7
    8e58:	11400117 	ldw	r5,4(r2)
    8e5c:	9009883a 	mov	r4,r18
    8e60:	29400054 	ori	r5,r5,1
    8e64:	11400115 	stw	r5,4(r2)
    8e68:	0010ad40 	call	10ad4 <__malloc_unlock>
    8e6c:	80800204 	addi	r2,r16,8
    8e70:	003fe006 	br	8df4 <__alt_data_end+0xfc008df4>
    8e74:	9c000217 	ldw	r16,8(r19)
    8e78:	00bfff04 	movi	r2,-4
    8e7c:	85800117 	ldw	r22,4(r16)
    8e80:	b0ac703a 	and	r22,r22,r2
    8e84:	b4400336 	bltu	r22,r17,8e94 <_malloc_r+0x350>
    8e88:	b445c83a 	sub	r2,r22,r17
    8e8c:	00c003c4 	movi	r3,15
    8e90:	18805d16 	blt	r3,r2,9008 <_malloc_r+0x4c4>
    8e94:	05c00074 	movhi	r23,1
    8e98:	00800074 	movhi	r2,1
    8e9c:	10943c04 	addi	r2,r2,20720
    8ea0:	bdcc5e04 	addi	r23,r23,12664
    8ea4:	15400017 	ldw	r21,0(r2)
    8ea8:	b8c00017 	ldw	r3,0(r23)
    8eac:	00bfffc4 	movi	r2,-1
    8eb0:	858d883a 	add	r6,r16,r22
    8eb4:	8d6b883a 	add	r21,r17,r21
    8eb8:	1880ea26 	beq	r3,r2,9264 <_malloc_r+0x720>
    8ebc:	ad4403c4 	addi	r21,r21,4111
    8ec0:	00bc0004 	movi	r2,-4096
    8ec4:	a8aa703a 	and	r21,r21,r2
    8ec8:	a80b883a 	mov	r5,r21
    8ecc:	9009883a 	mov	r4,r18
    8ed0:	d9800015 	stw	r6,0(sp)
    8ed4:	000a5a40 	call	a5a4 <_sbrk_r>
    8ed8:	1029883a 	mov	r20,r2
    8edc:	00bfffc4 	movi	r2,-1
    8ee0:	d9800017 	ldw	r6,0(sp)
    8ee4:	a080e826 	beq	r20,r2,9288 <_malloc_r+0x744>
    8ee8:	a180a636 	bltu	r20,r6,9184 <_malloc_r+0x640>
    8eec:	07000074 	movhi	fp,1
    8ef0:	e7144304 	addi	fp,fp,20748
    8ef4:	e0800017 	ldw	r2,0(fp)
    8ef8:	a887883a 	add	r3,r21,r2
    8efc:	e0c00015 	stw	r3,0(fp)
    8f00:	3500e626 	beq	r6,r20,929c <_malloc_r+0x758>
    8f04:	b9000017 	ldw	r4,0(r23)
    8f08:	00bfffc4 	movi	r2,-1
    8f0c:	2080ee26 	beq	r4,r2,92c8 <_malloc_r+0x784>
    8f10:	a185c83a 	sub	r2,r20,r6
    8f14:	10c5883a 	add	r2,r2,r3
    8f18:	e0800015 	stw	r2,0(fp)
    8f1c:	a0c001cc 	andi	r3,r20,7
    8f20:	1800bc26 	beq	r3,zero,9214 <_malloc_r+0x6d0>
    8f24:	a0e9c83a 	sub	r20,r20,r3
    8f28:	00840204 	movi	r2,4104
    8f2c:	a5000204 	addi	r20,r20,8
    8f30:	10c7c83a 	sub	r3,r2,r3
    8f34:	a545883a 	add	r2,r20,r21
    8f38:	1083ffcc 	andi	r2,r2,4095
    8f3c:	18abc83a 	sub	r21,r3,r2
    8f40:	a80b883a 	mov	r5,r21
    8f44:	9009883a 	mov	r4,r18
    8f48:	000a5a40 	call	a5a4 <_sbrk_r>
    8f4c:	00ffffc4 	movi	r3,-1
    8f50:	10c0e126 	beq	r2,r3,92d8 <_malloc_r+0x794>
    8f54:	1505c83a 	sub	r2,r2,r20
    8f58:	1545883a 	add	r2,r2,r21
    8f5c:	10800054 	ori	r2,r2,1
    8f60:	e0c00017 	ldw	r3,0(fp)
    8f64:	9d000215 	stw	r20,8(r19)
    8f68:	a0800115 	stw	r2,4(r20)
    8f6c:	a8c7883a 	add	r3,r21,r3
    8f70:	e0c00015 	stw	r3,0(fp)
    8f74:	84c00e26 	beq	r16,r19,8fb0 <_malloc_r+0x46c>
    8f78:	018003c4 	movi	r6,15
    8f7c:	3580a72e 	bgeu	r6,r22,921c <_malloc_r+0x6d8>
    8f80:	81400117 	ldw	r5,4(r16)
    8f84:	013ffe04 	movi	r4,-8
    8f88:	b0bffd04 	addi	r2,r22,-12
    8f8c:	1104703a 	and	r2,r2,r4
    8f90:	2900004c 	andi	r4,r5,1
    8f94:	2088b03a 	or	r4,r4,r2
    8f98:	81000115 	stw	r4,4(r16)
    8f9c:	01400144 	movi	r5,5
    8fa0:	8089883a 	add	r4,r16,r2
    8fa4:	21400115 	stw	r5,4(r4)
    8fa8:	21400215 	stw	r5,8(r4)
    8fac:	3080cd36 	bltu	r6,r2,92e4 <_malloc_r+0x7a0>
    8fb0:	00800074 	movhi	r2,1
    8fb4:	10943b04 	addi	r2,r2,20716
    8fb8:	11000017 	ldw	r4,0(r2)
    8fbc:	20c0012e 	bgeu	r4,r3,8fc4 <_malloc_r+0x480>
    8fc0:	10c00015 	stw	r3,0(r2)
    8fc4:	00800074 	movhi	r2,1
    8fc8:	10943a04 	addi	r2,r2,20712
    8fcc:	11000017 	ldw	r4,0(r2)
    8fd0:	9c000217 	ldw	r16,8(r19)
    8fd4:	20c0012e 	bgeu	r4,r3,8fdc <_malloc_r+0x498>
    8fd8:	10c00015 	stw	r3,0(r2)
    8fdc:	80c00117 	ldw	r3,4(r16)
    8fe0:	00bfff04 	movi	r2,-4
    8fe4:	1886703a 	and	r3,r3,r2
    8fe8:	1c45c83a 	sub	r2,r3,r17
    8fec:	1c400236 	bltu	r3,r17,8ff8 <_malloc_r+0x4b4>
    8ff0:	00c003c4 	movi	r3,15
    8ff4:	18800416 	blt	r3,r2,9008 <_malloc_r+0x4c4>
    8ff8:	9009883a 	mov	r4,r18
    8ffc:	0010ad40 	call	10ad4 <__malloc_unlock>
    9000:	0005883a 	mov	r2,zero
    9004:	003f7b06 	br	8df4 <__alt_data_end+0xfc008df4>
    9008:	88c00054 	ori	r3,r17,1
    900c:	80c00115 	stw	r3,4(r16)
    9010:	8463883a 	add	r17,r16,r17
    9014:	10800054 	ori	r2,r2,1
    9018:	9c400215 	stw	r17,8(r19)
    901c:	88800115 	stw	r2,4(r17)
    9020:	9009883a 	mov	r4,r18
    9024:	0010ad40 	call	10ad4 <__malloc_unlock>
    9028:	80800204 	addi	r2,r16,8
    902c:	003f7106 	br	8df4 <__alt_data_end+0xfc008df4>
    9030:	00c00504 	movi	r3,20
    9034:	18804a2e 	bgeu	r3,r2,9160 <_malloc_r+0x61c>
    9038:	00c01504 	movi	r3,84
    903c:	18806e36 	bltu	r3,r2,91f8 <_malloc_r+0x6b4>
    9040:	8804d33a 	srli	r2,r17,12
    9044:	12001bc4 	addi	r8,r2,111
    9048:	11c01b84 	addi	r7,r2,110
    904c:	4209883a 	add	r4,r8,r8
    9050:	003edd06 	br	8bc8 <__alt_data_end+0xfc008bc8>
    9054:	3804d27a 	srli	r2,r7,9
    9058:	00c00104 	movi	r3,4
    905c:	1880442e 	bgeu	r3,r2,9170 <_malloc_r+0x62c>
    9060:	00c00504 	movi	r3,20
    9064:	18808136 	bltu	r3,r2,926c <_malloc_r+0x728>
    9068:	11401704 	addi	r5,r2,92
    906c:	10c016c4 	addi	r3,r2,91
    9070:	294b883a 	add	r5,r5,r5
    9074:	294b883a 	add	r5,r5,r5
    9078:	294b883a 	add	r5,r5,r5
    907c:	994b883a 	add	r5,r19,r5
    9080:	28800017 	ldw	r2,0(r5)
    9084:	01800074 	movhi	r6,1
    9088:	297ffe04 	addi	r5,r5,-8
    908c:	318b4a04 	addi	r6,r6,11560
    9090:	28806526 	beq	r5,r2,9228 <_malloc_r+0x6e4>
    9094:	01bfff04 	movi	r6,-4
    9098:	10c00117 	ldw	r3,4(r2)
    909c:	1986703a 	and	r3,r3,r6
    90a0:	38c0022e 	bgeu	r7,r3,90ac <_malloc_r+0x568>
    90a4:	10800217 	ldw	r2,8(r2)
    90a8:	28bffb1e 	bne	r5,r2,9098 <__alt_data_end+0xfc009098>
    90ac:	11400317 	ldw	r5,12(r2)
    90b0:	98c00117 	ldw	r3,4(r19)
    90b4:	81400315 	stw	r5,12(r16)
    90b8:	80800215 	stw	r2,8(r16)
    90bc:	2c000215 	stw	r16,8(r5)
    90c0:	14000315 	stw	r16,12(r2)
    90c4:	003ef806 	br	8ca8 <__alt_data_end+0xfc008ca8>
    90c8:	88c00054 	ori	r3,r17,1
    90cc:	80c00115 	stw	r3,4(r16)
    90d0:	8463883a 	add	r17,r16,r17
    90d4:	34400515 	stw	r17,20(r6)
    90d8:	34400415 	stw	r17,16(r6)
    90dc:	10c00054 	ori	r3,r2,1
    90e0:	8a000315 	stw	r8,12(r17)
    90e4:	8a000215 	stw	r8,8(r17)
    90e8:	88c00115 	stw	r3,4(r17)
    90ec:	88a3883a 	add	r17,r17,r2
    90f0:	88800015 	stw	r2,0(r17)
    90f4:	9009883a 	mov	r4,r18
    90f8:	0010ad40 	call	10ad4 <__malloc_unlock>
    90fc:	80800204 	addi	r2,r16,8
    9100:	003f3c06 	br	8df4 <__alt_data_end+0xfc008df4>
    9104:	30c00117 	ldw	r3,4(r6)
    9108:	003ee706 	br	8ca8 <__alt_data_end+0xfc008ca8>
    910c:	5ac00044 	addi	r11,r11,1
    9110:	588000cc 	andi	r2,r11,3
    9114:	31800204 	addi	r6,r6,8
    9118:	103efd1e 	bne	r2,zero,8d10 <__alt_data_end+0xfc008d10>
    911c:	00002406 	br	91b0 <_malloc_r+0x66c>
    9120:	14000317 	ldw	r16,12(r2)
    9124:	143f251e 	bne	r2,r16,8dbc <__alt_data_end+0xfc008dbc>
    9128:	21000084 	addi	r4,r4,2
    912c:	003ebc06 	br	8c20 <__alt_data_end+0xfc008c20>
    9130:	8085883a 	add	r2,r16,r2
    9134:	10c00117 	ldw	r3,4(r2)
    9138:	81000317 	ldw	r4,12(r16)
    913c:	81400217 	ldw	r5,8(r16)
    9140:	18c00054 	ori	r3,r3,1
    9144:	10c00115 	stw	r3,4(r2)
    9148:	29000315 	stw	r4,12(r5)
    914c:	21400215 	stw	r5,8(r4)
    9150:	9009883a 	mov	r4,r18
    9154:	0010ad40 	call	10ad4 <__malloc_unlock>
    9158:	80800204 	addi	r2,r16,8
    915c:	003f2506 	br	8df4 <__alt_data_end+0xfc008df4>
    9160:	12001704 	addi	r8,r2,92
    9164:	11c016c4 	addi	r7,r2,91
    9168:	4209883a 	add	r4,r8,r8
    916c:	003e9606 	br	8bc8 <__alt_data_end+0xfc008bc8>
    9170:	3804d1ba 	srli	r2,r7,6
    9174:	11400e44 	addi	r5,r2,57
    9178:	10c00e04 	addi	r3,r2,56
    917c:	294b883a 	add	r5,r5,r5
    9180:	003fbc06 	br	9074 <__alt_data_end+0xfc009074>
    9184:	84ff5926 	beq	r16,r19,8eec <__alt_data_end+0xfc008eec>
    9188:	00800074 	movhi	r2,1
    918c:	108b4a04 	addi	r2,r2,11560
    9190:	14000217 	ldw	r16,8(r2)
    9194:	00bfff04 	movi	r2,-4
    9198:	80c00117 	ldw	r3,4(r16)
    919c:	1886703a 	and	r3,r3,r2
    91a0:	003f9106 	br	8fe8 <__alt_data_end+0xfc008fe8>
    91a4:	60800217 	ldw	r2,8(r12)
    91a8:	213fffc4 	addi	r4,r4,-1
    91ac:	1300651e 	bne	r2,r12,9344 <_malloc_r+0x800>
    91b0:	208000cc 	andi	r2,r4,3
    91b4:	633ffe04 	addi	r12,r12,-8
    91b8:	103ffa1e 	bne	r2,zero,91a4 <__alt_data_end+0xfc0091a4>
    91bc:	98800117 	ldw	r2,4(r19)
    91c0:	0146303a 	nor	r3,zero,r5
    91c4:	1884703a 	and	r2,r3,r2
    91c8:	98800115 	stw	r2,4(r19)
    91cc:	294b883a 	add	r5,r5,r5
    91d0:	117f2836 	bltu	r2,r5,8e74 <__alt_data_end+0xfc008e74>
    91d4:	283f2726 	beq	r5,zero,8e74 <__alt_data_end+0xfc008e74>
    91d8:	2886703a 	and	r3,r5,r2
    91dc:	5809883a 	mov	r4,r11
    91e0:	183ec31e 	bne	r3,zero,8cf0 <__alt_data_end+0xfc008cf0>
    91e4:	294b883a 	add	r5,r5,r5
    91e8:	2886703a 	and	r3,r5,r2
    91ec:	21000104 	addi	r4,r4,4
    91f0:	183ffc26 	beq	r3,zero,91e4 <__alt_data_end+0xfc0091e4>
    91f4:	003ebe06 	br	8cf0 <__alt_data_end+0xfc008cf0>
    91f8:	00c05504 	movi	r3,340
    91fc:	18801236 	bltu	r3,r2,9248 <_malloc_r+0x704>
    9200:	8804d3fa 	srli	r2,r17,15
    9204:	12001e04 	addi	r8,r2,120
    9208:	11c01dc4 	addi	r7,r2,119
    920c:	4209883a 	add	r4,r8,r8
    9210:	003e6d06 	br	8bc8 <__alt_data_end+0xfc008bc8>
    9214:	00c40004 	movi	r3,4096
    9218:	003f4606 	br	8f34 <__alt_data_end+0xfc008f34>
    921c:	00800044 	movi	r2,1
    9220:	a0800115 	stw	r2,4(r20)
    9224:	003f7406 	br	8ff8 <__alt_data_end+0xfc008ff8>
    9228:	1805d0ba 	srai	r2,r3,2
    922c:	01c00044 	movi	r7,1
    9230:	30c00117 	ldw	r3,4(r6)
    9234:	388e983a 	sll	r7,r7,r2
    9238:	2805883a 	mov	r2,r5
    923c:	38c6b03a 	or	r3,r7,r3
    9240:	30c00115 	stw	r3,4(r6)
    9244:	003f9b06 	br	90b4 <__alt_data_end+0xfc0090b4>
    9248:	00c15504 	movi	r3,1364
    924c:	18801a36 	bltu	r3,r2,92b8 <_malloc_r+0x774>
    9250:	8804d4ba 	srli	r2,r17,18
    9254:	12001f44 	addi	r8,r2,125
    9258:	11c01f04 	addi	r7,r2,124
    925c:	4209883a 	add	r4,r8,r8
    9260:	003e5906 	br	8bc8 <__alt_data_end+0xfc008bc8>
    9264:	ad400404 	addi	r21,r21,16
    9268:	003f1706 	br	8ec8 <__alt_data_end+0xfc008ec8>
    926c:	00c01504 	movi	r3,84
    9270:	18802336 	bltu	r3,r2,9300 <_malloc_r+0x7bc>
    9274:	3804d33a 	srli	r2,r7,12
    9278:	11401bc4 	addi	r5,r2,111
    927c:	10c01b84 	addi	r3,r2,110
    9280:	294b883a 	add	r5,r5,r5
    9284:	003f7b06 	br	9074 <__alt_data_end+0xfc009074>
    9288:	9c000217 	ldw	r16,8(r19)
    928c:	00bfff04 	movi	r2,-4
    9290:	80c00117 	ldw	r3,4(r16)
    9294:	1886703a 	and	r3,r3,r2
    9298:	003f5306 	br	8fe8 <__alt_data_end+0xfc008fe8>
    929c:	3083ffcc 	andi	r2,r6,4095
    92a0:	103f181e 	bne	r2,zero,8f04 <__alt_data_end+0xfc008f04>
    92a4:	99000217 	ldw	r4,8(r19)
    92a8:	b545883a 	add	r2,r22,r21
    92ac:	10800054 	ori	r2,r2,1
    92b0:	20800115 	stw	r2,4(r4)
    92b4:	003f3e06 	br	8fb0 <__alt_data_end+0xfc008fb0>
    92b8:	01003f84 	movi	r4,254
    92bc:	02001fc4 	movi	r8,127
    92c0:	01c01f84 	movi	r7,126
    92c4:	003e4006 	br	8bc8 <__alt_data_end+0xfc008bc8>
    92c8:	00800074 	movhi	r2,1
    92cc:	108c5e04 	addi	r2,r2,12664
    92d0:	15000015 	stw	r20,0(r2)
    92d4:	003f1106 	br	8f1c <__alt_data_end+0xfc008f1c>
    92d8:	00800044 	movi	r2,1
    92dc:	002b883a 	mov	r21,zero
    92e0:	003f1f06 	br	8f60 <__alt_data_end+0xfc008f60>
    92e4:	81400204 	addi	r5,r16,8
    92e8:	9009883a 	mov	r4,r18
    92ec:	00083840 	call	8384 <_free_r>
    92f0:	00800074 	movhi	r2,1
    92f4:	10944304 	addi	r2,r2,20748
    92f8:	10c00017 	ldw	r3,0(r2)
    92fc:	003f2c06 	br	8fb0 <__alt_data_end+0xfc008fb0>
    9300:	00c05504 	movi	r3,340
    9304:	18800536 	bltu	r3,r2,931c <_malloc_r+0x7d8>
    9308:	3804d3fa 	srli	r2,r7,15
    930c:	11401e04 	addi	r5,r2,120
    9310:	10c01dc4 	addi	r3,r2,119
    9314:	294b883a 	add	r5,r5,r5
    9318:	003f5606 	br	9074 <__alt_data_end+0xfc009074>
    931c:	00c15504 	movi	r3,1364
    9320:	18800536 	bltu	r3,r2,9338 <_malloc_r+0x7f4>
    9324:	3804d4ba 	srli	r2,r7,18
    9328:	11401f44 	addi	r5,r2,125
    932c:	10c01f04 	addi	r3,r2,124
    9330:	294b883a 	add	r5,r5,r5
    9334:	003f4f06 	br	9074 <__alt_data_end+0xfc009074>
    9338:	01403f84 	movi	r5,254
    933c:	00c01f84 	movi	r3,126
    9340:	003f4c06 	br	9074 <__alt_data_end+0xfc009074>
    9344:	98800117 	ldw	r2,4(r19)
    9348:	003fa006 	br	91cc <__alt_data_end+0xfc0091cc>
    934c:	8808d0fa 	srli	r4,r17,3
    9350:	20800044 	addi	r2,r4,1
    9354:	1085883a 	add	r2,r2,r2
    9358:	003e9006 	br	8d9c <__alt_data_end+0xfc008d9c>

0000935c <memchr>:
    935c:	f811883a 	mov	r8,ra
    9360:	0000ac80 	call	ac8 <_mcount>
    9364:	403f883a 	mov	ra,r8
    9368:	208000cc 	andi	r2,r4,3
    936c:	280f883a 	mov	r7,r5
    9370:	10003426 	beq	r2,zero,9444 <memchr+0xe8>
    9374:	30bfffc4 	addi	r2,r6,-1
    9378:	30001a26 	beq	r6,zero,93e4 <memchr+0x88>
    937c:	20c00003 	ldbu	r3,0(r4)
    9380:	29803fcc 	andi	r6,r5,255
    9384:	30c0051e 	bne	r6,r3,939c <memchr+0x40>
    9388:	00001806 	br	93ec <memchr+0x90>
    938c:	10001526 	beq	r2,zero,93e4 <memchr+0x88>
    9390:	20c00003 	ldbu	r3,0(r4)
    9394:	10bfffc4 	addi	r2,r2,-1
    9398:	30c01426 	beq	r6,r3,93ec <memchr+0x90>
    939c:	21000044 	addi	r4,r4,1
    93a0:	20c000cc 	andi	r3,r4,3
    93a4:	183ff91e 	bne	r3,zero,938c <__alt_data_end+0xfc00938c>
    93a8:	020000c4 	movi	r8,3
    93ac:	40801136 	bltu	r8,r2,93f4 <memchr+0x98>
    93b0:	10000c26 	beq	r2,zero,93e4 <memchr+0x88>
    93b4:	20c00003 	ldbu	r3,0(r4)
    93b8:	29403fcc 	andi	r5,r5,255
    93bc:	28c00b26 	beq	r5,r3,93ec <memchr+0x90>
    93c0:	20c00044 	addi	r3,r4,1
    93c4:	39803fcc 	andi	r6,r7,255
    93c8:	2089883a 	add	r4,r4,r2
    93cc:	00000306 	br	93dc <memchr+0x80>
    93d0:	18c00044 	addi	r3,r3,1
    93d4:	197fffc3 	ldbu	r5,-1(r3)
    93d8:	31400326 	beq	r6,r5,93e8 <memchr+0x8c>
    93dc:	1805883a 	mov	r2,r3
    93e0:	20fffb1e 	bne	r4,r3,93d0 <__alt_data_end+0xfc0093d0>
    93e4:	0005883a 	mov	r2,zero
    93e8:	f800283a 	ret
    93ec:	2005883a 	mov	r2,r4
    93f0:	f800283a 	ret
    93f4:	28c03fcc 	andi	r3,r5,255
    93f8:	1812923a 	slli	r9,r3,8
    93fc:	02ffbff4 	movhi	r11,65279
    9400:	02a02074 	movhi	r10,32897
    9404:	48d2b03a 	or	r9,r9,r3
    9408:	4806943a 	slli	r3,r9,16
    940c:	5affbfc4 	addi	r11,r11,-257
    9410:	52a02004 	addi	r10,r10,-32640
    9414:	48d2b03a 	or	r9,r9,r3
    9418:	20c00017 	ldw	r3,0(r4)
    941c:	48c6f03a 	xor	r3,r9,r3
    9420:	1acd883a 	add	r6,r3,r11
    9424:	00c6303a 	nor	r3,zero,r3
    9428:	30c6703a 	and	r3,r6,r3
    942c:	1a86703a 	and	r3,r3,r10
    9430:	183fe01e 	bne	r3,zero,93b4 <__alt_data_end+0xfc0093b4>
    9434:	10bfff04 	addi	r2,r2,-4
    9438:	21000104 	addi	r4,r4,4
    943c:	40bff636 	bltu	r8,r2,9418 <__alt_data_end+0xfc009418>
    9440:	003fdb06 	br	93b0 <__alt_data_end+0xfc0093b0>
    9444:	3005883a 	mov	r2,r6
    9448:	003fd706 	br	93a8 <__alt_data_end+0xfc0093a8>

0000944c <_Balloc>:
    944c:	f811883a 	mov	r8,ra
    9450:	0000ac80 	call	ac8 <_mcount>
    9454:	403f883a 	mov	ra,r8
    9458:	defffc04 	addi	sp,sp,-16
    945c:	dfc00315 	stw	ra,12(sp)
    9460:	dc800215 	stw	r18,8(sp)
    9464:	dc400115 	stw	r17,4(sp)
    9468:	dc000015 	stw	r16,0(sp)
    946c:	20801317 	ldw	r2,76(r4)
    9470:	2023883a 	mov	r17,r4
    9474:	2821883a 	mov	r16,r5
    9478:	10000f26 	beq	r2,zero,94b8 <_Balloc+0x6c>
    947c:	8407883a 	add	r3,r16,r16
    9480:	18c7883a 	add	r3,r3,r3
    9484:	10c7883a 	add	r3,r2,r3
    9488:	18800017 	ldw	r2,0(r3)
    948c:	10001126 	beq	r2,zero,94d4 <_Balloc+0x88>
    9490:	11000017 	ldw	r4,0(r2)
    9494:	19000015 	stw	r4,0(r3)
    9498:	10000415 	stw	zero,16(r2)
    949c:	10000315 	stw	zero,12(r2)
    94a0:	dfc00317 	ldw	ra,12(sp)
    94a4:	dc800217 	ldw	r18,8(sp)
    94a8:	dc400117 	ldw	r17,4(sp)
    94ac:	dc000017 	ldw	r16,0(sp)
    94b0:	dec00404 	addi	sp,sp,16
    94b4:	f800283a 	ret
    94b8:	01800844 	movi	r6,33
    94bc:	01400104 	movi	r5,4
    94c0:	000bfac0 	call	bfac <_calloc_r>
    94c4:	88801315 	stw	r2,76(r17)
    94c8:	103fec1e 	bne	r2,zero,947c <__alt_data_end+0xfc00947c>
    94cc:	0005883a 	mov	r2,zero
    94d0:	003ff306 	br	94a0 <__alt_data_end+0xfc0094a0>
    94d4:	01400044 	movi	r5,1
    94d8:	2c24983a 	sll	r18,r5,r16
    94dc:	8809883a 	mov	r4,r17
    94e0:	91800144 	addi	r6,r18,5
    94e4:	318d883a 	add	r6,r6,r6
    94e8:	318d883a 	add	r6,r6,r6
    94ec:	000bfac0 	call	bfac <_calloc_r>
    94f0:	103ff626 	beq	r2,zero,94cc <__alt_data_end+0xfc0094cc>
    94f4:	14000115 	stw	r16,4(r2)
    94f8:	14800215 	stw	r18,8(r2)
    94fc:	003fe606 	br	9498 <__alt_data_end+0xfc009498>

00009500 <_Bfree>:
    9500:	f811883a 	mov	r8,ra
    9504:	0000ac80 	call	ac8 <_mcount>
    9508:	403f883a 	mov	ra,r8
    950c:	28000826 	beq	r5,zero,9530 <_Bfree+0x30>
    9510:	28c00117 	ldw	r3,4(r5)
    9514:	20801317 	ldw	r2,76(r4)
    9518:	18c7883a 	add	r3,r3,r3
    951c:	18c7883a 	add	r3,r3,r3
    9520:	10c5883a 	add	r2,r2,r3
    9524:	10c00017 	ldw	r3,0(r2)
    9528:	28c00015 	stw	r3,0(r5)
    952c:	11400015 	stw	r5,0(r2)
    9530:	f800283a 	ret

00009534 <__multadd>:
    9534:	f811883a 	mov	r8,ra
    9538:	0000ac80 	call	ac8 <_mcount>
    953c:	403f883a 	mov	ra,r8
    9540:	defffa04 	addi	sp,sp,-24
    9544:	dfc00515 	stw	ra,20(sp)
    9548:	dcc00415 	stw	r19,16(sp)
    954c:	dc800315 	stw	r18,12(sp)
    9550:	dc400215 	stw	r17,8(sp)
    9554:	dc000115 	stw	r16,4(sp)
    9558:	0011883a 	mov	r8,zero
    955c:	2823883a 	mov	r17,r5
    9560:	2c000417 	ldw	r16,16(r5)
    9564:	2025883a 	mov	r18,r4
    9568:	29400504 	addi	r5,r5,20
    956c:	28c00017 	ldw	r3,0(r5)
    9570:	29400104 	addi	r5,r5,4
    9574:	42000044 	addi	r8,r8,1
    9578:	18bfffcc 	andi	r2,r3,65535
    957c:	1185383a 	mul	r2,r2,r6
    9580:	1806d43a 	srli	r3,r3,16
    9584:	11cf883a 	add	r7,r2,r7
    9588:	3808d43a 	srli	r4,r7,16
    958c:	1987383a 	mul	r3,r3,r6
    9590:	38bfffcc 	andi	r2,r7,65535
    9594:	1907883a 	add	r3,r3,r4
    9598:	1808943a 	slli	r4,r3,16
    959c:	180ed43a 	srli	r7,r3,16
    95a0:	2085883a 	add	r2,r4,r2
    95a4:	28bfff15 	stw	r2,-4(r5)
    95a8:	443ff016 	blt	r8,r16,956c <__alt_data_end+0xfc00956c>
    95ac:	38000926 	beq	r7,zero,95d4 <__multadd+0xa0>
    95b0:	88800217 	ldw	r2,8(r17)
    95b4:	80800f0e 	bge	r16,r2,95f4 <__multadd+0xc0>
    95b8:	80800144 	addi	r2,r16,5
    95bc:	1085883a 	add	r2,r2,r2
    95c0:	1085883a 	add	r2,r2,r2
    95c4:	8885883a 	add	r2,r17,r2
    95c8:	11c00015 	stw	r7,0(r2)
    95cc:	84000044 	addi	r16,r16,1
    95d0:	8c000415 	stw	r16,16(r17)
    95d4:	8805883a 	mov	r2,r17
    95d8:	dfc00517 	ldw	ra,20(sp)
    95dc:	dcc00417 	ldw	r19,16(sp)
    95e0:	dc800317 	ldw	r18,12(sp)
    95e4:	dc400217 	ldw	r17,8(sp)
    95e8:	dc000117 	ldw	r16,4(sp)
    95ec:	dec00604 	addi	sp,sp,24
    95f0:	f800283a 	ret
    95f4:	89400117 	ldw	r5,4(r17)
    95f8:	9009883a 	mov	r4,r18
    95fc:	d9c00015 	stw	r7,0(sp)
    9600:	29400044 	addi	r5,r5,1
    9604:	000944c0 	call	944c <_Balloc>
    9608:	89800417 	ldw	r6,16(r17)
    960c:	89400304 	addi	r5,r17,12
    9610:	11000304 	addi	r4,r2,12
    9614:	31800084 	addi	r6,r6,2
    9618:	318d883a 	add	r6,r6,r6
    961c:	318d883a 	add	r6,r6,r6
    9620:	1027883a 	mov	r19,r2
    9624:	00035000 	call	3500 <memcpy>
    9628:	d9c00017 	ldw	r7,0(sp)
    962c:	88000a26 	beq	r17,zero,9658 <__multadd+0x124>
    9630:	88c00117 	ldw	r3,4(r17)
    9634:	90801317 	ldw	r2,76(r18)
    9638:	18c7883a 	add	r3,r3,r3
    963c:	18c7883a 	add	r3,r3,r3
    9640:	10c5883a 	add	r2,r2,r3
    9644:	10c00017 	ldw	r3,0(r2)
    9648:	88c00015 	stw	r3,0(r17)
    964c:	14400015 	stw	r17,0(r2)
    9650:	9823883a 	mov	r17,r19
    9654:	003fd806 	br	95b8 <__alt_data_end+0xfc0095b8>
    9658:	9823883a 	mov	r17,r19
    965c:	003fd606 	br	95b8 <__alt_data_end+0xfc0095b8>

00009660 <__s2b>:
    9660:	f811883a 	mov	r8,ra
    9664:	0000ac80 	call	ac8 <_mcount>
    9668:	403f883a 	mov	ra,r8
    966c:	defff904 	addi	sp,sp,-28
    9670:	dfc00615 	stw	ra,24(sp)
    9674:	dd400515 	stw	r21,20(sp)
    9678:	dd000415 	stw	r20,16(sp)
    967c:	dcc00315 	stw	r19,12(sp)
    9680:	dc800215 	stw	r18,8(sp)
    9684:	dc400115 	stw	r17,4(sp)
    9688:	dc000015 	stw	r16,0(sp)
    968c:	2023883a 	mov	r17,r4
    9690:	2821883a 	mov	r16,r5
    9694:	39000204 	addi	r4,r7,8
    9698:	01400244 	movi	r5,9
    969c:	3825883a 	mov	r18,r7
    96a0:	3027883a 	mov	r19,r6
    96a4:	000de5c0 	call	de5c <__divsi3>
    96a8:	00c00044 	movi	r3,1
    96ac:	000b883a 	mov	r5,zero
    96b0:	1880030e 	bge	r3,r2,96c0 <__s2b+0x60>
    96b4:	18c7883a 	add	r3,r3,r3
    96b8:	29400044 	addi	r5,r5,1
    96bc:	18bffd16 	blt	r3,r2,96b4 <__alt_data_end+0xfc0096b4>
    96c0:	8809883a 	mov	r4,r17
    96c4:	000944c0 	call	944c <_Balloc>
    96c8:	d8c00717 	ldw	r3,28(sp)
    96cc:	10c00515 	stw	r3,20(r2)
    96d0:	00c00044 	movi	r3,1
    96d4:	10c00415 	stw	r3,16(r2)
    96d8:	00c00244 	movi	r3,9
    96dc:	1cc0210e 	bge	r3,r19,9764 <__s2b+0x104>
    96e0:	80eb883a 	add	r21,r16,r3
    96e4:	a829883a 	mov	r20,r21
    96e8:	84e1883a 	add	r16,r16,r19
    96ec:	a1c00007 	ldb	r7,0(r20)
    96f0:	01800284 	movi	r6,10
    96f4:	a5000044 	addi	r20,r20,1
    96f8:	100b883a 	mov	r5,r2
    96fc:	39fff404 	addi	r7,r7,-48
    9700:	8809883a 	mov	r4,r17
    9704:	00095340 	call	9534 <__multadd>
    9708:	a43ff81e 	bne	r20,r16,96ec <__alt_data_end+0xfc0096ec>
    970c:	ace1883a 	add	r16,r21,r19
    9710:	843ffe04 	addi	r16,r16,-8
    9714:	9c800a0e 	bge	r19,r18,9740 <__s2b+0xe0>
    9718:	94e5c83a 	sub	r18,r18,r19
    971c:	84a5883a 	add	r18,r16,r18
    9720:	81c00007 	ldb	r7,0(r16)
    9724:	01800284 	movi	r6,10
    9728:	84000044 	addi	r16,r16,1
    972c:	100b883a 	mov	r5,r2
    9730:	39fff404 	addi	r7,r7,-48
    9734:	8809883a 	mov	r4,r17
    9738:	00095340 	call	9534 <__multadd>
    973c:	84bff81e 	bne	r16,r18,9720 <__alt_data_end+0xfc009720>
    9740:	dfc00617 	ldw	ra,24(sp)
    9744:	dd400517 	ldw	r21,20(sp)
    9748:	dd000417 	ldw	r20,16(sp)
    974c:	dcc00317 	ldw	r19,12(sp)
    9750:	dc800217 	ldw	r18,8(sp)
    9754:	dc400117 	ldw	r17,4(sp)
    9758:	dc000017 	ldw	r16,0(sp)
    975c:	dec00704 	addi	sp,sp,28
    9760:	f800283a 	ret
    9764:	84000284 	addi	r16,r16,10
    9768:	1827883a 	mov	r19,r3
    976c:	003fe906 	br	9714 <__alt_data_end+0xfc009714>

00009770 <__hi0bits>:
    9770:	f811883a 	mov	r8,ra
    9774:	0000ac80 	call	ac8 <_mcount>
    9778:	403f883a 	mov	ra,r8
    977c:	20bfffec 	andhi	r2,r4,65535
    9780:	1000141e 	bne	r2,zero,97d4 <__hi0bits+0x64>
    9784:	2008943a 	slli	r4,r4,16
    9788:	00800404 	movi	r2,16
    978c:	20ffc02c 	andhi	r3,r4,65280
    9790:	1800021e 	bne	r3,zero,979c <__hi0bits+0x2c>
    9794:	2008923a 	slli	r4,r4,8
    9798:	10800204 	addi	r2,r2,8
    979c:	20fc002c 	andhi	r3,r4,61440
    97a0:	1800021e 	bne	r3,zero,97ac <__hi0bits+0x3c>
    97a4:	2008913a 	slli	r4,r4,4
    97a8:	10800104 	addi	r2,r2,4
    97ac:	20f0002c 	andhi	r3,r4,49152
    97b0:	1800031e 	bne	r3,zero,97c0 <__hi0bits+0x50>
    97b4:	2109883a 	add	r4,r4,r4
    97b8:	10800084 	addi	r2,r2,2
    97bc:	2109883a 	add	r4,r4,r4
    97c0:	20000316 	blt	r4,zero,97d0 <__hi0bits+0x60>
    97c4:	2110002c 	andhi	r4,r4,16384
    97c8:	2000041e 	bne	r4,zero,97dc <__hi0bits+0x6c>
    97cc:	00800804 	movi	r2,32
    97d0:	f800283a 	ret
    97d4:	0005883a 	mov	r2,zero
    97d8:	003fec06 	br	978c <__alt_data_end+0xfc00978c>
    97dc:	10800044 	addi	r2,r2,1
    97e0:	f800283a 	ret

000097e4 <__lo0bits>:
    97e4:	f811883a 	mov	r8,ra
    97e8:	0000ac80 	call	ac8 <_mcount>
    97ec:	403f883a 	mov	ra,r8
    97f0:	20c00017 	ldw	r3,0(r4)
    97f4:	188001cc 	andi	r2,r3,7
    97f8:	10000826 	beq	r2,zero,981c <__lo0bits+0x38>
    97fc:	1880004c 	andi	r2,r3,1
    9800:	1000211e 	bne	r2,zero,9888 <__lo0bits+0xa4>
    9804:	1880008c 	andi	r2,r3,2
    9808:	1000211e 	bne	r2,zero,9890 <__lo0bits+0xac>
    980c:	1806d0ba 	srli	r3,r3,2
    9810:	00800084 	movi	r2,2
    9814:	20c00015 	stw	r3,0(r4)
    9818:	f800283a 	ret
    981c:	18bfffcc 	andi	r2,r3,65535
    9820:	10001326 	beq	r2,zero,9870 <__lo0bits+0x8c>
    9824:	0005883a 	mov	r2,zero
    9828:	19403fcc 	andi	r5,r3,255
    982c:	2800021e 	bne	r5,zero,9838 <__lo0bits+0x54>
    9830:	1806d23a 	srli	r3,r3,8
    9834:	10800204 	addi	r2,r2,8
    9838:	194003cc 	andi	r5,r3,15
    983c:	2800021e 	bne	r5,zero,9848 <__lo0bits+0x64>
    9840:	1806d13a 	srli	r3,r3,4
    9844:	10800104 	addi	r2,r2,4
    9848:	194000cc 	andi	r5,r3,3
    984c:	2800021e 	bne	r5,zero,9858 <__lo0bits+0x74>
    9850:	1806d0ba 	srli	r3,r3,2
    9854:	10800084 	addi	r2,r2,2
    9858:	1940004c 	andi	r5,r3,1
    985c:	2800081e 	bne	r5,zero,9880 <__lo0bits+0x9c>
    9860:	1806d07a 	srli	r3,r3,1
    9864:	1800051e 	bne	r3,zero,987c <__lo0bits+0x98>
    9868:	00800804 	movi	r2,32
    986c:	f800283a 	ret
    9870:	1806d43a 	srli	r3,r3,16
    9874:	00800404 	movi	r2,16
    9878:	003feb06 	br	9828 <__alt_data_end+0xfc009828>
    987c:	10800044 	addi	r2,r2,1
    9880:	20c00015 	stw	r3,0(r4)
    9884:	f800283a 	ret
    9888:	0005883a 	mov	r2,zero
    988c:	f800283a 	ret
    9890:	1806d07a 	srli	r3,r3,1
    9894:	00800044 	movi	r2,1
    9898:	20c00015 	stw	r3,0(r4)
    989c:	f800283a 	ret

000098a0 <__i2b>:
    98a0:	f811883a 	mov	r8,ra
    98a4:	0000ac80 	call	ac8 <_mcount>
    98a8:	403f883a 	mov	ra,r8
    98ac:	defffd04 	addi	sp,sp,-12
    98b0:	dfc00215 	stw	ra,8(sp)
    98b4:	dc400115 	stw	r17,4(sp)
    98b8:	dc000015 	stw	r16,0(sp)
    98bc:	04000044 	movi	r16,1
    98c0:	2823883a 	mov	r17,r5
    98c4:	800b883a 	mov	r5,r16
    98c8:	000944c0 	call	944c <_Balloc>
    98cc:	14400515 	stw	r17,20(r2)
    98d0:	14000415 	stw	r16,16(r2)
    98d4:	dfc00217 	ldw	ra,8(sp)
    98d8:	dc400117 	ldw	r17,4(sp)
    98dc:	dc000017 	ldw	r16,0(sp)
    98e0:	dec00304 	addi	sp,sp,12
    98e4:	f800283a 	ret

000098e8 <__multiply>:
    98e8:	f811883a 	mov	r8,ra
    98ec:	0000ac80 	call	ac8 <_mcount>
    98f0:	403f883a 	mov	ra,r8
    98f4:	defffa04 	addi	sp,sp,-24
    98f8:	dfc00515 	stw	ra,20(sp)
    98fc:	dd000415 	stw	r20,16(sp)
    9900:	dcc00315 	stw	r19,12(sp)
    9904:	dc800215 	stw	r18,8(sp)
    9908:	dc400115 	stw	r17,4(sp)
    990c:	dc000015 	stw	r16,0(sp)
    9910:	2c800417 	ldw	r18,16(r5)
    9914:	34c00417 	ldw	r19,16(r6)
    9918:	2829883a 	mov	r20,r5
    991c:	3023883a 	mov	r17,r6
    9920:	94c0050e 	bge	r18,r19,9938 <__multiply+0x50>
    9924:	9007883a 	mov	r3,r18
    9928:	3029883a 	mov	r20,r6
    992c:	9825883a 	mov	r18,r19
    9930:	2823883a 	mov	r17,r5
    9934:	1827883a 	mov	r19,r3
    9938:	a0800217 	ldw	r2,8(r20)
    993c:	94e1883a 	add	r16,r18,r19
    9940:	a1400117 	ldw	r5,4(r20)
    9944:	1400010e 	bge	r2,r16,994c <__multiply+0x64>
    9948:	29400044 	addi	r5,r5,1
    994c:	000944c0 	call	944c <_Balloc>
    9950:	8415883a 	add	r10,r16,r16
    9954:	12c00504 	addi	r11,r2,20
    9958:	5295883a 	add	r10,r10,r10
    995c:	5a95883a 	add	r10,r11,r10
    9960:	5807883a 	mov	r3,r11
    9964:	5a80032e 	bgeu	r11,r10,9974 <__multiply+0x8c>
    9968:	18000015 	stw	zero,0(r3)
    996c:	18c00104 	addi	r3,r3,4
    9970:	1abffd36 	bltu	r3,r10,9968 <__alt_data_end+0xfc009968>
    9974:	9ce7883a 	add	r19,r19,r19
    9978:	94a5883a 	add	r18,r18,r18
    997c:	89800504 	addi	r6,r17,20
    9980:	9ce7883a 	add	r19,r19,r19
    9984:	a3400504 	addi	r13,r20,20
    9988:	94a5883a 	add	r18,r18,r18
    998c:	34d9883a 	add	r12,r6,r19
    9990:	6c93883a 	add	r9,r13,r18
    9994:	3300422e 	bgeu	r6,r12,9aa0 <__multiply+0x1b8>
    9998:	37c00017 	ldw	ra,0(r6)
    999c:	fbffffcc 	andi	r15,ra,65535
    99a0:	78001b26 	beq	r15,zero,9a10 <__multiply+0x128>
    99a4:	5811883a 	mov	r8,r11
    99a8:	681d883a 	mov	r14,r13
    99ac:	000f883a 	mov	r7,zero
    99b0:	71000017 	ldw	r4,0(r14)
    99b4:	40c00017 	ldw	r3,0(r8)
    99b8:	73800104 	addi	r14,r14,4
    99bc:	217fffcc 	andi	r5,r4,65535
    99c0:	2bcb383a 	mul	r5,r5,r15
    99c4:	2008d43a 	srli	r4,r4,16
    99c8:	1c7fffcc 	andi	r17,r3,65535
    99cc:	2c4b883a 	add	r5,r5,r17
    99d0:	29cb883a 	add	r5,r5,r7
    99d4:	23c9383a 	mul	r4,r4,r15
    99d8:	1806d43a 	srli	r3,r3,16
    99dc:	280ed43a 	srli	r7,r5,16
    99e0:	297fffcc 	andi	r5,r5,65535
    99e4:	20c7883a 	add	r3,r4,r3
    99e8:	19c7883a 	add	r3,r3,r7
    99ec:	1808943a 	slli	r4,r3,16
    99f0:	4023883a 	mov	r17,r8
    99f4:	180ed43a 	srli	r7,r3,16
    99f8:	214ab03a 	or	r5,r4,r5
    99fc:	41400015 	stw	r5,0(r8)
    9a00:	42000104 	addi	r8,r8,4
    9a04:	727fea36 	bltu	r14,r9,99b0 <__alt_data_end+0xfc0099b0>
    9a08:	89c00115 	stw	r7,4(r17)
    9a0c:	37c00017 	ldw	ra,0(r6)
    9a10:	f83ed43a 	srli	ra,ra,16
    9a14:	f8001f26 	beq	ra,zero,9a94 <__multiply+0x1ac>
    9a18:	58c00017 	ldw	r3,0(r11)
    9a1c:	681d883a 	mov	r14,r13
    9a20:	581f883a 	mov	r15,r11
    9a24:	1811883a 	mov	r8,r3
    9a28:	5825883a 	mov	r18,r11
    9a2c:	000f883a 	mov	r7,zero
    9a30:	00000106 	br	9a38 <__multiply+0x150>
    9a34:	8825883a 	mov	r18,r17
    9a38:	7140000b 	ldhu	r5,0(r14)
    9a3c:	4010d43a 	srli	r8,r8,16
    9a40:	193fffcc 	andi	r4,r3,65535
    9a44:	2fcb383a 	mul	r5,r5,ra
    9a48:	7bc00104 	addi	r15,r15,4
    9a4c:	73800104 	addi	r14,r14,4
    9a50:	2a0b883a 	add	r5,r5,r8
    9a54:	29cb883a 	add	r5,r5,r7
    9a58:	2806943a 	slli	r3,r5,16
    9a5c:	94400104 	addi	r17,r18,4
    9a60:	280ad43a 	srli	r5,r5,16
    9a64:	1908b03a 	or	r4,r3,r4
    9a68:	793fff15 	stw	r4,-4(r15)
    9a6c:	70ffff17 	ldw	r3,-4(r14)
    9a70:	8a000017 	ldw	r8,0(r17)
    9a74:	1806d43a 	srli	r3,r3,16
    9a78:	413fffcc 	andi	r4,r8,65535
    9a7c:	1fc7383a 	mul	r3,r3,ra
    9a80:	1907883a 	add	r3,r3,r4
    9a84:	1947883a 	add	r3,r3,r5
    9a88:	180ed43a 	srli	r7,r3,16
    9a8c:	727fe936 	bltu	r14,r9,9a34 <__alt_data_end+0xfc009a34>
    9a90:	90c00115 	stw	r3,4(r18)
    9a94:	31800104 	addi	r6,r6,4
    9a98:	5ac00104 	addi	r11,r11,4
    9a9c:	333fbe36 	bltu	r6,r12,9998 <__alt_data_end+0xfc009998>
    9aa0:	0400090e 	bge	zero,r16,9ac8 <__multiply+0x1e0>
    9aa4:	50ffff17 	ldw	r3,-4(r10)
    9aa8:	52bfff04 	addi	r10,r10,-4
    9aac:	18000326 	beq	r3,zero,9abc <__multiply+0x1d4>
    9ab0:	00000506 	br	9ac8 <__multiply+0x1e0>
    9ab4:	50c00017 	ldw	r3,0(r10)
    9ab8:	1800031e 	bne	r3,zero,9ac8 <__multiply+0x1e0>
    9abc:	843fffc4 	addi	r16,r16,-1
    9ac0:	52bfff04 	addi	r10,r10,-4
    9ac4:	803ffb1e 	bne	r16,zero,9ab4 <__alt_data_end+0xfc009ab4>
    9ac8:	14000415 	stw	r16,16(r2)
    9acc:	dfc00517 	ldw	ra,20(sp)
    9ad0:	dd000417 	ldw	r20,16(sp)
    9ad4:	dcc00317 	ldw	r19,12(sp)
    9ad8:	dc800217 	ldw	r18,8(sp)
    9adc:	dc400117 	ldw	r17,4(sp)
    9ae0:	dc000017 	ldw	r16,0(sp)
    9ae4:	dec00604 	addi	sp,sp,24
    9ae8:	f800283a 	ret

00009aec <__pow5mult>:
    9aec:	f811883a 	mov	r8,ra
    9af0:	0000ac80 	call	ac8 <_mcount>
    9af4:	403f883a 	mov	ra,r8
    9af8:	defffa04 	addi	sp,sp,-24
    9afc:	dfc00515 	stw	ra,20(sp)
    9b00:	dd000415 	stw	r20,16(sp)
    9b04:	dcc00315 	stw	r19,12(sp)
    9b08:	dc800215 	stw	r18,8(sp)
    9b0c:	dc400115 	stw	r17,4(sp)
    9b10:	dc000015 	stw	r16,0(sp)
    9b14:	308000cc 	andi	r2,r6,3
    9b18:	3021883a 	mov	r16,r6
    9b1c:	2027883a 	mov	r19,r4
    9b20:	10002f1e 	bne	r2,zero,9be0 <__pow5mult+0xf4>
    9b24:	2825883a 	mov	r18,r5
    9b28:	8021d0ba 	srai	r16,r16,2
    9b2c:	80001a26 	beq	r16,zero,9b98 <__pow5mult+0xac>
    9b30:	9c401217 	ldw	r17,72(r19)
    9b34:	8800061e 	bne	r17,zero,9b50 <__pow5mult+0x64>
    9b38:	00003406 	br	9c0c <__pow5mult+0x120>
    9b3c:	8021d07a 	srai	r16,r16,1
    9b40:	80001526 	beq	r16,zero,9b98 <__pow5mult+0xac>
    9b44:	88800017 	ldw	r2,0(r17)
    9b48:	10001c26 	beq	r2,zero,9bbc <__pow5mult+0xd0>
    9b4c:	1023883a 	mov	r17,r2
    9b50:	8080004c 	andi	r2,r16,1
    9b54:	103ff926 	beq	r2,zero,9b3c <__alt_data_end+0xfc009b3c>
    9b58:	880d883a 	mov	r6,r17
    9b5c:	900b883a 	mov	r5,r18
    9b60:	9809883a 	mov	r4,r19
    9b64:	00098e80 	call	98e8 <__multiply>
    9b68:	90001b26 	beq	r18,zero,9bd8 <__pow5mult+0xec>
    9b6c:	91000117 	ldw	r4,4(r18)
    9b70:	98c01317 	ldw	r3,76(r19)
    9b74:	8021d07a 	srai	r16,r16,1
    9b78:	2109883a 	add	r4,r4,r4
    9b7c:	2109883a 	add	r4,r4,r4
    9b80:	1907883a 	add	r3,r3,r4
    9b84:	19000017 	ldw	r4,0(r3)
    9b88:	91000015 	stw	r4,0(r18)
    9b8c:	1c800015 	stw	r18,0(r3)
    9b90:	1025883a 	mov	r18,r2
    9b94:	803feb1e 	bne	r16,zero,9b44 <__alt_data_end+0xfc009b44>
    9b98:	9005883a 	mov	r2,r18
    9b9c:	dfc00517 	ldw	ra,20(sp)
    9ba0:	dd000417 	ldw	r20,16(sp)
    9ba4:	dcc00317 	ldw	r19,12(sp)
    9ba8:	dc800217 	ldw	r18,8(sp)
    9bac:	dc400117 	ldw	r17,4(sp)
    9bb0:	dc000017 	ldw	r16,0(sp)
    9bb4:	dec00604 	addi	sp,sp,24
    9bb8:	f800283a 	ret
    9bbc:	880d883a 	mov	r6,r17
    9bc0:	880b883a 	mov	r5,r17
    9bc4:	9809883a 	mov	r4,r19
    9bc8:	00098e80 	call	98e8 <__multiply>
    9bcc:	88800015 	stw	r2,0(r17)
    9bd0:	10000015 	stw	zero,0(r2)
    9bd4:	003fdd06 	br	9b4c <__alt_data_end+0xfc009b4c>
    9bd8:	1025883a 	mov	r18,r2
    9bdc:	003fd706 	br	9b3c <__alt_data_end+0xfc009b3c>
    9be0:	10bfffc4 	addi	r2,r2,-1
    9be4:	1085883a 	add	r2,r2,r2
    9be8:	00c00074 	movhi	r3,1
    9bec:	18c40704 	addi	r3,r3,4124
    9bf0:	1085883a 	add	r2,r2,r2
    9bf4:	1885883a 	add	r2,r3,r2
    9bf8:	11800017 	ldw	r6,0(r2)
    9bfc:	000f883a 	mov	r7,zero
    9c00:	00095340 	call	9534 <__multadd>
    9c04:	1025883a 	mov	r18,r2
    9c08:	003fc706 	br	9b28 <__alt_data_end+0xfc009b28>
    9c0c:	05000044 	movi	r20,1
    9c10:	a00b883a 	mov	r5,r20
    9c14:	9809883a 	mov	r4,r19
    9c18:	000944c0 	call	944c <_Balloc>
    9c1c:	1023883a 	mov	r17,r2
    9c20:	00809c44 	movi	r2,625
    9c24:	88800515 	stw	r2,20(r17)
    9c28:	8d000415 	stw	r20,16(r17)
    9c2c:	9c401215 	stw	r17,72(r19)
    9c30:	88000015 	stw	zero,0(r17)
    9c34:	003fc606 	br	9b50 <__alt_data_end+0xfc009b50>

00009c38 <__lshift>:
    9c38:	f811883a 	mov	r8,ra
    9c3c:	0000ac80 	call	ac8 <_mcount>
    9c40:	403f883a 	mov	ra,r8
    9c44:	defff904 	addi	sp,sp,-28
    9c48:	dfc00615 	stw	ra,24(sp)
    9c4c:	dd400515 	stw	r21,20(sp)
    9c50:	dd000415 	stw	r20,16(sp)
    9c54:	dcc00315 	stw	r19,12(sp)
    9c58:	dc800215 	stw	r18,8(sp)
    9c5c:	dc400115 	stw	r17,4(sp)
    9c60:	dc000015 	stw	r16,0(sp)
    9c64:	2cc00417 	ldw	r19,16(r5)
    9c68:	302bd17a 	srai	r21,r6,5
    9c6c:	28800217 	ldw	r2,8(r5)
    9c70:	2823883a 	mov	r17,r5
    9c74:	ace7883a 	add	r19,r21,r19
    9c78:	9c000044 	addi	r16,r19,1
    9c7c:	3029883a 	mov	r20,r6
    9c80:	2025883a 	mov	r18,r4
    9c84:	29400117 	ldw	r5,4(r5)
    9c88:	1400030e 	bge	r2,r16,9c98 <__lshift+0x60>
    9c8c:	1085883a 	add	r2,r2,r2
    9c90:	29400044 	addi	r5,r5,1
    9c94:	143ffd16 	blt	r2,r16,9c8c <__alt_data_end+0xfc009c8c>
    9c98:	9009883a 	mov	r4,r18
    9c9c:	000944c0 	call	944c <_Balloc>
    9ca0:	10c00504 	addi	r3,r2,20
    9ca4:	0540070e 	bge	zero,r21,9cc4 <__lshift+0x8c>
    9ca8:	ad6b883a 	add	r21,r21,r21
    9cac:	ad6b883a 	add	r21,r21,r21
    9cb0:	1809883a 	mov	r4,r3
    9cb4:	1d47883a 	add	r3,r3,r21
    9cb8:	20000015 	stw	zero,0(r4)
    9cbc:	21000104 	addi	r4,r4,4
    9cc0:	193ffd1e 	bne	r3,r4,9cb8 <__alt_data_end+0xfc009cb8>
    9cc4:	8a000417 	ldw	r8,16(r17)
    9cc8:	89000504 	addi	r4,r17,20
    9ccc:	a18007cc 	andi	r6,r20,31
    9cd0:	4211883a 	add	r8,r8,r8
    9cd4:	4211883a 	add	r8,r8,r8
    9cd8:	2211883a 	add	r8,r4,r8
    9cdc:	30002326 	beq	r6,zero,9d6c <__lshift+0x134>
    9ce0:	02400804 	movi	r9,32
    9ce4:	4993c83a 	sub	r9,r9,r6
    9ce8:	000b883a 	mov	r5,zero
    9cec:	21c00017 	ldw	r7,0(r4)
    9cf0:	1815883a 	mov	r10,r3
    9cf4:	18c00104 	addi	r3,r3,4
    9cf8:	398e983a 	sll	r7,r7,r6
    9cfc:	21000104 	addi	r4,r4,4
    9d00:	394ab03a 	or	r5,r7,r5
    9d04:	197fff15 	stw	r5,-4(r3)
    9d08:	217fff17 	ldw	r5,-4(r4)
    9d0c:	2a4ad83a 	srl	r5,r5,r9
    9d10:	223ff636 	bltu	r4,r8,9cec <__alt_data_end+0xfc009cec>
    9d14:	51400115 	stw	r5,4(r10)
    9d18:	28001a1e 	bne	r5,zero,9d84 <__lshift+0x14c>
    9d1c:	843fffc4 	addi	r16,r16,-1
    9d20:	14000415 	stw	r16,16(r2)
    9d24:	88000826 	beq	r17,zero,9d48 <__lshift+0x110>
    9d28:	89000117 	ldw	r4,4(r17)
    9d2c:	90c01317 	ldw	r3,76(r18)
    9d30:	2109883a 	add	r4,r4,r4
    9d34:	2109883a 	add	r4,r4,r4
    9d38:	1907883a 	add	r3,r3,r4
    9d3c:	19000017 	ldw	r4,0(r3)
    9d40:	89000015 	stw	r4,0(r17)
    9d44:	1c400015 	stw	r17,0(r3)
    9d48:	dfc00617 	ldw	ra,24(sp)
    9d4c:	dd400517 	ldw	r21,20(sp)
    9d50:	dd000417 	ldw	r20,16(sp)
    9d54:	dcc00317 	ldw	r19,12(sp)
    9d58:	dc800217 	ldw	r18,8(sp)
    9d5c:	dc400117 	ldw	r17,4(sp)
    9d60:	dc000017 	ldw	r16,0(sp)
    9d64:	dec00704 	addi	sp,sp,28
    9d68:	f800283a 	ret
    9d6c:	21400017 	ldw	r5,0(r4)
    9d70:	18c00104 	addi	r3,r3,4
    9d74:	21000104 	addi	r4,r4,4
    9d78:	197fff15 	stw	r5,-4(r3)
    9d7c:	223ffb36 	bltu	r4,r8,9d6c <__alt_data_end+0xfc009d6c>
    9d80:	003fe606 	br	9d1c <__alt_data_end+0xfc009d1c>
    9d84:	9c000084 	addi	r16,r19,2
    9d88:	003fe406 	br	9d1c <__alt_data_end+0xfc009d1c>

00009d8c <__mcmp>:
    9d8c:	f811883a 	mov	r8,ra
    9d90:	0000ac80 	call	ac8 <_mcount>
    9d94:	403f883a 	mov	ra,r8
    9d98:	20800417 	ldw	r2,16(r4)
    9d9c:	28c00417 	ldw	r3,16(r5)
    9da0:	10c5c83a 	sub	r2,r2,r3
    9da4:	10000f1e 	bne	r2,zero,9de4 <__mcmp+0x58>
    9da8:	18c7883a 	add	r3,r3,r3
    9dac:	18c7883a 	add	r3,r3,r3
    9db0:	21000504 	addi	r4,r4,20
    9db4:	29400504 	addi	r5,r5,20
    9db8:	20c5883a 	add	r2,r4,r3
    9dbc:	28cb883a 	add	r5,r5,r3
    9dc0:	00000106 	br	9dc8 <__mcmp+0x3c>
    9dc4:	2080082e 	bgeu	r4,r2,9de8 <__mcmp+0x5c>
    9dc8:	10bfff04 	addi	r2,r2,-4
    9dcc:	297fff04 	addi	r5,r5,-4
    9dd0:	11800017 	ldw	r6,0(r2)
    9dd4:	28c00017 	ldw	r3,0(r5)
    9dd8:	30fffa26 	beq	r6,r3,9dc4 <__alt_data_end+0xfc009dc4>
    9ddc:	30c00436 	bltu	r6,r3,9df0 <__mcmp+0x64>
    9de0:	00800044 	movi	r2,1
    9de4:	f800283a 	ret
    9de8:	0005883a 	mov	r2,zero
    9dec:	f800283a 	ret
    9df0:	00bfffc4 	movi	r2,-1
    9df4:	003ffb06 	br	9de4 <__alt_data_end+0xfc009de4>

00009df8 <__mdiff>:
    9df8:	f811883a 	mov	r8,ra
    9dfc:	0000ac80 	call	ac8 <_mcount>
    9e00:	403f883a 	mov	ra,r8
    9e04:	defffa04 	addi	sp,sp,-24
    9e08:	dfc00515 	stw	ra,20(sp)
    9e0c:	dd000415 	stw	r20,16(sp)
    9e10:	dcc00315 	stw	r19,12(sp)
    9e14:	dc800215 	stw	r18,8(sp)
    9e18:	dc400115 	stw	r17,4(sp)
    9e1c:	dc000015 	stw	r16,0(sp)
    9e20:	28c00417 	ldw	r3,16(r5)
    9e24:	30800417 	ldw	r2,16(r6)
    9e28:	2825883a 	mov	r18,r5
    9e2c:	3027883a 	mov	r19,r6
    9e30:	1887c83a 	sub	r3,r3,r2
    9e34:	1800141e 	bne	r3,zero,9e88 <__mdiff+0x90>
    9e38:	1085883a 	add	r2,r2,r2
    9e3c:	1085883a 	add	r2,r2,r2
    9e40:	2a000504 	addi	r8,r5,20
    9e44:	34000504 	addi	r16,r6,20
    9e48:	4087883a 	add	r3,r8,r2
    9e4c:	8085883a 	add	r2,r16,r2
    9e50:	00000106 	br	9e58 <__mdiff+0x60>
    9e54:	40c0592e 	bgeu	r8,r3,9fbc <__mdiff+0x1c4>
    9e58:	18ffff04 	addi	r3,r3,-4
    9e5c:	10bfff04 	addi	r2,r2,-4
    9e60:	19c00017 	ldw	r7,0(r3)
    9e64:	11400017 	ldw	r5,0(r2)
    9e68:	397ffa26 	beq	r7,r5,9e54 <__alt_data_end+0xfc009e54>
    9e6c:	3940592e 	bgeu	r7,r5,9fd4 <__mdiff+0x1dc>
    9e70:	9005883a 	mov	r2,r18
    9e74:	4023883a 	mov	r17,r8
    9e78:	9825883a 	mov	r18,r19
    9e7c:	05000044 	movi	r20,1
    9e80:	1027883a 	mov	r19,r2
    9e84:	00000406 	br	9e98 <__mdiff+0xa0>
    9e88:	18005616 	blt	r3,zero,9fe4 <__mdiff+0x1ec>
    9e8c:	34400504 	addi	r17,r6,20
    9e90:	2c000504 	addi	r16,r5,20
    9e94:	0029883a 	mov	r20,zero
    9e98:	91400117 	ldw	r5,4(r18)
    9e9c:	000944c0 	call	944c <_Balloc>
    9ea0:	92400417 	ldw	r9,16(r18)
    9ea4:	9b000417 	ldw	r12,16(r19)
    9ea8:	12c00504 	addi	r11,r2,20
    9eac:	4a51883a 	add	r8,r9,r9
    9eb0:	6319883a 	add	r12,r12,r12
    9eb4:	4211883a 	add	r8,r8,r8
    9eb8:	6319883a 	add	r12,r12,r12
    9ebc:	15000315 	stw	r20,12(r2)
    9ec0:	8211883a 	add	r8,r16,r8
    9ec4:	8b19883a 	add	r12,r17,r12
    9ec8:	0007883a 	mov	r3,zero
    9ecc:	81400017 	ldw	r5,0(r16)
    9ed0:	89c00017 	ldw	r7,0(r17)
    9ed4:	59800104 	addi	r6,r11,4
    9ed8:	293fffcc 	andi	r4,r5,65535
    9edc:	20c7883a 	add	r3,r4,r3
    9ee0:	393fffcc 	andi	r4,r7,65535
    9ee4:	1909c83a 	sub	r4,r3,r4
    9ee8:	280ad43a 	srli	r5,r5,16
    9eec:	380ed43a 	srli	r7,r7,16
    9ef0:	2007d43a 	srai	r3,r4,16
    9ef4:	213fffcc 	andi	r4,r4,65535
    9ef8:	29cbc83a 	sub	r5,r5,r7
    9efc:	28c7883a 	add	r3,r5,r3
    9f00:	180a943a 	slli	r5,r3,16
    9f04:	8c400104 	addi	r17,r17,4
    9f08:	84000104 	addi	r16,r16,4
    9f0c:	2908b03a 	or	r4,r5,r4
    9f10:	59000015 	stw	r4,0(r11)
    9f14:	1807d43a 	srai	r3,r3,16
    9f18:	3015883a 	mov	r10,r6
    9f1c:	3017883a 	mov	r11,r6
    9f20:	8b3fea36 	bltu	r17,r12,9ecc <__alt_data_end+0xfc009ecc>
    9f24:	8200162e 	bgeu	r16,r8,9f80 <__mdiff+0x188>
    9f28:	8017883a 	mov	r11,r16
    9f2c:	59400017 	ldw	r5,0(r11)
    9f30:	31800104 	addi	r6,r6,4
    9f34:	5ac00104 	addi	r11,r11,4
    9f38:	293fffcc 	andi	r4,r5,65535
    9f3c:	20c7883a 	add	r3,r4,r3
    9f40:	280ed43a 	srli	r7,r5,16
    9f44:	180bd43a 	srai	r5,r3,16
    9f48:	193fffcc 	andi	r4,r3,65535
    9f4c:	3947883a 	add	r3,r7,r5
    9f50:	180a943a 	slli	r5,r3,16
    9f54:	1807d43a 	srai	r3,r3,16
    9f58:	2908b03a 	or	r4,r5,r4
    9f5c:	313fff15 	stw	r4,-4(r6)
    9f60:	5a3ff236 	bltu	r11,r8,9f2c <__alt_data_end+0xfc009f2c>
    9f64:	0406303a 	nor	r3,zero,r16
    9f68:	1a07883a 	add	r3,r3,r8
    9f6c:	1806d0ba 	srli	r3,r3,2
    9f70:	18c00044 	addi	r3,r3,1
    9f74:	18c7883a 	add	r3,r3,r3
    9f78:	18c7883a 	add	r3,r3,r3
    9f7c:	50d5883a 	add	r10,r10,r3
    9f80:	50ffff04 	addi	r3,r10,-4
    9f84:	2000041e 	bne	r4,zero,9f98 <__mdiff+0x1a0>
    9f88:	18ffff04 	addi	r3,r3,-4
    9f8c:	19000017 	ldw	r4,0(r3)
    9f90:	4a7fffc4 	addi	r9,r9,-1
    9f94:	203ffc26 	beq	r4,zero,9f88 <__alt_data_end+0xfc009f88>
    9f98:	12400415 	stw	r9,16(r2)
    9f9c:	dfc00517 	ldw	ra,20(sp)
    9fa0:	dd000417 	ldw	r20,16(sp)
    9fa4:	dcc00317 	ldw	r19,12(sp)
    9fa8:	dc800217 	ldw	r18,8(sp)
    9fac:	dc400117 	ldw	r17,4(sp)
    9fb0:	dc000017 	ldw	r16,0(sp)
    9fb4:	dec00604 	addi	sp,sp,24
    9fb8:	f800283a 	ret
    9fbc:	000b883a 	mov	r5,zero
    9fc0:	000944c0 	call	944c <_Balloc>
    9fc4:	00c00044 	movi	r3,1
    9fc8:	10c00415 	stw	r3,16(r2)
    9fcc:	10000515 	stw	zero,20(r2)
    9fd0:	003ff206 	br	9f9c <__alt_data_end+0xfc009f9c>
    9fd4:	8023883a 	mov	r17,r16
    9fd8:	0029883a 	mov	r20,zero
    9fdc:	4021883a 	mov	r16,r8
    9fe0:	003fad06 	br	9e98 <__alt_data_end+0xfc009e98>
    9fe4:	9005883a 	mov	r2,r18
    9fe8:	94400504 	addi	r17,r18,20
    9fec:	9c000504 	addi	r16,r19,20
    9ff0:	9825883a 	mov	r18,r19
    9ff4:	05000044 	movi	r20,1
    9ff8:	1027883a 	mov	r19,r2
    9ffc:	003fa606 	br	9e98 <__alt_data_end+0xfc009e98>

0000a000 <__ulp>:
    a000:	f811883a 	mov	r8,ra
    a004:	0000ac80 	call	ac8 <_mcount>
    a008:	403f883a 	mov	ra,r8
    a00c:	00bf3034 	movhi	r2,64704
    a010:	295ffc2c 	andhi	r5,r5,32752
    a014:	2887883a 	add	r3,r5,r2
    a018:	00c0020e 	bge	zero,r3,a024 <__ulp+0x24>
    a01c:	0005883a 	mov	r2,zero
    a020:	f800283a 	ret
    a024:	00c7c83a 	sub	r3,zero,r3
    a028:	1807d53a 	srai	r3,r3,20
    a02c:	008004c4 	movi	r2,19
    a030:	10c00b0e 	bge	r2,r3,a060 <__ulp+0x60>
    a034:	18bffb04 	addi	r2,r3,-20
    a038:	01000784 	movi	r4,30
    a03c:	0007883a 	mov	r3,zero
    a040:	20800516 	blt	r4,r2,a058 <__ulp+0x58>
    a044:	010007c4 	movi	r4,31
    a048:	2089c83a 	sub	r4,r4,r2
    a04c:	00800044 	movi	r2,1
    a050:	1104983a 	sll	r2,r2,r4
    a054:	f800283a 	ret
    a058:	00800044 	movi	r2,1
    a05c:	f800283a 	ret
    a060:	01400234 	movhi	r5,8
    a064:	28c7d83a 	sra	r3,r5,r3
    a068:	003fec06 	br	a01c <__alt_data_end+0xfc00a01c>

0000a06c <__b2d>:
    a06c:	f811883a 	mov	r8,ra
    a070:	0000ac80 	call	ac8 <_mcount>
    a074:	403f883a 	mov	ra,r8
    a078:	defffa04 	addi	sp,sp,-24
    a07c:	dfc00515 	stw	ra,20(sp)
    a080:	dd000415 	stw	r20,16(sp)
    a084:	dcc00315 	stw	r19,12(sp)
    a088:	dc800215 	stw	r18,8(sp)
    a08c:	dc400115 	stw	r17,4(sp)
    a090:	dc000015 	stw	r16,0(sp)
    a094:	24000417 	ldw	r16,16(r4)
    a098:	24400504 	addi	r17,r4,20
    a09c:	2829883a 	mov	r20,r5
    a0a0:	8421883a 	add	r16,r16,r16
    a0a4:	8421883a 	add	r16,r16,r16
    a0a8:	8c21883a 	add	r16,r17,r16
    a0ac:	84bfff17 	ldw	r18,-4(r16)
    a0b0:	84ffff04 	addi	r19,r16,-4
    a0b4:	9009883a 	mov	r4,r18
    a0b8:	00097700 	call	9770 <__hi0bits>
    a0bc:	00c00804 	movi	r3,32
    a0c0:	1889c83a 	sub	r4,r3,r2
    a0c4:	a1000015 	stw	r4,0(r20)
    a0c8:	01000284 	movi	r4,10
    a0cc:	20801216 	blt	r4,r2,a118 <__b2d+0xac>
    a0d0:	018002c4 	movi	r6,11
    a0d4:	308dc83a 	sub	r6,r6,r2
    a0d8:	9186d83a 	srl	r3,r18,r6
    a0dc:	18cffc34 	orhi	r3,r3,16368
    a0e0:	8cc0212e 	bgeu	r17,r19,a168 <__b2d+0xfc>
    a0e4:	813ffe17 	ldw	r4,-8(r16)
    a0e8:	218cd83a 	srl	r6,r4,r6
    a0ec:	10800544 	addi	r2,r2,21
    a0f0:	9084983a 	sll	r2,r18,r2
    a0f4:	1184b03a 	or	r2,r2,r6
    a0f8:	dfc00517 	ldw	ra,20(sp)
    a0fc:	dd000417 	ldw	r20,16(sp)
    a100:	dcc00317 	ldw	r19,12(sp)
    a104:	dc800217 	ldw	r18,8(sp)
    a108:	dc400117 	ldw	r17,4(sp)
    a10c:	dc000017 	ldw	r16,0(sp)
    a110:	dec00604 	addi	sp,sp,24
    a114:	f800283a 	ret
    a118:	8cc00f2e 	bgeu	r17,r19,a158 <__b2d+0xec>
    a11c:	117ffd44 	addi	r5,r2,-11
    a120:	80bffe17 	ldw	r2,-8(r16)
    a124:	28000e26 	beq	r5,zero,a160 <__b2d+0xf4>
    a128:	1949c83a 	sub	r4,r3,r5
    a12c:	9164983a 	sll	r18,r18,r5
    a130:	1106d83a 	srl	r3,r2,r4
    a134:	81bffe04 	addi	r6,r16,-8
    a138:	948ffc34 	orhi	r18,r18,16368
    a13c:	90c6b03a 	or	r3,r18,r3
    a140:	89800e2e 	bgeu	r17,r6,a17c <__b2d+0x110>
    a144:	81bffd17 	ldw	r6,-12(r16)
    a148:	1144983a 	sll	r2,r2,r5
    a14c:	310ad83a 	srl	r5,r6,r4
    a150:	2884b03a 	or	r2,r5,r2
    a154:	003fe806 	br	a0f8 <__alt_data_end+0xfc00a0f8>
    a158:	10bffd44 	addi	r2,r2,-11
    a15c:	1000041e 	bne	r2,zero,a170 <__b2d+0x104>
    a160:	90cffc34 	orhi	r3,r18,16368
    a164:	003fe406 	br	a0f8 <__alt_data_end+0xfc00a0f8>
    a168:	000d883a 	mov	r6,zero
    a16c:	003fdf06 	br	a0ec <__alt_data_end+0xfc00a0ec>
    a170:	90a4983a 	sll	r18,r18,r2
    a174:	0005883a 	mov	r2,zero
    a178:	003ff906 	br	a160 <__alt_data_end+0xfc00a160>
    a17c:	1144983a 	sll	r2,r2,r5
    a180:	003fdd06 	br	a0f8 <__alt_data_end+0xfc00a0f8>

0000a184 <__d2b>:
    a184:	f811883a 	mov	r8,ra
    a188:	0000ac80 	call	ac8 <_mcount>
    a18c:	403f883a 	mov	ra,r8
    a190:	defff804 	addi	sp,sp,-32
    a194:	dfc00715 	stw	ra,28(sp)
    a198:	dd000615 	stw	r20,24(sp)
    a19c:	dcc00515 	stw	r19,20(sp)
    a1a0:	dc800415 	stw	r18,16(sp)
    a1a4:	dc400315 	stw	r17,12(sp)
    a1a8:	dc000215 	stw	r16,8(sp)
    a1ac:	3021883a 	mov	r16,r6
    a1b0:	8022907a 	slli	r17,r16,1
    a1b4:	2829883a 	mov	r20,r5
    a1b8:	01400044 	movi	r5,1
    a1bc:	3825883a 	mov	r18,r7
    a1c0:	8822d57a 	srli	r17,r17,21
    a1c4:	000944c0 	call	944c <_Balloc>
    a1c8:	1027883a 	mov	r19,r2
    a1cc:	00800434 	movhi	r2,16
    a1d0:	10bfffc4 	addi	r2,r2,-1
    a1d4:	808c703a 	and	r6,r16,r2
    a1d8:	88000126 	beq	r17,zero,a1e0 <__d2b+0x5c>
    a1dc:	31800434 	orhi	r6,r6,16
    a1e0:	d9800015 	stw	r6,0(sp)
    a1e4:	a0002426 	beq	r20,zero,a278 <__d2b+0xf4>
    a1e8:	d9000104 	addi	r4,sp,4
    a1ec:	dd000115 	stw	r20,4(sp)
    a1f0:	00097e40 	call	97e4 <__lo0bits>
    a1f4:	d8c00017 	ldw	r3,0(sp)
    a1f8:	10002f1e 	bne	r2,zero,a2b8 <__d2b+0x134>
    a1fc:	d9000117 	ldw	r4,4(sp)
    a200:	99000515 	stw	r4,20(r19)
    a204:	1821003a 	cmpeq	r16,r3,zero
    a208:	01000084 	movi	r4,2
    a20c:	2421c83a 	sub	r16,r4,r16
    a210:	98c00615 	stw	r3,24(r19)
    a214:	9c000415 	stw	r16,16(r19)
    a218:	88001f1e 	bne	r17,zero,a298 <__d2b+0x114>
    a21c:	10bef384 	addi	r2,r2,-1074
    a220:	90800015 	stw	r2,0(r18)
    a224:	00900034 	movhi	r2,16384
    a228:	10bfffc4 	addi	r2,r2,-1
    a22c:	8085883a 	add	r2,r16,r2
    a230:	1085883a 	add	r2,r2,r2
    a234:	1085883a 	add	r2,r2,r2
    a238:	9885883a 	add	r2,r19,r2
    a23c:	11000517 	ldw	r4,20(r2)
    a240:	8020917a 	slli	r16,r16,5
    a244:	00097700 	call	9770 <__hi0bits>
    a248:	d8c00817 	ldw	r3,32(sp)
    a24c:	8085c83a 	sub	r2,r16,r2
    a250:	18800015 	stw	r2,0(r3)
    a254:	9805883a 	mov	r2,r19
    a258:	dfc00717 	ldw	ra,28(sp)
    a25c:	dd000617 	ldw	r20,24(sp)
    a260:	dcc00517 	ldw	r19,20(sp)
    a264:	dc800417 	ldw	r18,16(sp)
    a268:	dc400317 	ldw	r17,12(sp)
    a26c:	dc000217 	ldw	r16,8(sp)
    a270:	dec00804 	addi	sp,sp,32
    a274:	f800283a 	ret
    a278:	d809883a 	mov	r4,sp
    a27c:	00097e40 	call	97e4 <__lo0bits>
    a280:	d8c00017 	ldw	r3,0(sp)
    a284:	04000044 	movi	r16,1
    a288:	9c000415 	stw	r16,16(r19)
    a28c:	98c00515 	stw	r3,20(r19)
    a290:	10800804 	addi	r2,r2,32
    a294:	883fe126 	beq	r17,zero,a21c <__alt_data_end+0xfc00a21c>
    a298:	00c00d44 	movi	r3,53
    a29c:	8c7ef344 	addi	r17,r17,-1075
    a2a0:	88a3883a 	add	r17,r17,r2
    a2a4:	1885c83a 	sub	r2,r3,r2
    a2a8:	d8c00817 	ldw	r3,32(sp)
    a2ac:	94400015 	stw	r17,0(r18)
    a2b0:	18800015 	stw	r2,0(r3)
    a2b4:	003fe706 	br	a254 <__alt_data_end+0xfc00a254>
    a2b8:	01000804 	movi	r4,32
    a2bc:	2089c83a 	sub	r4,r4,r2
    a2c0:	1908983a 	sll	r4,r3,r4
    a2c4:	d9400117 	ldw	r5,4(sp)
    a2c8:	1886d83a 	srl	r3,r3,r2
    a2cc:	2148b03a 	or	r4,r4,r5
    a2d0:	99000515 	stw	r4,20(r19)
    a2d4:	d8c00015 	stw	r3,0(sp)
    a2d8:	003fca06 	br	a204 <__alt_data_end+0xfc00a204>

0000a2dc <__ratio>:
    a2dc:	f811883a 	mov	r8,ra
    a2e0:	0000ac80 	call	ac8 <_mcount>
    a2e4:	403f883a 	mov	ra,r8
    a2e8:	defff904 	addi	sp,sp,-28
    a2ec:	dfc00615 	stw	ra,24(sp)
    a2f0:	dcc00515 	stw	r19,20(sp)
    a2f4:	dc800415 	stw	r18,16(sp)
    a2f8:	dc400315 	stw	r17,12(sp)
    a2fc:	dc000215 	stw	r16,8(sp)
    a300:	2823883a 	mov	r17,r5
    a304:	d9400104 	addi	r5,sp,4
    a308:	2027883a 	mov	r19,r4
    a30c:	000a06c0 	call	a06c <__b2d>
    a310:	d80b883a 	mov	r5,sp
    a314:	8809883a 	mov	r4,r17
    a318:	1025883a 	mov	r18,r2
    a31c:	1821883a 	mov	r16,r3
    a320:	000a06c0 	call	a06c <__b2d>
    a324:	8a000417 	ldw	r8,16(r17)
    a328:	99000417 	ldw	r4,16(r19)
    a32c:	d9400117 	ldw	r5,4(sp)
    a330:	2209c83a 	sub	r4,r4,r8
    a334:	2010917a 	slli	r8,r4,5
    a338:	d9000017 	ldw	r4,0(sp)
    a33c:	2909c83a 	sub	r4,r5,r4
    a340:	4109883a 	add	r4,r8,r4
    a344:	01000e0e 	bge	zero,r4,a380 <__ratio+0xa4>
    a348:	2008953a 	slli	r4,r4,20
    a34c:	2421883a 	add	r16,r4,r16
    a350:	100d883a 	mov	r6,r2
    a354:	180f883a 	mov	r7,r3
    a358:	9009883a 	mov	r4,r18
    a35c:	800b883a 	mov	r5,r16
    a360:	000e8f40 	call	e8f4 <__divdf3>
    a364:	dfc00617 	ldw	ra,24(sp)
    a368:	dcc00517 	ldw	r19,20(sp)
    a36c:	dc800417 	ldw	r18,16(sp)
    a370:	dc400317 	ldw	r17,12(sp)
    a374:	dc000217 	ldw	r16,8(sp)
    a378:	dec00704 	addi	sp,sp,28
    a37c:	f800283a 	ret
    a380:	2008953a 	slli	r4,r4,20
    a384:	1907c83a 	sub	r3,r3,r4
    a388:	003ff106 	br	a350 <__alt_data_end+0xfc00a350>

0000a38c <_mprec_log10>:
    a38c:	f811883a 	mov	r8,ra
    a390:	0000ac80 	call	ac8 <_mcount>
    a394:	403f883a 	mov	ra,r8
    a398:	defffe04 	addi	sp,sp,-8
    a39c:	dfc00115 	stw	ra,4(sp)
    a3a0:	dc000015 	stw	r16,0(sp)
    a3a4:	008005c4 	movi	r2,23
    a3a8:	2021883a 	mov	r16,r4
    a3ac:	11000d0e 	bge	r2,r4,a3e4 <_mprec_log10+0x58>
    a3b0:	0005883a 	mov	r2,zero
    a3b4:	00cffc34 	movhi	r3,16368
    a3b8:	843fffc4 	addi	r16,r16,-1
    a3bc:	000d883a 	mov	r6,zero
    a3c0:	01d00934 	movhi	r7,16420
    a3c4:	1009883a 	mov	r4,r2
    a3c8:	180b883a 	mov	r5,r3
    a3cc:	000f4540 	call	f454 <__muldf3>
    a3d0:	803ff91e 	bne	r16,zero,a3b8 <__alt_data_end+0xfc00a3b8>
    a3d4:	dfc00117 	ldw	ra,4(sp)
    a3d8:	dc000017 	ldw	r16,0(sp)
    a3dc:	dec00204 	addi	sp,sp,8
    a3e0:	f800283a 	ret
    a3e4:	202090fa 	slli	r16,r4,3
    a3e8:	00800074 	movhi	r2,1
    a3ec:	10841e04 	addi	r2,r2,4216
    a3f0:	1421883a 	add	r16,r2,r16
    a3f4:	80800017 	ldw	r2,0(r16)
    a3f8:	80c00117 	ldw	r3,4(r16)
    a3fc:	dfc00117 	ldw	ra,4(sp)
    a400:	dc000017 	ldw	r16,0(sp)
    a404:	dec00204 	addi	sp,sp,8
    a408:	f800283a 	ret

0000a40c <__copybits>:
    a40c:	f811883a 	mov	r8,ra
    a410:	0000ac80 	call	ac8 <_mcount>
    a414:	403f883a 	mov	ra,r8
    a418:	297fffc4 	addi	r5,r5,-1
    a41c:	280fd17a 	srai	r7,r5,5
    a420:	30c00417 	ldw	r3,16(r6)
    a424:	30800504 	addi	r2,r6,20
    a428:	39c00044 	addi	r7,r7,1
    a42c:	18c7883a 	add	r3,r3,r3
    a430:	39cf883a 	add	r7,r7,r7
    a434:	18c7883a 	add	r3,r3,r3
    a438:	39cf883a 	add	r7,r7,r7
    a43c:	10c7883a 	add	r3,r2,r3
    a440:	21cf883a 	add	r7,r4,r7
    a444:	10c00d2e 	bgeu	r2,r3,a47c <__copybits+0x70>
    a448:	200b883a 	mov	r5,r4
    a44c:	12000017 	ldw	r8,0(r2)
    a450:	29400104 	addi	r5,r5,4
    a454:	10800104 	addi	r2,r2,4
    a458:	2a3fff15 	stw	r8,-4(r5)
    a45c:	10fffb36 	bltu	r2,r3,a44c <__alt_data_end+0xfc00a44c>
    a460:	1985c83a 	sub	r2,r3,r6
    a464:	10bffac4 	addi	r2,r2,-21
    a468:	1004d0ba 	srli	r2,r2,2
    a46c:	10800044 	addi	r2,r2,1
    a470:	1085883a 	add	r2,r2,r2
    a474:	1085883a 	add	r2,r2,r2
    a478:	2089883a 	add	r4,r4,r2
    a47c:	21c0032e 	bgeu	r4,r7,a48c <__copybits+0x80>
    a480:	20000015 	stw	zero,0(r4)
    a484:	21000104 	addi	r4,r4,4
    a488:	21fffd36 	bltu	r4,r7,a480 <__alt_data_end+0xfc00a480>
    a48c:	f800283a 	ret

0000a490 <__any_on>:
    a490:	f811883a 	mov	r8,ra
    a494:	0000ac80 	call	ac8 <_mcount>
    a498:	403f883a 	mov	ra,r8
    a49c:	20c00417 	ldw	r3,16(r4)
    a4a0:	2805d17a 	srai	r2,r5,5
    a4a4:	21000504 	addi	r4,r4,20
    a4a8:	18800d0e 	bge	r3,r2,a4e0 <__any_on+0x50>
    a4ac:	18c7883a 	add	r3,r3,r3
    a4b0:	18c7883a 	add	r3,r3,r3
    a4b4:	20c7883a 	add	r3,r4,r3
    a4b8:	20c0182e 	bgeu	r4,r3,a51c <__any_on+0x8c>
    a4bc:	18bfff17 	ldw	r2,-4(r3)
    a4c0:	18ffff04 	addi	r3,r3,-4
    a4c4:	1000041e 	bne	r2,zero,a4d8 <__any_on+0x48>
    a4c8:	20c0042e 	bgeu	r4,r3,a4dc <__any_on+0x4c>
    a4cc:	18ffff04 	addi	r3,r3,-4
    a4d0:	19400017 	ldw	r5,0(r3)
    a4d4:	283ffc26 	beq	r5,zero,a4c8 <__alt_data_end+0xfc00a4c8>
    a4d8:	00800044 	movi	r2,1
    a4dc:	f800283a 	ret
    a4e0:	10c00a0e 	bge	r2,r3,a50c <__any_on+0x7c>
    a4e4:	1085883a 	add	r2,r2,r2
    a4e8:	1085883a 	add	r2,r2,r2
    a4ec:	294007cc 	andi	r5,r5,31
    a4f0:	2087883a 	add	r3,r4,r2
    a4f4:	283ff026 	beq	r5,zero,a4b8 <__alt_data_end+0xfc00a4b8>
    a4f8:	19800017 	ldw	r6,0(r3)
    a4fc:	3144d83a 	srl	r2,r6,r5
    a500:	114a983a 	sll	r5,r2,r5
    a504:	317ff41e 	bne	r6,r5,a4d8 <__alt_data_end+0xfc00a4d8>
    a508:	003feb06 	br	a4b8 <__alt_data_end+0xfc00a4b8>
    a50c:	1085883a 	add	r2,r2,r2
    a510:	1085883a 	add	r2,r2,r2
    a514:	2087883a 	add	r3,r4,r2
    a518:	003fe706 	br	a4b8 <__alt_data_end+0xfc00a4b8>
    a51c:	0005883a 	mov	r2,zero
    a520:	003fee06 	br	a4dc <__alt_data_end+0xfc00a4dc>

0000a524 <__fpclassifyd>:
    a524:	f811883a 	mov	r8,ra
    a528:	0000ac80 	call	ac8 <_mcount>
    a52c:	403f883a 	mov	ra,r8
    a530:	00a00034 	movhi	r2,32768
    a534:	10bfffc4 	addi	r2,r2,-1
    a538:	2884703a 	and	r2,r5,r2
    a53c:	10000726 	beq	r2,zero,a55c <__fpclassifyd+0x38>
    a540:	00fffc34 	movhi	r3,65520
    a544:	019ff834 	movhi	r6,32736
    a548:	28c7883a 	add	r3,r5,r3
    a54c:	31bfffc4 	addi	r6,r6,-1
    a550:	30c00536 	bltu	r6,r3,a568 <__fpclassifyd+0x44>
    a554:	00800104 	movi	r2,4
    a558:	f800283a 	ret
    a55c:	2000021e 	bne	r4,zero,a568 <__fpclassifyd+0x44>
    a560:	00800084 	movi	r2,2
    a564:	f800283a 	ret
    a568:	00dffc34 	movhi	r3,32752
    a56c:	019ff834 	movhi	r6,32736
    a570:	28cb883a 	add	r5,r5,r3
    a574:	31bfffc4 	addi	r6,r6,-1
    a578:	317ff62e 	bgeu	r6,r5,a554 <__alt_data_end+0xfc00a554>
    a57c:	01400434 	movhi	r5,16
    a580:	297fffc4 	addi	r5,r5,-1
    a584:	28800236 	bltu	r5,r2,a590 <__fpclassifyd+0x6c>
    a588:	008000c4 	movi	r2,3
    a58c:	003ff206 	br	a558 <__alt_data_end+0xfc00a558>
    a590:	10c00226 	beq	r2,r3,a59c <__fpclassifyd+0x78>
    a594:	0005883a 	mov	r2,zero
    a598:	003fef06 	br	a558 <__alt_data_end+0xfc00a558>
    a59c:	2005003a 	cmpeq	r2,r4,zero
    a5a0:	003fed06 	br	a558 <__alt_data_end+0xfc00a558>

0000a5a4 <_sbrk_r>:
    a5a4:	f811883a 	mov	r8,ra
    a5a8:	0000ac80 	call	ac8 <_mcount>
    a5ac:	403f883a 	mov	ra,r8
    a5b0:	defffd04 	addi	sp,sp,-12
    a5b4:	dfc00215 	stw	ra,8(sp)
    a5b8:	dc400115 	stw	r17,4(sp)
    a5bc:	dc000015 	stw	r16,0(sp)
    a5c0:	04000074 	movhi	r16,1
    a5c4:	84143604 	addi	r16,r16,20696
    a5c8:	2023883a 	mov	r17,r4
    a5cc:	2809883a 	mov	r4,r5
    a5d0:	80000015 	stw	zero,0(r16)
    a5d4:	0002dd40 	call	2dd4 <sbrk>
    a5d8:	00ffffc4 	movi	r3,-1
    a5dc:	10c00526 	beq	r2,r3,a5f4 <_sbrk_r+0x50>
    a5e0:	dfc00217 	ldw	ra,8(sp)
    a5e4:	dc400117 	ldw	r17,4(sp)
    a5e8:	dc000017 	ldw	r16,0(sp)
    a5ec:	dec00304 	addi	sp,sp,12
    a5f0:	f800283a 	ret
    a5f4:	80c00017 	ldw	r3,0(r16)
    a5f8:	183ff926 	beq	r3,zero,a5e0 <__alt_data_end+0xfc00a5e0>
    a5fc:	88c00015 	stw	r3,0(r17)
    a600:	003ff706 	br	a5e0 <__alt_data_end+0xfc00a5e0>

0000a604 <__sread>:
    a604:	f811883a 	mov	r8,ra
    a608:	0000ac80 	call	ac8 <_mcount>
    a60c:	403f883a 	mov	ra,r8
    a610:	defffe04 	addi	sp,sp,-8
    a614:	dfc00115 	stw	ra,4(sp)
    a618:	dc000015 	stw	r16,0(sp)
    a61c:	2821883a 	mov	r16,r5
    a620:	2940038f 	ldh	r5,14(r5)
    a624:	000cb240 	call	cb24 <_read_r>
    a628:	10000716 	blt	r2,zero,a648 <__sread+0x44>
    a62c:	80c01417 	ldw	r3,80(r16)
    a630:	1887883a 	add	r3,r3,r2
    a634:	80c01415 	stw	r3,80(r16)
    a638:	dfc00117 	ldw	ra,4(sp)
    a63c:	dc000017 	ldw	r16,0(sp)
    a640:	dec00204 	addi	sp,sp,8
    a644:	f800283a 	ret
    a648:	80c0030b 	ldhu	r3,12(r16)
    a64c:	18fbffcc 	andi	r3,r3,61439
    a650:	80c0030d 	sth	r3,12(r16)
    a654:	dfc00117 	ldw	ra,4(sp)
    a658:	dc000017 	ldw	r16,0(sp)
    a65c:	dec00204 	addi	sp,sp,8
    a660:	f800283a 	ret

0000a664 <__seofread>:
    a664:	f811883a 	mov	r8,ra
    a668:	0000ac80 	call	ac8 <_mcount>
    a66c:	403f883a 	mov	ra,r8
    a670:	0005883a 	mov	r2,zero
    a674:	f800283a 	ret

0000a678 <__swrite>:
    a678:	f811883a 	mov	r8,ra
    a67c:	0000ac80 	call	ac8 <_mcount>
    a680:	403f883a 	mov	ra,r8
    a684:	defffb04 	addi	sp,sp,-20
    a688:	dfc00415 	stw	ra,16(sp)
    a68c:	dcc00315 	stw	r19,12(sp)
    a690:	dc800215 	stw	r18,8(sp)
    a694:	dc400115 	stw	r17,4(sp)
    a698:	dc000015 	stw	r16,0(sp)
    a69c:	2880030b 	ldhu	r2,12(r5)
    a6a0:	2821883a 	mov	r16,r5
    a6a4:	2023883a 	mov	r17,r4
    a6a8:	10c0400c 	andi	r3,r2,256
    a6ac:	3025883a 	mov	r18,r6
    a6b0:	3827883a 	mov	r19,r7
    a6b4:	18000526 	beq	r3,zero,a6cc <__swrite+0x54>
    a6b8:	2940038f 	ldh	r5,14(r5)
    a6bc:	01c00084 	movi	r7,2
    a6c0:	000d883a 	mov	r6,zero
    a6c4:	000c9540 	call	c954 <_lseek_r>
    a6c8:	8080030b 	ldhu	r2,12(r16)
    a6cc:	8140038f 	ldh	r5,14(r16)
    a6d0:	10bbffcc 	andi	r2,r2,61439
    a6d4:	980f883a 	mov	r7,r19
    a6d8:	900d883a 	mov	r6,r18
    a6dc:	8809883a 	mov	r4,r17
    a6e0:	8080030d 	sth	r2,12(r16)
    a6e4:	dfc00417 	ldw	ra,16(sp)
    a6e8:	dcc00317 	ldw	r19,12(sp)
    a6ec:	dc800217 	ldw	r18,8(sp)
    a6f0:	dc400117 	ldw	r17,4(sp)
    a6f4:	dc000017 	ldw	r16,0(sp)
    a6f8:	dec00504 	addi	sp,sp,20
    a6fc:	000bee01 	jmpi	bee0 <_write_r>

0000a700 <__sseek>:
    a700:	f811883a 	mov	r8,ra
    a704:	0000ac80 	call	ac8 <_mcount>
    a708:	403f883a 	mov	ra,r8
    a70c:	defffe04 	addi	sp,sp,-8
    a710:	dfc00115 	stw	ra,4(sp)
    a714:	dc000015 	stw	r16,0(sp)
    a718:	2821883a 	mov	r16,r5
    a71c:	2940038f 	ldh	r5,14(r5)
    a720:	000c9540 	call	c954 <_lseek_r>
    a724:	00ffffc4 	movi	r3,-1
    a728:	10c00826 	beq	r2,r3,a74c <__sseek+0x4c>
    a72c:	80c0030b 	ldhu	r3,12(r16)
    a730:	80801415 	stw	r2,80(r16)
    a734:	18c40014 	ori	r3,r3,4096
    a738:	80c0030d 	sth	r3,12(r16)
    a73c:	dfc00117 	ldw	ra,4(sp)
    a740:	dc000017 	ldw	r16,0(sp)
    a744:	dec00204 	addi	sp,sp,8
    a748:	f800283a 	ret
    a74c:	80c0030b 	ldhu	r3,12(r16)
    a750:	18fbffcc 	andi	r3,r3,61439
    a754:	80c0030d 	sth	r3,12(r16)
    a758:	dfc00117 	ldw	ra,4(sp)
    a75c:	dc000017 	ldw	r16,0(sp)
    a760:	dec00204 	addi	sp,sp,8
    a764:	f800283a 	ret

0000a768 <__sclose>:
    a768:	f811883a 	mov	r8,ra
    a76c:	0000ac80 	call	ac8 <_mcount>
    a770:	403f883a 	mov	ra,r8
    a774:	2940038f 	ldh	r5,14(r5)
    a778:	000bf4c1 	jmpi	bf4c <_close_r>

0000a77c <strcmp>:
    a77c:	f811883a 	mov	r8,ra
    a780:	0000ac80 	call	ac8 <_mcount>
    a784:	403f883a 	mov	ra,r8
    a788:	2144b03a 	or	r2,r4,r5
    a78c:	108000cc 	andi	r2,r2,3
    a790:	1000171e 	bne	r2,zero,a7f0 <strcmp+0x74>
    a794:	20800017 	ldw	r2,0(r4)
    a798:	28c00017 	ldw	r3,0(r5)
    a79c:	10c0141e 	bne	r2,r3,a7f0 <strcmp+0x74>
    a7a0:	027fbff4 	movhi	r9,65279
    a7a4:	4a7fbfc4 	addi	r9,r9,-257
    a7a8:	0086303a 	nor	r3,zero,r2
    a7ac:	02202074 	movhi	r8,32897
    a7b0:	1245883a 	add	r2,r2,r9
    a7b4:	42202004 	addi	r8,r8,-32640
    a7b8:	10c4703a 	and	r2,r2,r3
    a7bc:	1204703a 	and	r2,r2,r8
    a7c0:	10000226 	beq	r2,zero,a7cc <strcmp+0x50>
    a7c4:	00002106 	br	a84c <strcmp+0xd0>
    a7c8:	1000201e 	bne	r2,zero,a84c <strcmp+0xd0>
    a7cc:	21000104 	addi	r4,r4,4
    a7d0:	20c00017 	ldw	r3,0(r4)
    a7d4:	29400104 	addi	r5,r5,4
    a7d8:	29800017 	ldw	r6,0(r5)
    a7dc:	1a4f883a 	add	r7,r3,r9
    a7e0:	00c4303a 	nor	r2,zero,r3
    a7e4:	3884703a 	and	r2,r7,r2
    a7e8:	1204703a 	and	r2,r2,r8
    a7ec:	19bff626 	beq	r3,r6,a7c8 <__alt_data_end+0xfc00a7c8>
    a7f0:	20800003 	ldbu	r2,0(r4)
    a7f4:	10c03fcc 	andi	r3,r2,255
    a7f8:	18c0201c 	xori	r3,r3,128
    a7fc:	18ffe004 	addi	r3,r3,-128
    a800:	18000c26 	beq	r3,zero,a834 <strcmp+0xb8>
    a804:	29800007 	ldb	r6,0(r5)
    a808:	19800326 	beq	r3,r6,a818 <strcmp+0x9c>
    a80c:	00001106 	br	a854 <strcmp+0xd8>
    a810:	29800007 	ldb	r6,0(r5)
    a814:	11800b1e 	bne	r2,r6,a844 <strcmp+0xc8>
    a818:	21000044 	addi	r4,r4,1
    a81c:	20c00003 	ldbu	r3,0(r4)
    a820:	29400044 	addi	r5,r5,1
    a824:	18803fcc 	andi	r2,r3,255
    a828:	1080201c 	xori	r2,r2,128
    a82c:	10bfe004 	addi	r2,r2,-128
    a830:	103ff71e 	bne	r2,zero,a810 <__alt_data_end+0xfc00a810>
    a834:	0007883a 	mov	r3,zero
    a838:	28800003 	ldbu	r2,0(r5)
    a83c:	1885c83a 	sub	r2,r3,r2
    a840:	f800283a 	ret
    a844:	18c03fcc 	andi	r3,r3,255
    a848:	003ffb06 	br	a838 <__alt_data_end+0xfc00a838>
    a84c:	0005883a 	mov	r2,zero
    a850:	f800283a 	ret
    a854:	10c03fcc 	andi	r3,r2,255
    a858:	003ff706 	br	a838 <__alt_data_end+0xfc00a838>

0000a85c <__sprint_r.part.0>:
    a85c:	f811883a 	mov	r8,ra
    a860:	0000ac80 	call	ac8 <_mcount>
    a864:	403f883a 	mov	ra,r8
    a868:	defff604 	addi	sp,sp,-40
    a86c:	dfc00915 	stw	ra,36(sp)
    a870:	df000815 	stw	fp,32(sp)
    a874:	ddc00715 	stw	r23,28(sp)
    a878:	dd800615 	stw	r22,24(sp)
    a87c:	dd400515 	stw	r21,20(sp)
    a880:	dd000415 	stw	r20,16(sp)
    a884:	dcc00315 	stw	r19,12(sp)
    a888:	dc800215 	stw	r18,8(sp)
    a88c:	dc400115 	stw	r17,4(sp)
    a890:	dc000015 	stw	r16,0(sp)
    a894:	28801917 	ldw	r2,100(r5)
    a898:	302b883a 	mov	r21,r6
    a89c:	1088000c 	andi	r2,r2,8192
    a8a0:	10002e26 	beq	r2,zero,a95c <__sprint_r.part.0+0x100>
    a8a4:	30800217 	ldw	r2,8(r6)
    a8a8:	35800017 	ldw	r22,0(r6)
    a8ac:	10002926 	beq	r2,zero,a954 <__sprint_r.part.0+0xf8>
    a8b0:	2827883a 	mov	r19,r5
    a8b4:	2029883a 	mov	r20,r4
    a8b8:	b5c00104 	addi	r23,r22,4
    a8bc:	04bfffc4 	movi	r18,-1
    a8c0:	bc400017 	ldw	r17,0(r23)
    a8c4:	b4000017 	ldw	r16,0(r22)
    a8c8:	0039883a 	mov	fp,zero
    a8cc:	8822d0ba 	srli	r17,r17,2
    a8d0:	8800031e 	bne	r17,zero,a8e0 <__sprint_r.part.0+0x84>
    a8d4:	00001806 	br	a938 <__sprint_r.part.0+0xdc>
    a8d8:	84000104 	addi	r16,r16,4
    a8dc:	8f001526 	beq	r17,fp,a934 <__sprint_r.part.0+0xd8>
    a8e0:	81400017 	ldw	r5,0(r16)
    a8e4:	980d883a 	mov	r6,r19
    a8e8:	a009883a 	mov	r4,r20
    a8ec:	000c3080 	call	c308 <_fputwc_r>
    a8f0:	e7000044 	addi	fp,fp,1
    a8f4:	14bff81e 	bne	r2,r18,a8d8 <__alt_data_end+0xfc00a8d8>
    a8f8:	9005883a 	mov	r2,r18
    a8fc:	a8000215 	stw	zero,8(r21)
    a900:	a8000115 	stw	zero,4(r21)
    a904:	dfc00917 	ldw	ra,36(sp)
    a908:	df000817 	ldw	fp,32(sp)
    a90c:	ddc00717 	ldw	r23,28(sp)
    a910:	dd800617 	ldw	r22,24(sp)
    a914:	dd400517 	ldw	r21,20(sp)
    a918:	dd000417 	ldw	r20,16(sp)
    a91c:	dcc00317 	ldw	r19,12(sp)
    a920:	dc800217 	ldw	r18,8(sp)
    a924:	dc400117 	ldw	r17,4(sp)
    a928:	dc000017 	ldw	r16,0(sp)
    a92c:	dec00a04 	addi	sp,sp,40
    a930:	f800283a 	ret
    a934:	a8800217 	ldw	r2,8(r21)
    a938:	8c63883a 	add	r17,r17,r17
    a93c:	8c63883a 	add	r17,r17,r17
    a940:	1445c83a 	sub	r2,r2,r17
    a944:	a8800215 	stw	r2,8(r21)
    a948:	b5800204 	addi	r22,r22,8
    a94c:	bdc00204 	addi	r23,r23,8
    a950:	103fdb1e 	bne	r2,zero,a8c0 <__alt_data_end+0xfc00a8c0>
    a954:	0005883a 	mov	r2,zero
    a958:	003fe806 	br	a8fc <__alt_data_end+0xfc00a8fc>
    a95c:	000c42c0 	call	c42c <__sfvwrite_r>
    a960:	003fe606 	br	a8fc <__alt_data_end+0xfc00a8fc>

0000a964 <__sprint_r>:
    a964:	f811883a 	mov	r8,ra
    a968:	0000ac80 	call	ac8 <_mcount>
    a96c:	403f883a 	mov	ra,r8
    a970:	30c00217 	ldw	r3,8(r6)
    a974:	18000126 	beq	r3,zero,a97c <__sprint_r+0x18>
    a978:	000a85c1 	jmpi	a85c <__sprint_r.part.0>
    a97c:	0005883a 	mov	r2,zero
    a980:	30000115 	stw	zero,4(r6)
    a984:	f800283a 	ret

0000a988 <___vfiprintf_internal_r>:
    a988:	f811883a 	mov	r8,ra
    a98c:	0000ac80 	call	ac8 <_mcount>
    a990:	403f883a 	mov	ra,r8
    a994:	deffc904 	addi	sp,sp,-220
    a998:	dfc03615 	stw	ra,216(sp)
    a99c:	df003515 	stw	fp,212(sp)
    a9a0:	ddc03415 	stw	r23,208(sp)
    a9a4:	dd803315 	stw	r22,204(sp)
    a9a8:	dd403215 	stw	r21,200(sp)
    a9ac:	dd003115 	stw	r20,196(sp)
    a9b0:	dcc03015 	stw	r19,192(sp)
    a9b4:	dc802f15 	stw	r18,188(sp)
    a9b8:	dc402e15 	stw	r17,184(sp)
    a9bc:	dc002d15 	stw	r16,180(sp)
    a9c0:	d9002015 	stw	r4,128(sp)
    a9c4:	d9c02215 	stw	r7,136(sp)
    a9c8:	2829883a 	mov	r20,r5
    a9cc:	3039883a 	mov	fp,r6
    a9d0:	20000226 	beq	r4,zero,a9dc <___vfiprintf_internal_r+0x54>
    a9d4:	20800e17 	ldw	r2,56(r4)
    a9d8:	1000cf26 	beq	r2,zero,ad18 <___vfiprintf_internal_r+0x390>
    a9dc:	a080030b 	ldhu	r2,12(r20)
    a9e0:	10c8000c 	andi	r3,r2,8192
    a9e4:	1800061e 	bne	r3,zero,aa00 <___vfiprintf_internal_r+0x78>
    a9e8:	a1001917 	ldw	r4,100(r20)
    a9ec:	00f7ffc4 	movi	r3,-8193
    a9f0:	10880014 	ori	r2,r2,8192
    a9f4:	20c6703a 	and	r3,r4,r3
    a9f8:	a080030d 	sth	r2,12(r20)
    a9fc:	a0c01915 	stw	r3,100(r20)
    aa00:	10c0020c 	andi	r3,r2,8
    aa04:	1800a926 	beq	r3,zero,acac <___vfiprintf_internal_r+0x324>
    aa08:	a0c00417 	ldw	r3,16(r20)
    aa0c:	1800a726 	beq	r3,zero,acac <___vfiprintf_internal_r+0x324>
    aa10:	1080068c 	andi	r2,r2,26
    aa14:	00c00284 	movi	r3,10
    aa18:	10c0ac26 	beq	r2,r3,accc <___vfiprintf_internal_r+0x344>
    aa1c:	da801a04 	addi	r10,sp,104
    aa20:	da801e15 	stw	r10,120(sp)
    aa24:	d8801e17 	ldw	r2,120(sp)
    aa28:	da8019c4 	addi	r10,sp,103
    aa2c:	05800074 	movhi	r22,1
    aa30:	05c00074 	movhi	r23,1
    aa34:	da801f15 	stw	r10,124(sp)
    aa38:	1295c83a 	sub	r10,r2,r10
    aa3c:	b5845404 	addi	r22,r22,4432
    aa40:	bdc45004 	addi	r23,r23,4416
    aa44:	dec01a15 	stw	sp,104(sp)
    aa48:	d8001c15 	stw	zero,112(sp)
    aa4c:	d8001b15 	stw	zero,108(sp)
    aa50:	d8002615 	stw	zero,152(sp)
    aa54:	d8002315 	stw	zero,140(sp)
    aa58:	da802715 	stw	r10,156(sp)
    aa5c:	d811883a 	mov	r8,sp
    aa60:	dd002115 	stw	r20,132(sp)
    aa64:	e021883a 	mov	r16,fp
    aa68:	80800007 	ldb	r2,0(r16)
    aa6c:	1003ea26 	beq	r2,zero,ba18 <___vfiprintf_internal_r+0x1090>
    aa70:	00c00944 	movi	r3,37
    aa74:	8025883a 	mov	r18,r16
    aa78:	10c0021e 	bne	r2,r3,aa84 <___vfiprintf_internal_r+0xfc>
    aa7c:	00001606 	br	aad8 <___vfiprintf_internal_r+0x150>
    aa80:	10c00326 	beq	r2,r3,aa90 <___vfiprintf_internal_r+0x108>
    aa84:	94800044 	addi	r18,r18,1
    aa88:	90800007 	ldb	r2,0(r18)
    aa8c:	103ffc1e 	bne	r2,zero,aa80 <__alt_data_end+0xfc00aa80>
    aa90:	9423c83a 	sub	r17,r18,r16
    aa94:	88001026 	beq	r17,zero,aad8 <___vfiprintf_internal_r+0x150>
    aa98:	d8c01c17 	ldw	r3,112(sp)
    aa9c:	d8801b17 	ldw	r2,108(sp)
    aaa0:	44000015 	stw	r16,0(r8)
    aaa4:	88c7883a 	add	r3,r17,r3
    aaa8:	10800044 	addi	r2,r2,1
    aaac:	44400115 	stw	r17,4(r8)
    aab0:	d8c01c15 	stw	r3,112(sp)
    aab4:	d8801b15 	stw	r2,108(sp)
    aab8:	010001c4 	movi	r4,7
    aabc:	2080760e 	bge	r4,r2,ac98 <___vfiprintf_internal_r+0x310>
    aac0:	1803821e 	bne	r3,zero,b8cc <___vfiprintf_internal_r+0xf44>
    aac4:	da802317 	ldw	r10,140(sp)
    aac8:	d8001b15 	stw	zero,108(sp)
    aacc:	d811883a 	mov	r8,sp
    aad0:	5455883a 	add	r10,r10,r17
    aad4:	da802315 	stw	r10,140(sp)
    aad8:	90800007 	ldb	r2,0(r18)
    aadc:	10044626 	beq	r2,zero,bbf8 <___vfiprintf_internal_r+0x1270>
    aae0:	90c00047 	ldb	r3,1(r18)
    aae4:	94000044 	addi	r16,r18,1
    aae8:	d8001d85 	stb	zero,118(sp)
    aaec:	0009883a 	mov	r4,zero
    aaf0:	000f883a 	mov	r7,zero
    aaf4:	027fffc4 	movi	r9,-1
    aaf8:	0023883a 	mov	r17,zero
    aafc:	0029883a 	mov	r20,zero
    ab00:	01401604 	movi	r5,88
    ab04:	01800244 	movi	r6,9
    ab08:	03400a84 	movi	r13,42
    ab0c:	03001b04 	movi	r12,108
    ab10:	84000044 	addi	r16,r16,1
    ab14:	18bff804 	addi	r2,r3,-32
    ab18:	28827336 	bltu	r5,r2,b4e8 <___vfiprintf_internal_r+0xb60>
    ab1c:	100490ba 	slli	r2,r2,2
    ab20:	02800074 	movhi	r10,1
    ab24:	52aacd04 	addi	r10,r10,-21708
    ab28:	1285883a 	add	r2,r2,r10
    ab2c:	10800017 	ldw	r2,0(r2)
    ab30:	1000683a 	jmp	r2
    ab34:	0000b21c 	xori	zero,zero,712
    ab38:	0000b4e8 	cmpgeui	zero,zero,723
    ab3c:	0000b4e8 	cmpgeui	zero,zero,723
    ab40:	0000b23c 	xorhi	zero,zero,712
    ab44:	0000b4e8 	cmpgeui	zero,zero,723
    ab48:	0000b4e8 	cmpgeui	zero,zero,723
    ab4c:	0000b4e8 	cmpgeui	zero,zero,723
    ab50:	0000b4e8 	cmpgeui	zero,zero,723
    ab54:	0000b4e8 	cmpgeui	zero,zero,723
    ab58:	0000b4e8 	cmpgeui	zero,zero,723
    ab5c:	0000b424 	muli	zero,zero,720
    ab60:	0000b440 	call	b44 <_mcount+0x7c>
    ab64:	0000b4e8 	cmpgeui	zero,zero,723
    ab68:	0000ad28 	cmpgeui	zero,zero,692
    ab6c:	0000b450 	cmplti	zero,zero,721
    ab70:	0000b4e8 	cmpgeui	zero,zero,723
    ab74:	0000b248 	cmpgei	zero,zero,713
    ab78:	0000b254 	movui	zero,713
    ab7c:	0000b254 	movui	zero,713
    ab80:	0000b254 	movui	zero,713
    ab84:	0000b254 	movui	zero,713
    ab88:	0000b254 	movui	zero,713
    ab8c:	0000b254 	movui	zero,713
    ab90:	0000b254 	movui	zero,713
    ab94:	0000b254 	movui	zero,713
    ab98:	0000b254 	movui	zero,713
    ab9c:	0000b4e8 	cmpgeui	zero,zero,723
    aba0:	0000b4e8 	cmpgeui	zero,zero,723
    aba4:	0000b4e8 	cmpgeui	zero,zero,723
    aba8:	0000b4e8 	cmpgeui	zero,zero,723
    abac:	0000b4e8 	cmpgeui	zero,zero,723
    abb0:	0000b4e8 	cmpgeui	zero,zero,723
    abb4:	0000b4e8 	cmpgeui	zero,zero,723
    abb8:	0000b4e8 	cmpgeui	zero,zero,723
    abbc:	0000b4e8 	cmpgeui	zero,zero,723
    abc0:	0000b4e8 	cmpgeui	zero,zero,723
    abc4:	0000b280 	call	b28 <_mcount+0x60>
    abc8:	0000b4e8 	cmpgeui	zero,zero,723
    abcc:	0000b4e8 	cmpgeui	zero,zero,723
    abd0:	0000b4e8 	cmpgeui	zero,zero,723
    abd4:	0000b4e8 	cmpgeui	zero,zero,723
    abd8:	0000b4e8 	cmpgeui	zero,zero,723
    abdc:	0000b4e8 	cmpgeui	zero,zero,723
    abe0:	0000b4e8 	cmpgeui	zero,zero,723
    abe4:	0000b4e8 	cmpgeui	zero,zero,723
    abe8:	0000b4e8 	cmpgeui	zero,zero,723
    abec:	0000b4e8 	cmpgeui	zero,zero,723
    abf0:	0000b2b8 	rdprs	zero,zero,714
    abf4:	0000b4e8 	cmpgeui	zero,zero,723
    abf8:	0000b4e8 	cmpgeui	zero,zero,723
    abfc:	0000b4e8 	cmpgeui	zero,zero,723
    ac00:	0000b4e8 	cmpgeui	zero,zero,723
    ac04:	0000b4e8 	cmpgeui	zero,zero,723
    ac08:	0000b310 	cmplti	zero,zero,716
    ac0c:	0000b4e8 	cmpgeui	zero,zero,723
    ac10:	0000b4e8 	cmpgeui	zero,zero,723
    ac14:	0000b380 	call	b38 <_mcount+0x70>
    ac18:	0000b4e8 	cmpgeui	zero,zero,723
    ac1c:	0000b4e8 	cmpgeui	zero,zero,723
    ac20:	0000b4e8 	cmpgeui	zero,zero,723
    ac24:	0000b4e8 	cmpgeui	zero,zero,723
    ac28:	0000b4e8 	cmpgeui	zero,zero,723
    ac2c:	0000b4e8 	cmpgeui	zero,zero,723
    ac30:	0000b4e8 	cmpgeui	zero,zero,723
    ac34:	0000b4e8 	cmpgeui	zero,zero,723
    ac38:	0000b4e8 	cmpgeui	zero,zero,723
    ac3c:	0000b4e8 	cmpgeui	zero,zero,723
    ac40:	0000b12c 	andhi	zero,zero,708
    ac44:	0000b158 	cmpnei	zero,zero,709
    ac48:	0000b4e8 	cmpgeui	zero,zero,723
    ac4c:	0000b4e8 	cmpgeui	zero,zero,723
    ac50:	0000b4e8 	cmpgeui	zero,zero,723
    ac54:	0000b490 	cmplti	zero,zero,722
    ac58:	0000b158 	cmpnei	zero,zero,709
    ac5c:	0000b4e8 	cmpgeui	zero,zero,723
    ac60:	0000b4e8 	cmpgeui	zero,zero,723
    ac64:	0000afec 	andhi	zero,zero,703
    ac68:	0000b4e8 	cmpgeui	zero,zero,723
    ac6c:	0000affc 	xorhi	zero,zero,703
    ac70:	0000b038 	rdprs	zero,zero,704
    ac74:	0000ad34 	movhi	zero,692
    ac78:	0000afe0 	cmpeqi	zero,zero,703
    ac7c:	0000b4e8 	cmpgeui	zero,zero,723
    ac80:	0000b3bc 	xorhi	zero,zero,718
    ac84:	0000b4e8 	cmpgeui	zero,zero,723
    ac88:	0000b414 	movui	zero,720
    ac8c:	0000b4e8 	cmpgeui	zero,zero,723
    ac90:	0000b4e8 	cmpgeui	zero,zero,723
    ac94:	0000b0d8 	cmpnei	zero,zero,707
    ac98:	42000204 	addi	r8,r8,8
    ac9c:	da802317 	ldw	r10,140(sp)
    aca0:	5455883a 	add	r10,r10,r17
    aca4:	da802315 	stw	r10,140(sp)
    aca8:	003f8b06 	br	aad8 <__alt_data_end+0xfc00aad8>
    acac:	d9002017 	ldw	r4,128(sp)
    acb0:	a00b883a 	mov	r5,r20
    acb4:	0005e900 	call	5e90 <__swsetup_r>
    acb8:	1003b11e 	bne	r2,zero,bb80 <___vfiprintf_internal_r+0x11f8>
    acbc:	a080030b 	ldhu	r2,12(r20)
    acc0:	00c00284 	movi	r3,10
    acc4:	1080068c 	andi	r2,r2,26
    acc8:	10ff541e 	bne	r2,r3,aa1c <__alt_data_end+0xfc00aa1c>
    accc:	a080038f 	ldh	r2,14(r20)
    acd0:	103f5216 	blt	r2,zero,aa1c <__alt_data_end+0xfc00aa1c>
    acd4:	d9c02217 	ldw	r7,136(sp)
    acd8:	d9002017 	ldw	r4,128(sp)
    acdc:	e00d883a 	mov	r6,fp
    ace0:	a00b883a 	mov	r5,r20
    ace4:	000be180 	call	be18 <__sbprintf>
    ace8:	dfc03617 	ldw	ra,216(sp)
    acec:	df003517 	ldw	fp,212(sp)
    acf0:	ddc03417 	ldw	r23,208(sp)
    acf4:	dd803317 	ldw	r22,204(sp)
    acf8:	dd403217 	ldw	r21,200(sp)
    acfc:	dd003117 	ldw	r20,196(sp)
    ad00:	dcc03017 	ldw	r19,192(sp)
    ad04:	dc802f17 	ldw	r18,188(sp)
    ad08:	dc402e17 	ldw	r17,184(sp)
    ad0c:	dc002d17 	ldw	r16,180(sp)
    ad10:	dec03704 	addi	sp,sp,220
    ad14:	f800283a 	ret
    ad18:	00081b00 	call	81b0 <__sinit>
    ad1c:	003f2f06 	br	a9dc <__alt_data_end+0xfc00a9dc>
    ad20:	0463c83a 	sub	r17,zero,r17
    ad24:	d8802215 	stw	r2,136(sp)
    ad28:	a5000114 	ori	r20,r20,4
    ad2c:	80c00007 	ldb	r3,0(r16)
    ad30:	003f7706 	br	ab10 <__alt_data_end+0xfc00ab10>
    ad34:	00800c04 	movi	r2,48
    ad38:	da802217 	ldw	r10,136(sp)
    ad3c:	d8801d05 	stb	r2,116(sp)
    ad40:	00801e04 	movi	r2,120
    ad44:	d8801d45 	stb	r2,117(sp)
    ad48:	d8001d85 	stb	zero,118(sp)
    ad4c:	50c00104 	addi	r3,r10,4
    ad50:	54800017 	ldw	r18,0(r10)
    ad54:	0027883a 	mov	r19,zero
    ad58:	a0800094 	ori	r2,r20,2
    ad5c:	48030b16 	blt	r9,zero,b98c <___vfiprintf_internal_r+0x1004>
    ad60:	00bfdfc4 	movi	r2,-129
    ad64:	a096703a 	and	r11,r20,r2
    ad68:	d8c02215 	stw	r3,136(sp)
    ad6c:	5d000094 	ori	r20,r11,2
    ad70:	90032b1e 	bne	r18,zero,ba20 <___vfiprintf_internal_r+0x1098>
    ad74:	00800074 	movhi	r2,1
    ad78:	1083f004 	addi	r2,r2,4032
    ad7c:	d8802615 	stw	r2,152(sp)
    ad80:	0039883a 	mov	fp,zero
    ad84:	48017b1e 	bne	r9,zero,b374 <___vfiprintf_internal_r+0x9ec>
    ad88:	0013883a 	mov	r9,zero
    ad8c:	0027883a 	mov	r19,zero
    ad90:	dd401a04 	addi	r21,sp,104
    ad94:	4825883a 	mov	r18,r9
    ad98:	4cc0010e 	bge	r9,r19,ada0 <___vfiprintf_internal_r+0x418>
    ad9c:	9825883a 	mov	r18,r19
    ada0:	e7003fcc 	andi	fp,fp,255
    ada4:	e700201c 	xori	fp,fp,128
    ada8:	e73fe004 	addi	fp,fp,-128
    adac:	e0000126 	beq	fp,zero,adb4 <___vfiprintf_internal_r+0x42c>
    adb0:	94800044 	addi	r18,r18,1
    adb4:	a380008c 	andi	r14,r20,2
    adb8:	70000126 	beq	r14,zero,adc0 <___vfiprintf_internal_r+0x438>
    adbc:	94800084 	addi	r18,r18,2
    adc0:	a700210c 	andi	fp,r20,132
    adc4:	e001df1e 	bne	fp,zero,b544 <___vfiprintf_internal_r+0xbbc>
    adc8:	8c87c83a 	sub	r3,r17,r18
    adcc:	00c1dd0e 	bge	zero,r3,b544 <___vfiprintf_internal_r+0xbbc>
    add0:	01c00404 	movi	r7,16
    add4:	d8801c17 	ldw	r2,112(sp)
    add8:	38c3ad0e 	bge	r7,r3,bc90 <___vfiprintf_internal_r+0x1308>
    addc:	02800074 	movhi	r10,1
    ade0:	52845404 	addi	r10,r10,4432
    ade4:	dc002915 	stw	r16,164(sp)
    ade8:	d9801b17 	ldw	r6,108(sp)
    adec:	da802415 	stw	r10,144(sp)
    adf0:	03c001c4 	movi	r15,7
    adf4:	da402515 	stw	r9,148(sp)
    adf8:	db802815 	stw	r14,160(sp)
    adfc:	1821883a 	mov	r16,r3
    ae00:	00000506 	br	ae18 <___vfiprintf_internal_r+0x490>
    ae04:	31400084 	addi	r5,r6,2
    ae08:	42000204 	addi	r8,r8,8
    ae0c:	200d883a 	mov	r6,r4
    ae10:	843ffc04 	addi	r16,r16,-16
    ae14:	3c000d0e 	bge	r7,r16,ae4c <___vfiprintf_internal_r+0x4c4>
    ae18:	10800404 	addi	r2,r2,16
    ae1c:	31000044 	addi	r4,r6,1
    ae20:	45800015 	stw	r22,0(r8)
    ae24:	41c00115 	stw	r7,4(r8)
    ae28:	d8801c15 	stw	r2,112(sp)
    ae2c:	d9001b15 	stw	r4,108(sp)
    ae30:	793ff40e 	bge	r15,r4,ae04 <__alt_data_end+0xfc00ae04>
    ae34:	1001b51e 	bne	r2,zero,b50c <___vfiprintf_internal_r+0xb84>
    ae38:	843ffc04 	addi	r16,r16,-16
    ae3c:	000d883a 	mov	r6,zero
    ae40:	01400044 	movi	r5,1
    ae44:	d811883a 	mov	r8,sp
    ae48:	3c3ff316 	blt	r7,r16,ae18 <__alt_data_end+0xfc00ae18>
    ae4c:	8007883a 	mov	r3,r16
    ae50:	da402517 	ldw	r9,148(sp)
    ae54:	db802817 	ldw	r14,160(sp)
    ae58:	dc002917 	ldw	r16,164(sp)
    ae5c:	da802417 	ldw	r10,144(sp)
    ae60:	1885883a 	add	r2,r3,r2
    ae64:	40c00115 	stw	r3,4(r8)
    ae68:	42800015 	stw	r10,0(r8)
    ae6c:	d8801c15 	stw	r2,112(sp)
    ae70:	d9401b15 	stw	r5,108(sp)
    ae74:	00c001c4 	movi	r3,7
    ae78:	19426016 	blt	r3,r5,b7fc <___vfiprintf_internal_r+0xe74>
    ae7c:	d8c01d87 	ldb	r3,118(sp)
    ae80:	42000204 	addi	r8,r8,8
    ae84:	29000044 	addi	r4,r5,1
    ae88:	1801b31e 	bne	r3,zero,b558 <___vfiprintf_internal_r+0xbd0>
    ae8c:	7001c026 	beq	r14,zero,b590 <___vfiprintf_internal_r+0xc08>
    ae90:	d8c01d04 	addi	r3,sp,116
    ae94:	10800084 	addi	r2,r2,2
    ae98:	40c00015 	stw	r3,0(r8)
    ae9c:	00c00084 	movi	r3,2
    aea0:	40c00115 	stw	r3,4(r8)
    aea4:	d8801c15 	stw	r2,112(sp)
    aea8:	d9001b15 	stw	r4,108(sp)
    aeac:	00c001c4 	movi	r3,7
    aeb0:	1902650e 	bge	r3,r4,b848 <___vfiprintf_internal_r+0xec0>
    aeb4:	10029a1e 	bne	r2,zero,b920 <___vfiprintf_internal_r+0xf98>
    aeb8:	00c02004 	movi	r3,128
    aebc:	01000044 	movi	r4,1
    aec0:	000b883a 	mov	r5,zero
    aec4:	d811883a 	mov	r8,sp
    aec8:	e0c1b31e 	bne	fp,r3,b598 <___vfiprintf_internal_r+0xc10>
    aecc:	8cb9c83a 	sub	fp,r17,r18
    aed0:	0701b10e 	bge	zero,fp,b598 <___vfiprintf_internal_r+0xc10>
    aed4:	01c00404 	movi	r7,16
    aed8:	3f03890e 	bge	r7,fp,bd00 <___vfiprintf_internal_r+0x1378>
    aedc:	00c00074 	movhi	r3,1
    aee0:	18c45004 	addi	r3,r3,4416
    aee4:	d8c02415 	stw	r3,144(sp)
    aee8:	8007883a 	mov	r3,r16
    aeec:	034001c4 	movi	r13,7
    aef0:	e021883a 	mov	r16,fp
    aef4:	da402515 	stw	r9,148(sp)
    aef8:	1839883a 	mov	fp,r3
    aefc:	00000506 	br	af14 <___vfiprintf_internal_r+0x58c>
    af00:	29800084 	addi	r6,r5,2
    af04:	42000204 	addi	r8,r8,8
    af08:	180b883a 	mov	r5,r3
    af0c:	843ffc04 	addi	r16,r16,-16
    af10:	3c000d0e 	bge	r7,r16,af48 <___vfiprintf_internal_r+0x5c0>
    af14:	10800404 	addi	r2,r2,16
    af18:	28c00044 	addi	r3,r5,1
    af1c:	45c00015 	stw	r23,0(r8)
    af20:	41c00115 	stw	r7,4(r8)
    af24:	d8801c15 	stw	r2,112(sp)
    af28:	d8c01b15 	stw	r3,108(sp)
    af2c:	68fff40e 	bge	r13,r3,af00 <__alt_data_end+0xfc00af00>
    af30:	1002241e 	bne	r2,zero,b7c4 <___vfiprintf_internal_r+0xe3c>
    af34:	843ffc04 	addi	r16,r16,-16
    af38:	01800044 	movi	r6,1
    af3c:	000b883a 	mov	r5,zero
    af40:	d811883a 	mov	r8,sp
    af44:	3c3ff316 	blt	r7,r16,af14 <__alt_data_end+0xfc00af14>
    af48:	da402517 	ldw	r9,148(sp)
    af4c:	e007883a 	mov	r3,fp
    af50:	8039883a 	mov	fp,r16
    af54:	1821883a 	mov	r16,r3
    af58:	d8c02417 	ldw	r3,144(sp)
    af5c:	1705883a 	add	r2,r2,fp
    af60:	47000115 	stw	fp,4(r8)
    af64:	40c00015 	stw	r3,0(r8)
    af68:	d8801c15 	stw	r2,112(sp)
    af6c:	d9801b15 	stw	r6,108(sp)
    af70:	00c001c4 	movi	r3,7
    af74:	19827616 	blt	r3,r6,b950 <___vfiprintf_internal_r+0xfc8>
    af78:	4cf9c83a 	sub	fp,r9,r19
    af7c:	42000204 	addi	r8,r8,8
    af80:	31000044 	addi	r4,r6,1
    af84:	300b883a 	mov	r5,r6
    af88:	07018516 	blt	zero,fp,b5a0 <___vfiprintf_internal_r+0xc18>
    af8c:	9885883a 	add	r2,r19,r2
    af90:	45400015 	stw	r21,0(r8)
    af94:	44c00115 	stw	r19,4(r8)
    af98:	d8801c15 	stw	r2,112(sp)
    af9c:	d9001b15 	stw	r4,108(sp)
    afa0:	00c001c4 	movi	r3,7
    afa4:	1901dd0e 	bge	r3,r4,b71c <___vfiprintf_internal_r+0xd94>
    afa8:	1002401e 	bne	r2,zero,b8ac <___vfiprintf_internal_r+0xf24>
    afac:	d8001b15 	stw	zero,108(sp)
    afb0:	a2c0010c 	andi	r11,r20,4
    afb4:	58000226 	beq	r11,zero,afc0 <___vfiprintf_internal_r+0x638>
    afb8:	8ca7c83a 	sub	r19,r17,r18
    afbc:	04c2f216 	blt	zero,r19,bb88 <___vfiprintf_internal_r+0x1200>
    afc0:	8c80010e 	bge	r17,r18,afc8 <___vfiprintf_internal_r+0x640>
    afc4:	9023883a 	mov	r17,r18
    afc8:	da802317 	ldw	r10,140(sp)
    afcc:	5455883a 	add	r10,r10,r17
    afd0:	da802315 	stw	r10,140(sp)
    afd4:	d8001b15 	stw	zero,108(sp)
    afd8:	d811883a 	mov	r8,sp
    afdc:	003ea206 	br	aa68 <__alt_data_end+0xfc00aa68>
    afe0:	a5000814 	ori	r20,r20,32
    afe4:	80c00007 	ldb	r3,0(r16)
    afe8:	003ec906 	br	ab10 <__alt_data_end+0xfc00ab10>
    afec:	80c00007 	ldb	r3,0(r16)
    aff0:	1b030926 	beq	r3,r12,bc18 <___vfiprintf_internal_r+0x1290>
    aff4:	a5000414 	ori	r20,r20,16
    aff8:	003ec506 	br	ab10 <__alt_data_end+0xfc00ab10>
    affc:	21003fcc 	andi	r4,r4,255
    b000:	20035e1e 	bne	r4,zero,bd7c <___vfiprintf_internal_r+0x13f4>
    b004:	a080080c 	andi	r2,r20,32
    b008:	1002a526 	beq	r2,zero,baa0 <___vfiprintf_internal_r+0x1118>
    b00c:	da802217 	ldw	r10,136(sp)
    b010:	50800017 	ldw	r2,0(r10)
    b014:	da802317 	ldw	r10,140(sp)
    b018:	5007d7fa 	srai	r3,r10,31
    b01c:	da802217 	ldw	r10,136(sp)
    b020:	10c00115 	stw	r3,4(r2)
    b024:	52800104 	addi	r10,r10,4
    b028:	da802215 	stw	r10,136(sp)
    b02c:	da802317 	ldw	r10,140(sp)
    b030:	12800015 	stw	r10,0(r2)
    b034:	003e8c06 	br	aa68 <__alt_data_end+0xfc00aa68>
    b038:	21003fcc 	andi	r4,r4,255
    b03c:	2003511e 	bne	r4,zero,bd84 <___vfiprintf_internal_r+0x13fc>
    b040:	a080080c 	andi	r2,r20,32
    b044:	1000a126 	beq	r2,zero,b2cc <___vfiprintf_internal_r+0x944>
    b048:	da802217 	ldw	r10,136(sp)
    b04c:	d8001d85 	stb	zero,118(sp)
    b050:	50800204 	addi	r2,r10,8
    b054:	54800017 	ldw	r18,0(r10)
    b058:	54c00117 	ldw	r19,4(r10)
    b05c:	4802b416 	blt	r9,zero,bb30 <___vfiprintf_internal_r+0x11a8>
    b060:	013fdfc4 	movi	r4,-129
    b064:	94c6b03a 	or	r3,r18,r19
    b068:	d8802215 	stw	r2,136(sp)
    b06c:	a128703a 	and	r20,r20,r4
    b070:	1800a226 	beq	r3,zero,b2fc <___vfiprintf_internal_r+0x974>
    b074:	0039883a 	mov	fp,zero
    b078:	dd401a04 	addi	r21,sp,104
    b07c:	9006d0fa 	srli	r3,r18,3
    b080:	9808977a 	slli	r4,r19,29
    b084:	9826d0fa 	srli	r19,r19,3
    b088:	948001cc 	andi	r18,r18,7
    b08c:	90800c04 	addi	r2,r18,48
    b090:	ad7fffc4 	addi	r21,r21,-1
    b094:	20e4b03a 	or	r18,r4,r3
    b098:	a8800005 	stb	r2,0(r21)
    b09c:	94c6b03a 	or	r3,r18,r19
    b0a0:	183ff61e 	bne	r3,zero,b07c <__alt_data_end+0xfc00b07c>
    b0a4:	a0c0004c 	andi	r3,r20,1
    b0a8:	18005926 	beq	r3,zero,b210 <___vfiprintf_internal_r+0x888>
    b0ac:	10803fcc 	andi	r2,r2,255
    b0b0:	1080201c 	xori	r2,r2,128
    b0b4:	10bfe004 	addi	r2,r2,-128
    b0b8:	00c00c04 	movi	r3,48
    b0bc:	10c05426 	beq	r2,r3,b210 <___vfiprintf_internal_r+0x888>
    b0c0:	da801e17 	ldw	r10,120(sp)
    b0c4:	a8bfffc4 	addi	r2,r21,-1
    b0c8:	a8ffffc5 	stb	r3,-1(r21)
    b0cc:	50a7c83a 	sub	r19,r10,r2
    b0d0:	102b883a 	mov	r21,r2
    b0d4:	003f2f06 	br	ad94 <__alt_data_end+0xfc00ad94>
    b0d8:	21003fcc 	andi	r4,r4,255
    b0dc:	2003421e 	bne	r4,zero,bde8 <___vfiprintf_internal_r+0x1460>
    b0e0:	00800074 	movhi	r2,1
    b0e4:	1083f004 	addi	r2,r2,4032
    b0e8:	d8802615 	stw	r2,152(sp)
    b0ec:	a080080c 	andi	r2,r20,32
    b0f0:	1000aa26 	beq	r2,zero,b39c <___vfiprintf_internal_r+0xa14>
    b0f4:	da802217 	ldw	r10,136(sp)
    b0f8:	54800017 	ldw	r18,0(r10)
    b0fc:	54c00117 	ldw	r19,4(r10)
    b100:	52800204 	addi	r10,r10,8
    b104:	da802215 	stw	r10,136(sp)
    b108:	a080004c 	andi	r2,r20,1
    b10c:	1001d226 	beq	r2,zero,b858 <___vfiprintf_internal_r+0xed0>
    b110:	94c4b03a 	or	r2,r18,r19
    b114:	1002351e 	bne	r2,zero,b9ec <___vfiprintf_internal_r+0x1064>
    b118:	d8001d85 	stb	zero,118(sp)
    b11c:	48022216 	blt	r9,zero,b9a8 <___vfiprintf_internal_r+0x1020>
    b120:	00bfdfc4 	movi	r2,-129
    b124:	a0a8703a 	and	r20,r20,r2
    b128:	003f1506 	br	ad80 <__alt_data_end+0xfc00ad80>
    b12c:	da802217 	ldw	r10,136(sp)
    b130:	04800044 	movi	r18,1
    b134:	d8001d85 	stb	zero,118(sp)
    b138:	50800017 	ldw	r2,0(r10)
    b13c:	52800104 	addi	r10,r10,4
    b140:	da802215 	stw	r10,136(sp)
    b144:	d8801005 	stb	r2,64(sp)
    b148:	9027883a 	mov	r19,r18
    b14c:	dd401004 	addi	r21,sp,64
    b150:	0013883a 	mov	r9,zero
    b154:	003f1706 	br	adb4 <__alt_data_end+0xfc00adb4>
    b158:	21003fcc 	andi	r4,r4,255
    b15c:	2003201e 	bne	r4,zero,bde0 <___vfiprintf_internal_r+0x1458>
    b160:	a080080c 	andi	r2,r20,32
    b164:	10004b26 	beq	r2,zero,b294 <___vfiprintf_internal_r+0x90c>
    b168:	da802217 	ldw	r10,136(sp)
    b16c:	50800117 	ldw	r2,4(r10)
    b170:	54800017 	ldw	r18,0(r10)
    b174:	52800204 	addi	r10,r10,8
    b178:	da802215 	stw	r10,136(sp)
    b17c:	1027883a 	mov	r19,r2
    b180:	10022c16 	blt	r2,zero,ba34 <___vfiprintf_internal_r+0x10ac>
    b184:	df001d83 	ldbu	fp,118(sp)
    b188:	48007216 	blt	r9,zero,b354 <___vfiprintf_internal_r+0x9cc>
    b18c:	00ffdfc4 	movi	r3,-129
    b190:	94c4b03a 	or	r2,r18,r19
    b194:	a0e8703a 	and	r20,r20,r3
    b198:	1000cc26 	beq	r2,zero,b4cc <___vfiprintf_internal_r+0xb44>
    b19c:	98021026 	beq	r19,zero,b9e0 <___vfiprintf_internal_r+0x1058>
    b1a0:	dc402415 	stw	r17,144(sp)
    b1a4:	dc002515 	stw	r16,148(sp)
    b1a8:	9823883a 	mov	r17,r19
    b1ac:	9021883a 	mov	r16,r18
    b1b0:	dd401a04 	addi	r21,sp,104
    b1b4:	4825883a 	mov	r18,r9
    b1b8:	4027883a 	mov	r19,r8
    b1bc:	8009883a 	mov	r4,r16
    b1c0:	880b883a 	mov	r5,r17
    b1c4:	01800284 	movi	r6,10
    b1c8:	000f883a 	mov	r7,zero
    b1cc:	000d9180 	call	d918 <__umoddi3>
    b1d0:	10800c04 	addi	r2,r2,48
    b1d4:	ad7fffc4 	addi	r21,r21,-1
    b1d8:	8009883a 	mov	r4,r16
    b1dc:	880b883a 	mov	r5,r17
    b1e0:	a8800005 	stb	r2,0(r21)
    b1e4:	01800284 	movi	r6,10
    b1e8:	000f883a 	mov	r7,zero
    b1ec:	000d3940 	call	d394 <__udivdi3>
    b1f0:	1021883a 	mov	r16,r2
    b1f4:	10c4b03a 	or	r2,r2,r3
    b1f8:	1823883a 	mov	r17,r3
    b1fc:	103fef1e 	bne	r2,zero,b1bc <__alt_data_end+0xfc00b1bc>
    b200:	dc402417 	ldw	r17,144(sp)
    b204:	dc002517 	ldw	r16,148(sp)
    b208:	9013883a 	mov	r9,r18
    b20c:	9811883a 	mov	r8,r19
    b210:	da801e17 	ldw	r10,120(sp)
    b214:	5567c83a 	sub	r19,r10,r21
    b218:	003ede06 	br	ad94 <__alt_data_end+0xfc00ad94>
    b21c:	38803fcc 	andi	r2,r7,255
    b220:	1080201c 	xori	r2,r2,128
    b224:	10bfe004 	addi	r2,r2,-128
    b228:	1002371e 	bne	r2,zero,bb08 <___vfiprintf_internal_r+0x1180>
    b22c:	01000044 	movi	r4,1
    b230:	01c00804 	movi	r7,32
    b234:	80c00007 	ldb	r3,0(r16)
    b238:	003e3506 	br	ab10 <__alt_data_end+0xfc00ab10>
    b23c:	a5000054 	ori	r20,r20,1
    b240:	80c00007 	ldb	r3,0(r16)
    b244:	003e3206 	br	ab10 <__alt_data_end+0xfc00ab10>
    b248:	a5002014 	ori	r20,r20,128
    b24c:	80c00007 	ldb	r3,0(r16)
    b250:	003e2f06 	br	ab10 <__alt_data_end+0xfc00ab10>
    b254:	8015883a 	mov	r10,r16
    b258:	0023883a 	mov	r17,zero
    b25c:	18bff404 	addi	r2,r3,-48
    b260:	50c00007 	ldb	r3,0(r10)
    b264:	8c4002a4 	muli	r17,r17,10
    b268:	84000044 	addi	r16,r16,1
    b26c:	8015883a 	mov	r10,r16
    b270:	1463883a 	add	r17,r2,r17
    b274:	18bff404 	addi	r2,r3,-48
    b278:	30bff92e 	bgeu	r6,r2,b260 <__alt_data_end+0xfc00b260>
    b27c:	003e2506 	br	ab14 <__alt_data_end+0xfc00ab14>
    b280:	21003fcc 	andi	r4,r4,255
    b284:	2002d41e 	bne	r4,zero,bdd8 <___vfiprintf_internal_r+0x1450>
    b288:	a5000414 	ori	r20,r20,16
    b28c:	a080080c 	andi	r2,r20,32
    b290:	103fb51e 	bne	r2,zero,b168 <__alt_data_end+0xfc00b168>
    b294:	a080040c 	andi	r2,r20,16
    b298:	1001f826 	beq	r2,zero,ba7c <___vfiprintf_internal_r+0x10f4>
    b29c:	da802217 	ldw	r10,136(sp)
    b2a0:	54800017 	ldw	r18,0(r10)
    b2a4:	52800104 	addi	r10,r10,4
    b2a8:	da802215 	stw	r10,136(sp)
    b2ac:	9027d7fa 	srai	r19,r18,31
    b2b0:	9805883a 	mov	r2,r19
    b2b4:	003fb206 	br	b180 <__alt_data_end+0xfc00b180>
    b2b8:	21003fcc 	andi	r4,r4,255
    b2bc:	2002c41e 	bne	r4,zero,bdd0 <___vfiprintf_internal_r+0x1448>
    b2c0:	a5000414 	ori	r20,r20,16
    b2c4:	a080080c 	andi	r2,r20,32
    b2c8:	103f5f1e 	bne	r2,zero,b048 <__alt_data_end+0xfc00b048>
    b2cc:	a080040c 	andi	r2,r20,16
    b2d0:	10020f26 	beq	r2,zero,bb10 <___vfiprintf_internal_r+0x1188>
    b2d4:	da802217 	ldw	r10,136(sp)
    b2d8:	d8001d85 	stb	zero,118(sp)
    b2dc:	0027883a 	mov	r19,zero
    b2e0:	50800104 	addi	r2,r10,4
    b2e4:	54800017 	ldw	r18,0(r10)
    b2e8:	48021116 	blt	r9,zero,bb30 <___vfiprintf_internal_r+0x11a8>
    b2ec:	00ffdfc4 	movi	r3,-129
    b2f0:	d8802215 	stw	r2,136(sp)
    b2f4:	a0e8703a 	and	r20,r20,r3
    b2f8:	903f5e1e 	bne	r18,zero,b074 <__alt_data_end+0xfc00b074>
    b2fc:	0039883a 	mov	fp,zero
    b300:	4802a626 	beq	r9,zero,bd9c <___vfiprintf_internal_r+0x1414>
    b304:	0025883a 	mov	r18,zero
    b308:	0027883a 	mov	r19,zero
    b30c:	003f5a06 	br	b078 <__alt_data_end+0xfc00b078>
    b310:	21003fcc 	andi	r4,r4,255
    b314:	20029f1e 	bne	r4,zero,bd94 <___vfiprintf_internal_r+0x140c>
    b318:	a5000414 	ori	r20,r20,16
    b31c:	a080080c 	andi	r2,r20,32
    b320:	10005e1e 	bne	r2,zero,b49c <___vfiprintf_internal_r+0xb14>
    b324:	a080040c 	andi	r2,r20,16
    b328:	1001a21e 	bne	r2,zero,b9b4 <___vfiprintf_internal_r+0x102c>
    b32c:	a080100c 	andi	r2,r20,64
    b330:	d8001d85 	stb	zero,118(sp)
    b334:	da802217 	ldw	r10,136(sp)
    b338:	1002231e 	bne	r2,zero,bbc8 <___vfiprintf_internal_r+0x1240>
    b33c:	50800104 	addi	r2,r10,4
    b340:	54800017 	ldw	r18,0(r10)
    b344:	0027883a 	mov	r19,zero
    b348:	4801a00e 	bge	r9,zero,b9cc <___vfiprintf_internal_r+0x1044>
    b34c:	d8802215 	stw	r2,136(sp)
    b350:	0039883a 	mov	fp,zero
    b354:	94c4b03a 	or	r2,r18,r19
    b358:	103f901e 	bne	r2,zero,b19c <__alt_data_end+0xfc00b19c>
    b35c:	00800044 	movi	r2,1
    b360:	10803fcc 	andi	r2,r2,255
    b364:	00c00044 	movi	r3,1
    b368:	10c05926 	beq	r2,r3,b4d0 <___vfiprintf_internal_r+0xb48>
    b36c:	00c00084 	movi	r3,2
    b370:	10ffe41e 	bne	r2,r3,b304 <__alt_data_end+0xfc00b304>
    b374:	0025883a 	mov	r18,zero
    b378:	0027883a 	mov	r19,zero
    b37c:	00013d06 	br	b874 <___vfiprintf_internal_r+0xeec>
    b380:	21003fcc 	andi	r4,r4,255
    b384:	2002811e 	bne	r4,zero,bd8c <___vfiprintf_internal_r+0x1404>
    b388:	00800074 	movhi	r2,1
    b38c:	1083eb04 	addi	r2,r2,4012
    b390:	d8802615 	stw	r2,152(sp)
    b394:	a080080c 	andi	r2,r20,32
    b398:	103f561e 	bne	r2,zero,b0f4 <__alt_data_end+0xfc00b0f4>
    b39c:	a080040c 	andi	r2,r20,16
    b3a0:	1001d126 	beq	r2,zero,bae8 <___vfiprintf_internal_r+0x1160>
    b3a4:	da802217 	ldw	r10,136(sp)
    b3a8:	0027883a 	mov	r19,zero
    b3ac:	54800017 	ldw	r18,0(r10)
    b3b0:	52800104 	addi	r10,r10,4
    b3b4:	da802215 	stw	r10,136(sp)
    b3b8:	003f5306 	br	b108 <__alt_data_end+0xfc00b108>
    b3bc:	da802217 	ldw	r10,136(sp)
    b3c0:	d8001d85 	stb	zero,118(sp)
    b3c4:	55400017 	ldw	r21,0(r10)
    b3c8:	50c00104 	addi	r3,r10,4
    b3cc:	a8024226 	beq	r21,zero,bcd8 <___vfiprintf_internal_r+0x1350>
    b3d0:	48021816 	blt	r9,zero,bc34 <___vfiprintf_internal_r+0x12ac>
    b3d4:	480d883a 	mov	r6,r9
    b3d8:	000b883a 	mov	r5,zero
    b3dc:	a809883a 	mov	r4,r21
    b3e0:	d8c02a15 	stw	r3,168(sp)
    b3e4:	da002b15 	stw	r8,172(sp)
    b3e8:	da402c15 	stw	r9,176(sp)
    b3ec:	000935c0 	call	935c <memchr>
    b3f0:	d8c02a17 	ldw	r3,168(sp)
    b3f4:	da002b17 	ldw	r8,172(sp)
    b3f8:	da402c17 	ldw	r9,176(sp)
    b3fc:	10024826 	beq	r2,zero,bd20 <___vfiprintf_internal_r+0x1398>
    b400:	1567c83a 	sub	r19,r2,r21
    b404:	df001d83 	ldbu	fp,118(sp)
    b408:	d8c02215 	stw	r3,136(sp)
    b40c:	0013883a 	mov	r9,zero
    b410:	003e6006 	br	ad94 <__alt_data_end+0xfc00ad94>
    b414:	21003fcc 	andi	r4,r4,255
    b418:	203fc026 	beq	r4,zero,b31c <__alt_data_end+0xfc00b31c>
    b41c:	d9c01d85 	stb	r7,118(sp)
    b420:	003fbe06 	br	b31c <__alt_data_end+0xfc00b31c>
    b424:	da802217 	ldw	r10,136(sp)
    b428:	54400017 	ldw	r17,0(r10)
    b42c:	50800104 	addi	r2,r10,4
    b430:	883e3b16 	blt	r17,zero,ad20 <__alt_data_end+0xfc00ad20>
    b434:	d8802215 	stw	r2,136(sp)
    b438:	80c00007 	ldb	r3,0(r16)
    b43c:	003db406 	br	ab10 <__alt_data_end+0xfc00ab10>
    b440:	01000044 	movi	r4,1
    b444:	01c00ac4 	movi	r7,43
    b448:	80c00007 	ldb	r3,0(r16)
    b44c:	003db006 	br	ab10 <__alt_data_end+0xfc00ab10>
    b450:	80c00007 	ldb	r3,0(r16)
    b454:	82800044 	addi	r10,r16,1
    b458:	1b423c26 	beq	r3,r13,bd4c <___vfiprintf_internal_r+0x13c4>
    b45c:	18bff404 	addi	r2,r3,-48
    b460:	0013883a 	mov	r9,zero
    b464:	30822b36 	bltu	r6,r2,bd14 <___vfiprintf_internal_r+0x138c>
    b468:	50c00007 	ldb	r3,0(r10)
    b46c:	4a4002a4 	muli	r9,r9,10
    b470:	54000044 	addi	r16,r10,1
    b474:	8015883a 	mov	r10,r16
    b478:	4893883a 	add	r9,r9,r2
    b47c:	18bff404 	addi	r2,r3,-48
    b480:	30bff92e 	bgeu	r6,r2,b468 <__alt_data_end+0xfc00b468>
    b484:	483da30e 	bge	r9,zero,ab14 <__alt_data_end+0xfc00ab14>
    b488:	027fffc4 	movi	r9,-1
    b48c:	003da106 	br	ab14 <__alt_data_end+0xfc00ab14>
    b490:	a5001014 	ori	r20,r20,64
    b494:	80c00007 	ldb	r3,0(r16)
    b498:	003d9d06 	br	ab10 <__alt_data_end+0xfc00ab10>
    b49c:	da802217 	ldw	r10,136(sp)
    b4a0:	d8001d85 	stb	zero,118(sp)
    b4a4:	50c00204 	addi	r3,r10,8
    b4a8:	54800017 	ldw	r18,0(r10)
    b4ac:	54c00117 	ldw	r19,4(r10)
    b4b0:	4801ca16 	blt	r9,zero,bbdc <___vfiprintf_internal_r+0x1254>
    b4b4:	013fdfc4 	movi	r4,-129
    b4b8:	94c4b03a 	or	r2,r18,r19
    b4bc:	d8c02215 	stw	r3,136(sp)
    b4c0:	a128703a 	and	r20,r20,r4
    b4c4:	0039883a 	mov	fp,zero
    b4c8:	103f341e 	bne	r2,zero,b19c <__alt_data_end+0xfc00b19c>
    b4cc:	483e2e26 	beq	r9,zero,ad88 <__alt_data_end+0xfc00ad88>
    b4d0:	0025883a 	mov	r18,zero
    b4d4:	94800c04 	addi	r18,r18,48
    b4d8:	dc8019c5 	stb	r18,103(sp)
    b4dc:	dcc02717 	ldw	r19,156(sp)
    b4e0:	dd4019c4 	addi	r21,sp,103
    b4e4:	003e2b06 	br	ad94 <__alt_data_end+0xfc00ad94>
    b4e8:	21003fcc 	andi	r4,r4,255
    b4ec:	2002361e 	bne	r4,zero,bdc8 <___vfiprintf_internal_r+0x1440>
    b4f0:	1801c126 	beq	r3,zero,bbf8 <___vfiprintf_internal_r+0x1270>
    b4f4:	04800044 	movi	r18,1
    b4f8:	d8c01005 	stb	r3,64(sp)
    b4fc:	d8001d85 	stb	zero,118(sp)
    b500:	9027883a 	mov	r19,r18
    b504:	dd401004 	addi	r21,sp,64
    b508:	003f1106 	br	b150 <__alt_data_end+0xfc00b150>
    b50c:	d9402117 	ldw	r5,132(sp)
    b510:	d9002017 	ldw	r4,128(sp)
    b514:	d9801a04 	addi	r6,sp,104
    b518:	d9c02b15 	stw	r7,172(sp)
    b51c:	dbc02a15 	stw	r15,168(sp)
    b520:	000a85c0 	call	a85c <__sprint_r.part.0>
    b524:	d9c02b17 	ldw	r7,172(sp)
    b528:	dbc02a17 	ldw	r15,168(sp)
    b52c:	10006d1e 	bne	r2,zero,b6e4 <___vfiprintf_internal_r+0xd5c>
    b530:	d9801b17 	ldw	r6,108(sp)
    b534:	d8801c17 	ldw	r2,112(sp)
    b538:	d811883a 	mov	r8,sp
    b53c:	31400044 	addi	r5,r6,1
    b540:	003e3306 	br	ae10 <__alt_data_end+0xfc00ae10>
    b544:	d9401b17 	ldw	r5,108(sp)
    b548:	d8801c17 	ldw	r2,112(sp)
    b54c:	29000044 	addi	r4,r5,1
    b550:	d8c01d87 	ldb	r3,118(sp)
    b554:	183e4d26 	beq	r3,zero,ae8c <__alt_data_end+0xfc00ae8c>
    b558:	00c00044 	movi	r3,1
    b55c:	d9401d84 	addi	r5,sp,118
    b560:	10c5883a 	add	r2,r2,r3
    b564:	41400015 	stw	r5,0(r8)
    b568:	40c00115 	stw	r3,4(r8)
    b56c:	d8801c15 	stw	r2,112(sp)
    b570:	d9001b15 	stw	r4,108(sp)
    b574:	014001c4 	movi	r5,7
    b578:	2900a90e 	bge	r5,r4,b820 <___vfiprintf_internal_r+0xe98>
    b57c:	1000da1e 	bne	r2,zero,b8e8 <___vfiprintf_internal_r+0xf60>
    b580:	7000ab1e 	bne	r14,zero,b830 <___vfiprintf_internal_r+0xea8>
    b584:	000b883a 	mov	r5,zero
    b588:	1809883a 	mov	r4,r3
    b58c:	d811883a 	mov	r8,sp
    b590:	00c02004 	movi	r3,128
    b594:	e0fe4d26 	beq	fp,r3,aecc <__alt_data_end+0xfc00aecc>
    b598:	4cf9c83a 	sub	fp,r9,r19
    b59c:	073e7b0e 	bge	zero,fp,af8c <__alt_data_end+0xfc00af8c>
    b5a0:	01c00404 	movi	r7,16
    b5a4:	3f01900e 	bge	r7,fp,bbe8 <___vfiprintf_internal_r+0x1260>
    b5a8:	00c00074 	movhi	r3,1
    b5ac:	18c45004 	addi	r3,r3,4416
    b5b0:	d8c02415 	stw	r3,144(sp)
    b5b4:	034001c4 	movi	r13,7
    b5b8:	00000506 	br	b5d0 <___vfiprintf_internal_r+0xc48>
    b5bc:	29000084 	addi	r4,r5,2
    b5c0:	42000204 	addi	r8,r8,8
    b5c4:	180b883a 	mov	r5,r3
    b5c8:	e73ffc04 	addi	fp,fp,-16
    b5cc:	3f000d0e 	bge	r7,fp,b604 <___vfiprintf_internal_r+0xc7c>
    b5d0:	10800404 	addi	r2,r2,16
    b5d4:	28c00044 	addi	r3,r5,1
    b5d8:	45c00015 	stw	r23,0(r8)
    b5dc:	41c00115 	stw	r7,4(r8)
    b5e0:	d8801c15 	stw	r2,112(sp)
    b5e4:	d8c01b15 	stw	r3,108(sp)
    b5e8:	68fff40e 	bge	r13,r3,b5bc <__alt_data_end+0xfc00b5bc>
    b5ec:	1000101e 	bne	r2,zero,b630 <___vfiprintf_internal_r+0xca8>
    b5f0:	e73ffc04 	addi	fp,fp,-16
    b5f4:	01000044 	movi	r4,1
    b5f8:	000b883a 	mov	r5,zero
    b5fc:	d811883a 	mov	r8,sp
    b600:	3f3ff316 	blt	r7,fp,b5d0 <__alt_data_end+0xfc00b5d0>
    b604:	da802417 	ldw	r10,144(sp)
    b608:	1705883a 	add	r2,r2,fp
    b60c:	47000115 	stw	fp,4(r8)
    b610:	42800015 	stw	r10,0(r8)
    b614:	d8801c15 	stw	r2,112(sp)
    b618:	d9001b15 	stw	r4,108(sp)
    b61c:	00c001c4 	movi	r3,7
    b620:	19003616 	blt	r3,r4,b6fc <___vfiprintf_internal_r+0xd74>
    b624:	42000204 	addi	r8,r8,8
    b628:	21000044 	addi	r4,r4,1
    b62c:	003e5706 	br	af8c <__alt_data_end+0xfc00af8c>
    b630:	d9402117 	ldw	r5,132(sp)
    b634:	d9002017 	ldw	r4,128(sp)
    b638:	d9801a04 	addi	r6,sp,104
    b63c:	d9c02b15 	stw	r7,172(sp)
    b640:	db402a15 	stw	r13,168(sp)
    b644:	000a85c0 	call	a85c <__sprint_r.part.0>
    b648:	d9c02b17 	ldw	r7,172(sp)
    b64c:	db402a17 	ldw	r13,168(sp)
    b650:	1000241e 	bne	r2,zero,b6e4 <___vfiprintf_internal_r+0xd5c>
    b654:	d9401b17 	ldw	r5,108(sp)
    b658:	d8801c17 	ldw	r2,112(sp)
    b65c:	d811883a 	mov	r8,sp
    b660:	29000044 	addi	r4,r5,1
    b664:	003fd806 	br	b5c8 <__alt_data_end+0xfc00b5c8>
    b668:	d9401b17 	ldw	r5,108(sp)
    b66c:	00c00074 	movhi	r3,1
    b670:	18c45404 	addi	r3,r3,4432
    b674:	d8c02415 	stw	r3,144(sp)
    b678:	29400044 	addi	r5,r5,1
    b67c:	d8c02417 	ldw	r3,144(sp)
    b680:	14c5883a 	add	r2,r2,r19
    b684:	44c00115 	stw	r19,4(r8)
    b688:	40c00015 	stw	r3,0(r8)
    b68c:	d8801c15 	stw	r2,112(sp)
    b690:	d9401b15 	stw	r5,108(sp)
    b694:	00c001c4 	movi	r3,7
    b698:	1940070e 	bge	r3,r5,b6b8 <___vfiprintf_internal_r+0xd30>
    b69c:	103e4826 	beq	r2,zero,afc0 <__alt_data_end+0xfc00afc0>
    b6a0:	d9402117 	ldw	r5,132(sp)
    b6a4:	d9002017 	ldw	r4,128(sp)
    b6a8:	d9801a04 	addi	r6,sp,104
    b6ac:	000a85c0 	call	a85c <__sprint_r.part.0>
    b6b0:	10000c1e 	bne	r2,zero,b6e4 <___vfiprintf_internal_r+0xd5c>
    b6b4:	d8801c17 	ldw	r2,112(sp)
    b6b8:	8c80010e 	bge	r17,r18,b6c0 <___vfiprintf_internal_r+0xd38>
    b6bc:	9023883a 	mov	r17,r18
    b6c0:	da802317 	ldw	r10,140(sp)
    b6c4:	5455883a 	add	r10,r10,r17
    b6c8:	da802315 	stw	r10,140(sp)
    b6cc:	103e4126 	beq	r2,zero,afd4 <__alt_data_end+0xfc00afd4>
    b6d0:	d9402117 	ldw	r5,132(sp)
    b6d4:	d9002017 	ldw	r4,128(sp)
    b6d8:	d9801a04 	addi	r6,sp,104
    b6dc:	000a85c0 	call	a85c <__sprint_r.part.0>
    b6e0:	103e3c26 	beq	r2,zero,afd4 <__alt_data_end+0xfc00afd4>
    b6e4:	dd002117 	ldw	r20,132(sp)
    b6e8:	a080030b 	ldhu	r2,12(r20)
    b6ec:	1080100c 	andi	r2,r2,64
    b6f0:	1001231e 	bne	r2,zero,bb80 <___vfiprintf_internal_r+0x11f8>
    b6f4:	d8802317 	ldw	r2,140(sp)
    b6f8:	003d7b06 	br	ace8 <__alt_data_end+0xfc00ace8>
    b6fc:	1000991e 	bne	r2,zero,b964 <___vfiprintf_internal_r+0xfdc>
    b700:	00c00044 	movi	r3,1
    b704:	9805883a 	mov	r2,r19
    b708:	dd400015 	stw	r21,0(sp)
    b70c:	dcc00115 	stw	r19,4(sp)
    b710:	dcc01c15 	stw	r19,112(sp)
    b714:	d8c01b15 	stw	r3,108(sp)
    b718:	d811883a 	mov	r8,sp
    b71c:	42000204 	addi	r8,r8,8
    b720:	a2c0010c 	andi	r11,r20,4
    b724:	583fe426 	beq	r11,zero,b6b8 <__alt_data_end+0xfc00b6b8>
    b728:	8ca7c83a 	sub	r19,r17,r18
    b72c:	04ffe20e 	bge	zero,r19,b6b8 <__alt_data_end+0xfc00b6b8>
    b730:	01c00404 	movi	r7,16
    b734:	3cffcc0e 	bge	r7,r19,b668 <__alt_data_end+0xfc00b668>
    b738:	02800074 	movhi	r10,1
    b73c:	52845404 	addi	r10,r10,4432
    b740:	d9001b17 	ldw	r4,108(sp)
    b744:	da802415 	stw	r10,144(sp)
    b748:	382b883a 	mov	r21,r7
    b74c:	050001c4 	movi	r20,7
    b750:	df002017 	ldw	fp,128(sp)
    b754:	00000506 	br	b76c <___vfiprintf_internal_r+0xde4>
    b758:	21400084 	addi	r5,r4,2
    b75c:	42000204 	addi	r8,r8,8
    b760:	1809883a 	mov	r4,r3
    b764:	9cfffc04 	addi	r19,r19,-16
    b768:	acffc40e 	bge	r21,r19,b67c <__alt_data_end+0xfc00b67c>
    b76c:	10800404 	addi	r2,r2,16
    b770:	20c00044 	addi	r3,r4,1
    b774:	45800015 	stw	r22,0(r8)
    b778:	45400115 	stw	r21,4(r8)
    b77c:	d8801c15 	stw	r2,112(sp)
    b780:	d8c01b15 	stw	r3,108(sp)
    b784:	a0fff40e 	bge	r20,r3,b758 <__alt_data_end+0xfc00b758>
    b788:	1000041e 	bne	r2,zero,b79c <___vfiprintf_internal_r+0xe14>
    b78c:	01400044 	movi	r5,1
    b790:	0009883a 	mov	r4,zero
    b794:	d811883a 	mov	r8,sp
    b798:	003ff206 	br	b764 <__alt_data_end+0xfc00b764>
    b79c:	d9402117 	ldw	r5,132(sp)
    b7a0:	d9801a04 	addi	r6,sp,104
    b7a4:	e009883a 	mov	r4,fp
    b7a8:	000a85c0 	call	a85c <__sprint_r.part.0>
    b7ac:	103fcd1e 	bne	r2,zero,b6e4 <__alt_data_end+0xfc00b6e4>
    b7b0:	d9001b17 	ldw	r4,108(sp)
    b7b4:	d8801c17 	ldw	r2,112(sp)
    b7b8:	d811883a 	mov	r8,sp
    b7bc:	21400044 	addi	r5,r4,1
    b7c0:	003fe806 	br	b764 <__alt_data_end+0xfc00b764>
    b7c4:	d9402117 	ldw	r5,132(sp)
    b7c8:	d9002017 	ldw	r4,128(sp)
    b7cc:	d9801a04 	addi	r6,sp,104
    b7d0:	d9c02b15 	stw	r7,172(sp)
    b7d4:	db402a15 	stw	r13,168(sp)
    b7d8:	000a85c0 	call	a85c <__sprint_r.part.0>
    b7dc:	d9c02b17 	ldw	r7,172(sp)
    b7e0:	db402a17 	ldw	r13,168(sp)
    b7e4:	103fbf1e 	bne	r2,zero,b6e4 <__alt_data_end+0xfc00b6e4>
    b7e8:	d9401b17 	ldw	r5,108(sp)
    b7ec:	d8801c17 	ldw	r2,112(sp)
    b7f0:	d811883a 	mov	r8,sp
    b7f4:	29800044 	addi	r6,r5,1
    b7f8:	003dc406 	br	af0c <__alt_data_end+0xfc00af0c>
    b7fc:	1000d21e 	bne	r2,zero,bb48 <___vfiprintf_internal_r+0x11c0>
    b800:	d8c01d87 	ldb	r3,118(sp)
    b804:	18009526 	beq	r3,zero,ba5c <___vfiprintf_internal_r+0x10d4>
    b808:	00800044 	movi	r2,1
    b80c:	d8c01d84 	addi	r3,sp,118
    b810:	1009883a 	mov	r4,r2
    b814:	d8c00015 	stw	r3,0(sp)
    b818:	d8800115 	stw	r2,4(sp)
    b81c:	d811883a 	mov	r8,sp
    b820:	200b883a 	mov	r5,r4
    b824:	42000204 	addi	r8,r8,8
    b828:	21000044 	addi	r4,r4,1
    b82c:	003d9706 	br	ae8c <__alt_data_end+0xfc00ae8c>
    b830:	d9001d04 	addi	r4,sp,116
    b834:	00800084 	movi	r2,2
    b838:	d9000015 	stw	r4,0(sp)
    b83c:	d8800115 	stw	r2,4(sp)
    b840:	1809883a 	mov	r4,r3
    b844:	d811883a 	mov	r8,sp
    b848:	200b883a 	mov	r5,r4
    b84c:	42000204 	addi	r8,r8,8
    b850:	21000044 	addi	r4,r4,1
    b854:	003f4e06 	br	b590 <__alt_data_end+0xfc00b590>
    b858:	d8001d85 	stb	zero,118(sp)
    b85c:	48005016 	blt	r9,zero,b9a0 <___vfiprintf_internal_r+0x1018>
    b860:	00ffdfc4 	movi	r3,-129
    b864:	94c4b03a 	or	r2,r18,r19
    b868:	a0e8703a 	and	r20,r20,r3
    b86c:	103d4426 	beq	r2,zero,ad80 <__alt_data_end+0xfc00ad80>
    b870:	0039883a 	mov	fp,zero
    b874:	d9002617 	ldw	r4,152(sp)
    b878:	dd401a04 	addi	r21,sp,104
    b87c:	908003cc 	andi	r2,r18,15
    b880:	9806973a 	slli	r3,r19,28
    b884:	2085883a 	add	r2,r4,r2
    b888:	9024d13a 	srli	r18,r18,4
    b88c:	10800003 	ldbu	r2,0(r2)
    b890:	9826d13a 	srli	r19,r19,4
    b894:	ad7fffc4 	addi	r21,r21,-1
    b898:	1ca4b03a 	or	r18,r3,r18
    b89c:	a8800005 	stb	r2,0(r21)
    b8a0:	94c4b03a 	or	r2,r18,r19
    b8a4:	103ff51e 	bne	r2,zero,b87c <__alt_data_end+0xfc00b87c>
    b8a8:	003e5906 	br	b210 <__alt_data_end+0xfc00b210>
    b8ac:	d9402117 	ldw	r5,132(sp)
    b8b0:	d9002017 	ldw	r4,128(sp)
    b8b4:	d9801a04 	addi	r6,sp,104
    b8b8:	000a85c0 	call	a85c <__sprint_r.part.0>
    b8bc:	103f891e 	bne	r2,zero,b6e4 <__alt_data_end+0xfc00b6e4>
    b8c0:	d8801c17 	ldw	r2,112(sp)
    b8c4:	d811883a 	mov	r8,sp
    b8c8:	003f9506 	br	b720 <__alt_data_end+0xfc00b720>
    b8cc:	d9402117 	ldw	r5,132(sp)
    b8d0:	d9002017 	ldw	r4,128(sp)
    b8d4:	d9801a04 	addi	r6,sp,104
    b8d8:	000a85c0 	call	a85c <__sprint_r.part.0>
    b8dc:	103f811e 	bne	r2,zero,b6e4 <__alt_data_end+0xfc00b6e4>
    b8e0:	d811883a 	mov	r8,sp
    b8e4:	003ced06 	br	ac9c <__alt_data_end+0xfc00ac9c>
    b8e8:	d9402117 	ldw	r5,132(sp)
    b8ec:	d9002017 	ldw	r4,128(sp)
    b8f0:	d9801a04 	addi	r6,sp,104
    b8f4:	da402c15 	stw	r9,176(sp)
    b8f8:	db802a15 	stw	r14,168(sp)
    b8fc:	000a85c0 	call	a85c <__sprint_r.part.0>
    b900:	da402c17 	ldw	r9,176(sp)
    b904:	db802a17 	ldw	r14,168(sp)
    b908:	103f761e 	bne	r2,zero,b6e4 <__alt_data_end+0xfc00b6e4>
    b90c:	d9401b17 	ldw	r5,108(sp)
    b910:	d8801c17 	ldw	r2,112(sp)
    b914:	d811883a 	mov	r8,sp
    b918:	29000044 	addi	r4,r5,1
    b91c:	003d5b06 	br	ae8c <__alt_data_end+0xfc00ae8c>
    b920:	d9402117 	ldw	r5,132(sp)
    b924:	d9002017 	ldw	r4,128(sp)
    b928:	d9801a04 	addi	r6,sp,104
    b92c:	da402c15 	stw	r9,176(sp)
    b930:	000a85c0 	call	a85c <__sprint_r.part.0>
    b934:	da402c17 	ldw	r9,176(sp)
    b938:	103f6a1e 	bne	r2,zero,b6e4 <__alt_data_end+0xfc00b6e4>
    b93c:	d9401b17 	ldw	r5,108(sp)
    b940:	d8801c17 	ldw	r2,112(sp)
    b944:	d811883a 	mov	r8,sp
    b948:	29000044 	addi	r4,r5,1
    b94c:	003f1006 	br	b590 <__alt_data_end+0xfc00b590>
    b950:	1000c31e 	bne	r2,zero,bc60 <___vfiprintf_internal_r+0x12d8>
    b954:	01000044 	movi	r4,1
    b958:	000b883a 	mov	r5,zero
    b95c:	d811883a 	mov	r8,sp
    b960:	003f0d06 	br	b598 <__alt_data_end+0xfc00b598>
    b964:	d9402117 	ldw	r5,132(sp)
    b968:	d9002017 	ldw	r4,128(sp)
    b96c:	d9801a04 	addi	r6,sp,104
    b970:	000a85c0 	call	a85c <__sprint_r.part.0>
    b974:	103f5b1e 	bne	r2,zero,b6e4 <__alt_data_end+0xfc00b6e4>
    b978:	d9001b17 	ldw	r4,108(sp)
    b97c:	d8801c17 	ldw	r2,112(sp)
    b980:	d811883a 	mov	r8,sp
    b984:	21000044 	addi	r4,r4,1
    b988:	003d8006 	br	af8c <__alt_data_end+0xfc00af8c>
    b98c:	01000074 	movhi	r4,1
    b990:	2103f004 	addi	r4,r4,4032
    b994:	d9002615 	stw	r4,152(sp)
    b998:	d8c02215 	stw	r3,136(sp)
    b99c:	1029883a 	mov	r20,r2
    b9a0:	94c4b03a 	or	r2,r18,r19
    b9a4:	103fb21e 	bne	r2,zero,b870 <__alt_data_end+0xfc00b870>
    b9a8:	0039883a 	mov	fp,zero
    b9ac:	00800084 	movi	r2,2
    b9b0:	003e6b06 	br	b360 <__alt_data_end+0xfc00b360>
    b9b4:	da802217 	ldw	r10,136(sp)
    b9b8:	d8001d85 	stb	zero,118(sp)
    b9bc:	0027883a 	mov	r19,zero
    b9c0:	50800104 	addi	r2,r10,4
    b9c4:	54800017 	ldw	r18,0(r10)
    b9c8:	483e6016 	blt	r9,zero,b34c <__alt_data_end+0xfc00b34c>
    b9cc:	00ffdfc4 	movi	r3,-129
    b9d0:	d8802215 	stw	r2,136(sp)
    b9d4:	a0e8703a 	and	r20,r20,r3
    b9d8:	0039883a 	mov	fp,zero
    b9dc:	903ebb26 	beq	r18,zero,b4cc <__alt_data_end+0xfc00b4cc>
    b9e0:	00800244 	movi	r2,9
    b9e4:	14bdee36 	bltu	r2,r18,b1a0 <__alt_data_end+0xfc00b1a0>
    b9e8:	003eba06 	br	b4d4 <__alt_data_end+0xfc00b4d4>
    b9ec:	00800c04 	movi	r2,48
    b9f0:	d8c01d45 	stb	r3,117(sp)
    b9f4:	d8801d05 	stb	r2,116(sp)
    b9f8:	d8001d85 	stb	zero,118(sp)
    b9fc:	a0c00094 	ori	r3,r20,2
    ba00:	4800a916 	blt	r9,zero,bca8 <___vfiprintf_internal_r+0x1320>
    ba04:	00bfdfc4 	movi	r2,-129
    ba08:	a096703a 	and	r11,r20,r2
    ba0c:	5d000094 	ori	r20,r11,2
    ba10:	0039883a 	mov	fp,zero
    ba14:	003f9706 	br	b874 <__alt_data_end+0xfc00b874>
    ba18:	8025883a 	mov	r18,r16
    ba1c:	003c2e06 	br	aad8 <__alt_data_end+0xfc00aad8>
    ba20:	00800074 	movhi	r2,1
    ba24:	1083f004 	addi	r2,r2,4032
    ba28:	0039883a 	mov	fp,zero
    ba2c:	d8802615 	stw	r2,152(sp)
    ba30:	003f9006 	br	b874 <__alt_data_end+0xfc00b874>
    ba34:	04a5c83a 	sub	r18,zero,r18
    ba38:	07000b44 	movi	fp,45
    ba3c:	9004c03a 	cmpne	r2,r18,zero
    ba40:	04e7c83a 	sub	r19,zero,r19
    ba44:	df001d85 	stb	fp,118(sp)
    ba48:	98a7c83a 	sub	r19,r19,r2
    ba4c:	48009f16 	blt	r9,zero,bccc <___vfiprintf_internal_r+0x1344>
    ba50:	00bfdfc4 	movi	r2,-129
    ba54:	a0a8703a 	and	r20,r20,r2
    ba58:	003dd006 	br	b19c <__alt_data_end+0xfc00b19c>
    ba5c:	70004c26 	beq	r14,zero,bb90 <___vfiprintf_internal_r+0x1208>
    ba60:	00800084 	movi	r2,2
    ba64:	d8c01d04 	addi	r3,sp,116
    ba68:	d8c00015 	stw	r3,0(sp)
    ba6c:	d8800115 	stw	r2,4(sp)
    ba70:	01000044 	movi	r4,1
    ba74:	d811883a 	mov	r8,sp
    ba78:	003f7306 	br	b848 <__alt_data_end+0xfc00b848>
    ba7c:	a080100c 	andi	r2,r20,64
    ba80:	da802217 	ldw	r10,136(sp)
    ba84:	103e0626 	beq	r2,zero,b2a0 <__alt_data_end+0xfc00b2a0>
    ba88:	5480000f 	ldh	r18,0(r10)
    ba8c:	52800104 	addi	r10,r10,4
    ba90:	da802215 	stw	r10,136(sp)
    ba94:	9027d7fa 	srai	r19,r18,31
    ba98:	9805883a 	mov	r2,r19
    ba9c:	003db806 	br	b180 <__alt_data_end+0xfc00b180>
    baa0:	a080040c 	andi	r2,r20,16
    baa4:	1000091e 	bne	r2,zero,bacc <___vfiprintf_internal_r+0x1144>
    baa8:	a2c0100c 	andi	r11,r20,64
    baac:	58000726 	beq	r11,zero,bacc <___vfiprintf_internal_r+0x1144>
    bab0:	da802217 	ldw	r10,136(sp)
    bab4:	50800017 	ldw	r2,0(r10)
    bab8:	52800104 	addi	r10,r10,4
    babc:	da802215 	stw	r10,136(sp)
    bac0:	da802317 	ldw	r10,140(sp)
    bac4:	1280000d 	sth	r10,0(r2)
    bac8:	003be706 	br	aa68 <__alt_data_end+0xfc00aa68>
    bacc:	da802217 	ldw	r10,136(sp)
    bad0:	50800017 	ldw	r2,0(r10)
    bad4:	52800104 	addi	r10,r10,4
    bad8:	da802215 	stw	r10,136(sp)
    badc:	da802317 	ldw	r10,140(sp)
    bae0:	12800015 	stw	r10,0(r2)
    bae4:	003be006 	br	aa68 <__alt_data_end+0xfc00aa68>
    bae8:	a080100c 	andi	r2,r20,64
    baec:	da802217 	ldw	r10,136(sp)
    baf0:	10003026 	beq	r2,zero,bbb4 <___vfiprintf_internal_r+0x122c>
    baf4:	5480000b 	ldhu	r18,0(r10)
    baf8:	52800104 	addi	r10,r10,4
    bafc:	0027883a 	mov	r19,zero
    bb00:	da802215 	stw	r10,136(sp)
    bb04:	003d8006 	br	b108 <__alt_data_end+0xfc00b108>
    bb08:	80c00007 	ldb	r3,0(r16)
    bb0c:	003c0006 	br	ab10 <__alt_data_end+0xfc00ab10>
    bb10:	a080100c 	andi	r2,r20,64
    bb14:	d8001d85 	stb	zero,118(sp)
    bb18:	da802217 	ldw	r10,136(sp)
    bb1c:	1000201e 	bne	r2,zero,bba0 <___vfiprintf_internal_r+0x1218>
    bb20:	50800104 	addi	r2,r10,4
    bb24:	54800017 	ldw	r18,0(r10)
    bb28:	0027883a 	mov	r19,zero
    bb2c:	483def0e 	bge	r9,zero,b2ec <__alt_data_end+0xfc00b2ec>
    bb30:	94c6b03a 	or	r3,r18,r19
    bb34:	d8802215 	stw	r2,136(sp)
    bb38:	183d4e1e 	bne	r3,zero,b074 <__alt_data_end+0xfc00b074>
    bb3c:	0039883a 	mov	fp,zero
    bb40:	0005883a 	mov	r2,zero
    bb44:	003e0606 	br	b360 <__alt_data_end+0xfc00b360>
    bb48:	d9402117 	ldw	r5,132(sp)
    bb4c:	d9002017 	ldw	r4,128(sp)
    bb50:	d9801a04 	addi	r6,sp,104
    bb54:	da402c15 	stw	r9,176(sp)
    bb58:	db802a15 	stw	r14,168(sp)
    bb5c:	000a85c0 	call	a85c <__sprint_r.part.0>
    bb60:	da402c17 	ldw	r9,176(sp)
    bb64:	db802a17 	ldw	r14,168(sp)
    bb68:	103ede1e 	bne	r2,zero,b6e4 <__alt_data_end+0xfc00b6e4>
    bb6c:	d9401b17 	ldw	r5,108(sp)
    bb70:	d8801c17 	ldw	r2,112(sp)
    bb74:	d811883a 	mov	r8,sp
    bb78:	29000044 	addi	r4,r5,1
    bb7c:	003e7406 	br	b550 <__alt_data_end+0xfc00b550>
    bb80:	00bfffc4 	movi	r2,-1
    bb84:	003c5806 	br	ace8 <__alt_data_end+0xfc00ace8>
    bb88:	d811883a 	mov	r8,sp
    bb8c:	003ee806 	br	b730 <__alt_data_end+0xfc00b730>
    bb90:	000b883a 	mov	r5,zero
    bb94:	01000044 	movi	r4,1
    bb98:	d811883a 	mov	r8,sp
    bb9c:	003e7c06 	br	b590 <__alt_data_end+0xfc00b590>
    bba0:	50800104 	addi	r2,r10,4
    bba4:	5480000b 	ldhu	r18,0(r10)
    bba8:	0027883a 	mov	r19,zero
    bbac:	483dcf0e 	bge	r9,zero,b2ec <__alt_data_end+0xfc00b2ec>
    bbb0:	003fdf06 	br	bb30 <__alt_data_end+0xfc00bb30>
    bbb4:	54800017 	ldw	r18,0(r10)
    bbb8:	52800104 	addi	r10,r10,4
    bbbc:	0027883a 	mov	r19,zero
    bbc0:	da802215 	stw	r10,136(sp)
    bbc4:	003d5006 	br	b108 <__alt_data_end+0xfc00b108>
    bbc8:	50800104 	addi	r2,r10,4
    bbcc:	5480000b 	ldhu	r18,0(r10)
    bbd0:	0027883a 	mov	r19,zero
    bbd4:	483f7d0e 	bge	r9,zero,b9cc <__alt_data_end+0xfc00b9cc>
    bbd8:	003ddc06 	br	b34c <__alt_data_end+0xfc00b34c>
    bbdc:	d8c02215 	stw	r3,136(sp)
    bbe0:	0039883a 	mov	fp,zero
    bbe4:	003ddb06 	br	b354 <__alt_data_end+0xfc00b354>
    bbe8:	02800074 	movhi	r10,1
    bbec:	52845004 	addi	r10,r10,4416
    bbf0:	da802415 	stw	r10,144(sp)
    bbf4:	003e8306 	br	b604 <__alt_data_end+0xfc00b604>
    bbf8:	d8801c17 	ldw	r2,112(sp)
    bbfc:	dd002117 	ldw	r20,132(sp)
    bc00:	103eb926 	beq	r2,zero,b6e8 <__alt_data_end+0xfc00b6e8>
    bc04:	d9002017 	ldw	r4,128(sp)
    bc08:	d9801a04 	addi	r6,sp,104
    bc0c:	a00b883a 	mov	r5,r20
    bc10:	000a85c0 	call	a85c <__sprint_r.part.0>
    bc14:	003eb406 	br	b6e8 <__alt_data_end+0xfc00b6e8>
    bc18:	80c00043 	ldbu	r3,1(r16)
    bc1c:	a5000814 	ori	r20,r20,32
    bc20:	84000044 	addi	r16,r16,1
    bc24:	18c03fcc 	andi	r3,r3,255
    bc28:	18c0201c 	xori	r3,r3,128
    bc2c:	18ffe004 	addi	r3,r3,-128
    bc30:	003bb706 	br	ab10 <__alt_data_end+0xfc00ab10>
    bc34:	a809883a 	mov	r4,r21
    bc38:	d8c02a15 	stw	r3,168(sp)
    bc3c:	da002b15 	stw	r8,172(sp)
    bc40:	00039880 	call	3988 <strlen>
    bc44:	d8c02a17 	ldw	r3,168(sp)
    bc48:	1027883a 	mov	r19,r2
    bc4c:	df001d83 	ldbu	fp,118(sp)
    bc50:	d8c02215 	stw	r3,136(sp)
    bc54:	0013883a 	mov	r9,zero
    bc58:	da002b17 	ldw	r8,172(sp)
    bc5c:	003c4d06 	br	ad94 <__alt_data_end+0xfc00ad94>
    bc60:	d9402117 	ldw	r5,132(sp)
    bc64:	d9002017 	ldw	r4,128(sp)
    bc68:	d9801a04 	addi	r6,sp,104
    bc6c:	da402c15 	stw	r9,176(sp)
    bc70:	000a85c0 	call	a85c <__sprint_r.part.0>
    bc74:	da402c17 	ldw	r9,176(sp)
    bc78:	103e9a1e 	bne	r2,zero,b6e4 <__alt_data_end+0xfc00b6e4>
    bc7c:	d9401b17 	ldw	r5,108(sp)
    bc80:	d8801c17 	ldw	r2,112(sp)
    bc84:	d811883a 	mov	r8,sp
    bc88:	29000044 	addi	r4,r5,1
    bc8c:	003e4206 	br	b598 <__alt_data_end+0xfc00b598>
    bc90:	d9401b17 	ldw	r5,108(sp)
    bc94:	01000074 	movhi	r4,1
    bc98:	21045404 	addi	r4,r4,4432
    bc9c:	d9002415 	stw	r4,144(sp)
    bca0:	29400044 	addi	r5,r5,1
    bca4:	003c6d06 	br	ae5c <__alt_data_end+0xfc00ae5c>
    bca8:	0039883a 	mov	fp,zero
    bcac:	00800084 	movi	r2,2
    bcb0:	10803fcc 	andi	r2,r2,255
    bcb4:	01000044 	movi	r4,1
    bcb8:	11001e26 	beq	r2,r4,bd34 <___vfiprintf_internal_r+0x13ac>
    bcbc:	01000084 	movi	r4,2
    bcc0:	11001e1e 	bne	r2,r4,bd3c <___vfiprintf_internal_r+0x13b4>
    bcc4:	1829883a 	mov	r20,r3
    bcc8:	003eea06 	br	b874 <__alt_data_end+0xfc00b874>
    bccc:	a007883a 	mov	r3,r20
    bcd0:	00800044 	movi	r2,1
    bcd4:	003ff606 	br	bcb0 <__alt_data_end+0xfc00bcb0>
    bcd8:	00800184 	movi	r2,6
    bcdc:	1240012e 	bgeu	r2,r9,bce4 <___vfiprintf_internal_r+0x135c>
    bce0:	1013883a 	mov	r9,r2
    bce4:	4827883a 	mov	r19,r9
    bce8:	4825883a 	mov	r18,r9
    bcec:	48001516 	blt	r9,zero,bd44 <___vfiprintf_internal_r+0x13bc>
    bcf0:	05400074 	movhi	r21,1
    bcf4:	d8c02215 	stw	r3,136(sp)
    bcf8:	ad43f504 	addi	r21,r21,4052
    bcfc:	003d1406 	br	b150 <__alt_data_end+0xfc00b150>
    bd00:	02800074 	movhi	r10,1
    bd04:	52845004 	addi	r10,r10,4416
    bd08:	da802415 	stw	r10,144(sp)
    bd0c:	200d883a 	mov	r6,r4
    bd10:	003c9106 	br	af58 <__alt_data_end+0xfc00af58>
    bd14:	5021883a 	mov	r16,r10
    bd18:	0013883a 	mov	r9,zero
    bd1c:	003b7d06 	br	ab14 <__alt_data_end+0xfc00ab14>
    bd20:	4827883a 	mov	r19,r9
    bd24:	df001d83 	ldbu	fp,118(sp)
    bd28:	d8c02215 	stw	r3,136(sp)
    bd2c:	0013883a 	mov	r9,zero
    bd30:	003c1806 	br	ad94 <__alt_data_end+0xfc00ad94>
    bd34:	1829883a 	mov	r20,r3
    bd38:	003d1806 	br	b19c <__alt_data_end+0xfc00b19c>
    bd3c:	1829883a 	mov	r20,r3
    bd40:	003ccd06 	br	b078 <__alt_data_end+0xfc00b078>
    bd44:	0025883a 	mov	r18,zero
    bd48:	003fe906 	br	bcf0 <__alt_data_end+0xfc00bcf0>
    bd4c:	d8802217 	ldw	r2,136(sp)
    bd50:	80c00043 	ldbu	r3,1(r16)
    bd54:	5021883a 	mov	r16,r10
    bd58:	12400017 	ldw	r9,0(r2)
    bd5c:	10800104 	addi	r2,r2,4
    bd60:	d8802215 	stw	r2,136(sp)
    bd64:	483faf0e 	bge	r9,zero,bc24 <__alt_data_end+0xfc00bc24>
    bd68:	18c03fcc 	andi	r3,r3,255
    bd6c:	18c0201c 	xori	r3,r3,128
    bd70:	027fffc4 	movi	r9,-1
    bd74:	18ffe004 	addi	r3,r3,-128
    bd78:	003b6506 	br	ab10 <__alt_data_end+0xfc00ab10>
    bd7c:	d9c01d85 	stb	r7,118(sp)
    bd80:	003ca006 	br	b004 <__alt_data_end+0xfc00b004>
    bd84:	d9c01d85 	stb	r7,118(sp)
    bd88:	003cad06 	br	b040 <__alt_data_end+0xfc00b040>
    bd8c:	d9c01d85 	stb	r7,118(sp)
    bd90:	003d7d06 	br	b388 <__alt_data_end+0xfc00b388>
    bd94:	d9c01d85 	stb	r7,118(sp)
    bd98:	003d5f06 	br	b318 <__alt_data_end+0xfc00b318>
    bd9c:	a080004c 	andi	r2,r20,1
    bda0:	0039883a 	mov	fp,zero
    bda4:	10000526 	beq	r2,zero,bdbc <___vfiprintf_internal_r+0x1434>
    bda8:	00800c04 	movi	r2,48
    bdac:	d88019c5 	stb	r2,103(sp)
    bdb0:	dcc02717 	ldw	r19,156(sp)
    bdb4:	dd4019c4 	addi	r21,sp,103
    bdb8:	003bf606 	br	ad94 <__alt_data_end+0xfc00ad94>
    bdbc:	0027883a 	mov	r19,zero
    bdc0:	dd401a04 	addi	r21,sp,104
    bdc4:	003bf306 	br	ad94 <__alt_data_end+0xfc00ad94>
    bdc8:	d9c01d85 	stb	r7,118(sp)
    bdcc:	003dc806 	br	b4f0 <__alt_data_end+0xfc00b4f0>
    bdd0:	d9c01d85 	stb	r7,118(sp)
    bdd4:	003d3a06 	br	b2c0 <__alt_data_end+0xfc00b2c0>
    bdd8:	d9c01d85 	stb	r7,118(sp)
    bddc:	003d2a06 	br	b288 <__alt_data_end+0xfc00b288>
    bde0:	d9c01d85 	stb	r7,118(sp)
    bde4:	003cde06 	br	b160 <__alt_data_end+0xfc00b160>
    bde8:	d9c01d85 	stb	r7,118(sp)
    bdec:	003cbc06 	br	b0e0 <__alt_data_end+0xfc00b0e0>

0000bdf0 <__vfiprintf_internal>:
    bdf0:	f811883a 	mov	r8,ra
    bdf4:	0000ac80 	call	ac8 <_mcount>
    bdf8:	403f883a 	mov	ra,r8
    bdfc:	00800074 	movhi	r2,1
    be00:	108c5c04 	addi	r2,r2,12656
    be04:	300f883a 	mov	r7,r6
    be08:	280d883a 	mov	r6,r5
    be0c:	200b883a 	mov	r5,r4
    be10:	11000017 	ldw	r4,0(r2)
    be14:	000a9881 	jmpi	a988 <___vfiprintf_internal_r>

0000be18 <__sbprintf>:
    be18:	f811883a 	mov	r8,ra
    be1c:	0000ac80 	call	ac8 <_mcount>
    be20:	403f883a 	mov	ra,r8
    be24:	defee204 	addi	sp,sp,-1144
    be28:	dfc11d15 	stw	ra,1140(sp)
    be2c:	dc811c15 	stw	r18,1136(sp)
    be30:	dc411b15 	stw	r17,1132(sp)
    be34:	dc011a15 	stw	r16,1128(sp)
    be38:	2880030b 	ldhu	r2,12(r5)
    be3c:	2ac01917 	ldw	r11,100(r5)
    be40:	2a80038b 	ldhu	r10,14(r5)
    be44:	2a400717 	ldw	r9,28(r5)
    be48:	2a000917 	ldw	r8,36(r5)
    be4c:	00c10004 	movi	r3,1024
    be50:	10bfff4c 	andi	r2,r2,65533
    be54:	2821883a 	mov	r16,r5
    be58:	d8cb883a 	add	r5,sp,r3
    be5c:	2025883a 	mov	r18,r4
    be60:	d881030d 	sth	r2,1036(sp)
    be64:	dac11915 	stw	r11,1124(sp)
    be68:	da81038d 	sth	r10,1038(sp)
    be6c:	da410715 	stw	r9,1052(sp)
    be70:	da010915 	stw	r8,1060(sp)
    be74:	dec10015 	stw	sp,1024(sp)
    be78:	dec10415 	stw	sp,1040(sp)
    be7c:	d8c10215 	stw	r3,1032(sp)
    be80:	d8c10515 	stw	r3,1044(sp)
    be84:	d8010615 	stw	zero,1048(sp)
    be88:	000a9880 	call	a988 <___vfiprintf_internal_r>
    be8c:	1023883a 	mov	r17,r2
    be90:	10000416 	blt	r2,zero,bea4 <__sbprintf+0x8c>
    be94:	d9410004 	addi	r5,sp,1024
    be98:	9009883a 	mov	r4,r18
    be9c:	0007d680 	call	7d68 <_fflush_r>
    bea0:	10000d1e 	bne	r2,zero,bed8 <__sbprintf+0xc0>
    bea4:	d881030b 	ldhu	r2,1036(sp)
    bea8:	1080100c 	andi	r2,r2,64
    beac:	10000326 	beq	r2,zero,bebc <__sbprintf+0xa4>
    beb0:	8080030b 	ldhu	r2,12(r16)
    beb4:	10801014 	ori	r2,r2,64
    beb8:	8080030d 	sth	r2,12(r16)
    bebc:	8805883a 	mov	r2,r17
    bec0:	dfc11d17 	ldw	ra,1140(sp)
    bec4:	dc811c17 	ldw	r18,1136(sp)
    bec8:	dc411b17 	ldw	r17,1132(sp)
    becc:	dc011a17 	ldw	r16,1128(sp)
    bed0:	dec11e04 	addi	sp,sp,1144
    bed4:	f800283a 	ret
    bed8:	047fffc4 	movi	r17,-1
    bedc:	003ff106 	br	bea4 <__alt_data_end+0xfc00bea4>

0000bee0 <_write_r>:
    bee0:	f811883a 	mov	r8,ra
    bee4:	0000ac80 	call	ac8 <_mcount>
    bee8:	403f883a 	mov	ra,r8
    beec:	defffd04 	addi	sp,sp,-12
    bef0:	dfc00215 	stw	ra,8(sp)
    bef4:	dc400115 	stw	r17,4(sp)
    bef8:	dc000015 	stw	r16,0(sp)
    befc:	04000074 	movhi	r16,1
    bf00:	2805883a 	mov	r2,r5
    bf04:	84143604 	addi	r16,r16,20696
    bf08:	300b883a 	mov	r5,r6
    bf0c:	2023883a 	mov	r17,r4
    bf10:	380d883a 	mov	r6,r7
    bf14:	1009883a 	mov	r4,r2
    bf18:	80000015 	stw	zero,0(r16)
    bf1c:	0010c9c0 	call	10c9c <write>
    bf20:	00ffffc4 	movi	r3,-1
    bf24:	10c00526 	beq	r2,r3,bf3c <_write_r+0x5c>
    bf28:	dfc00217 	ldw	ra,8(sp)
    bf2c:	dc400117 	ldw	r17,4(sp)
    bf30:	dc000017 	ldw	r16,0(sp)
    bf34:	dec00304 	addi	sp,sp,12
    bf38:	f800283a 	ret
    bf3c:	80c00017 	ldw	r3,0(r16)
    bf40:	183ff926 	beq	r3,zero,bf28 <__alt_data_end+0xfc00bf28>
    bf44:	88c00015 	stw	r3,0(r17)
    bf48:	003ff706 	br	bf28 <__alt_data_end+0xfc00bf28>

0000bf4c <_close_r>:
    bf4c:	f811883a 	mov	r8,ra
    bf50:	0000ac80 	call	ac8 <_mcount>
    bf54:	403f883a 	mov	ra,r8
    bf58:	defffd04 	addi	sp,sp,-12
    bf5c:	dfc00215 	stw	ra,8(sp)
    bf60:	dc400115 	stw	r17,4(sp)
    bf64:	dc000015 	stw	r16,0(sp)
    bf68:	04000074 	movhi	r16,1
    bf6c:	84143604 	addi	r16,r16,20696
    bf70:	2023883a 	mov	r17,r4
    bf74:	2809883a 	mov	r4,r5
    bf78:	80000015 	stw	zero,0(r16)
    bf7c:	00020cc0 	call	20cc <close>
    bf80:	00ffffc4 	movi	r3,-1
    bf84:	10c00526 	beq	r2,r3,bf9c <_close_r+0x50>
    bf88:	dfc00217 	ldw	ra,8(sp)
    bf8c:	dc400117 	ldw	r17,4(sp)
    bf90:	dc000017 	ldw	r16,0(sp)
    bf94:	dec00304 	addi	sp,sp,12
    bf98:	f800283a 	ret
    bf9c:	80c00017 	ldw	r3,0(r16)
    bfa0:	183ff926 	beq	r3,zero,bf88 <__alt_data_end+0xfc00bf88>
    bfa4:	88c00015 	stw	r3,0(r17)
    bfa8:	003ff706 	br	bf88 <__alt_data_end+0xfc00bf88>

0000bfac <_calloc_r>:
    bfac:	f811883a 	mov	r8,ra
    bfb0:	0000ac80 	call	ac8 <_mcount>
    bfb4:	403f883a 	mov	ra,r8
    bfb8:	defffe04 	addi	sp,sp,-8
    bfbc:	dfc00115 	stw	ra,4(sp)
    bfc0:	dc000015 	stw	r16,0(sp)
    bfc4:	298b383a 	mul	r5,r5,r6
    bfc8:	0008b440 	call	8b44 <_malloc_r>
    bfcc:	10002926 	beq	r2,zero,c074 <_calloc_r+0xc8>
    bfd0:	11bfff17 	ldw	r6,-4(r2)
    bfd4:	1021883a 	mov	r16,r2
    bfd8:	00bfff04 	movi	r2,-4
    bfdc:	308c703a 	and	r6,r6,r2
    bfe0:	00c00904 	movi	r3,36
    bfe4:	308d883a 	add	r6,r6,r2
    bfe8:	19801636 	bltu	r3,r6,c044 <_calloc_r+0x98>
    bfec:	008004c4 	movi	r2,19
    bff0:	11800b2e 	bgeu	r2,r6,c020 <_calloc_r+0x74>
    bff4:	80000015 	stw	zero,0(r16)
    bff8:	80000115 	stw	zero,4(r16)
    bffc:	008006c4 	movi	r2,27
    c000:	11801a2e 	bgeu	r2,r6,c06c <_calloc_r+0xc0>
    c004:	80000215 	stw	zero,8(r16)
    c008:	80000315 	stw	zero,12(r16)
    c00c:	30c0151e 	bne	r6,r3,c064 <_calloc_r+0xb8>
    c010:	80000415 	stw	zero,16(r16)
    c014:	80800604 	addi	r2,r16,24
    c018:	80000515 	stw	zero,20(r16)
    c01c:	00000106 	br	c024 <_calloc_r+0x78>
    c020:	8005883a 	mov	r2,r16
    c024:	10000015 	stw	zero,0(r2)
    c028:	10000115 	stw	zero,4(r2)
    c02c:	10000215 	stw	zero,8(r2)
    c030:	8005883a 	mov	r2,r16
    c034:	dfc00117 	ldw	ra,4(sp)
    c038:	dc000017 	ldw	r16,0(sp)
    c03c:	dec00204 	addi	sp,sp,8
    c040:	f800283a 	ret
    c044:	000b883a 	mov	r5,zero
    c048:	8009883a 	mov	r4,r16
    c04c:	00036540 	call	3654 <memset>
    c050:	8005883a 	mov	r2,r16
    c054:	dfc00117 	ldw	ra,4(sp)
    c058:	dc000017 	ldw	r16,0(sp)
    c05c:	dec00204 	addi	sp,sp,8
    c060:	f800283a 	ret
    c064:	80800404 	addi	r2,r16,16
    c068:	003fee06 	br	c024 <__alt_data_end+0xfc00c024>
    c06c:	80800204 	addi	r2,r16,8
    c070:	003fec06 	br	c024 <__alt_data_end+0xfc00c024>
    c074:	0005883a 	mov	r2,zero
    c078:	003fee06 	br	c034 <__alt_data_end+0xfc00c034>

0000c07c <_fclose_r>:
    c07c:	f811883a 	mov	r8,ra
    c080:	0000ac80 	call	ac8 <_mcount>
    c084:	403f883a 	mov	ra,r8
    c088:	28003926 	beq	r5,zero,c170 <_fclose_r+0xf4>
    c08c:	defffc04 	addi	sp,sp,-16
    c090:	dfc00315 	stw	ra,12(sp)
    c094:	dc800215 	stw	r18,8(sp)
    c098:	dc400115 	stw	r17,4(sp)
    c09c:	dc000015 	stw	r16,0(sp)
    c0a0:	2023883a 	mov	r17,r4
    c0a4:	2821883a 	mov	r16,r5
    c0a8:	20000226 	beq	r4,zero,c0b4 <_fclose_r+0x38>
    c0ac:	20800e17 	ldw	r2,56(r4)
    c0b0:	10002726 	beq	r2,zero,c150 <_fclose_r+0xd4>
    c0b4:	8080030f 	ldh	r2,12(r16)
    c0b8:	1000071e 	bne	r2,zero,c0d8 <_fclose_r+0x5c>
    c0bc:	0005883a 	mov	r2,zero
    c0c0:	dfc00317 	ldw	ra,12(sp)
    c0c4:	dc800217 	ldw	r18,8(sp)
    c0c8:	dc400117 	ldw	r17,4(sp)
    c0cc:	dc000017 	ldw	r16,0(sp)
    c0d0:	dec00404 	addi	sp,sp,16
    c0d4:	f800283a 	ret
    c0d8:	800b883a 	mov	r5,r16
    c0dc:	8809883a 	mov	r4,r17
    c0e0:	0007b400 	call	7b40 <__sflush_r>
    c0e4:	1025883a 	mov	r18,r2
    c0e8:	80800b17 	ldw	r2,44(r16)
    c0ec:	10000426 	beq	r2,zero,c100 <_fclose_r+0x84>
    c0f0:	81400717 	ldw	r5,28(r16)
    c0f4:	8809883a 	mov	r4,r17
    c0f8:	103ee83a 	callr	r2
    c0fc:	10001616 	blt	r2,zero,c158 <_fclose_r+0xdc>
    c100:	8080030b 	ldhu	r2,12(r16)
    c104:	1080200c 	andi	r2,r2,128
    c108:	1000151e 	bne	r2,zero,c160 <_fclose_r+0xe4>
    c10c:	81400c17 	ldw	r5,48(r16)
    c110:	28000526 	beq	r5,zero,c128 <_fclose_r+0xac>
    c114:	80801004 	addi	r2,r16,64
    c118:	28800226 	beq	r5,r2,c124 <_fclose_r+0xa8>
    c11c:	8809883a 	mov	r4,r17
    c120:	00083840 	call	8384 <_free_r>
    c124:	80000c15 	stw	zero,48(r16)
    c128:	81401117 	ldw	r5,68(r16)
    c12c:	28000326 	beq	r5,zero,c13c <_fclose_r+0xc0>
    c130:	8809883a 	mov	r4,r17
    c134:	00083840 	call	8384 <_free_r>
    c138:	80001115 	stw	zero,68(r16)
    c13c:	00081cc0 	call	81cc <__sfp_lock_acquire>
    c140:	8000030d 	sth	zero,12(r16)
    c144:	00081dc0 	call	81dc <__sfp_lock_release>
    c148:	9005883a 	mov	r2,r18
    c14c:	003fdc06 	br	c0c0 <__alt_data_end+0xfc00c0c0>
    c150:	00081b00 	call	81b0 <__sinit>
    c154:	003fd706 	br	c0b4 <__alt_data_end+0xfc00c0b4>
    c158:	04bfffc4 	movi	r18,-1
    c15c:	003fe806 	br	c100 <__alt_data_end+0xfc00c100>
    c160:	81400417 	ldw	r5,16(r16)
    c164:	8809883a 	mov	r4,r17
    c168:	00083840 	call	8384 <_free_r>
    c16c:	003fe706 	br	c10c <__alt_data_end+0xfc00c10c>
    c170:	0005883a 	mov	r2,zero
    c174:	f800283a 	ret

0000c178 <fclose>:
    c178:	f811883a 	mov	r8,ra
    c17c:	0000ac80 	call	ac8 <_mcount>
    c180:	403f883a 	mov	ra,r8
    c184:	00800074 	movhi	r2,1
    c188:	108c5c04 	addi	r2,r2,12656
    c18c:	200b883a 	mov	r5,r4
    c190:	11000017 	ldw	r4,0(r2)
    c194:	000c07c1 	jmpi	c07c <_fclose_r>

0000c198 <__fputwc>:
    c198:	f811883a 	mov	r8,ra
    c19c:	0000ac80 	call	ac8 <_mcount>
    c1a0:	403f883a 	mov	ra,r8
    c1a4:	defff804 	addi	sp,sp,-32
    c1a8:	dfc00715 	stw	ra,28(sp)
    c1ac:	dd400615 	stw	r21,24(sp)
    c1b0:	dd000515 	stw	r20,20(sp)
    c1b4:	dcc00415 	stw	r19,16(sp)
    c1b8:	dc800315 	stw	r18,12(sp)
    c1bc:	dc400215 	stw	r17,8(sp)
    c1c0:	dc000115 	stw	r16,4(sp)
    c1c4:	2027883a 	mov	r19,r4
    c1c8:	2825883a 	mov	r18,r5
    c1cc:	3021883a 	mov	r16,r6
    c1d0:	00088e00 	call	88e0 <__locale_mb_cur_max>
    c1d4:	00c00044 	movi	r3,1
    c1d8:	10c03e26 	beq	r2,r3,c2d4 <__fputwc+0x13c>
    c1dc:	81c01704 	addi	r7,r16,92
    c1e0:	900d883a 	mov	r6,r18
    c1e4:	d80b883a 	mov	r5,sp
    c1e8:	9809883a 	mov	r4,r19
    c1ec:	000d1000 	call	d100 <_wcrtomb_r>
    c1f0:	1029883a 	mov	r20,r2
    c1f4:	00bfffc4 	movi	r2,-1
    c1f8:	a0802026 	beq	r20,r2,c27c <__fputwc+0xe4>
    c1fc:	d9400003 	ldbu	r5,0(sp)
    c200:	a0001c26 	beq	r20,zero,c274 <__fputwc+0xdc>
    c204:	0023883a 	mov	r17,zero
    c208:	05400284 	movi	r21,10
    c20c:	00000906 	br	c234 <__fputwc+0x9c>
    c210:	80800017 	ldw	r2,0(r16)
    c214:	11400005 	stb	r5,0(r2)
    c218:	80c00017 	ldw	r3,0(r16)
    c21c:	18c00044 	addi	r3,r3,1
    c220:	80c00015 	stw	r3,0(r16)
    c224:	8c400044 	addi	r17,r17,1
    c228:	dc45883a 	add	r2,sp,r17
    c22c:	8d00112e 	bgeu	r17,r20,c274 <__fputwc+0xdc>
    c230:	11400003 	ldbu	r5,0(r2)
    c234:	80c00217 	ldw	r3,8(r16)
    c238:	18ffffc4 	addi	r3,r3,-1
    c23c:	80c00215 	stw	r3,8(r16)
    c240:	183ff30e 	bge	r3,zero,c210 <__alt_data_end+0xfc00c210>
    c244:	80800617 	ldw	r2,24(r16)
    c248:	18801916 	blt	r3,r2,c2b0 <__fputwc+0x118>
    c24c:	80800017 	ldw	r2,0(r16)
    c250:	11400005 	stb	r5,0(r2)
    c254:	80800017 	ldw	r2,0(r16)
    c258:	10c00003 	ldbu	r3,0(r2)
    c25c:	10800044 	addi	r2,r2,1
    c260:	1d402326 	beq	r3,r21,c2f0 <__fputwc+0x158>
    c264:	80800015 	stw	r2,0(r16)
    c268:	8c400044 	addi	r17,r17,1
    c26c:	dc45883a 	add	r2,sp,r17
    c270:	8d3fef36 	bltu	r17,r20,c230 <__alt_data_end+0xfc00c230>
    c274:	9005883a 	mov	r2,r18
    c278:	00000406 	br	c28c <__fputwc+0xf4>
    c27c:	80c0030b 	ldhu	r3,12(r16)
    c280:	a005883a 	mov	r2,r20
    c284:	18c01014 	ori	r3,r3,64
    c288:	80c0030d 	sth	r3,12(r16)
    c28c:	dfc00717 	ldw	ra,28(sp)
    c290:	dd400617 	ldw	r21,24(sp)
    c294:	dd000517 	ldw	r20,20(sp)
    c298:	dcc00417 	ldw	r19,16(sp)
    c29c:	dc800317 	ldw	r18,12(sp)
    c2a0:	dc400217 	ldw	r17,8(sp)
    c2a4:	dc000117 	ldw	r16,4(sp)
    c2a8:	dec00804 	addi	sp,sp,32
    c2ac:	f800283a 	ret
    c2b0:	800d883a 	mov	r6,r16
    c2b4:	29403fcc 	andi	r5,r5,255
    c2b8:	9809883a 	mov	r4,r19
    c2bc:	0005d200 	call	5d20 <__swbuf_r>
    c2c0:	10bfffe0 	cmpeqi	r2,r2,-1
    c2c4:	10803fcc 	andi	r2,r2,255
    c2c8:	103fd626 	beq	r2,zero,c224 <__alt_data_end+0xfc00c224>
    c2cc:	00bfffc4 	movi	r2,-1
    c2d0:	003fee06 	br	c28c <__alt_data_end+0xfc00c28c>
    c2d4:	90ffffc4 	addi	r3,r18,-1
    c2d8:	01003f84 	movi	r4,254
    c2dc:	20ffbf36 	bltu	r4,r3,c1dc <__alt_data_end+0xfc00c1dc>
    c2e0:	900b883a 	mov	r5,r18
    c2e4:	dc800005 	stb	r18,0(sp)
    c2e8:	1029883a 	mov	r20,r2
    c2ec:	003fc506 	br	c204 <__alt_data_end+0xfc00c204>
    c2f0:	800d883a 	mov	r6,r16
    c2f4:	a80b883a 	mov	r5,r21
    c2f8:	9809883a 	mov	r4,r19
    c2fc:	0005d200 	call	5d20 <__swbuf_r>
    c300:	10bfffe0 	cmpeqi	r2,r2,-1
    c304:	003fef06 	br	c2c4 <__alt_data_end+0xfc00c2c4>

0000c308 <_fputwc_r>:
    c308:	f811883a 	mov	r8,ra
    c30c:	0000ac80 	call	ac8 <_mcount>
    c310:	403f883a 	mov	ra,r8
    c314:	3080030b 	ldhu	r2,12(r6)
    c318:	10c8000c 	andi	r3,r2,8192
    c31c:	1800051e 	bne	r3,zero,c334 <_fputwc_r+0x2c>
    c320:	30c01917 	ldw	r3,100(r6)
    c324:	10880014 	ori	r2,r2,8192
    c328:	3080030d 	sth	r2,12(r6)
    c32c:	18880014 	ori	r2,r3,8192
    c330:	30801915 	stw	r2,100(r6)
    c334:	000c1981 	jmpi	c198 <__fputwc>

0000c338 <fputwc>:
    c338:	f811883a 	mov	r8,ra
    c33c:	0000ac80 	call	ac8 <_mcount>
    c340:	403f883a 	mov	ra,r8
    c344:	defffc04 	addi	sp,sp,-16
    c348:	dfc00315 	stw	ra,12(sp)
    c34c:	dc400215 	stw	r17,8(sp)
    c350:	dc000115 	stw	r16,4(sp)
    c354:	00800074 	movhi	r2,1
    c358:	108c5c04 	addi	r2,r2,12656
    c35c:	14000017 	ldw	r16,0(r2)
    c360:	2023883a 	mov	r17,r4
    c364:	80000226 	beq	r16,zero,c370 <fputwc+0x38>
    c368:	80800e17 	ldw	r2,56(r16)
    c36c:	10001026 	beq	r2,zero,c3b0 <fputwc+0x78>
    c370:	2880030b 	ldhu	r2,12(r5)
    c374:	10c8000c 	andi	r3,r2,8192
    c378:	1800051e 	bne	r3,zero,c390 <fputwc+0x58>
    c37c:	28c01917 	ldw	r3,100(r5)
    c380:	10880014 	ori	r2,r2,8192
    c384:	2880030d 	sth	r2,12(r5)
    c388:	18880014 	ori	r2,r3,8192
    c38c:	28801915 	stw	r2,100(r5)
    c390:	280d883a 	mov	r6,r5
    c394:	8009883a 	mov	r4,r16
    c398:	880b883a 	mov	r5,r17
    c39c:	dfc00317 	ldw	ra,12(sp)
    c3a0:	dc400217 	ldw	r17,8(sp)
    c3a4:	dc000117 	ldw	r16,4(sp)
    c3a8:	dec00404 	addi	sp,sp,16
    c3ac:	000c1981 	jmpi	c198 <__fputwc>
    c3b0:	8009883a 	mov	r4,r16
    c3b4:	d9400015 	stw	r5,0(sp)
    c3b8:	00081b00 	call	81b0 <__sinit>
    c3bc:	d9400017 	ldw	r5,0(sp)
    c3c0:	003feb06 	br	c370 <__alt_data_end+0xfc00c370>

0000c3c4 <_fstat_r>:
    c3c4:	f811883a 	mov	r8,ra
    c3c8:	0000ac80 	call	ac8 <_mcount>
    c3cc:	403f883a 	mov	ra,r8
    c3d0:	defffd04 	addi	sp,sp,-12
    c3d4:	dfc00215 	stw	ra,8(sp)
    c3d8:	dc400115 	stw	r17,4(sp)
    c3dc:	dc000015 	stw	r16,0(sp)
    c3e0:	04000074 	movhi	r16,1
    c3e4:	2805883a 	mov	r2,r5
    c3e8:	84143604 	addi	r16,r16,20696
    c3ec:	2023883a 	mov	r17,r4
    c3f0:	300b883a 	mov	r5,r6
    c3f4:	1009883a 	mov	r4,r2
    c3f8:	80000015 	stw	zero,0(r16)
    c3fc:	00107c80 	call	107c8 <fstat>
    c400:	00ffffc4 	movi	r3,-1
    c404:	10c00526 	beq	r2,r3,c41c <_fstat_r+0x58>
    c408:	dfc00217 	ldw	ra,8(sp)
    c40c:	dc400117 	ldw	r17,4(sp)
    c410:	dc000017 	ldw	r16,0(sp)
    c414:	dec00304 	addi	sp,sp,12
    c418:	f800283a 	ret
    c41c:	80c00017 	ldw	r3,0(r16)
    c420:	183ff926 	beq	r3,zero,c408 <__alt_data_end+0xfc00c408>
    c424:	88c00015 	stw	r3,0(r17)
    c428:	003ff706 	br	c408 <__alt_data_end+0xfc00c408>

0000c42c <__sfvwrite_r>:
    c42c:	f811883a 	mov	r8,ra
    c430:	0000ac80 	call	ac8 <_mcount>
    c434:	403f883a 	mov	ra,r8
    c438:	30800217 	ldw	r2,8(r6)
    c43c:	10006726 	beq	r2,zero,c5dc <__sfvwrite_r+0x1b0>
    c440:	defff404 	addi	sp,sp,-48
    c444:	dfc00b15 	stw	ra,44(sp)
    c448:	df000a15 	stw	fp,40(sp)
    c44c:	ddc00915 	stw	r23,36(sp)
    c450:	dd800815 	stw	r22,32(sp)
    c454:	dd400715 	stw	r21,28(sp)
    c458:	dd000615 	stw	r20,24(sp)
    c45c:	dcc00515 	stw	r19,20(sp)
    c460:	dc800415 	stw	r18,16(sp)
    c464:	dc400315 	stw	r17,12(sp)
    c468:	dc000215 	stw	r16,8(sp)
    c46c:	28c0030b 	ldhu	r3,12(r5)
    c470:	2821883a 	mov	r16,r5
    c474:	202b883a 	mov	r21,r4
    c478:	1880020c 	andi	r2,r3,8
    c47c:	3029883a 	mov	r20,r6
    c480:	10002726 	beq	r2,zero,c520 <__sfvwrite_r+0xf4>
    c484:	28800417 	ldw	r2,16(r5)
    c488:	10002526 	beq	r2,zero,c520 <__sfvwrite_r+0xf4>
    c48c:	1880008c 	andi	r2,r3,2
    c490:	a4400017 	ldw	r17,0(r20)
    c494:	10002a26 	beq	r2,zero,c540 <__sfvwrite_r+0x114>
    c498:	05a00034 	movhi	r22,32768
    c49c:	0027883a 	mov	r19,zero
    c4a0:	0025883a 	mov	r18,zero
    c4a4:	b5bf0004 	addi	r22,r22,-1024
    c4a8:	980d883a 	mov	r6,r19
    c4ac:	a809883a 	mov	r4,r21
    c4b0:	90004626 	beq	r18,zero,c5cc <__sfvwrite_r+0x1a0>
    c4b4:	900f883a 	mov	r7,r18
    c4b8:	b480022e 	bgeu	r22,r18,c4c4 <__sfvwrite_r+0x98>
    c4bc:	01e00034 	movhi	r7,32768
    c4c0:	39ff0004 	addi	r7,r7,-1024
    c4c4:	80800917 	ldw	r2,36(r16)
    c4c8:	81400717 	ldw	r5,28(r16)
    c4cc:	103ee83a 	callr	r2
    c4d0:	0080570e 	bge	zero,r2,c630 <__sfvwrite_r+0x204>
    c4d4:	a0c00217 	ldw	r3,8(r20)
    c4d8:	98a7883a 	add	r19,r19,r2
    c4dc:	90a5c83a 	sub	r18,r18,r2
    c4e0:	1885c83a 	sub	r2,r3,r2
    c4e4:	a0800215 	stw	r2,8(r20)
    c4e8:	103fef1e 	bne	r2,zero,c4a8 <__alt_data_end+0xfc00c4a8>
    c4ec:	0005883a 	mov	r2,zero
    c4f0:	dfc00b17 	ldw	ra,44(sp)
    c4f4:	df000a17 	ldw	fp,40(sp)
    c4f8:	ddc00917 	ldw	r23,36(sp)
    c4fc:	dd800817 	ldw	r22,32(sp)
    c500:	dd400717 	ldw	r21,28(sp)
    c504:	dd000617 	ldw	r20,24(sp)
    c508:	dcc00517 	ldw	r19,20(sp)
    c50c:	dc800417 	ldw	r18,16(sp)
    c510:	dc400317 	ldw	r17,12(sp)
    c514:	dc000217 	ldw	r16,8(sp)
    c518:	dec00c04 	addi	sp,sp,48
    c51c:	f800283a 	ret
    c520:	800b883a 	mov	r5,r16
    c524:	a809883a 	mov	r4,r21
    c528:	0005e900 	call	5e90 <__swsetup_r>
    c52c:	1000eb1e 	bne	r2,zero,c8dc <__sfvwrite_r+0x4b0>
    c530:	80c0030b 	ldhu	r3,12(r16)
    c534:	a4400017 	ldw	r17,0(r20)
    c538:	1880008c 	andi	r2,r3,2
    c53c:	103fd61e 	bne	r2,zero,c498 <__alt_data_end+0xfc00c498>
    c540:	1880004c 	andi	r2,r3,1
    c544:	10003f1e 	bne	r2,zero,c644 <__sfvwrite_r+0x218>
    c548:	0039883a 	mov	fp,zero
    c54c:	0025883a 	mov	r18,zero
    c550:	90001a26 	beq	r18,zero,c5bc <__sfvwrite_r+0x190>
    c554:	1880800c 	andi	r2,r3,512
    c558:	84c00217 	ldw	r19,8(r16)
    c55c:	10002126 	beq	r2,zero,c5e4 <__sfvwrite_r+0x1b8>
    c560:	982f883a 	mov	r23,r19
    c564:	94c09336 	bltu	r18,r19,c7b4 <__sfvwrite_r+0x388>
    c568:	1881200c 	andi	r2,r3,1152
    c56c:	10009e1e 	bne	r2,zero,c7e8 <__sfvwrite_r+0x3bc>
    c570:	81000017 	ldw	r4,0(r16)
    c574:	b80d883a 	mov	r6,r23
    c578:	e00b883a 	mov	r5,fp
    c57c:	000c9c00 	call	c9c0 <memmove>
    c580:	80c00217 	ldw	r3,8(r16)
    c584:	81000017 	ldw	r4,0(r16)
    c588:	9005883a 	mov	r2,r18
    c58c:	1ce7c83a 	sub	r19,r3,r19
    c590:	25cf883a 	add	r7,r4,r23
    c594:	84c00215 	stw	r19,8(r16)
    c598:	81c00015 	stw	r7,0(r16)
    c59c:	a0c00217 	ldw	r3,8(r20)
    c5a0:	e0b9883a 	add	fp,fp,r2
    c5a4:	90a5c83a 	sub	r18,r18,r2
    c5a8:	18a7c83a 	sub	r19,r3,r2
    c5ac:	a4c00215 	stw	r19,8(r20)
    c5b0:	983fce26 	beq	r19,zero,c4ec <__alt_data_end+0xfc00c4ec>
    c5b4:	80c0030b 	ldhu	r3,12(r16)
    c5b8:	903fe61e 	bne	r18,zero,c554 <__alt_data_end+0xfc00c554>
    c5bc:	8f000017 	ldw	fp,0(r17)
    c5c0:	8c800117 	ldw	r18,4(r17)
    c5c4:	8c400204 	addi	r17,r17,8
    c5c8:	003fe106 	br	c550 <__alt_data_end+0xfc00c550>
    c5cc:	8cc00017 	ldw	r19,0(r17)
    c5d0:	8c800117 	ldw	r18,4(r17)
    c5d4:	8c400204 	addi	r17,r17,8
    c5d8:	003fb306 	br	c4a8 <__alt_data_end+0xfc00c4a8>
    c5dc:	0005883a 	mov	r2,zero
    c5e0:	f800283a 	ret
    c5e4:	81000017 	ldw	r4,0(r16)
    c5e8:	80800417 	ldw	r2,16(r16)
    c5ec:	11005736 	bltu	r2,r4,c74c <__sfvwrite_r+0x320>
    c5f0:	85c00517 	ldw	r23,20(r16)
    c5f4:	95c05536 	bltu	r18,r23,c74c <__sfvwrite_r+0x320>
    c5f8:	00a00034 	movhi	r2,32768
    c5fc:	10bfffc4 	addi	r2,r2,-1
    c600:	9009883a 	mov	r4,r18
    c604:	1480012e 	bgeu	r2,r18,c60c <__sfvwrite_r+0x1e0>
    c608:	1009883a 	mov	r4,r2
    c60c:	b80b883a 	mov	r5,r23
    c610:	000de5c0 	call	de5c <__divsi3>
    c614:	15cf383a 	mul	r7,r2,r23
    c618:	81400717 	ldw	r5,28(r16)
    c61c:	80800917 	ldw	r2,36(r16)
    c620:	e00d883a 	mov	r6,fp
    c624:	a809883a 	mov	r4,r21
    c628:	103ee83a 	callr	r2
    c62c:	00bfdb16 	blt	zero,r2,c59c <__alt_data_end+0xfc00c59c>
    c630:	8080030b 	ldhu	r2,12(r16)
    c634:	10801014 	ori	r2,r2,64
    c638:	8080030d 	sth	r2,12(r16)
    c63c:	00bfffc4 	movi	r2,-1
    c640:	003fab06 	br	c4f0 <__alt_data_end+0xfc00c4f0>
    c644:	0027883a 	mov	r19,zero
    c648:	0011883a 	mov	r8,zero
    c64c:	0039883a 	mov	fp,zero
    c650:	0025883a 	mov	r18,zero
    c654:	90001f26 	beq	r18,zero,c6d4 <__sfvwrite_r+0x2a8>
    c658:	40005a26 	beq	r8,zero,c7c4 <__sfvwrite_r+0x398>
    c65c:	982d883a 	mov	r22,r19
    c660:	94c0012e 	bgeu	r18,r19,c668 <__sfvwrite_r+0x23c>
    c664:	902d883a 	mov	r22,r18
    c668:	81000017 	ldw	r4,0(r16)
    c66c:	80800417 	ldw	r2,16(r16)
    c670:	b02f883a 	mov	r23,r22
    c674:	81c00517 	ldw	r7,20(r16)
    c678:	1100032e 	bgeu	r2,r4,c688 <__sfvwrite_r+0x25c>
    c67c:	80c00217 	ldw	r3,8(r16)
    c680:	38c7883a 	add	r3,r7,r3
    c684:	1d801816 	blt	r3,r22,c6e8 <__sfvwrite_r+0x2bc>
    c688:	b1c03e16 	blt	r22,r7,c784 <__sfvwrite_r+0x358>
    c68c:	80800917 	ldw	r2,36(r16)
    c690:	81400717 	ldw	r5,28(r16)
    c694:	e00d883a 	mov	r6,fp
    c698:	da000115 	stw	r8,4(sp)
    c69c:	a809883a 	mov	r4,r21
    c6a0:	103ee83a 	callr	r2
    c6a4:	102f883a 	mov	r23,r2
    c6a8:	da000117 	ldw	r8,4(sp)
    c6ac:	00bfe00e 	bge	zero,r2,c630 <__alt_data_end+0xfc00c630>
    c6b0:	9de7c83a 	sub	r19,r19,r23
    c6b4:	98001f26 	beq	r19,zero,c734 <__sfvwrite_r+0x308>
    c6b8:	a0800217 	ldw	r2,8(r20)
    c6bc:	e5f9883a 	add	fp,fp,r23
    c6c0:	95e5c83a 	sub	r18,r18,r23
    c6c4:	15efc83a 	sub	r23,r2,r23
    c6c8:	a5c00215 	stw	r23,8(r20)
    c6cc:	b83f8726 	beq	r23,zero,c4ec <__alt_data_end+0xfc00c4ec>
    c6d0:	903fe11e 	bne	r18,zero,c658 <__alt_data_end+0xfc00c658>
    c6d4:	8f000017 	ldw	fp,0(r17)
    c6d8:	8c800117 	ldw	r18,4(r17)
    c6dc:	0011883a 	mov	r8,zero
    c6e0:	8c400204 	addi	r17,r17,8
    c6e4:	003fdb06 	br	c654 <__alt_data_end+0xfc00c654>
    c6e8:	180d883a 	mov	r6,r3
    c6ec:	e00b883a 	mov	r5,fp
    c6f0:	da000115 	stw	r8,4(sp)
    c6f4:	d8c00015 	stw	r3,0(sp)
    c6f8:	000c9c00 	call	c9c0 <memmove>
    c6fc:	d8c00017 	ldw	r3,0(sp)
    c700:	80800017 	ldw	r2,0(r16)
    c704:	800b883a 	mov	r5,r16
    c708:	a809883a 	mov	r4,r21
    c70c:	10c5883a 	add	r2,r2,r3
    c710:	80800015 	stw	r2,0(r16)
    c714:	d8c00015 	stw	r3,0(sp)
    c718:	0007d680 	call	7d68 <_fflush_r>
    c71c:	d8c00017 	ldw	r3,0(sp)
    c720:	da000117 	ldw	r8,4(sp)
    c724:	103fc21e 	bne	r2,zero,c630 <__alt_data_end+0xfc00c630>
    c728:	182f883a 	mov	r23,r3
    c72c:	9de7c83a 	sub	r19,r19,r23
    c730:	983fe11e 	bne	r19,zero,c6b8 <__alt_data_end+0xfc00c6b8>
    c734:	800b883a 	mov	r5,r16
    c738:	a809883a 	mov	r4,r21
    c73c:	0007d680 	call	7d68 <_fflush_r>
    c740:	103fbb1e 	bne	r2,zero,c630 <__alt_data_end+0xfc00c630>
    c744:	0011883a 	mov	r8,zero
    c748:	003fdb06 	br	c6b8 <__alt_data_end+0xfc00c6b8>
    c74c:	94c0012e 	bgeu	r18,r19,c754 <__sfvwrite_r+0x328>
    c750:	9027883a 	mov	r19,r18
    c754:	980d883a 	mov	r6,r19
    c758:	e00b883a 	mov	r5,fp
    c75c:	000c9c00 	call	c9c0 <memmove>
    c760:	80800217 	ldw	r2,8(r16)
    c764:	80c00017 	ldw	r3,0(r16)
    c768:	14c5c83a 	sub	r2,r2,r19
    c76c:	1cc7883a 	add	r3,r3,r19
    c770:	80800215 	stw	r2,8(r16)
    c774:	80c00015 	stw	r3,0(r16)
    c778:	10004326 	beq	r2,zero,c888 <__sfvwrite_r+0x45c>
    c77c:	9805883a 	mov	r2,r19
    c780:	003f8606 	br	c59c <__alt_data_end+0xfc00c59c>
    c784:	b00d883a 	mov	r6,r22
    c788:	e00b883a 	mov	r5,fp
    c78c:	da000115 	stw	r8,4(sp)
    c790:	000c9c00 	call	c9c0 <memmove>
    c794:	80800217 	ldw	r2,8(r16)
    c798:	80c00017 	ldw	r3,0(r16)
    c79c:	da000117 	ldw	r8,4(sp)
    c7a0:	1585c83a 	sub	r2,r2,r22
    c7a4:	1dad883a 	add	r22,r3,r22
    c7a8:	80800215 	stw	r2,8(r16)
    c7ac:	85800015 	stw	r22,0(r16)
    c7b0:	003fbf06 	br	c6b0 <__alt_data_end+0xfc00c6b0>
    c7b4:	81000017 	ldw	r4,0(r16)
    c7b8:	9027883a 	mov	r19,r18
    c7bc:	902f883a 	mov	r23,r18
    c7c0:	003f6c06 	br	c574 <__alt_data_end+0xfc00c574>
    c7c4:	900d883a 	mov	r6,r18
    c7c8:	01400284 	movi	r5,10
    c7cc:	e009883a 	mov	r4,fp
    c7d0:	000935c0 	call	935c <memchr>
    c7d4:	10003e26 	beq	r2,zero,c8d0 <__sfvwrite_r+0x4a4>
    c7d8:	10800044 	addi	r2,r2,1
    c7dc:	1727c83a 	sub	r19,r2,fp
    c7e0:	02000044 	movi	r8,1
    c7e4:	003f9d06 	br	c65c <__alt_data_end+0xfc00c65c>
    c7e8:	80800517 	ldw	r2,20(r16)
    c7ec:	81400417 	ldw	r5,16(r16)
    c7f0:	81c00017 	ldw	r7,0(r16)
    c7f4:	10a7883a 	add	r19,r2,r2
    c7f8:	9885883a 	add	r2,r19,r2
    c7fc:	1026d7fa 	srli	r19,r2,31
    c800:	396dc83a 	sub	r22,r7,r5
    c804:	b1000044 	addi	r4,r22,1
    c808:	9885883a 	add	r2,r19,r2
    c80c:	1027d07a 	srai	r19,r2,1
    c810:	2485883a 	add	r2,r4,r18
    c814:	980d883a 	mov	r6,r19
    c818:	9880022e 	bgeu	r19,r2,c824 <__sfvwrite_r+0x3f8>
    c81c:	1027883a 	mov	r19,r2
    c820:	100d883a 	mov	r6,r2
    c824:	18c1000c 	andi	r3,r3,1024
    c828:	18001c26 	beq	r3,zero,c89c <__sfvwrite_r+0x470>
    c82c:	300b883a 	mov	r5,r6
    c830:	a809883a 	mov	r4,r21
    c834:	0008b440 	call	8b44 <_malloc_r>
    c838:	102f883a 	mov	r23,r2
    c83c:	10002926 	beq	r2,zero,c8e4 <__sfvwrite_r+0x4b8>
    c840:	81400417 	ldw	r5,16(r16)
    c844:	b00d883a 	mov	r6,r22
    c848:	1009883a 	mov	r4,r2
    c84c:	00035000 	call	3500 <memcpy>
    c850:	8080030b 	ldhu	r2,12(r16)
    c854:	00fedfc4 	movi	r3,-1153
    c858:	10c4703a 	and	r2,r2,r3
    c85c:	10802014 	ori	r2,r2,128
    c860:	8080030d 	sth	r2,12(r16)
    c864:	bd89883a 	add	r4,r23,r22
    c868:	9d8fc83a 	sub	r7,r19,r22
    c86c:	85c00415 	stw	r23,16(r16)
    c870:	84c00515 	stw	r19,20(r16)
    c874:	81000015 	stw	r4,0(r16)
    c878:	9027883a 	mov	r19,r18
    c87c:	81c00215 	stw	r7,8(r16)
    c880:	902f883a 	mov	r23,r18
    c884:	003f3b06 	br	c574 <__alt_data_end+0xfc00c574>
    c888:	800b883a 	mov	r5,r16
    c88c:	a809883a 	mov	r4,r21
    c890:	0007d680 	call	7d68 <_fflush_r>
    c894:	103fb926 	beq	r2,zero,c77c <__alt_data_end+0xfc00c77c>
    c898:	003f6506 	br	c630 <__alt_data_end+0xfc00c630>
    c89c:	a809883a 	mov	r4,r21
    c8a0:	000cb900 	call	cb90 <_realloc_r>
    c8a4:	102f883a 	mov	r23,r2
    c8a8:	103fee1e 	bne	r2,zero,c864 <__alt_data_end+0xfc00c864>
    c8ac:	81400417 	ldw	r5,16(r16)
    c8b0:	a809883a 	mov	r4,r21
    c8b4:	00083840 	call	8384 <_free_r>
    c8b8:	8080030b 	ldhu	r2,12(r16)
    c8bc:	00ffdfc4 	movi	r3,-129
    c8c0:	1884703a 	and	r2,r3,r2
    c8c4:	00c00304 	movi	r3,12
    c8c8:	a8c00015 	stw	r3,0(r21)
    c8cc:	003f5906 	br	c634 <__alt_data_end+0xfc00c634>
    c8d0:	94c00044 	addi	r19,r18,1
    c8d4:	02000044 	movi	r8,1
    c8d8:	003f6006 	br	c65c <__alt_data_end+0xfc00c65c>
    c8dc:	00bfffc4 	movi	r2,-1
    c8e0:	003f0306 	br	c4f0 <__alt_data_end+0xfc00c4f0>
    c8e4:	00800304 	movi	r2,12
    c8e8:	a8800015 	stw	r2,0(r21)
    c8ec:	8080030b 	ldhu	r2,12(r16)
    c8f0:	003f5006 	br	c634 <__alt_data_end+0xfc00c634>

0000c8f4 <_isatty_r>:
    c8f4:	f811883a 	mov	r8,ra
    c8f8:	0000ac80 	call	ac8 <_mcount>
    c8fc:	403f883a 	mov	ra,r8
    c900:	defffd04 	addi	sp,sp,-12
    c904:	dfc00215 	stw	ra,8(sp)
    c908:	dc400115 	stw	r17,4(sp)
    c90c:	dc000015 	stw	r16,0(sp)
    c910:	04000074 	movhi	r16,1
    c914:	84143604 	addi	r16,r16,20696
    c918:	2023883a 	mov	r17,r4
    c91c:	2809883a 	mov	r4,r5
    c920:	80000015 	stw	zero,0(r16)
    c924:	00108cc0 	call	108cc <isatty>
    c928:	00ffffc4 	movi	r3,-1
    c92c:	10c00526 	beq	r2,r3,c944 <_isatty_r+0x50>
    c930:	dfc00217 	ldw	ra,8(sp)
    c934:	dc400117 	ldw	r17,4(sp)
    c938:	dc000017 	ldw	r16,0(sp)
    c93c:	dec00304 	addi	sp,sp,12
    c940:	f800283a 	ret
    c944:	80c00017 	ldw	r3,0(r16)
    c948:	183ff926 	beq	r3,zero,c930 <__alt_data_end+0xfc00c930>
    c94c:	88c00015 	stw	r3,0(r17)
    c950:	003ff706 	br	c930 <__alt_data_end+0xfc00c930>

0000c954 <_lseek_r>:
    c954:	f811883a 	mov	r8,ra
    c958:	0000ac80 	call	ac8 <_mcount>
    c95c:	403f883a 	mov	ra,r8
    c960:	defffd04 	addi	sp,sp,-12
    c964:	dfc00215 	stw	ra,8(sp)
    c968:	dc400115 	stw	r17,4(sp)
    c96c:	dc000015 	stw	r16,0(sp)
    c970:	04000074 	movhi	r16,1
    c974:	2805883a 	mov	r2,r5
    c978:	84143604 	addi	r16,r16,20696
    c97c:	300b883a 	mov	r5,r6
    c980:	2023883a 	mov	r17,r4
    c984:	380d883a 	mov	r6,r7
    c988:	1009883a 	mov	r4,r2
    c98c:	80000015 	stw	zero,0(r16)
    c990:	00109c40 	call	109c4 <lseek>
    c994:	00ffffc4 	movi	r3,-1
    c998:	10c00526 	beq	r2,r3,c9b0 <_lseek_r+0x5c>
    c99c:	dfc00217 	ldw	ra,8(sp)
    c9a0:	dc400117 	ldw	r17,4(sp)
    c9a4:	dc000017 	ldw	r16,0(sp)
    c9a8:	dec00304 	addi	sp,sp,12
    c9ac:	f800283a 	ret
    c9b0:	80c00017 	ldw	r3,0(r16)
    c9b4:	183ff926 	beq	r3,zero,c99c <__alt_data_end+0xfc00c99c>
    c9b8:	88c00015 	stw	r3,0(r17)
    c9bc:	003ff706 	br	c99c <__alt_data_end+0xfc00c99c>

0000c9c0 <memmove>:
    c9c0:	f811883a 	mov	r8,ra
    c9c4:	0000ac80 	call	ac8 <_mcount>
    c9c8:	403f883a 	mov	ra,r8
    c9cc:	2005883a 	mov	r2,r4
    c9d0:	29000b2e 	bgeu	r5,r4,ca00 <memmove+0x40>
    c9d4:	298f883a 	add	r7,r5,r6
    c9d8:	21c0092e 	bgeu	r4,r7,ca00 <memmove+0x40>
    c9dc:	2187883a 	add	r3,r4,r6
    c9e0:	198bc83a 	sub	r5,r3,r6
    c9e4:	30000526 	beq	r6,zero,c9fc <memmove+0x3c>
    c9e8:	39ffffc4 	addi	r7,r7,-1
    c9ec:	39000003 	ldbu	r4,0(r7)
    c9f0:	18ffffc4 	addi	r3,r3,-1
    c9f4:	19000005 	stb	r4,0(r3)
    c9f8:	28fffb1e 	bne	r5,r3,c9e8 <__alt_data_end+0xfc00c9e8>
    c9fc:	f800283a 	ret
    ca00:	00c003c4 	movi	r3,15
    ca04:	1980412e 	bgeu	r3,r6,cb0c <memmove+0x14c>
    ca08:	2886b03a 	or	r3,r5,r2
    ca0c:	18c000cc 	andi	r3,r3,3
    ca10:	1800401e 	bne	r3,zero,cb14 <memmove+0x154>
    ca14:	33fffc04 	addi	r15,r6,-16
    ca18:	781ed13a 	srli	r15,r15,4
    ca1c:	28c00104 	addi	r3,r5,4
    ca20:	13400104 	addi	r13,r2,4
    ca24:	781c913a 	slli	r14,r15,4
    ca28:	2b000204 	addi	r12,r5,8
    ca2c:	12c00204 	addi	r11,r2,8
    ca30:	73800504 	addi	r14,r14,20
    ca34:	2a800304 	addi	r10,r5,12
    ca38:	12400304 	addi	r9,r2,12
    ca3c:	2b9d883a 	add	r14,r5,r14
    ca40:	2811883a 	mov	r8,r5
    ca44:	100f883a 	mov	r7,r2
    ca48:	41000017 	ldw	r4,0(r8)
    ca4c:	39c00404 	addi	r7,r7,16
    ca50:	18c00404 	addi	r3,r3,16
    ca54:	393ffc15 	stw	r4,-16(r7)
    ca58:	193ffc17 	ldw	r4,-16(r3)
    ca5c:	6b400404 	addi	r13,r13,16
    ca60:	5ac00404 	addi	r11,r11,16
    ca64:	693ffc15 	stw	r4,-16(r13)
    ca68:	61000017 	ldw	r4,0(r12)
    ca6c:	4a400404 	addi	r9,r9,16
    ca70:	42000404 	addi	r8,r8,16
    ca74:	593ffc15 	stw	r4,-16(r11)
    ca78:	51000017 	ldw	r4,0(r10)
    ca7c:	63000404 	addi	r12,r12,16
    ca80:	52800404 	addi	r10,r10,16
    ca84:	493ffc15 	stw	r4,-16(r9)
    ca88:	1bbfef1e 	bne	r3,r14,ca48 <__alt_data_end+0xfc00ca48>
    ca8c:	79000044 	addi	r4,r15,1
    ca90:	2008913a 	slli	r4,r4,4
    ca94:	328003cc 	andi	r10,r6,15
    ca98:	02c000c4 	movi	r11,3
    ca9c:	1107883a 	add	r3,r2,r4
    caa0:	290b883a 	add	r5,r5,r4
    caa4:	5a801d2e 	bgeu	r11,r10,cb1c <memmove+0x15c>
    caa8:	1813883a 	mov	r9,r3
    caac:	2811883a 	mov	r8,r5
    cab0:	500f883a 	mov	r7,r10
    cab4:	41000017 	ldw	r4,0(r8)
    cab8:	4a400104 	addi	r9,r9,4
    cabc:	39ffff04 	addi	r7,r7,-4
    cac0:	493fff15 	stw	r4,-4(r9)
    cac4:	42000104 	addi	r8,r8,4
    cac8:	59fffa36 	bltu	r11,r7,cab4 <__alt_data_end+0xfc00cab4>
    cacc:	513fff04 	addi	r4,r10,-4
    cad0:	2008d0ba 	srli	r4,r4,2
    cad4:	318000cc 	andi	r6,r6,3
    cad8:	21000044 	addi	r4,r4,1
    cadc:	2109883a 	add	r4,r4,r4
    cae0:	2109883a 	add	r4,r4,r4
    cae4:	1907883a 	add	r3,r3,r4
    cae8:	290b883a 	add	r5,r5,r4
    caec:	303fc326 	beq	r6,zero,c9fc <__alt_data_end+0xfc00c9fc>
    caf0:	198d883a 	add	r6,r3,r6
    caf4:	29c00003 	ldbu	r7,0(r5)
    caf8:	18c00044 	addi	r3,r3,1
    cafc:	29400044 	addi	r5,r5,1
    cb00:	19ffffc5 	stb	r7,-1(r3)
    cb04:	19bffb1e 	bne	r3,r6,caf4 <__alt_data_end+0xfc00caf4>
    cb08:	f800283a 	ret
    cb0c:	1007883a 	mov	r3,r2
    cb10:	003ff606 	br	caec <__alt_data_end+0xfc00caec>
    cb14:	1007883a 	mov	r3,r2
    cb18:	003ff506 	br	caf0 <__alt_data_end+0xfc00caf0>
    cb1c:	500d883a 	mov	r6,r10
    cb20:	003ff206 	br	caec <__alt_data_end+0xfc00caec>

0000cb24 <_read_r>:
    cb24:	f811883a 	mov	r8,ra
    cb28:	0000ac80 	call	ac8 <_mcount>
    cb2c:	403f883a 	mov	ra,r8
    cb30:	defffd04 	addi	sp,sp,-12
    cb34:	dfc00215 	stw	ra,8(sp)
    cb38:	dc400115 	stw	r17,4(sp)
    cb3c:	dc000015 	stw	r16,0(sp)
    cb40:	04000074 	movhi	r16,1
    cb44:	2805883a 	mov	r2,r5
    cb48:	84143604 	addi	r16,r16,20696
    cb4c:	300b883a 	mov	r5,r6
    cb50:	2023883a 	mov	r17,r4
    cb54:	380d883a 	mov	r6,r7
    cb58:	1009883a 	mov	r4,r2
    cb5c:	80000015 	stw	zero,0(r16)
    cb60:	0010b4c0 	call	10b4c <read>
    cb64:	00ffffc4 	movi	r3,-1
    cb68:	10c00526 	beq	r2,r3,cb80 <_read_r+0x5c>
    cb6c:	dfc00217 	ldw	ra,8(sp)
    cb70:	dc400117 	ldw	r17,4(sp)
    cb74:	dc000017 	ldw	r16,0(sp)
    cb78:	dec00304 	addi	sp,sp,12
    cb7c:	f800283a 	ret
    cb80:	80c00017 	ldw	r3,0(r16)
    cb84:	183ff926 	beq	r3,zero,cb6c <__alt_data_end+0xfc00cb6c>
    cb88:	88c00015 	stw	r3,0(r17)
    cb8c:	003ff706 	br	cb6c <__alt_data_end+0xfc00cb6c>

0000cb90 <_realloc_r>:
    cb90:	f811883a 	mov	r8,ra
    cb94:	0000ac80 	call	ac8 <_mcount>
    cb98:	403f883a 	mov	ra,r8
    cb9c:	defff604 	addi	sp,sp,-40
    cba0:	dfc00915 	stw	ra,36(sp)
    cba4:	df000815 	stw	fp,32(sp)
    cba8:	ddc00715 	stw	r23,28(sp)
    cbac:	dd800615 	stw	r22,24(sp)
    cbb0:	dd400515 	stw	r21,20(sp)
    cbb4:	dd000415 	stw	r20,16(sp)
    cbb8:	dcc00315 	stw	r19,12(sp)
    cbbc:	dc800215 	stw	r18,8(sp)
    cbc0:	dc400115 	stw	r17,4(sp)
    cbc4:	dc000015 	stw	r16,0(sp)
    cbc8:	3025883a 	mov	r18,r6
    cbcc:	2800b726 	beq	r5,zero,ceac <_realloc_r+0x31c>
    cbd0:	282b883a 	mov	r21,r5
    cbd4:	2029883a 	mov	r20,r4
    cbd8:	0010aa40 	call	10aa4 <__malloc_lock>
    cbdc:	a8bfff17 	ldw	r2,-4(r21)
    cbe0:	043fff04 	movi	r16,-4
    cbe4:	90c002c4 	addi	r3,r18,11
    cbe8:	01000584 	movi	r4,22
    cbec:	acfffe04 	addi	r19,r21,-8
    cbf0:	1420703a 	and	r16,r2,r16
    cbf4:	20c0332e 	bgeu	r4,r3,ccc4 <_realloc_r+0x134>
    cbf8:	047ffe04 	movi	r17,-8
    cbfc:	1c62703a 	and	r17,r3,r17
    cc00:	8807883a 	mov	r3,r17
    cc04:	88005816 	blt	r17,zero,cd68 <_realloc_r+0x1d8>
    cc08:	8c805736 	bltu	r17,r18,cd68 <_realloc_r+0x1d8>
    cc0c:	80c0300e 	bge	r16,r3,ccd0 <_realloc_r+0x140>
    cc10:	07000074 	movhi	fp,1
    cc14:	e70b4a04 	addi	fp,fp,11560
    cc18:	e1c00217 	ldw	r7,8(fp)
    cc1c:	9c09883a 	add	r4,r19,r16
    cc20:	22000117 	ldw	r8,4(r4)
    cc24:	21c06326 	beq	r4,r7,cdb4 <_realloc_r+0x224>
    cc28:	017fff84 	movi	r5,-2
    cc2c:	414a703a 	and	r5,r8,r5
    cc30:	214b883a 	add	r5,r4,r5
    cc34:	29800117 	ldw	r6,4(r5)
    cc38:	3180004c 	andi	r6,r6,1
    cc3c:	30003f26 	beq	r6,zero,cd3c <_realloc_r+0x1ac>
    cc40:	1080004c 	andi	r2,r2,1
    cc44:	10008326 	beq	r2,zero,ce54 <_realloc_r+0x2c4>
    cc48:	900b883a 	mov	r5,r18
    cc4c:	a009883a 	mov	r4,r20
    cc50:	0008b440 	call	8b44 <_malloc_r>
    cc54:	1025883a 	mov	r18,r2
    cc58:	10011e26 	beq	r2,zero,d0d4 <_realloc_r+0x544>
    cc5c:	a93fff17 	ldw	r4,-4(r21)
    cc60:	10fffe04 	addi	r3,r2,-8
    cc64:	00bfff84 	movi	r2,-2
    cc68:	2084703a 	and	r2,r4,r2
    cc6c:	9885883a 	add	r2,r19,r2
    cc70:	1880ee26 	beq	r3,r2,d02c <_realloc_r+0x49c>
    cc74:	81bfff04 	addi	r6,r16,-4
    cc78:	00800904 	movi	r2,36
    cc7c:	1180b836 	bltu	r2,r6,cf60 <_realloc_r+0x3d0>
    cc80:	00c004c4 	movi	r3,19
    cc84:	19809636 	bltu	r3,r6,cee0 <_realloc_r+0x350>
    cc88:	9005883a 	mov	r2,r18
    cc8c:	a807883a 	mov	r3,r21
    cc90:	19000017 	ldw	r4,0(r3)
    cc94:	11000015 	stw	r4,0(r2)
    cc98:	19000117 	ldw	r4,4(r3)
    cc9c:	11000115 	stw	r4,4(r2)
    cca0:	18c00217 	ldw	r3,8(r3)
    cca4:	10c00215 	stw	r3,8(r2)
    cca8:	a80b883a 	mov	r5,r21
    ccac:	a009883a 	mov	r4,r20
    ccb0:	00083840 	call	8384 <_free_r>
    ccb4:	a009883a 	mov	r4,r20
    ccb8:	0010ad40 	call	10ad4 <__malloc_unlock>
    ccbc:	9005883a 	mov	r2,r18
    ccc0:	00001206 	br	cd0c <_realloc_r+0x17c>
    ccc4:	00c00404 	movi	r3,16
    ccc8:	1823883a 	mov	r17,r3
    cccc:	003fce06 	br	cc08 <__alt_data_end+0xfc00cc08>
    ccd0:	a825883a 	mov	r18,r21
    ccd4:	8445c83a 	sub	r2,r16,r17
    ccd8:	00c003c4 	movi	r3,15
    ccdc:	18802636 	bltu	r3,r2,cd78 <_realloc_r+0x1e8>
    cce0:	99800117 	ldw	r6,4(r19)
    cce4:	9c07883a 	add	r3,r19,r16
    cce8:	3180004c 	andi	r6,r6,1
    ccec:	3420b03a 	or	r16,r6,r16
    ccf0:	9c000115 	stw	r16,4(r19)
    ccf4:	18800117 	ldw	r2,4(r3)
    ccf8:	10800054 	ori	r2,r2,1
    ccfc:	18800115 	stw	r2,4(r3)
    cd00:	a009883a 	mov	r4,r20
    cd04:	0010ad40 	call	10ad4 <__malloc_unlock>
    cd08:	9005883a 	mov	r2,r18
    cd0c:	dfc00917 	ldw	ra,36(sp)
    cd10:	df000817 	ldw	fp,32(sp)
    cd14:	ddc00717 	ldw	r23,28(sp)
    cd18:	dd800617 	ldw	r22,24(sp)
    cd1c:	dd400517 	ldw	r21,20(sp)
    cd20:	dd000417 	ldw	r20,16(sp)
    cd24:	dcc00317 	ldw	r19,12(sp)
    cd28:	dc800217 	ldw	r18,8(sp)
    cd2c:	dc400117 	ldw	r17,4(sp)
    cd30:	dc000017 	ldw	r16,0(sp)
    cd34:	dec00a04 	addi	sp,sp,40
    cd38:	f800283a 	ret
    cd3c:	017fff04 	movi	r5,-4
    cd40:	414a703a 	and	r5,r8,r5
    cd44:	814d883a 	add	r6,r16,r5
    cd48:	30c01f16 	blt	r6,r3,cdc8 <_realloc_r+0x238>
    cd4c:	20800317 	ldw	r2,12(r4)
    cd50:	20c00217 	ldw	r3,8(r4)
    cd54:	a825883a 	mov	r18,r21
    cd58:	3021883a 	mov	r16,r6
    cd5c:	18800315 	stw	r2,12(r3)
    cd60:	10c00215 	stw	r3,8(r2)
    cd64:	003fdb06 	br	ccd4 <__alt_data_end+0xfc00ccd4>
    cd68:	00800304 	movi	r2,12
    cd6c:	a0800015 	stw	r2,0(r20)
    cd70:	0005883a 	mov	r2,zero
    cd74:	003fe506 	br	cd0c <__alt_data_end+0xfc00cd0c>
    cd78:	98c00117 	ldw	r3,4(r19)
    cd7c:	9c4b883a 	add	r5,r19,r17
    cd80:	11000054 	ori	r4,r2,1
    cd84:	18c0004c 	andi	r3,r3,1
    cd88:	1c62b03a 	or	r17,r3,r17
    cd8c:	9c400115 	stw	r17,4(r19)
    cd90:	29000115 	stw	r4,4(r5)
    cd94:	2885883a 	add	r2,r5,r2
    cd98:	10c00117 	ldw	r3,4(r2)
    cd9c:	29400204 	addi	r5,r5,8
    cda0:	a009883a 	mov	r4,r20
    cda4:	18c00054 	ori	r3,r3,1
    cda8:	10c00115 	stw	r3,4(r2)
    cdac:	00083840 	call	8384 <_free_r>
    cdb0:	003fd306 	br	cd00 <__alt_data_end+0xfc00cd00>
    cdb4:	017fff04 	movi	r5,-4
    cdb8:	414a703a 	and	r5,r8,r5
    cdbc:	89800404 	addi	r6,r17,16
    cdc0:	8151883a 	add	r8,r16,r5
    cdc4:	4180590e 	bge	r8,r6,cf2c <_realloc_r+0x39c>
    cdc8:	1080004c 	andi	r2,r2,1
    cdcc:	103f9e1e 	bne	r2,zero,cc48 <__alt_data_end+0xfc00cc48>
    cdd0:	adbffe17 	ldw	r22,-8(r21)
    cdd4:	00bfff04 	movi	r2,-4
    cdd8:	9dadc83a 	sub	r22,r19,r22
    cddc:	b1800117 	ldw	r6,4(r22)
    cde0:	3084703a 	and	r2,r6,r2
    cde4:	20002026 	beq	r4,zero,ce68 <_realloc_r+0x2d8>
    cde8:	80af883a 	add	r23,r16,r2
    cdec:	b96f883a 	add	r23,r23,r5
    cdf0:	21c05f26 	beq	r4,r7,cf70 <_realloc_r+0x3e0>
    cdf4:	b8c01c16 	blt	r23,r3,ce68 <_realloc_r+0x2d8>
    cdf8:	20800317 	ldw	r2,12(r4)
    cdfc:	20c00217 	ldw	r3,8(r4)
    ce00:	81bfff04 	addi	r6,r16,-4
    ce04:	01000904 	movi	r4,36
    ce08:	18800315 	stw	r2,12(r3)
    ce0c:	10c00215 	stw	r3,8(r2)
    ce10:	b0c00217 	ldw	r3,8(r22)
    ce14:	b0800317 	ldw	r2,12(r22)
    ce18:	b4800204 	addi	r18,r22,8
    ce1c:	18800315 	stw	r2,12(r3)
    ce20:	10c00215 	stw	r3,8(r2)
    ce24:	21801b36 	bltu	r4,r6,ce94 <_realloc_r+0x304>
    ce28:	008004c4 	movi	r2,19
    ce2c:	1180352e 	bgeu	r2,r6,cf04 <_realloc_r+0x374>
    ce30:	a8800017 	ldw	r2,0(r21)
    ce34:	b0800215 	stw	r2,8(r22)
    ce38:	a8800117 	ldw	r2,4(r21)
    ce3c:	b0800315 	stw	r2,12(r22)
    ce40:	008006c4 	movi	r2,27
    ce44:	11807f36 	bltu	r2,r6,d044 <_realloc_r+0x4b4>
    ce48:	b0800404 	addi	r2,r22,16
    ce4c:	ad400204 	addi	r21,r21,8
    ce50:	00002d06 	br	cf08 <_realloc_r+0x378>
    ce54:	adbffe17 	ldw	r22,-8(r21)
    ce58:	00bfff04 	movi	r2,-4
    ce5c:	9dadc83a 	sub	r22,r19,r22
    ce60:	b1000117 	ldw	r4,4(r22)
    ce64:	2084703a 	and	r2,r4,r2
    ce68:	b03f7726 	beq	r22,zero,cc48 <__alt_data_end+0xfc00cc48>
    ce6c:	80af883a 	add	r23,r16,r2
    ce70:	b8ff7516 	blt	r23,r3,cc48 <__alt_data_end+0xfc00cc48>
    ce74:	b0800317 	ldw	r2,12(r22)
    ce78:	b0c00217 	ldw	r3,8(r22)
    ce7c:	81bfff04 	addi	r6,r16,-4
    ce80:	01000904 	movi	r4,36
    ce84:	18800315 	stw	r2,12(r3)
    ce88:	10c00215 	stw	r3,8(r2)
    ce8c:	b4800204 	addi	r18,r22,8
    ce90:	21bfe52e 	bgeu	r4,r6,ce28 <__alt_data_end+0xfc00ce28>
    ce94:	a80b883a 	mov	r5,r21
    ce98:	9009883a 	mov	r4,r18
    ce9c:	000c9c00 	call	c9c0 <memmove>
    cea0:	b821883a 	mov	r16,r23
    cea4:	b027883a 	mov	r19,r22
    cea8:	003f8a06 	br	ccd4 <__alt_data_end+0xfc00ccd4>
    ceac:	300b883a 	mov	r5,r6
    ceb0:	dfc00917 	ldw	ra,36(sp)
    ceb4:	df000817 	ldw	fp,32(sp)
    ceb8:	ddc00717 	ldw	r23,28(sp)
    cebc:	dd800617 	ldw	r22,24(sp)
    cec0:	dd400517 	ldw	r21,20(sp)
    cec4:	dd000417 	ldw	r20,16(sp)
    cec8:	dcc00317 	ldw	r19,12(sp)
    cecc:	dc800217 	ldw	r18,8(sp)
    ced0:	dc400117 	ldw	r17,4(sp)
    ced4:	dc000017 	ldw	r16,0(sp)
    ced8:	dec00a04 	addi	sp,sp,40
    cedc:	0008b441 	jmpi	8b44 <_malloc_r>
    cee0:	a8c00017 	ldw	r3,0(r21)
    cee4:	90c00015 	stw	r3,0(r18)
    cee8:	a8c00117 	ldw	r3,4(r21)
    ceec:	90c00115 	stw	r3,4(r18)
    cef0:	00c006c4 	movi	r3,27
    cef4:	19804536 	bltu	r3,r6,d00c <_realloc_r+0x47c>
    cef8:	90800204 	addi	r2,r18,8
    cefc:	a8c00204 	addi	r3,r21,8
    cf00:	003f6306 	br	cc90 <__alt_data_end+0xfc00cc90>
    cf04:	9005883a 	mov	r2,r18
    cf08:	a8c00017 	ldw	r3,0(r21)
    cf0c:	b821883a 	mov	r16,r23
    cf10:	b027883a 	mov	r19,r22
    cf14:	10c00015 	stw	r3,0(r2)
    cf18:	a8c00117 	ldw	r3,4(r21)
    cf1c:	10c00115 	stw	r3,4(r2)
    cf20:	a8c00217 	ldw	r3,8(r21)
    cf24:	10c00215 	stw	r3,8(r2)
    cf28:	003f6a06 	br	ccd4 <__alt_data_end+0xfc00ccd4>
    cf2c:	9c67883a 	add	r19,r19,r17
    cf30:	4445c83a 	sub	r2,r8,r17
    cf34:	e4c00215 	stw	r19,8(fp)
    cf38:	10800054 	ori	r2,r2,1
    cf3c:	98800115 	stw	r2,4(r19)
    cf40:	a8bfff17 	ldw	r2,-4(r21)
    cf44:	a009883a 	mov	r4,r20
    cf48:	1080004c 	andi	r2,r2,1
    cf4c:	1462b03a 	or	r17,r2,r17
    cf50:	ac7fff15 	stw	r17,-4(r21)
    cf54:	0010ad40 	call	10ad4 <__malloc_unlock>
    cf58:	a805883a 	mov	r2,r21
    cf5c:	003f6b06 	br	cd0c <__alt_data_end+0xfc00cd0c>
    cf60:	a80b883a 	mov	r5,r21
    cf64:	9009883a 	mov	r4,r18
    cf68:	000c9c00 	call	c9c0 <memmove>
    cf6c:	003f4e06 	br	cca8 <__alt_data_end+0xfc00cca8>
    cf70:	89000404 	addi	r4,r17,16
    cf74:	b93fbc16 	blt	r23,r4,ce68 <__alt_data_end+0xfc00ce68>
    cf78:	b0800317 	ldw	r2,12(r22)
    cf7c:	b0c00217 	ldw	r3,8(r22)
    cf80:	81bfff04 	addi	r6,r16,-4
    cf84:	01000904 	movi	r4,36
    cf88:	18800315 	stw	r2,12(r3)
    cf8c:	10c00215 	stw	r3,8(r2)
    cf90:	b4800204 	addi	r18,r22,8
    cf94:	21804336 	bltu	r4,r6,d0a4 <_realloc_r+0x514>
    cf98:	008004c4 	movi	r2,19
    cf9c:	11803f2e 	bgeu	r2,r6,d09c <_realloc_r+0x50c>
    cfa0:	a8800017 	ldw	r2,0(r21)
    cfa4:	b0800215 	stw	r2,8(r22)
    cfa8:	a8800117 	ldw	r2,4(r21)
    cfac:	b0800315 	stw	r2,12(r22)
    cfb0:	008006c4 	movi	r2,27
    cfb4:	11803f36 	bltu	r2,r6,d0b4 <_realloc_r+0x524>
    cfb8:	b0800404 	addi	r2,r22,16
    cfbc:	ad400204 	addi	r21,r21,8
    cfc0:	a8c00017 	ldw	r3,0(r21)
    cfc4:	10c00015 	stw	r3,0(r2)
    cfc8:	a8c00117 	ldw	r3,4(r21)
    cfcc:	10c00115 	stw	r3,4(r2)
    cfd0:	a8c00217 	ldw	r3,8(r21)
    cfd4:	10c00215 	stw	r3,8(r2)
    cfd8:	b447883a 	add	r3,r22,r17
    cfdc:	bc45c83a 	sub	r2,r23,r17
    cfe0:	e0c00215 	stw	r3,8(fp)
    cfe4:	10800054 	ori	r2,r2,1
    cfe8:	18800115 	stw	r2,4(r3)
    cfec:	b0800117 	ldw	r2,4(r22)
    cff0:	a009883a 	mov	r4,r20
    cff4:	1080004c 	andi	r2,r2,1
    cff8:	1462b03a 	or	r17,r2,r17
    cffc:	b4400115 	stw	r17,4(r22)
    d000:	0010ad40 	call	10ad4 <__malloc_unlock>
    d004:	9005883a 	mov	r2,r18
    d008:	003f4006 	br	cd0c <__alt_data_end+0xfc00cd0c>
    d00c:	a8c00217 	ldw	r3,8(r21)
    d010:	90c00215 	stw	r3,8(r18)
    d014:	a8c00317 	ldw	r3,12(r21)
    d018:	90c00315 	stw	r3,12(r18)
    d01c:	30801126 	beq	r6,r2,d064 <_realloc_r+0x4d4>
    d020:	90800404 	addi	r2,r18,16
    d024:	a8c00404 	addi	r3,r21,16
    d028:	003f1906 	br	cc90 <__alt_data_end+0xfc00cc90>
    d02c:	90ffff17 	ldw	r3,-4(r18)
    d030:	00bfff04 	movi	r2,-4
    d034:	a825883a 	mov	r18,r21
    d038:	1884703a 	and	r2,r3,r2
    d03c:	80a1883a 	add	r16,r16,r2
    d040:	003f2406 	br	ccd4 <__alt_data_end+0xfc00ccd4>
    d044:	a8800217 	ldw	r2,8(r21)
    d048:	b0800415 	stw	r2,16(r22)
    d04c:	a8800317 	ldw	r2,12(r21)
    d050:	b0800515 	stw	r2,20(r22)
    d054:	31000a26 	beq	r6,r4,d080 <_realloc_r+0x4f0>
    d058:	b0800604 	addi	r2,r22,24
    d05c:	ad400404 	addi	r21,r21,16
    d060:	003fa906 	br	cf08 <__alt_data_end+0xfc00cf08>
    d064:	a9000417 	ldw	r4,16(r21)
    d068:	90800604 	addi	r2,r18,24
    d06c:	a8c00604 	addi	r3,r21,24
    d070:	91000415 	stw	r4,16(r18)
    d074:	a9000517 	ldw	r4,20(r21)
    d078:	91000515 	stw	r4,20(r18)
    d07c:	003f0406 	br	cc90 <__alt_data_end+0xfc00cc90>
    d080:	a8c00417 	ldw	r3,16(r21)
    d084:	ad400604 	addi	r21,r21,24
    d088:	b0800804 	addi	r2,r22,32
    d08c:	b0c00615 	stw	r3,24(r22)
    d090:	a8ffff17 	ldw	r3,-4(r21)
    d094:	b0c00715 	stw	r3,28(r22)
    d098:	003f9b06 	br	cf08 <__alt_data_end+0xfc00cf08>
    d09c:	9005883a 	mov	r2,r18
    d0a0:	003fc706 	br	cfc0 <__alt_data_end+0xfc00cfc0>
    d0a4:	a80b883a 	mov	r5,r21
    d0a8:	9009883a 	mov	r4,r18
    d0ac:	000c9c00 	call	c9c0 <memmove>
    d0b0:	003fc906 	br	cfd8 <__alt_data_end+0xfc00cfd8>
    d0b4:	a8800217 	ldw	r2,8(r21)
    d0b8:	b0800415 	stw	r2,16(r22)
    d0bc:	a8800317 	ldw	r2,12(r21)
    d0c0:	b0800515 	stw	r2,20(r22)
    d0c4:	31000726 	beq	r6,r4,d0e4 <_realloc_r+0x554>
    d0c8:	b0800604 	addi	r2,r22,24
    d0cc:	ad400404 	addi	r21,r21,16
    d0d0:	003fbb06 	br	cfc0 <__alt_data_end+0xfc00cfc0>
    d0d4:	a009883a 	mov	r4,r20
    d0d8:	0010ad40 	call	10ad4 <__malloc_unlock>
    d0dc:	0005883a 	mov	r2,zero
    d0e0:	003f0a06 	br	cd0c <__alt_data_end+0xfc00cd0c>
    d0e4:	a8c00417 	ldw	r3,16(r21)
    d0e8:	ad400604 	addi	r21,r21,24
    d0ec:	b0800804 	addi	r2,r22,32
    d0f0:	b0c00615 	stw	r3,24(r22)
    d0f4:	a8ffff17 	ldw	r3,-4(r21)
    d0f8:	b0c00715 	stw	r3,28(r22)
    d0fc:	003fb006 	br	cfc0 <__alt_data_end+0xfc00cfc0>

0000d100 <_wcrtomb_r>:
    d100:	f811883a 	mov	r8,ra
    d104:	0000ac80 	call	ac8 <_mcount>
    d108:	403f883a 	mov	ra,r8
    d10c:	defff604 	addi	sp,sp,-40
    d110:	dfc00915 	stw	ra,36(sp)
    d114:	dc800815 	stw	r18,32(sp)
    d118:	dc400715 	stw	r17,28(sp)
    d11c:	dc000615 	stw	r16,24(sp)
    d120:	00800074 	movhi	r2,1
    d124:	108c6004 	addi	r2,r2,12672
    d128:	2021883a 	mov	r16,r4
    d12c:	3823883a 	mov	r17,r7
    d130:	14800017 	ldw	r18,0(r2)
    d134:	28001426 	beq	r5,zero,d188 <_wcrtomb_r+0x88>
    d138:	d9400415 	stw	r5,16(sp)
    d13c:	d9800515 	stw	r6,20(sp)
    d140:	00088c80 	call	88c8 <__locale_charset>
    d144:	d9800517 	ldw	r6,20(sp)
    d148:	d9400417 	ldw	r5,16(sp)
    d14c:	100f883a 	mov	r7,r2
    d150:	dc400015 	stw	r17,0(sp)
    d154:	8009883a 	mov	r4,r16
    d158:	903ee83a 	callr	r18
    d15c:	00ffffc4 	movi	r3,-1
    d160:	10c0031e 	bne	r2,r3,d170 <_wcrtomb_r+0x70>
    d164:	88000015 	stw	zero,0(r17)
    d168:	00c02284 	movi	r3,138
    d16c:	80c00015 	stw	r3,0(r16)
    d170:	dfc00917 	ldw	ra,36(sp)
    d174:	dc800817 	ldw	r18,32(sp)
    d178:	dc400717 	ldw	r17,28(sp)
    d17c:	dc000617 	ldw	r16,24(sp)
    d180:	dec00a04 	addi	sp,sp,40
    d184:	f800283a 	ret
    d188:	00088c80 	call	88c8 <__locale_charset>
    d18c:	100f883a 	mov	r7,r2
    d190:	dc400015 	stw	r17,0(sp)
    d194:	000d883a 	mov	r6,zero
    d198:	d9400104 	addi	r5,sp,4
    d19c:	8009883a 	mov	r4,r16
    d1a0:	903ee83a 	callr	r18
    d1a4:	003fed06 	br	d15c <__alt_data_end+0xfc00d15c>

0000d1a8 <wcrtomb>:
    d1a8:	f811883a 	mov	r8,ra
    d1ac:	0000ac80 	call	ac8 <_mcount>
    d1b0:	403f883a 	mov	ra,r8
    d1b4:	defff604 	addi	sp,sp,-40
    d1b8:	dfc00915 	stw	ra,36(sp)
    d1bc:	dd000815 	stw	r20,32(sp)
    d1c0:	dcc00715 	stw	r19,28(sp)
    d1c4:	dc800615 	stw	r18,24(sp)
    d1c8:	dc400515 	stw	r17,20(sp)
    d1cc:	dc000415 	stw	r16,16(sp)
    d1d0:	00800074 	movhi	r2,1
    d1d4:	108c5c04 	addi	r2,r2,12656
    d1d8:	3025883a 	mov	r18,r6
    d1dc:	14400017 	ldw	r17,0(r2)
    d1e0:	20001926 	beq	r4,zero,d248 <wcrtomb+0xa0>
    d1e4:	00800074 	movhi	r2,1
    d1e8:	108c6004 	addi	r2,r2,12672
    d1ec:	15000017 	ldw	r20,0(r2)
    d1f0:	2021883a 	mov	r16,r4
    d1f4:	2827883a 	mov	r19,r5
    d1f8:	00088c80 	call	88c8 <__locale_charset>
    d1fc:	100f883a 	mov	r7,r2
    d200:	dc800015 	stw	r18,0(sp)
    d204:	980d883a 	mov	r6,r19
    d208:	800b883a 	mov	r5,r16
    d20c:	8809883a 	mov	r4,r17
    d210:	a03ee83a 	callr	r20
    d214:	00ffffc4 	movi	r3,-1
    d218:	10c0031e 	bne	r2,r3,d228 <wcrtomb+0x80>
    d21c:	90000015 	stw	zero,0(r18)
    d220:	00c02284 	movi	r3,138
    d224:	88c00015 	stw	r3,0(r17)
    d228:	dfc00917 	ldw	ra,36(sp)
    d22c:	dd000817 	ldw	r20,32(sp)
    d230:	dcc00717 	ldw	r19,28(sp)
    d234:	dc800617 	ldw	r18,24(sp)
    d238:	dc400517 	ldw	r17,20(sp)
    d23c:	dc000417 	ldw	r16,16(sp)
    d240:	dec00a04 	addi	sp,sp,40
    d244:	f800283a 	ret
    d248:	00800074 	movhi	r2,1
    d24c:	108c6004 	addi	r2,r2,12672
    d250:	14000017 	ldw	r16,0(r2)
    d254:	00088c80 	call	88c8 <__locale_charset>
    d258:	100f883a 	mov	r7,r2
    d25c:	dc800015 	stw	r18,0(sp)
    d260:	000d883a 	mov	r6,zero
    d264:	d9400104 	addi	r5,sp,4
    d268:	8809883a 	mov	r4,r17
    d26c:	803ee83a 	callr	r16
    d270:	003fe806 	br	d214 <__alt_data_end+0xfc00d214>

0000d274 <__ascii_wctomb>:
    d274:	f811883a 	mov	r8,ra
    d278:	0000ac80 	call	ac8 <_mcount>
    d27c:	403f883a 	mov	ra,r8
    d280:	28000526 	beq	r5,zero,d298 <__ascii_wctomb+0x24>
    d284:	00803fc4 	movi	r2,255
    d288:	11800536 	bltu	r2,r6,d2a0 <__ascii_wctomb+0x2c>
    d28c:	29800005 	stb	r6,0(r5)
    d290:	00800044 	movi	r2,1
    d294:	f800283a 	ret
    d298:	0005883a 	mov	r2,zero
    d29c:	f800283a 	ret
    d2a0:	00802284 	movi	r2,138
    d2a4:	20800015 	stw	r2,0(r4)
    d2a8:	00bfffc4 	movi	r2,-1
    d2ac:	003ff906 	br	d294 <__alt_data_end+0xfc00d294>

0000d2b0 <_wctomb_r>:
    d2b0:	f811883a 	mov	r8,ra
    d2b4:	0000ac80 	call	ac8 <_mcount>
    d2b8:	403f883a 	mov	ra,r8
    d2bc:	defff904 	addi	sp,sp,-28
    d2c0:	dfc00615 	stw	ra,24(sp)
    d2c4:	dc400515 	stw	r17,20(sp)
    d2c8:	dc000415 	stw	r16,16(sp)
    d2cc:	00800074 	movhi	r2,1
    d2d0:	108c6004 	addi	r2,r2,12672
    d2d4:	14000017 	ldw	r16,0(r2)
    d2d8:	3823883a 	mov	r17,r7
    d2dc:	d9000115 	stw	r4,4(sp)
    d2e0:	d9400215 	stw	r5,8(sp)
    d2e4:	d9800315 	stw	r6,12(sp)
    d2e8:	00088c80 	call	88c8 <__locale_charset>
    d2ec:	d9800317 	ldw	r6,12(sp)
    d2f0:	d9400217 	ldw	r5,8(sp)
    d2f4:	d9000117 	ldw	r4,4(sp)
    d2f8:	100f883a 	mov	r7,r2
    d2fc:	dc400015 	stw	r17,0(sp)
    d300:	803ee83a 	callr	r16
    d304:	dfc00617 	ldw	ra,24(sp)
    d308:	dc400517 	ldw	r17,20(sp)
    d30c:	dc000417 	ldw	r16,16(sp)
    d310:	dec00704 	addi	sp,sp,28
    d314:	f800283a 	ret

0000d318 <__floatundidf>:
    d318:	f811883a 	mov	r8,ra
    d31c:	0000ac80 	call	ac8 <_mcount>
    d320:	403f883a 	mov	ra,r8
    d324:	defffc04 	addi	sp,sp,-16
    d328:	dfc00315 	stw	ra,12(sp)
    d32c:	dc800215 	stw	r18,8(sp)
    d330:	dc400115 	stw	r17,4(sp)
    d334:	dc000015 	stw	r16,0(sp)
    d338:	2025883a 	mov	r18,r4
    d33c:	2809883a 	mov	r4,r5
    d340:	00105f40 	call	105f4 <__floatunsidf>
    d344:	000d883a 	mov	r6,zero
    d348:	01d07c34 	movhi	r7,16880
    d34c:	180b883a 	mov	r5,r3
    d350:	1009883a 	mov	r4,r2
    d354:	000f4540 	call	f454 <__muldf3>
    d358:	9009883a 	mov	r4,r18
    d35c:	1023883a 	mov	r17,r2
    d360:	1821883a 	mov	r16,r3
    d364:	00105f40 	call	105f4 <__floatunsidf>
    d368:	880d883a 	mov	r6,r17
    d36c:	800f883a 	mov	r7,r16
    d370:	1009883a 	mov	r4,r2
    d374:	180b883a 	mov	r5,r3
    d378:	000e03c0 	call	e03c <__adddf3>
    d37c:	dfc00317 	ldw	ra,12(sp)
    d380:	dc800217 	ldw	r18,8(sp)
    d384:	dc400117 	ldw	r17,4(sp)
    d388:	dc000017 	ldw	r16,0(sp)
    d38c:	dec00404 	addi	sp,sp,16
    d390:	f800283a 	ret

0000d394 <__udivdi3>:
    d394:	f811883a 	mov	r8,ra
    d398:	0000ac80 	call	ac8 <_mcount>
    d39c:	403f883a 	mov	ra,r8
    d3a0:	defff504 	addi	sp,sp,-44
    d3a4:	dfc00a15 	stw	ra,40(sp)
    d3a8:	df000915 	stw	fp,36(sp)
    d3ac:	ddc00815 	stw	r23,32(sp)
    d3b0:	dd800715 	stw	r22,28(sp)
    d3b4:	dd400615 	stw	r21,24(sp)
    d3b8:	dd000515 	stw	r20,20(sp)
    d3bc:	dcc00415 	stw	r19,16(sp)
    d3c0:	dc800315 	stw	r18,12(sp)
    d3c4:	dc400215 	stw	r17,8(sp)
    d3c8:	dc000115 	stw	r16,4(sp)
    d3cc:	2027883a 	mov	r19,r4
    d3d0:	2821883a 	mov	r16,r5
    d3d4:	3800411e 	bne	r7,zero,d4dc <__udivdi3+0x148>
    d3d8:	3023883a 	mov	r17,r6
    d3dc:	2025883a 	mov	r18,r4
    d3e0:	2980522e 	bgeu	r5,r6,d52c <__udivdi3+0x198>
    d3e4:	00bfffd4 	movui	r2,65535
    d3e8:	282d883a 	mov	r22,r5
    d3ec:	1180a836 	bltu	r2,r6,d690 <__udivdi3+0x2fc>
    d3f0:	00803fc4 	movi	r2,255
    d3f4:	1185803a 	cmpltu	r2,r2,r6
    d3f8:	100490fa 	slli	r2,r2,3
    d3fc:	3086d83a 	srl	r3,r6,r2
    d400:	01000074 	movhi	r4,1
    d404:	21045804 	addi	r4,r4,4448
    d408:	20c7883a 	add	r3,r4,r3
    d40c:	18c00003 	ldbu	r3,0(r3)
    d410:	1885883a 	add	r2,r3,r2
    d414:	00c00804 	movi	r3,32
    d418:	1887c83a 	sub	r3,r3,r2
    d41c:	18000526 	beq	r3,zero,d434 <__udivdi3+0xa0>
    d420:	80e0983a 	sll	r16,r16,r3
    d424:	9884d83a 	srl	r2,r19,r2
    d428:	30e2983a 	sll	r17,r6,r3
    d42c:	98e4983a 	sll	r18,r19,r3
    d430:	142cb03a 	or	r22,r2,r16
    d434:	882ad43a 	srli	r21,r17,16
    d438:	b009883a 	mov	r4,r22
    d43c:	8d3fffcc 	andi	r20,r17,65535
    d440:	a80b883a 	mov	r5,r21
    d444:	000dfdc0 	call	dfdc <__umodsi3>
    d448:	b009883a 	mov	r4,r22
    d44c:	a80b883a 	mov	r5,r21
    d450:	1027883a 	mov	r19,r2
    d454:	000df6c0 	call	df6c <__udivsi3>
    d458:	102d883a 	mov	r22,r2
    d45c:	9826943a 	slli	r19,r19,16
    d460:	9004d43a 	srli	r2,r18,16
    d464:	a5a1383a 	mul	r16,r20,r22
    d468:	14c4b03a 	or	r2,r2,r19
    d46c:	1400052e 	bgeu	r2,r16,d484 <__udivdi3+0xf0>
    d470:	1445883a 	add	r2,r2,r17
    d474:	b0ffffc4 	addi	r3,r22,-1
    d478:	14400136 	bltu	r2,r17,d480 <__udivdi3+0xec>
    d47c:	14012336 	bltu	r2,r16,d90c <__udivdi3+0x578>
    d480:	182d883a 	mov	r22,r3
    d484:	1421c83a 	sub	r16,r2,r16
    d488:	a80b883a 	mov	r5,r21
    d48c:	8009883a 	mov	r4,r16
    d490:	000dfdc0 	call	dfdc <__umodsi3>
    d494:	1027883a 	mov	r19,r2
    d498:	a80b883a 	mov	r5,r21
    d49c:	8009883a 	mov	r4,r16
    d4a0:	000df6c0 	call	df6c <__udivsi3>
    d4a4:	9826943a 	slli	r19,r19,16
    d4a8:	a0a9383a 	mul	r20,r20,r2
    d4ac:	94bfffcc 	andi	r18,r18,65535
    d4b0:	94e4b03a 	or	r18,r18,r19
    d4b4:	9500052e 	bgeu	r18,r20,d4cc <__udivdi3+0x138>
    d4b8:	8ca5883a 	add	r18,r17,r18
    d4bc:	10ffffc4 	addi	r3,r2,-1
    d4c0:	9440f136 	bltu	r18,r17,d888 <__udivdi3+0x4f4>
    d4c4:	9500f02e 	bgeu	r18,r20,d888 <__udivdi3+0x4f4>
    d4c8:	10bfff84 	addi	r2,r2,-2
    d4cc:	b00c943a 	slli	r6,r22,16
    d4d0:	0007883a 	mov	r3,zero
    d4d4:	3084b03a 	or	r2,r6,r2
    d4d8:	00005906 	br	d640 <__udivdi3+0x2ac>
    d4dc:	29c05636 	bltu	r5,r7,d638 <__udivdi3+0x2a4>
    d4e0:	00bfffd4 	movui	r2,65535
    d4e4:	11c0622e 	bgeu	r2,r7,d670 <__udivdi3+0x2dc>
    d4e8:	00804034 	movhi	r2,256
    d4ec:	10bfffc4 	addi	r2,r2,-1
    d4f0:	11c0ee36 	bltu	r2,r7,d8ac <__udivdi3+0x518>
    d4f4:	00800404 	movi	r2,16
    d4f8:	3886d83a 	srl	r3,r7,r2
    d4fc:	01000074 	movhi	r4,1
    d500:	21045804 	addi	r4,r4,4448
    d504:	20c7883a 	add	r3,r4,r3
    d508:	18c00003 	ldbu	r3,0(r3)
    d50c:	05400804 	movi	r21,32
    d510:	1885883a 	add	r2,r3,r2
    d514:	a8abc83a 	sub	r21,r21,r2
    d518:	a800621e 	bne	r21,zero,d6a4 <__udivdi3+0x310>
    d51c:	3c00e936 	bltu	r7,r16,d8c4 <__udivdi3+0x530>
    d520:	9985403a 	cmpgeu	r2,r19,r6
    d524:	0007883a 	mov	r3,zero
    d528:	00004506 	br	d640 <__udivdi3+0x2ac>
    d52c:	3000041e 	bne	r6,zero,d540 <__udivdi3+0x1ac>
    d530:	000b883a 	mov	r5,zero
    d534:	01000044 	movi	r4,1
    d538:	000df6c0 	call	df6c <__udivsi3>
    d53c:	1023883a 	mov	r17,r2
    d540:	00bfffd4 	movui	r2,65535
    d544:	14404e2e 	bgeu	r2,r17,d680 <__udivdi3+0x2ec>
    d548:	00804034 	movhi	r2,256
    d54c:	10bfffc4 	addi	r2,r2,-1
    d550:	1440d836 	bltu	r2,r17,d8b4 <__udivdi3+0x520>
    d554:	00800404 	movi	r2,16
    d558:	8886d83a 	srl	r3,r17,r2
    d55c:	01000074 	movhi	r4,1
    d560:	21045804 	addi	r4,r4,4448
    d564:	20c7883a 	add	r3,r4,r3
    d568:	18c00003 	ldbu	r3,0(r3)
    d56c:	1885883a 	add	r2,r3,r2
    d570:	00c00804 	movi	r3,32
    d574:	1887c83a 	sub	r3,r3,r2
    d578:	18008f1e 	bne	r3,zero,d7b8 <__udivdi3+0x424>
    d57c:	882ad43a 	srli	r21,r17,16
    d580:	8461c83a 	sub	r16,r16,r17
    d584:	8d3fffcc 	andi	r20,r17,65535
    d588:	00c00044 	movi	r3,1
    d58c:	8009883a 	mov	r4,r16
    d590:	a80b883a 	mov	r5,r21
    d594:	d8c00015 	stw	r3,0(sp)
    d598:	000dfdc0 	call	dfdc <__umodsi3>
    d59c:	8009883a 	mov	r4,r16
    d5a0:	a80b883a 	mov	r5,r21
    d5a4:	1027883a 	mov	r19,r2
    d5a8:	000df6c0 	call	df6c <__udivsi3>
    d5ac:	9826943a 	slli	r19,r19,16
    d5b0:	9008d43a 	srli	r4,r18,16
    d5b4:	1521383a 	mul	r16,r2,r20
    d5b8:	102d883a 	mov	r22,r2
    d5bc:	24c8b03a 	or	r4,r4,r19
    d5c0:	d8c00017 	ldw	r3,0(sp)
    d5c4:	2400052e 	bgeu	r4,r16,d5dc <__udivdi3+0x248>
    d5c8:	2449883a 	add	r4,r4,r17
    d5cc:	b0bfffc4 	addi	r2,r22,-1
    d5d0:	24400136 	bltu	r4,r17,d5d8 <__udivdi3+0x244>
    d5d4:	2400ca36 	bltu	r4,r16,d900 <__udivdi3+0x56c>
    d5d8:	102d883a 	mov	r22,r2
    d5dc:	2421c83a 	sub	r16,r4,r16
    d5e0:	a80b883a 	mov	r5,r21
    d5e4:	8009883a 	mov	r4,r16
    d5e8:	d8c00015 	stw	r3,0(sp)
    d5ec:	000dfdc0 	call	dfdc <__umodsi3>
    d5f0:	1027883a 	mov	r19,r2
    d5f4:	a80b883a 	mov	r5,r21
    d5f8:	8009883a 	mov	r4,r16
    d5fc:	000df6c0 	call	df6c <__udivsi3>
    d600:	9826943a 	slli	r19,r19,16
    d604:	1529383a 	mul	r20,r2,r20
    d608:	94bfffcc 	andi	r18,r18,65535
    d60c:	94e4b03a 	or	r18,r18,r19
    d610:	d8c00017 	ldw	r3,0(sp)
    d614:	9500052e 	bgeu	r18,r20,d62c <__udivdi3+0x298>
    d618:	8ca5883a 	add	r18,r17,r18
    d61c:	113fffc4 	addi	r4,r2,-1
    d620:	94409736 	bltu	r18,r17,d880 <__udivdi3+0x4ec>
    d624:	9500962e 	bgeu	r18,r20,d880 <__udivdi3+0x4ec>
    d628:	10bfff84 	addi	r2,r2,-2
    d62c:	b00c943a 	slli	r6,r22,16
    d630:	3084b03a 	or	r2,r6,r2
    d634:	00000206 	br	d640 <__udivdi3+0x2ac>
    d638:	0007883a 	mov	r3,zero
    d63c:	0005883a 	mov	r2,zero
    d640:	dfc00a17 	ldw	ra,40(sp)
    d644:	df000917 	ldw	fp,36(sp)
    d648:	ddc00817 	ldw	r23,32(sp)
    d64c:	dd800717 	ldw	r22,28(sp)
    d650:	dd400617 	ldw	r21,24(sp)
    d654:	dd000517 	ldw	r20,20(sp)
    d658:	dcc00417 	ldw	r19,16(sp)
    d65c:	dc800317 	ldw	r18,12(sp)
    d660:	dc400217 	ldw	r17,8(sp)
    d664:	dc000117 	ldw	r16,4(sp)
    d668:	dec00b04 	addi	sp,sp,44
    d66c:	f800283a 	ret
    d670:	00803fc4 	movi	r2,255
    d674:	11c5803a 	cmpltu	r2,r2,r7
    d678:	100490fa 	slli	r2,r2,3
    d67c:	003f9e06 	br	d4f8 <__alt_data_end+0xfc00d4f8>
    d680:	00803fc4 	movi	r2,255
    d684:	1445803a 	cmpltu	r2,r2,r17
    d688:	100490fa 	slli	r2,r2,3
    d68c:	003fb206 	br	d558 <__alt_data_end+0xfc00d558>
    d690:	00804034 	movhi	r2,256
    d694:	10bfffc4 	addi	r2,r2,-1
    d698:	11808836 	bltu	r2,r6,d8bc <__udivdi3+0x528>
    d69c:	00800404 	movi	r2,16
    d6a0:	003f5606 	br	d3fc <__alt_data_end+0xfc00d3fc>
    d6a4:	30aed83a 	srl	r23,r6,r2
    d6a8:	3d4e983a 	sll	r7,r7,r21
    d6ac:	80acd83a 	srl	r22,r16,r2
    d6b0:	9884d83a 	srl	r2,r19,r2
    d6b4:	3deeb03a 	or	r23,r7,r23
    d6b8:	b824d43a 	srli	r18,r23,16
    d6bc:	8560983a 	sll	r16,r16,r21
    d6c0:	b009883a 	mov	r4,r22
    d6c4:	900b883a 	mov	r5,r18
    d6c8:	3568983a 	sll	r20,r6,r21
    d6cc:	1420b03a 	or	r16,r2,r16
    d6d0:	000dfdc0 	call	dfdc <__umodsi3>
    d6d4:	b009883a 	mov	r4,r22
    d6d8:	900b883a 	mov	r5,r18
    d6dc:	1023883a 	mov	r17,r2
    d6e0:	000df6c0 	call	df6c <__udivsi3>
    d6e4:	8808943a 	slli	r4,r17,16
    d6e8:	bf3fffcc 	andi	fp,r23,65535
    d6ec:	8006d43a 	srli	r3,r16,16
    d6f0:	e0a3383a 	mul	r17,fp,r2
    d6f4:	100d883a 	mov	r6,r2
    d6f8:	1906b03a 	or	r3,r3,r4
    d6fc:	1c40042e 	bgeu	r3,r17,d710 <__udivdi3+0x37c>
    d700:	1dc7883a 	add	r3,r3,r23
    d704:	10bfffc4 	addi	r2,r2,-1
    d708:	1dc0752e 	bgeu	r3,r23,d8e0 <__udivdi3+0x54c>
    d70c:	100d883a 	mov	r6,r2
    d710:	1c63c83a 	sub	r17,r3,r17
    d714:	900b883a 	mov	r5,r18
    d718:	8809883a 	mov	r4,r17
    d71c:	d9800015 	stw	r6,0(sp)
    d720:	000dfdc0 	call	dfdc <__umodsi3>
    d724:	102d883a 	mov	r22,r2
    d728:	8809883a 	mov	r4,r17
    d72c:	900b883a 	mov	r5,r18
    d730:	000df6c0 	call	df6c <__udivsi3>
    d734:	b02c943a 	slli	r22,r22,16
    d738:	e089383a 	mul	r4,fp,r2
    d73c:	843fffcc 	andi	r16,r16,65535
    d740:	85a0b03a 	or	r16,r16,r22
    d744:	d9800017 	ldw	r6,0(sp)
    d748:	8100042e 	bgeu	r16,r4,d75c <__udivdi3+0x3c8>
    d74c:	85e1883a 	add	r16,r16,r23
    d750:	10ffffc4 	addi	r3,r2,-1
    d754:	85c05e2e 	bgeu	r16,r23,d8d0 <__udivdi3+0x53c>
    d758:	1805883a 	mov	r2,r3
    d75c:	300c943a 	slli	r6,r6,16
    d760:	a17fffcc 	andi	r5,r20,65535
    d764:	a028d43a 	srli	r20,r20,16
    d768:	3084b03a 	or	r2,r6,r2
    d76c:	10ffffcc 	andi	r3,r2,65535
    d770:	100cd43a 	srli	r6,r2,16
    d774:	194f383a 	mul	r7,r3,r5
    d778:	1d07383a 	mul	r3,r3,r20
    d77c:	314b383a 	mul	r5,r6,r5
    d780:	3810d43a 	srli	r8,r7,16
    d784:	8121c83a 	sub	r16,r16,r4
    d788:	1947883a 	add	r3,r3,r5
    d78c:	40c7883a 	add	r3,r8,r3
    d790:	350d383a 	mul	r6,r6,r20
    d794:	1940022e 	bgeu	r3,r5,d7a0 <__udivdi3+0x40c>
    d798:	01000074 	movhi	r4,1
    d79c:	310d883a 	add	r6,r6,r4
    d7a0:	1828d43a 	srli	r20,r3,16
    d7a4:	a18d883a 	add	r6,r20,r6
    d7a8:	81803e36 	bltu	r16,r6,d8a4 <__udivdi3+0x510>
    d7ac:	81803826 	beq	r16,r6,d890 <__udivdi3+0x4fc>
    d7b0:	0007883a 	mov	r3,zero
    d7b4:	003fa206 	br	d640 <__alt_data_end+0xfc00d640>
    d7b8:	88e2983a 	sll	r17,r17,r3
    d7bc:	80a8d83a 	srl	r20,r16,r2
    d7c0:	80e0983a 	sll	r16,r16,r3
    d7c4:	882ad43a 	srli	r21,r17,16
    d7c8:	9884d83a 	srl	r2,r19,r2
    d7cc:	a009883a 	mov	r4,r20
    d7d0:	a80b883a 	mov	r5,r21
    d7d4:	142eb03a 	or	r23,r2,r16
    d7d8:	98e4983a 	sll	r18,r19,r3
    d7dc:	000dfdc0 	call	dfdc <__umodsi3>
    d7e0:	a009883a 	mov	r4,r20
    d7e4:	a80b883a 	mov	r5,r21
    d7e8:	1021883a 	mov	r16,r2
    d7ec:	000df6c0 	call	df6c <__udivsi3>
    d7f0:	1039883a 	mov	fp,r2
    d7f4:	8d3fffcc 	andi	r20,r17,65535
    d7f8:	8020943a 	slli	r16,r16,16
    d7fc:	b804d43a 	srli	r2,r23,16
    d800:	a72d383a 	mul	r22,r20,fp
    d804:	1404b03a 	or	r2,r2,r16
    d808:	1580062e 	bgeu	r2,r22,d824 <__udivdi3+0x490>
    d80c:	1445883a 	add	r2,r2,r17
    d810:	e0ffffc4 	addi	r3,fp,-1
    d814:	14403836 	bltu	r2,r17,d8f8 <__udivdi3+0x564>
    d818:	1580372e 	bgeu	r2,r22,d8f8 <__udivdi3+0x564>
    d81c:	e73fff84 	addi	fp,fp,-2
    d820:	1445883a 	add	r2,r2,r17
    d824:	15adc83a 	sub	r22,r2,r22
    d828:	a80b883a 	mov	r5,r21
    d82c:	b009883a 	mov	r4,r22
    d830:	000dfdc0 	call	dfdc <__umodsi3>
    d834:	1027883a 	mov	r19,r2
    d838:	b009883a 	mov	r4,r22
    d83c:	a80b883a 	mov	r5,r21
    d840:	000df6c0 	call	df6c <__udivsi3>
    d844:	9826943a 	slli	r19,r19,16
    d848:	a0a1383a 	mul	r16,r20,r2
    d84c:	b93fffcc 	andi	r4,r23,65535
    d850:	24c8b03a 	or	r4,r4,r19
    d854:	2400062e 	bgeu	r4,r16,d870 <__udivdi3+0x4dc>
    d858:	2449883a 	add	r4,r4,r17
    d85c:	10ffffc4 	addi	r3,r2,-1
    d860:	24402336 	bltu	r4,r17,d8f0 <__udivdi3+0x55c>
    d864:	2400222e 	bgeu	r4,r16,d8f0 <__udivdi3+0x55c>
    d868:	10bfff84 	addi	r2,r2,-2
    d86c:	2449883a 	add	r4,r4,r17
    d870:	e038943a 	slli	fp,fp,16
    d874:	2421c83a 	sub	r16,r4,r16
    d878:	e086b03a 	or	r3,fp,r2
    d87c:	003f4306 	br	d58c <__alt_data_end+0xfc00d58c>
    d880:	2005883a 	mov	r2,r4
    d884:	003f6906 	br	d62c <__alt_data_end+0xfc00d62c>
    d888:	1805883a 	mov	r2,r3
    d88c:	003f0f06 	br	d4cc <__alt_data_end+0xfc00d4cc>
    d890:	1806943a 	slli	r3,r3,16
    d894:	9d66983a 	sll	r19,r19,r21
    d898:	39ffffcc 	andi	r7,r7,65535
    d89c:	19c7883a 	add	r3,r3,r7
    d8a0:	98ffc32e 	bgeu	r19,r3,d7b0 <__alt_data_end+0xfc00d7b0>
    d8a4:	10bfffc4 	addi	r2,r2,-1
    d8a8:	003fc106 	br	d7b0 <__alt_data_end+0xfc00d7b0>
    d8ac:	00800604 	movi	r2,24
    d8b0:	003f1106 	br	d4f8 <__alt_data_end+0xfc00d4f8>
    d8b4:	00800604 	movi	r2,24
    d8b8:	003f2706 	br	d558 <__alt_data_end+0xfc00d558>
    d8bc:	00800604 	movi	r2,24
    d8c0:	003ece06 	br	d3fc <__alt_data_end+0xfc00d3fc>
    d8c4:	0007883a 	mov	r3,zero
    d8c8:	00800044 	movi	r2,1
    d8cc:	003f5c06 	br	d640 <__alt_data_end+0xfc00d640>
    d8d0:	813fa12e 	bgeu	r16,r4,d758 <__alt_data_end+0xfc00d758>
    d8d4:	10bfff84 	addi	r2,r2,-2
    d8d8:	85e1883a 	add	r16,r16,r23
    d8dc:	003f9f06 	br	d75c <__alt_data_end+0xfc00d75c>
    d8e0:	1c7f8a2e 	bgeu	r3,r17,d70c <__alt_data_end+0xfc00d70c>
    d8e4:	31bfff84 	addi	r6,r6,-2
    d8e8:	1dc7883a 	add	r3,r3,r23
    d8ec:	003f8806 	br	d710 <__alt_data_end+0xfc00d710>
    d8f0:	1805883a 	mov	r2,r3
    d8f4:	003fde06 	br	d870 <__alt_data_end+0xfc00d870>
    d8f8:	1839883a 	mov	fp,r3
    d8fc:	003fc906 	br	d824 <__alt_data_end+0xfc00d824>
    d900:	b5bfff84 	addi	r22,r22,-2
    d904:	2449883a 	add	r4,r4,r17
    d908:	003f3406 	br	d5dc <__alt_data_end+0xfc00d5dc>
    d90c:	b5bfff84 	addi	r22,r22,-2
    d910:	1445883a 	add	r2,r2,r17
    d914:	003edb06 	br	d484 <__alt_data_end+0xfc00d484>

0000d918 <__umoddi3>:
    d918:	f811883a 	mov	r8,ra
    d91c:	0000ac80 	call	ac8 <_mcount>
    d920:	403f883a 	mov	ra,r8
    d924:	defff404 	addi	sp,sp,-48
    d928:	dfc00b15 	stw	ra,44(sp)
    d92c:	df000a15 	stw	fp,40(sp)
    d930:	ddc00915 	stw	r23,36(sp)
    d934:	dd800815 	stw	r22,32(sp)
    d938:	dd400715 	stw	r21,28(sp)
    d93c:	dd000615 	stw	r20,24(sp)
    d940:	dcc00515 	stw	r19,20(sp)
    d944:	dc800415 	stw	r18,16(sp)
    d948:	dc400315 	stw	r17,12(sp)
    d94c:	dc000215 	stw	r16,8(sp)
    d950:	2021883a 	mov	r16,r4
    d954:	2823883a 	mov	r17,r5
    d958:	2839883a 	mov	fp,r5
    d95c:	38003c1e 	bne	r7,zero,da50 <__umoddi3+0x138>
    d960:	3027883a 	mov	r19,r6
    d964:	2029883a 	mov	r20,r4
    d968:	2980512e 	bgeu	r5,r6,dab0 <__umoddi3+0x198>
    d96c:	00bfffd4 	movui	r2,65535
    d970:	11809a36 	bltu	r2,r6,dbdc <__umoddi3+0x2c4>
    d974:	01003fc4 	movi	r4,255
    d978:	2189803a 	cmpltu	r4,r4,r6
    d97c:	200890fa 	slli	r4,r4,3
    d980:	3104d83a 	srl	r2,r6,r4
    d984:	00c00074 	movhi	r3,1
    d988:	18c45804 	addi	r3,r3,4448
    d98c:	1885883a 	add	r2,r3,r2
    d990:	10c00003 	ldbu	r3,0(r2)
    d994:	00800804 	movi	r2,32
    d998:	1909883a 	add	r4,r3,r4
    d99c:	1125c83a 	sub	r18,r2,r4
    d9a0:	90000526 	beq	r18,zero,d9b8 <__umoddi3+0xa0>
    d9a4:	8ca2983a 	sll	r17,r17,r18
    d9a8:	8108d83a 	srl	r4,r16,r4
    d9ac:	34a6983a 	sll	r19,r6,r18
    d9b0:	84a8983a 	sll	r20,r16,r18
    d9b4:	2478b03a 	or	fp,r4,r17
    d9b8:	982ed43a 	srli	r23,r19,16
    d9bc:	e009883a 	mov	r4,fp
    d9c0:	9dbfffcc 	andi	r22,r19,65535
    d9c4:	b80b883a 	mov	r5,r23
    d9c8:	000dfdc0 	call	dfdc <__umodsi3>
    d9cc:	e009883a 	mov	r4,fp
    d9d0:	b80b883a 	mov	r5,r23
    d9d4:	102b883a 	mov	r21,r2
    d9d8:	000df6c0 	call	df6c <__udivsi3>
    d9dc:	a806943a 	slli	r3,r21,16
    d9e0:	a008d43a 	srli	r4,r20,16
    d9e4:	b085383a 	mul	r2,r22,r2
    d9e8:	20c8b03a 	or	r4,r4,r3
    d9ec:	2080032e 	bgeu	r4,r2,d9fc <__umoddi3+0xe4>
    d9f0:	24c9883a 	add	r4,r4,r19
    d9f4:	24c00136 	bltu	r4,r19,d9fc <__umoddi3+0xe4>
    d9f8:	20811036 	bltu	r4,r2,de3c <__umoddi3+0x524>
    d9fc:	20abc83a 	sub	r21,r4,r2
    da00:	b80b883a 	mov	r5,r23
    da04:	a809883a 	mov	r4,r21
    da08:	000dfdc0 	call	dfdc <__umodsi3>
    da0c:	1023883a 	mov	r17,r2
    da10:	b80b883a 	mov	r5,r23
    da14:	a809883a 	mov	r4,r21
    da18:	000df6c0 	call	df6c <__udivsi3>
    da1c:	8822943a 	slli	r17,r17,16
    da20:	b085383a 	mul	r2,r22,r2
    da24:	a0ffffcc 	andi	r3,r20,65535
    da28:	1c46b03a 	or	r3,r3,r17
    da2c:	1880042e 	bgeu	r3,r2,da40 <__umoddi3+0x128>
    da30:	1cc7883a 	add	r3,r3,r19
    da34:	1cc00236 	bltu	r3,r19,da40 <__umoddi3+0x128>
    da38:	1880012e 	bgeu	r3,r2,da40 <__umoddi3+0x128>
    da3c:	1cc7883a 	add	r3,r3,r19
    da40:	1885c83a 	sub	r2,r3,r2
    da44:	1484d83a 	srl	r2,r2,r18
    da48:	0007883a 	mov	r3,zero
    da4c:	00004f06 	br	db8c <__umoddi3+0x274>
    da50:	29c04c36 	bltu	r5,r7,db84 <__umoddi3+0x26c>
    da54:	00bfffd4 	movui	r2,65535
    da58:	11c0582e 	bgeu	r2,r7,dbbc <__umoddi3+0x2a4>
    da5c:	00804034 	movhi	r2,256
    da60:	10bfffc4 	addi	r2,r2,-1
    da64:	11c0e736 	bltu	r2,r7,de04 <__umoddi3+0x4ec>
    da68:	01000404 	movi	r4,16
    da6c:	3904d83a 	srl	r2,r7,r4
    da70:	00c00074 	movhi	r3,1
    da74:	18c45804 	addi	r3,r3,4448
    da78:	1885883a 	add	r2,r3,r2
    da7c:	14c00003 	ldbu	r19,0(r2)
    da80:	00c00804 	movi	r3,32
    da84:	9927883a 	add	r19,r19,r4
    da88:	1ce9c83a 	sub	r20,r3,r19
    da8c:	a000581e 	bne	r20,zero,dbf0 <__umoddi3+0x2d8>
    da90:	3c400136 	bltu	r7,r17,da98 <__umoddi3+0x180>
    da94:	8180eb36 	bltu	r16,r6,de44 <__umoddi3+0x52c>
    da98:	8185c83a 	sub	r2,r16,r6
    da9c:	89e3c83a 	sub	r17,r17,r7
    daa0:	8089803a 	cmpltu	r4,r16,r2
    daa4:	8939c83a 	sub	fp,r17,r4
    daa8:	e007883a 	mov	r3,fp
    daac:	00003706 	br	db8c <__umoddi3+0x274>
    dab0:	3000041e 	bne	r6,zero,dac4 <__umoddi3+0x1ac>
    dab4:	000b883a 	mov	r5,zero
    dab8:	01000044 	movi	r4,1
    dabc:	000df6c0 	call	df6c <__udivsi3>
    dac0:	1027883a 	mov	r19,r2
    dac4:	00bfffd4 	movui	r2,65535
    dac8:	14c0402e 	bgeu	r2,r19,dbcc <__umoddi3+0x2b4>
    dacc:	00804034 	movhi	r2,256
    dad0:	10bfffc4 	addi	r2,r2,-1
    dad4:	14c0cd36 	bltu	r2,r19,de0c <__umoddi3+0x4f4>
    dad8:	00800404 	movi	r2,16
    dadc:	9886d83a 	srl	r3,r19,r2
    dae0:	01000074 	movhi	r4,1
    dae4:	21045804 	addi	r4,r4,4448
    dae8:	20c7883a 	add	r3,r4,r3
    daec:	18c00003 	ldbu	r3,0(r3)
    daf0:	1887883a 	add	r3,r3,r2
    daf4:	00800804 	movi	r2,32
    daf8:	10e5c83a 	sub	r18,r2,r3
    dafc:	9000901e 	bne	r18,zero,dd40 <__umoddi3+0x428>
    db00:	982cd43a 	srli	r22,r19,16
    db04:	8ce3c83a 	sub	r17,r17,r19
    db08:	9d7fffcc 	andi	r21,r19,65535
    db0c:	b00b883a 	mov	r5,r22
    db10:	8809883a 	mov	r4,r17
    db14:	000dfdc0 	call	dfdc <__umodsi3>
    db18:	8809883a 	mov	r4,r17
    db1c:	b00b883a 	mov	r5,r22
    db20:	1021883a 	mov	r16,r2
    db24:	000df6c0 	call	df6c <__udivsi3>
    db28:	8006943a 	slli	r3,r16,16
    db2c:	a008d43a 	srli	r4,r20,16
    db30:	1545383a 	mul	r2,r2,r21
    db34:	20c8b03a 	or	r4,r4,r3
    db38:	2080042e 	bgeu	r4,r2,db4c <__umoddi3+0x234>
    db3c:	24c9883a 	add	r4,r4,r19
    db40:	24c00236 	bltu	r4,r19,db4c <__umoddi3+0x234>
    db44:	2080012e 	bgeu	r4,r2,db4c <__umoddi3+0x234>
    db48:	24c9883a 	add	r4,r4,r19
    db4c:	20a1c83a 	sub	r16,r4,r2
    db50:	b00b883a 	mov	r5,r22
    db54:	8009883a 	mov	r4,r16
    db58:	000dfdc0 	call	dfdc <__umodsi3>
    db5c:	1023883a 	mov	r17,r2
    db60:	b00b883a 	mov	r5,r22
    db64:	8009883a 	mov	r4,r16
    db68:	000df6c0 	call	df6c <__udivsi3>
    db6c:	8822943a 	slli	r17,r17,16
    db70:	1545383a 	mul	r2,r2,r21
    db74:	a53fffcc 	andi	r20,r20,65535
    db78:	a446b03a 	or	r3,r20,r17
    db7c:	18bfb02e 	bgeu	r3,r2,da40 <__alt_data_end+0xfc00da40>
    db80:	003fab06 	br	da30 <__alt_data_end+0xfc00da30>
    db84:	2005883a 	mov	r2,r4
    db88:	2807883a 	mov	r3,r5
    db8c:	dfc00b17 	ldw	ra,44(sp)
    db90:	df000a17 	ldw	fp,40(sp)
    db94:	ddc00917 	ldw	r23,36(sp)
    db98:	dd800817 	ldw	r22,32(sp)
    db9c:	dd400717 	ldw	r21,28(sp)
    dba0:	dd000617 	ldw	r20,24(sp)
    dba4:	dcc00517 	ldw	r19,20(sp)
    dba8:	dc800417 	ldw	r18,16(sp)
    dbac:	dc400317 	ldw	r17,12(sp)
    dbb0:	dc000217 	ldw	r16,8(sp)
    dbb4:	dec00c04 	addi	sp,sp,48
    dbb8:	f800283a 	ret
    dbbc:	04c03fc4 	movi	r19,255
    dbc0:	99c9803a 	cmpltu	r4,r19,r7
    dbc4:	200890fa 	slli	r4,r4,3
    dbc8:	003fa806 	br	da6c <__alt_data_end+0xfc00da6c>
    dbcc:	00803fc4 	movi	r2,255
    dbd0:	14c5803a 	cmpltu	r2,r2,r19
    dbd4:	100490fa 	slli	r2,r2,3
    dbd8:	003fc006 	br	dadc <__alt_data_end+0xfc00dadc>
    dbdc:	00804034 	movhi	r2,256
    dbe0:	10bfffc4 	addi	r2,r2,-1
    dbe4:	11808b36 	bltu	r2,r6,de14 <__umoddi3+0x4fc>
    dbe8:	01000404 	movi	r4,16
    dbec:	003f6406 	br	d980 <__alt_data_end+0xfc00d980>
    dbf0:	34c4d83a 	srl	r2,r6,r19
    dbf4:	3d0e983a 	sll	r7,r7,r20
    dbf8:	8cf8d83a 	srl	fp,r17,r19
    dbfc:	8d10983a 	sll	r8,r17,r20
    dc00:	38aab03a 	or	r21,r7,r2
    dc04:	a82cd43a 	srli	r22,r21,16
    dc08:	84e2d83a 	srl	r17,r16,r19
    dc0c:	e009883a 	mov	r4,fp
    dc10:	b00b883a 	mov	r5,r22
    dc14:	8a22b03a 	or	r17,r17,r8
    dc18:	3524983a 	sll	r18,r6,r20
    dc1c:	000dfdc0 	call	dfdc <__umodsi3>
    dc20:	e009883a 	mov	r4,fp
    dc24:	b00b883a 	mov	r5,r22
    dc28:	102f883a 	mov	r23,r2
    dc2c:	000df6c0 	call	df6c <__udivsi3>
    dc30:	100d883a 	mov	r6,r2
    dc34:	b808943a 	slli	r4,r23,16
    dc38:	aa3fffcc 	andi	r8,r21,65535
    dc3c:	8804d43a 	srli	r2,r17,16
    dc40:	41af383a 	mul	r23,r8,r6
    dc44:	8520983a 	sll	r16,r16,r20
    dc48:	1104b03a 	or	r2,r2,r4
    dc4c:	15c0042e 	bgeu	r2,r23,dc60 <__umoddi3+0x348>
    dc50:	1545883a 	add	r2,r2,r21
    dc54:	30ffffc4 	addi	r3,r6,-1
    dc58:	1540742e 	bgeu	r2,r21,de2c <__umoddi3+0x514>
    dc5c:	180d883a 	mov	r6,r3
    dc60:	15efc83a 	sub	r23,r2,r23
    dc64:	b00b883a 	mov	r5,r22
    dc68:	b809883a 	mov	r4,r23
    dc6c:	d9800115 	stw	r6,4(sp)
    dc70:	da000015 	stw	r8,0(sp)
    dc74:	000dfdc0 	call	dfdc <__umodsi3>
    dc78:	b00b883a 	mov	r5,r22
    dc7c:	b809883a 	mov	r4,r23
    dc80:	1039883a 	mov	fp,r2
    dc84:	000df6c0 	call	df6c <__udivsi3>
    dc88:	da000017 	ldw	r8,0(sp)
    dc8c:	e038943a 	slli	fp,fp,16
    dc90:	100b883a 	mov	r5,r2
    dc94:	4089383a 	mul	r4,r8,r2
    dc98:	8a3fffcc 	andi	r8,r17,65535
    dc9c:	4710b03a 	or	r8,r8,fp
    dca0:	d9800117 	ldw	r6,4(sp)
    dca4:	4100042e 	bgeu	r8,r4,dcb8 <__umoddi3+0x3a0>
    dca8:	4551883a 	add	r8,r8,r21
    dcac:	10bfffc4 	addi	r2,r2,-1
    dcb0:	45405a2e 	bgeu	r8,r21,de1c <__umoddi3+0x504>
    dcb4:	100b883a 	mov	r5,r2
    dcb8:	300c943a 	slli	r6,r6,16
    dcbc:	91ffffcc 	andi	r7,r18,65535
    dcc0:	9004d43a 	srli	r2,r18,16
    dcc4:	314cb03a 	or	r6,r6,r5
    dcc8:	317fffcc 	andi	r5,r6,65535
    dccc:	300cd43a 	srli	r6,r6,16
    dcd0:	29d3383a 	mul	r9,r5,r7
    dcd4:	288b383a 	mul	r5,r5,r2
    dcd8:	31cf383a 	mul	r7,r6,r7
    dcdc:	4806d43a 	srli	r3,r9,16
    dce0:	4111c83a 	sub	r8,r8,r4
    dce4:	29cb883a 	add	r5,r5,r7
    dce8:	194b883a 	add	r5,r3,r5
    dcec:	3085383a 	mul	r2,r6,r2
    dcf0:	29c0022e 	bgeu	r5,r7,dcfc <__umoddi3+0x3e4>
    dcf4:	00c00074 	movhi	r3,1
    dcf8:	10c5883a 	add	r2,r2,r3
    dcfc:	2808d43a 	srli	r4,r5,16
    dd00:	280a943a 	slli	r5,r5,16
    dd04:	4a7fffcc 	andi	r9,r9,65535
    dd08:	2085883a 	add	r2,r4,r2
    dd0c:	2a4b883a 	add	r5,r5,r9
    dd10:	40803636 	bltu	r8,r2,ddec <__umoddi3+0x4d4>
    dd14:	40804d26 	beq	r8,r2,de4c <__umoddi3+0x534>
    dd18:	4089c83a 	sub	r4,r8,r2
    dd1c:	280f883a 	mov	r7,r5
    dd20:	81cfc83a 	sub	r7,r16,r7
    dd24:	81c7803a 	cmpltu	r3,r16,r7
    dd28:	20c7c83a 	sub	r3,r4,r3
    dd2c:	1cc4983a 	sll	r2,r3,r19
    dd30:	3d0ed83a 	srl	r7,r7,r20
    dd34:	1d06d83a 	srl	r3,r3,r20
    dd38:	11c4b03a 	or	r2,r2,r7
    dd3c:	003f9306 	br	db8c <__alt_data_end+0xfc00db8c>
    dd40:	9ca6983a 	sll	r19,r19,r18
    dd44:	88e8d83a 	srl	r20,r17,r3
    dd48:	80c4d83a 	srl	r2,r16,r3
    dd4c:	982cd43a 	srli	r22,r19,16
    dd50:	8ca2983a 	sll	r17,r17,r18
    dd54:	a009883a 	mov	r4,r20
    dd58:	b00b883a 	mov	r5,r22
    dd5c:	1478b03a 	or	fp,r2,r17
    dd60:	000dfdc0 	call	dfdc <__umodsi3>
    dd64:	a009883a 	mov	r4,r20
    dd68:	b00b883a 	mov	r5,r22
    dd6c:	1023883a 	mov	r17,r2
    dd70:	000df6c0 	call	df6c <__udivsi3>
    dd74:	9d7fffcc 	andi	r21,r19,65535
    dd78:	880a943a 	slli	r5,r17,16
    dd7c:	e008d43a 	srli	r4,fp,16
    dd80:	a885383a 	mul	r2,r21,r2
    dd84:	84a8983a 	sll	r20,r16,r18
    dd88:	2148b03a 	or	r4,r4,r5
    dd8c:	2080042e 	bgeu	r4,r2,dda0 <__umoddi3+0x488>
    dd90:	24c9883a 	add	r4,r4,r19
    dd94:	24c00236 	bltu	r4,r19,dda0 <__umoddi3+0x488>
    dd98:	2080012e 	bgeu	r4,r2,dda0 <__umoddi3+0x488>
    dd9c:	24c9883a 	add	r4,r4,r19
    dda0:	20a3c83a 	sub	r17,r4,r2
    dda4:	b00b883a 	mov	r5,r22
    dda8:	8809883a 	mov	r4,r17
    ddac:	000dfdc0 	call	dfdc <__umodsi3>
    ddb0:	102f883a 	mov	r23,r2
    ddb4:	8809883a 	mov	r4,r17
    ddb8:	b00b883a 	mov	r5,r22
    ddbc:	000df6c0 	call	df6c <__udivsi3>
    ddc0:	b82e943a 	slli	r23,r23,16
    ddc4:	a885383a 	mul	r2,r21,r2
    ddc8:	e13fffcc 	andi	r4,fp,65535
    ddcc:	25c8b03a 	or	r4,r4,r23
    ddd0:	2080042e 	bgeu	r4,r2,dde4 <__umoddi3+0x4cc>
    ddd4:	24c9883a 	add	r4,r4,r19
    ddd8:	24c00236 	bltu	r4,r19,dde4 <__umoddi3+0x4cc>
    dddc:	2080012e 	bgeu	r4,r2,dde4 <__umoddi3+0x4cc>
    dde0:	24c9883a 	add	r4,r4,r19
    dde4:	20a3c83a 	sub	r17,r4,r2
    dde8:	003f4806 	br	db0c <__alt_data_end+0xfc00db0c>
    ddec:	2c8fc83a 	sub	r7,r5,r18
    ddf0:	1545c83a 	sub	r2,r2,r21
    ddf4:	29cb803a 	cmpltu	r5,r5,r7
    ddf8:	1145c83a 	sub	r2,r2,r5
    ddfc:	4089c83a 	sub	r4,r8,r2
    de00:	003fc706 	br	dd20 <__alt_data_end+0xfc00dd20>
    de04:	01000604 	movi	r4,24
    de08:	003f1806 	br	da6c <__alt_data_end+0xfc00da6c>
    de0c:	00800604 	movi	r2,24
    de10:	003f3206 	br	dadc <__alt_data_end+0xfc00dadc>
    de14:	01000604 	movi	r4,24
    de18:	003ed906 	br	d980 <__alt_data_end+0xfc00d980>
    de1c:	413fa52e 	bgeu	r8,r4,dcb4 <__alt_data_end+0xfc00dcb4>
    de20:	297fff84 	addi	r5,r5,-2
    de24:	4551883a 	add	r8,r8,r21
    de28:	003fa306 	br	dcb8 <__alt_data_end+0xfc00dcb8>
    de2c:	15ff8b2e 	bgeu	r2,r23,dc5c <__alt_data_end+0xfc00dc5c>
    de30:	31bfff84 	addi	r6,r6,-2
    de34:	1545883a 	add	r2,r2,r21
    de38:	003f8906 	br	dc60 <__alt_data_end+0xfc00dc60>
    de3c:	24c9883a 	add	r4,r4,r19
    de40:	003eee06 	br	d9fc <__alt_data_end+0xfc00d9fc>
    de44:	8005883a 	mov	r2,r16
    de48:	003f1706 	br	daa8 <__alt_data_end+0xfc00daa8>
    de4c:	817fe736 	bltu	r16,r5,ddec <__alt_data_end+0xfc00ddec>
    de50:	280f883a 	mov	r7,r5
    de54:	0009883a 	mov	r4,zero
    de58:	003fb106 	br	dd20 <__alt_data_end+0xfc00dd20>

0000de5c <__divsi3>:
    de5c:	f811883a 	mov	r8,ra
    de60:	0000ac80 	call	ac8 <_mcount>
    de64:	403f883a 	mov	ra,r8
    de68:	20001b16 	blt	r4,zero,ded8 <__divsi3+0x7c>
    de6c:	000f883a 	mov	r7,zero
    de70:	28001616 	blt	r5,zero,decc <__divsi3+0x70>
    de74:	200d883a 	mov	r6,r4
    de78:	29001a2e 	bgeu	r5,r4,dee4 <__divsi3+0x88>
    de7c:	00800804 	movi	r2,32
    de80:	00c00044 	movi	r3,1
    de84:	00000106 	br	de8c <__divsi3+0x30>
    de88:	10000d26 	beq	r2,zero,dec0 <__divsi3+0x64>
    de8c:	294b883a 	add	r5,r5,r5
    de90:	10bfffc4 	addi	r2,r2,-1
    de94:	18c7883a 	add	r3,r3,r3
    de98:	293ffb36 	bltu	r5,r4,de88 <__alt_data_end+0xfc00de88>
    de9c:	0005883a 	mov	r2,zero
    dea0:	18000726 	beq	r3,zero,dec0 <__divsi3+0x64>
    dea4:	0005883a 	mov	r2,zero
    dea8:	31400236 	bltu	r6,r5,deb4 <__divsi3+0x58>
    deac:	314dc83a 	sub	r6,r6,r5
    deb0:	10c4b03a 	or	r2,r2,r3
    deb4:	1806d07a 	srli	r3,r3,1
    deb8:	280ad07a 	srli	r5,r5,1
    debc:	183ffa1e 	bne	r3,zero,dea8 <__alt_data_end+0xfc00dea8>
    dec0:	38000126 	beq	r7,zero,dec8 <__divsi3+0x6c>
    dec4:	0085c83a 	sub	r2,zero,r2
    dec8:	f800283a 	ret
    decc:	014bc83a 	sub	r5,zero,r5
    ded0:	39c0005c 	xori	r7,r7,1
    ded4:	003fe706 	br	de74 <__alt_data_end+0xfc00de74>
    ded8:	0109c83a 	sub	r4,zero,r4
    dedc:	01c00044 	movi	r7,1
    dee0:	003fe306 	br	de70 <__alt_data_end+0xfc00de70>
    dee4:	00c00044 	movi	r3,1
    dee8:	003fee06 	br	dea4 <__alt_data_end+0xfc00dea4>

0000deec <__modsi3>:
    deec:	f811883a 	mov	r8,ra
    def0:	0000ac80 	call	ac8 <_mcount>
    def4:	403f883a 	mov	ra,r8
    def8:	20001716 	blt	r4,zero,df58 <__modsi3+0x6c>
    defc:	000f883a 	mov	r7,zero
    df00:	2005883a 	mov	r2,r4
    df04:	28001216 	blt	r5,zero,df50 <__modsi3+0x64>
    df08:	2900162e 	bgeu	r5,r4,df64 <__modsi3+0x78>
    df0c:	01800804 	movi	r6,32
    df10:	00c00044 	movi	r3,1
    df14:	00000106 	br	df1c <__modsi3+0x30>
    df18:	30000a26 	beq	r6,zero,df44 <__modsi3+0x58>
    df1c:	294b883a 	add	r5,r5,r5
    df20:	31bfffc4 	addi	r6,r6,-1
    df24:	18c7883a 	add	r3,r3,r3
    df28:	293ffb36 	bltu	r5,r4,df18 <__alt_data_end+0xfc00df18>
    df2c:	18000526 	beq	r3,zero,df44 <__modsi3+0x58>
    df30:	1806d07a 	srli	r3,r3,1
    df34:	11400136 	bltu	r2,r5,df3c <__modsi3+0x50>
    df38:	1145c83a 	sub	r2,r2,r5
    df3c:	280ad07a 	srli	r5,r5,1
    df40:	183ffb1e 	bne	r3,zero,df30 <__alt_data_end+0xfc00df30>
    df44:	38000126 	beq	r7,zero,df4c <__modsi3+0x60>
    df48:	0085c83a 	sub	r2,zero,r2
    df4c:	f800283a 	ret
    df50:	014bc83a 	sub	r5,zero,r5
    df54:	003fec06 	br	df08 <__alt_data_end+0xfc00df08>
    df58:	0109c83a 	sub	r4,zero,r4
    df5c:	01c00044 	movi	r7,1
    df60:	003fe706 	br	df00 <__alt_data_end+0xfc00df00>
    df64:	00c00044 	movi	r3,1
    df68:	003ff106 	br	df30 <__alt_data_end+0xfc00df30>

0000df6c <__udivsi3>:
    df6c:	f811883a 	mov	r8,ra
    df70:	0000ac80 	call	ac8 <_mcount>
    df74:	403f883a 	mov	ra,r8
    df78:	200d883a 	mov	r6,r4
    df7c:	2900152e 	bgeu	r5,r4,dfd4 <__udivsi3+0x68>
    df80:	28001416 	blt	r5,zero,dfd4 <__udivsi3+0x68>
    df84:	00800804 	movi	r2,32
    df88:	00c00044 	movi	r3,1
    df8c:	00000206 	br	df98 <__udivsi3+0x2c>
    df90:	10000e26 	beq	r2,zero,dfcc <__udivsi3+0x60>
    df94:	28000516 	blt	r5,zero,dfac <__udivsi3+0x40>
    df98:	294b883a 	add	r5,r5,r5
    df9c:	10bfffc4 	addi	r2,r2,-1
    dfa0:	18c7883a 	add	r3,r3,r3
    dfa4:	293ffa36 	bltu	r5,r4,df90 <__alt_data_end+0xfc00df90>
    dfa8:	18000826 	beq	r3,zero,dfcc <__udivsi3+0x60>
    dfac:	0005883a 	mov	r2,zero
    dfb0:	31400236 	bltu	r6,r5,dfbc <__udivsi3+0x50>
    dfb4:	314dc83a 	sub	r6,r6,r5
    dfb8:	10c4b03a 	or	r2,r2,r3
    dfbc:	1806d07a 	srli	r3,r3,1
    dfc0:	280ad07a 	srli	r5,r5,1
    dfc4:	183ffa1e 	bne	r3,zero,dfb0 <__alt_data_end+0xfc00dfb0>
    dfc8:	f800283a 	ret
    dfcc:	0005883a 	mov	r2,zero
    dfd0:	f800283a 	ret
    dfd4:	00c00044 	movi	r3,1
    dfd8:	003ff406 	br	dfac <__alt_data_end+0xfc00dfac>

0000dfdc <__umodsi3>:
    dfdc:	f811883a 	mov	r8,ra
    dfe0:	0000ac80 	call	ac8 <_mcount>
    dfe4:	403f883a 	mov	ra,r8
    dfe8:	2005883a 	mov	r2,r4
    dfec:	2900112e 	bgeu	r5,r4,e034 <__umodsi3+0x58>
    dff0:	28001016 	blt	r5,zero,e034 <__umodsi3+0x58>
    dff4:	01800804 	movi	r6,32
    dff8:	00c00044 	movi	r3,1
    dffc:	00000206 	br	e008 <__umodsi3+0x2c>
    e000:	30000b26 	beq	r6,zero,e030 <__umodsi3+0x54>
    e004:	28000516 	blt	r5,zero,e01c <__umodsi3+0x40>
    e008:	294b883a 	add	r5,r5,r5
    e00c:	31bfffc4 	addi	r6,r6,-1
    e010:	18c7883a 	add	r3,r3,r3
    e014:	293ffa36 	bltu	r5,r4,e000 <__alt_data_end+0xfc00e000>
    e018:	18000526 	beq	r3,zero,e030 <__umodsi3+0x54>
    e01c:	1806d07a 	srli	r3,r3,1
    e020:	11400136 	bltu	r2,r5,e028 <__umodsi3+0x4c>
    e024:	1145c83a 	sub	r2,r2,r5
    e028:	280ad07a 	srli	r5,r5,1
    e02c:	183ffb1e 	bne	r3,zero,e01c <__alt_data_end+0xfc00e01c>
    e030:	f800283a 	ret
    e034:	00c00044 	movi	r3,1
    e038:	003ff806 	br	e01c <__alt_data_end+0xfc00e01c>

0000e03c <__adddf3>:
    e03c:	f811883a 	mov	r8,ra
    e040:	0000ac80 	call	ac8 <_mcount>
    e044:	403f883a 	mov	ra,r8
    e048:	defffb04 	addi	sp,sp,-20
    e04c:	dfc00415 	stw	ra,16(sp)
    e050:	dcc00315 	stw	r19,12(sp)
    e054:	dc800215 	stw	r18,8(sp)
    e058:	dc400115 	stw	r17,4(sp)
    e05c:	dc000015 	stw	r16,0(sp)
    e060:	02c00434 	movhi	r11,16
    e064:	5affffc4 	addi	r11,r11,-1
    e068:	2806d7fa 	srli	r3,r5,31
    e06c:	2ad4703a 	and	r10,r5,r11
    e070:	3ad2703a 	and	r9,r7,r11
    e074:	3804d53a 	srli	r2,r7,20
    e078:	3018d77a 	srli	r12,r6,29
    e07c:	280ad53a 	srli	r5,r5,20
    e080:	501490fa 	slli	r10,r10,3
    e084:	2010d77a 	srli	r8,r4,29
    e088:	481290fa 	slli	r9,r9,3
    e08c:	380ed7fa 	srli	r7,r7,31
    e090:	1c803fcc 	andi	r18,r3,255
    e094:	2c01ffcc 	andi	r16,r5,2047
    e098:	5210b03a 	or	r8,r10,r8
    e09c:	202290fa 	slli	r17,r4,3
    e0a0:	1081ffcc 	andi	r2,r2,2047
    e0a4:	4b12b03a 	or	r9,r9,r12
    e0a8:	300c90fa 	slli	r6,r6,3
    e0ac:	91c07526 	beq	r18,r7,e284 <__adddf3+0x248>
    e0b0:	8087c83a 	sub	r3,r16,r2
    e0b4:	00c0ab0e 	bge	zero,r3,e364 <__adddf3+0x328>
    e0b8:	10002a1e 	bne	r2,zero,e164 <__adddf3+0x128>
    e0bc:	4984b03a 	or	r2,r9,r6
    e0c0:	1000961e 	bne	r2,zero,e31c <__adddf3+0x2e0>
    e0c4:	888001cc 	andi	r2,r17,7
    e0c8:	10000726 	beq	r2,zero,e0e8 <__adddf3+0xac>
    e0cc:	888003cc 	andi	r2,r17,15
    e0d0:	00c00104 	movi	r3,4
    e0d4:	10c00426 	beq	r2,r3,e0e8 <__adddf3+0xac>
    e0d8:	88c7883a 	add	r3,r17,r3
    e0dc:	1c63803a 	cmpltu	r17,r3,r17
    e0e0:	4451883a 	add	r8,r8,r17
    e0e4:	1823883a 	mov	r17,r3
    e0e8:	4080202c 	andhi	r2,r8,128
    e0ec:	10005926 	beq	r2,zero,e254 <__adddf3+0x218>
    e0f0:	84000044 	addi	r16,r16,1
    e0f4:	0081ffc4 	movi	r2,2047
    e0f8:	8080ba26 	beq	r16,r2,e3e4 <__adddf3+0x3a8>
    e0fc:	00bfe034 	movhi	r2,65408
    e100:	10bfffc4 	addi	r2,r2,-1
    e104:	4090703a 	and	r8,r8,r2
    e108:	4004977a 	slli	r2,r8,29
    e10c:	4010927a 	slli	r8,r8,9
    e110:	8822d0fa 	srli	r17,r17,3
    e114:	8401ffcc 	andi	r16,r16,2047
    e118:	4010d33a 	srli	r8,r8,12
    e11c:	9007883a 	mov	r3,r18
    e120:	1444b03a 	or	r2,r2,r17
    e124:	8401ffcc 	andi	r16,r16,2047
    e128:	8020953a 	slli	r16,r16,20
    e12c:	18c03fcc 	andi	r3,r3,255
    e130:	01000434 	movhi	r4,16
    e134:	213fffc4 	addi	r4,r4,-1
    e138:	180697fa 	slli	r3,r3,31
    e13c:	4110703a 	and	r8,r8,r4
    e140:	4410b03a 	or	r8,r8,r16
    e144:	40c6b03a 	or	r3,r8,r3
    e148:	dfc00417 	ldw	ra,16(sp)
    e14c:	dcc00317 	ldw	r19,12(sp)
    e150:	dc800217 	ldw	r18,8(sp)
    e154:	dc400117 	ldw	r17,4(sp)
    e158:	dc000017 	ldw	r16,0(sp)
    e15c:	dec00504 	addi	sp,sp,20
    e160:	f800283a 	ret
    e164:	0081ffc4 	movi	r2,2047
    e168:	80bfd626 	beq	r16,r2,e0c4 <__alt_data_end+0xfc00e0c4>
    e16c:	4a402034 	orhi	r9,r9,128
    e170:	00800e04 	movi	r2,56
    e174:	10c09f16 	blt	r2,r3,e3f4 <__adddf3+0x3b8>
    e178:	008007c4 	movi	r2,31
    e17c:	10c0c216 	blt	r2,r3,e488 <__adddf3+0x44c>
    e180:	00800804 	movi	r2,32
    e184:	10c5c83a 	sub	r2,r2,r3
    e188:	488a983a 	sll	r5,r9,r2
    e18c:	30c8d83a 	srl	r4,r6,r3
    e190:	3084983a 	sll	r2,r6,r2
    e194:	48c6d83a 	srl	r3,r9,r3
    e198:	290cb03a 	or	r6,r5,r4
    e19c:	1004c03a 	cmpne	r2,r2,zero
    e1a0:	308cb03a 	or	r6,r6,r2
    e1a4:	898dc83a 	sub	r6,r17,r6
    e1a8:	89a3803a 	cmpltu	r17,r17,r6
    e1ac:	40d1c83a 	sub	r8,r8,r3
    e1b0:	4451c83a 	sub	r8,r8,r17
    e1b4:	3023883a 	mov	r17,r6
    e1b8:	4080202c 	andhi	r2,r8,128
    e1bc:	10002326 	beq	r2,zero,e24c <__adddf3+0x210>
    e1c0:	04c02034 	movhi	r19,128
    e1c4:	9cffffc4 	addi	r19,r19,-1
    e1c8:	44e6703a 	and	r19,r8,r19
    e1cc:	98007626 	beq	r19,zero,e3a8 <__adddf3+0x36c>
    e1d0:	9809883a 	mov	r4,r19
    e1d4:	00106a80 	call	106a8 <__clzsi2>
    e1d8:	10fffe04 	addi	r3,r2,-8
    e1dc:	010007c4 	movi	r4,31
    e1e0:	20c07716 	blt	r4,r3,e3c0 <__adddf3+0x384>
    e1e4:	00800804 	movi	r2,32
    e1e8:	10c5c83a 	sub	r2,r2,r3
    e1ec:	8884d83a 	srl	r2,r17,r2
    e1f0:	98d0983a 	sll	r8,r19,r3
    e1f4:	88e2983a 	sll	r17,r17,r3
    e1f8:	1204b03a 	or	r2,r2,r8
    e1fc:	1c007416 	blt	r3,r16,e3d0 <__adddf3+0x394>
    e200:	1c21c83a 	sub	r16,r3,r16
    e204:	82000044 	addi	r8,r16,1
    e208:	00c007c4 	movi	r3,31
    e20c:	1a009116 	blt	r3,r8,e454 <__adddf3+0x418>
    e210:	00c00804 	movi	r3,32
    e214:	1a07c83a 	sub	r3,r3,r8
    e218:	8a08d83a 	srl	r4,r17,r8
    e21c:	88e2983a 	sll	r17,r17,r3
    e220:	10c6983a 	sll	r3,r2,r3
    e224:	1210d83a 	srl	r8,r2,r8
    e228:	8804c03a 	cmpne	r2,r17,zero
    e22c:	1906b03a 	or	r3,r3,r4
    e230:	18a2b03a 	or	r17,r3,r2
    e234:	0021883a 	mov	r16,zero
    e238:	003fa206 	br	e0c4 <__alt_data_end+0xfc00e0c4>
    e23c:	1890b03a 	or	r8,r3,r2
    e240:	40017d26 	beq	r8,zero,e838 <__adddf3+0x7fc>
    e244:	1011883a 	mov	r8,r2
    e248:	1823883a 	mov	r17,r3
    e24c:	888001cc 	andi	r2,r17,7
    e250:	103f9e1e 	bne	r2,zero,e0cc <__alt_data_end+0xfc00e0cc>
    e254:	4004977a 	slli	r2,r8,29
    e258:	8822d0fa 	srli	r17,r17,3
    e25c:	4010d0fa 	srli	r8,r8,3
    e260:	9007883a 	mov	r3,r18
    e264:	1444b03a 	or	r2,r2,r17
    e268:	0101ffc4 	movi	r4,2047
    e26c:	81002426 	beq	r16,r4,e300 <__adddf3+0x2c4>
    e270:	8120703a 	and	r16,r16,r4
    e274:	01000434 	movhi	r4,16
    e278:	213fffc4 	addi	r4,r4,-1
    e27c:	4110703a 	and	r8,r8,r4
    e280:	003fa806 	br	e124 <__alt_data_end+0xfc00e124>
    e284:	8089c83a 	sub	r4,r16,r2
    e288:	01005e0e 	bge	zero,r4,e404 <__adddf3+0x3c8>
    e28c:	10002b26 	beq	r2,zero,e33c <__adddf3+0x300>
    e290:	0081ffc4 	movi	r2,2047
    e294:	80bf8b26 	beq	r16,r2,e0c4 <__alt_data_end+0xfc00e0c4>
    e298:	4a402034 	orhi	r9,r9,128
    e29c:	00800e04 	movi	r2,56
    e2a0:	1100a40e 	bge	r2,r4,e534 <__adddf3+0x4f8>
    e2a4:	498cb03a 	or	r6,r9,r6
    e2a8:	300ac03a 	cmpne	r5,r6,zero
    e2ac:	0013883a 	mov	r9,zero
    e2b0:	2c4b883a 	add	r5,r5,r17
    e2b4:	2c63803a 	cmpltu	r17,r5,r17
    e2b8:	4a11883a 	add	r8,r9,r8
    e2bc:	8a11883a 	add	r8,r17,r8
    e2c0:	2823883a 	mov	r17,r5
    e2c4:	4080202c 	andhi	r2,r8,128
    e2c8:	103fe026 	beq	r2,zero,e24c <__alt_data_end+0xfc00e24c>
    e2cc:	84000044 	addi	r16,r16,1
    e2d0:	0081ffc4 	movi	r2,2047
    e2d4:	8080d226 	beq	r16,r2,e620 <__adddf3+0x5e4>
    e2d8:	00bfe034 	movhi	r2,65408
    e2dc:	10bfffc4 	addi	r2,r2,-1
    e2e0:	4090703a 	and	r8,r8,r2
    e2e4:	880ad07a 	srli	r5,r17,1
    e2e8:	400897fa 	slli	r4,r8,31
    e2ec:	88c0004c 	andi	r3,r17,1
    e2f0:	28e2b03a 	or	r17,r5,r3
    e2f4:	4010d07a 	srli	r8,r8,1
    e2f8:	2462b03a 	or	r17,r4,r17
    e2fc:	003f7106 	br	e0c4 <__alt_data_end+0xfc00e0c4>
    e300:	4088b03a 	or	r4,r8,r2
    e304:	20014526 	beq	r4,zero,e81c <__adddf3+0x7e0>
    e308:	01000434 	movhi	r4,16
    e30c:	42000234 	orhi	r8,r8,8
    e310:	213fffc4 	addi	r4,r4,-1
    e314:	4110703a 	and	r8,r8,r4
    e318:	003f8206 	br	e124 <__alt_data_end+0xfc00e124>
    e31c:	18ffffc4 	addi	r3,r3,-1
    e320:	1800491e 	bne	r3,zero,e448 <__adddf3+0x40c>
    e324:	898bc83a 	sub	r5,r17,r6
    e328:	8963803a 	cmpltu	r17,r17,r5
    e32c:	4251c83a 	sub	r8,r8,r9
    e330:	4451c83a 	sub	r8,r8,r17
    e334:	2823883a 	mov	r17,r5
    e338:	003f9f06 	br	e1b8 <__alt_data_end+0xfc00e1b8>
    e33c:	4984b03a 	or	r2,r9,r6
    e340:	103f6026 	beq	r2,zero,e0c4 <__alt_data_end+0xfc00e0c4>
    e344:	213fffc4 	addi	r4,r4,-1
    e348:	2000931e 	bne	r4,zero,e598 <__adddf3+0x55c>
    e34c:	898d883a 	add	r6,r17,r6
    e350:	3463803a 	cmpltu	r17,r6,r17
    e354:	4251883a 	add	r8,r8,r9
    e358:	8a11883a 	add	r8,r17,r8
    e35c:	3023883a 	mov	r17,r6
    e360:	003fd806 	br	e2c4 <__alt_data_end+0xfc00e2c4>
    e364:	1800541e 	bne	r3,zero,e4b8 <__adddf3+0x47c>
    e368:	80800044 	addi	r2,r16,1
    e36c:	1081ffcc 	andi	r2,r2,2047
    e370:	00c00044 	movi	r3,1
    e374:	1880a00e 	bge	r3,r2,e5f8 <__adddf3+0x5bc>
    e378:	8989c83a 	sub	r4,r17,r6
    e37c:	8905803a 	cmpltu	r2,r17,r4
    e380:	4267c83a 	sub	r19,r8,r9
    e384:	98a7c83a 	sub	r19,r19,r2
    e388:	9880202c 	andhi	r2,r19,128
    e38c:	10006326 	beq	r2,zero,e51c <__adddf3+0x4e0>
    e390:	3463c83a 	sub	r17,r6,r17
    e394:	4a07c83a 	sub	r3,r9,r8
    e398:	344d803a 	cmpltu	r6,r6,r17
    e39c:	19a7c83a 	sub	r19,r3,r6
    e3a0:	3825883a 	mov	r18,r7
    e3a4:	983f8a1e 	bne	r19,zero,e1d0 <__alt_data_end+0xfc00e1d0>
    e3a8:	8809883a 	mov	r4,r17
    e3ac:	00106a80 	call	106a8 <__clzsi2>
    e3b0:	10800804 	addi	r2,r2,32
    e3b4:	10fffe04 	addi	r3,r2,-8
    e3b8:	010007c4 	movi	r4,31
    e3bc:	20ff890e 	bge	r4,r3,e1e4 <__alt_data_end+0xfc00e1e4>
    e3c0:	10bff604 	addi	r2,r2,-40
    e3c4:	8884983a 	sll	r2,r17,r2
    e3c8:	0023883a 	mov	r17,zero
    e3cc:	1c3f8c0e 	bge	r3,r16,e200 <__alt_data_end+0xfc00e200>
    e3d0:	023fe034 	movhi	r8,65408
    e3d4:	423fffc4 	addi	r8,r8,-1
    e3d8:	80e1c83a 	sub	r16,r16,r3
    e3dc:	1210703a 	and	r8,r2,r8
    e3e0:	003f3806 	br	e0c4 <__alt_data_end+0xfc00e0c4>
    e3e4:	9007883a 	mov	r3,r18
    e3e8:	0011883a 	mov	r8,zero
    e3ec:	0005883a 	mov	r2,zero
    e3f0:	003f4c06 	br	e124 <__alt_data_end+0xfc00e124>
    e3f4:	498cb03a 	or	r6,r9,r6
    e3f8:	300cc03a 	cmpne	r6,r6,zero
    e3fc:	0007883a 	mov	r3,zero
    e400:	003f6806 	br	e1a4 <__alt_data_end+0xfc00e1a4>
    e404:	20009c1e 	bne	r4,zero,e678 <__adddf3+0x63c>
    e408:	80800044 	addi	r2,r16,1
    e40c:	1141ffcc 	andi	r5,r2,2047
    e410:	01000044 	movi	r4,1
    e414:	2140670e 	bge	r4,r5,e5b4 <__adddf3+0x578>
    e418:	0101ffc4 	movi	r4,2047
    e41c:	11007f26 	beq	r2,r4,e61c <__adddf3+0x5e0>
    e420:	898d883a 	add	r6,r17,r6
    e424:	4247883a 	add	r3,r8,r9
    e428:	3451803a 	cmpltu	r8,r6,r17
    e42c:	40d1883a 	add	r8,r8,r3
    e430:	402297fa 	slli	r17,r8,31
    e434:	300cd07a 	srli	r6,r6,1
    e438:	4010d07a 	srli	r8,r8,1
    e43c:	1021883a 	mov	r16,r2
    e440:	89a2b03a 	or	r17,r17,r6
    e444:	003f1f06 	br	e0c4 <__alt_data_end+0xfc00e0c4>
    e448:	0081ffc4 	movi	r2,2047
    e44c:	80bf481e 	bne	r16,r2,e170 <__alt_data_end+0xfc00e170>
    e450:	003f1c06 	br	e0c4 <__alt_data_end+0xfc00e0c4>
    e454:	843ff844 	addi	r16,r16,-31
    e458:	01000804 	movi	r4,32
    e45c:	1406d83a 	srl	r3,r2,r16
    e460:	41005026 	beq	r8,r4,e5a4 <__adddf3+0x568>
    e464:	01001004 	movi	r4,64
    e468:	2211c83a 	sub	r8,r4,r8
    e46c:	1204983a 	sll	r2,r2,r8
    e470:	88a2b03a 	or	r17,r17,r2
    e474:	8822c03a 	cmpne	r17,r17,zero
    e478:	1c62b03a 	or	r17,r3,r17
    e47c:	0011883a 	mov	r8,zero
    e480:	0021883a 	mov	r16,zero
    e484:	003f7106 	br	e24c <__alt_data_end+0xfc00e24c>
    e488:	193ff804 	addi	r4,r3,-32
    e48c:	00800804 	movi	r2,32
    e490:	4908d83a 	srl	r4,r9,r4
    e494:	18804526 	beq	r3,r2,e5ac <__adddf3+0x570>
    e498:	00801004 	movi	r2,64
    e49c:	10c5c83a 	sub	r2,r2,r3
    e4a0:	4886983a 	sll	r3,r9,r2
    e4a4:	198cb03a 	or	r6,r3,r6
    e4a8:	300cc03a 	cmpne	r6,r6,zero
    e4ac:	218cb03a 	or	r6,r4,r6
    e4b0:	0007883a 	mov	r3,zero
    e4b4:	003f3b06 	br	e1a4 <__alt_data_end+0xfc00e1a4>
    e4b8:	80002a26 	beq	r16,zero,e564 <__adddf3+0x528>
    e4bc:	0101ffc4 	movi	r4,2047
    e4c0:	11006826 	beq	r2,r4,e664 <__adddf3+0x628>
    e4c4:	00c7c83a 	sub	r3,zero,r3
    e4c8:	42002034 	orhi	r8,r8,128
    e4cc:	01000e04 	movi	r4,56
    e4d0:	20c07c16 	blt	r4,r3,e6c4 <__adddf3+0x688>
    e4d4:	010007c4 	movi	r4,31
    e4d8:	20c0da16 	blt	r4,r3,e844 <__adddf3+0x808>
    e4dc:	01000804 	movi	r4,32
    e4e0:	20c9c83a 	sub	r4,r4,r3
    e4e4:	4114983a 	sll	r10,r8,r4
    e4e8:	88cad83a 	srl	r5,r17,r3
    e4ec:	8908983a 	sll	r4,r17,r4
    e4f0:	40c6d83a 	srl	r3,r8,r3
    e4f4:	5162b03a 	or	r17,r10,r5
    e4f8:	2008c03a 	cmpne	r4,r4,zero
    e4fc:	8922b03a 	or	r17,r17,r4
    e500:	3463c83a 	sub	r17,r6,r17
    e504:	48c7c83a 	sub	r3,r9,r3
    e508:	344d803a 	cmpltu	r6,r6,r17
    e50c:	1991c83a 	sub	r8,r3,r6
    e510:	1021883a 	mov	r16,r2
    e514:	3825883a 	mov	r18,r7
    e518:	003f2706 	br	e1b8 <__alt_data_end+0xfc00e1b8>
    e51c:	24d0b03a 	or	r8,r4,r19
    e520:	40001b1e 	bne	r8,zero,e590 <__adddf3+0x554>
    e524:	0005883a 	mov	r2,zero
    e528:	0007883a 	mov	r3,zero
    e52c:	0021883a 	mov	r16,zero
    e530:	003f4d06 	br	e268 <__alt_data_end+0xfc00e268>
    e534:	008007c4 	movi	r2,31
    e538:	11003c16 	blt	r2,r4,e62c <__adddf3+0x5f0>
    e53c:	00800804 	movi	r2,32
    e540:	1105c83a 	sub	r2,r2,r4
    e544:	488e983a 	sll	r7,r9,r2
    e548:	310ad83a 	srl	r5,r6,r4
    e54c:	3084983a 	sll	r2,r6,r2
    e550:	4912d83a 	srl	r9,r9,r4
    e554:	394ab03a 	or	r5,r7,r5
    e558:	1004c03a 	cmpne	r2,r2,zero
    e55c:	288ab03a 	or	r5,r5,r2
    e560:	003f5306 	br	e2b0 <__alt_data_end+0xfc00e2b0>
    e564:	4448b03a 	or	r4,r8,r17
    e568:	20003e26 	beq	r4,zero,e664 <__adddf3+0x628>
    e56c:	00c6303a 	nor	r3,zero,r3
    e570:	18003a1e 	bne	r3,zero,e65c <__adddf3+0x620>
    e574:	3463c83a 	sub	r17,r6,r17
    e578:	4a07c83a 	sub	r3,r9,r8
    e57c:	344d803a 	cmpltu	r6,r6,r17
    e580:	1991c83a 	sub	r8,r3,r6
    e584:	1021883a 	mov	r16,r2
    e588:	3825883a 	mov	r18,r7
    e58c:	003f0a06 	br	e1b8 <__alt_data_end+0xfc00e1b8>
    e590:	2023883a 	mov	r17,r4
    e594:	003f0d06 	br	e1cc <__alt_data_end+0xfc00e1cc>
    e598:	0081ffc4 	movi	r2,2047
    e59c:	80bf3f1e 	bne	r16,r2,e29c <__alt_data_end+0xfc00e29c>
    e5a0:	003ec806 	br	e0c4 <__alt_data_end+0xfc00e0c4>
    e5a4:	0005883a 	mov	r2,zero
    e5a8:	003fb106 	br	e470 <__alt_data_end+0xfc00e470>
    e5ac:	0007883a 	mov	r3,zero
    e5b0:	003fbc06 	br	e4a4 <__alt_data_end+0xfc00e4a4>
    e5b4:	4444b03a 	or	r2,r8,r17
    e5b8:	8000871e 	bne	r16,zero,e7d8 <__adddf3+0x79c>
    e5bc:	1000ba26 	beq	r2,zero,e8a8 <__adddf3+0x86c>
    e5c0:	4984b03a 	or	r2,r9,r6
    e5c4:	103ebf26 	beq	r2,zero,e0c4 <__alt_data_end+0xfc00e0c4>
    e5c8:	8985883a 	add	r2,r17,r6
    e5cc:	4247883a 	add	r3,r8,r9
    e5d0:	1451803a 	cmpltu	r8,r2,r17
    e5d4:	40d1883a 	add	r8,r8,r3
    e5d8:	40c0202c 	andhi	r3,r8,128
    e5dc:	1023883a 	mov	r17,r2
    e5e0:	183f1a26 	beq	r3,zero,e24c <__alt_data_end+0xfc00e24c>
    e5e4:	00bfe034 	movhi	r2,65408
    e5e8:	10bfffc4 	addi	r2,r2,-1
    e5ec:	2021883a 	mov	r16,r4
    e5f0:	4090703a 	and	r8,r8,r2
    e5f4:	003eb306 	br	e0c4 <__alt_data_end+0xfc00e0c4>
    e5f8:	4444b03a 	or	r2,r8,r17
    e5fc:	8000291e 	bne	r16,zero,e6a4 <__adddf3+0x668>
    e600:	10004b1e 	bne	r2,zero,e730 <__adddf3+0x6f4>
    e604:	4990b03a 	or	r8,r9,r6
    e608:	40008b26 	beq	r8,zero,e838 <__adddf3+0x7fc>
    e60c:	4811883a 	mov	r8,r9
    e610:	3023883a 	mov	r17,r6
    e614:	3825883a 	mov	r18,r7
    e618:	003eaa06 	br	e0c4 <__alt_data_end+0xfc00e0c4>
    e61c:	1021883a 	mov	r16,r2
    e620:	0011883a 	mov	r8,zero
    e624:	0005883a 	mov	r2,zero
    e628:	003f0f06 	br	e268 <__alt_data_end+0xfc00e268>
    e62c:	217ff804 	addi	r5,r4,-32
    e630:	00800804 	movi	r2,32
    e634:	494ad83a 	srl	r5,r9,r5
    e638:	20807d26 	beq	r4,r2,e830 <__adddf3+0x7f4>
    e63c:	00801004 	movi	r2,64
    e640:	1109c83a 	sub	r4,r2,r4
    e644:	4912983a 	sll	r9,r9,r4
    e648:	498cb03a 	or	r6,r9,r6
    e64c:	300cc03a 	cmpne	r6,r6,zero
    e650:	298ab03a 	or	r5,r5,r6
    e654:	0013883a 	mov	r9,zero
    e658:	003f1506 	br	e2b0 <__alt_data_end+0xfc00e2b0>
    e65c:	0101ffc4 	movi	r4,2047
    e660:	113f9a1e 	bne	r2,r4,e4cc <__alt_data_end+0xfc00e4cc>
    e664:	4811883a 	mov	r8,r9
    e668:	3023883a 	mov	r17,r6
    e66c:	1021883a 	mov	r16,r2
    e670:	3825883a 	mov	r18,r7
    e674:	003e9306 	br	e0c4 <__alt_data_end+0xfc00e0c4>
    e678:	8000161e 	bne	r16,zero,e6d4 <__adddf3+0x698>
    e67c:	444ab03a 	or	r5,r8,r17
    e680:	28005126 	beq	r5,zero,e7c8 <__adddf3+0x78c>
    e684:	0108303a 	nor	r4,zero,r4
    e688:	20004d1e 	bne	r4,zero,e7c0 <__adddf3+0x784>
    e68c:	89a3883a 	add	r17,r17,r6
    e690:	4253883a 	add	r9,r8,r9
    e694:	898d803a 	cmpltu	r6,r17,r6
    e698:	3251883a 	add	r8,r6,r9
    e69c:	1021883a 	mov	r16,r2
    e6a0:	003f0806 	br	e2c4 <__alt_data_end+0xfc00e2c4>
    e6a4:	1000301e 	bne	r2,zero,e768 <__adddf3+0x72c>
    e6a8:	4984b03a 	or	r2,r9,r6
    e6ac:	10007126 	beq	r2,zero,e874 <__adddf3+0x838>
    e6b0:	4811883a 	mov	r8,r9
    e6b4:	3023883a 	mov	r17,r6
    e6b8:	3825883a 	mov	r18,r7
    e6bc:	0401ffc4 	movi	r16,2047
    e6c0:	003e8006 	br	e0c4 <__alt_data_end+0xfc00e0c4>
    e6c4:	4462b03a 	or	r17,r8,r17
    e6c8:	8822c03a 	cmpne	r17,r17,zero
    e6cc:	0007883a 	mov	r3,zero
    e6d0:	003f8b06 	br	e500 <__alt_data_end+0xfc00e500>
    e6d4:	0141ffc4 	movi	r5,2047
    e6d8:	11403b26 	beq	r2,r5,e7c8 <__adddf3+0x78c>
    e6dc:	0109c83a 	sub	r4,zero,r4
    e6e0:	42002034 	orhi	r8,r8,128
    e6e4:	01400e04 	movi	r5,56
    e6e8:	29006716 	blt	r5,r4,e888 <__adddf3+0x84c>
    e6ec:	014007c4 	movi	r5,31
    e6f0:	29007016 	blt	r5,r4,e8b4 <__adddf3+0x878>
    e6f4:	01400804 	movi	r5,32
    e6f8:	290bc83a 	sub	r5,r5,r4
    e6fc:	4154983a 	sll	r10,r8,r5
    e700:	890ed83a 	srl	r7,r17,r4
    e704:	894a983a 	sll	r5,r17,r5
    e708:	4108d83a 	srl	r4,r8,r4
    e70c:	51e2b03a 	or	r17,r10,r7
    e710:	280ac03a 	cmpne	r5,r5,zero
    e714:	8962b03a 	or	r17,r17,r5
    e718:	89a3883a 	add	r17,r17,r6
    e71c:	2253883a 	add	r9,r4,r9
    e720:	898d803a 	cmpltu	r6,r17,r6
    e724:	3251883a 	add	r8,r6,r9
    e728:	1021883a 	mov	r16,r2
    e72c:	003ee506 	br	e2c4 <__alt_data_end+0xfc00e2c4>
    e730:	4984b03a 	or	r2,r9,r6
    e734:	103e6326 	beq	r2,zero,e0c4 <__alt_data_end+0xfc00e0c4>
    e738:	8987c83a 	sub	r3,r17,r6
    e73c:	88c9803a 	cmpltu	r4,r17,r3
    e740:	4245c83a 	sub	r2,r8,r9
    e744:	1105c83a 	sub	r2,r2,r4
    e748:	1100202c 	andhi	r4,r2,128
    e74c:	203ebb26 	beq	r4,zero,e23c <__alt_data_end+0xfc00e23c>
    e750:	3463c83a 	sub	r17,r6,r17
    e754:	4a07c83a 	sub	r3,r9,r8
    e758:	344d803a 	cmpltu	r6,r6,r17
    e75c:	1991c83a 	sub	r8,r3,r6
    e760:	3825883a 	mov	r18,r7
    e764:	003e5706 	br	e0c4 <__alt_data_end+0xfc00e0c4>
    e768:	4984b03a 	or	r2,r9,r6
    e76c:	10002e26 	beq	r2,zero,e828 <__adddf3+0x7ec>
    e770:	4004d0fa 	srli	r2,r8,3
    e774:	8822d0fa 	srli	r17,r17,3
    e778:	4010977a 	slli	r8,r8,29
    e77c:	10c0022c 	andhi	r3,r2,8
    e780:	4462b03a 	or	r17,r8,r17
    e784:	18000826 	beq	r3,zero,e7a8 <__adddf3+0x76c>
    e788:	4808d0fa 	srli	r4,r9,3
    e78c:	20c0022c 	andhi	r3,r4,8
    e790:	1800051e 	bne	r3,zero,e7a8 <__adddf3+0x76c>
    e794:	300cd0fa 	srli	r6,r6,3
    e798:	4806977a 	slli	r3,r9,29
    e79c:	2005883a 	mov	r2,r4
    e7a0:	3825883a 	mov	r18,r7
    e7a4:	19a2b03a 	or	r17,r3,r6
    e7a8:	8810d77a 	srli	r8,r17,29
    e7ac:	100490fa 	slli	r2,r2,3
    e7b0:	882290fa 	slli	r17,r17,3
    e7b4:	0401ffc4 	movi	r16,2047
    e7b8:	4090b03a 	or	r8,r8,r2
    e7bc:	003e4106 	br	e0c4 <__alt_data_end+0xfc00e0c4>
    e7c0:	0141ffc4 	movi	r5,2047
    e7c4:	117fc71e 	bne	r2,r5,e6e4 <__alt_data_end+0xfc00e6e4>
    e7c8:	4811883a 	mov	r8,r9
    e7cc:	3023883a 	mov	r17,r6
    e7d0:	1021883a 	mov	r16,r2
    e7d4:	003e3b06 	br	e0c4 <__alt_data_end+0xfc00e0c4>
    e7d8:	10002f26 	beq	r2,zero,e898 <__adddf3+0x85c>
    e7dc:	4984b03a 	or	r2,r9,r6
    e7e0:	10001126 	beq	r2,zero,e828 <__adddf3+0x7ec>
    e7e4:	4004d0fa 	srli	r2,r8,3
    e7e8:	8822d0fa 	srli	r17,r17,3
    e7ec:	4010977a 	slli	r8,r8,29
    e7f0:	10c0022c 	andhi	r3,r2,8
    e7f4:	4462b03a 	or	r17,r8,r17
    e7f8:	183feb26 	beq	r3,zero,e7a8 <__alt_data_end+0xfc00e7a8>
    e7fc:	4808d0fa 	srli	r4,r9,3
    e800:	20c0022c 	andhi	r3,r4,8
    e804:	183fe81e 	bne	r3,zero,e7a8 <__alt_data_end+0xfc00e7a8>
    e808:	300cd0fa 	srli	r6,r6,3
    e80c:	4806977a 	slli	r3,r9,29
    e810:	2005883a 	mov	r2,r4
    e814:	19a2b03a 	or	r17,r3,r6
    e818:	003fe306 	br	e7a8 <__alt_data_end+0xfc00e7a8>
    e81c:	0011883a 	mov	r8,zero
    e820:	0005883a 	mov	r2,zero
    e824:	003e3f06 	br	e124 <__alt_data_end+0xfc00e124>
    e828:	0401ffc4 	movi	r16,2047
    e82c:	003e2506 	br	e0c4 <__alt_data_end+0xfc00e0c4>
    e830:	0013883a 	mov	r9,zero
    e834:	003f8406 	br	e648 <__alt_data_end+0xfc00e648>
    e838:	0005883a 	mov	r2,zero
    e83c:	0007883a 	mov	r3,zero
    e840:	003e8906 	br	e268 <__alt_data_end+0xfc00e268>
    e844:	197ff804 	addi	r5,r3,-32
    e848:	01000804 	movi	r4,32
    e84c:	414ad83a 	srl	r5,r8,r5
    e850:	19002426 	beq	r3,r4,e8e4 <__adddf3+0x8a8>
    e854:	01001004 	movi	r4,64
    e858:	20c7c83a 	sub	r3,r4,r3
    e85c:	40c6983a 	sll	r3,r8,r3
    e860:	1c46b03a 	or	r3,r3,r17
    e864:	1806c03a 	cmpne	r3,r3,zero
    e868:	28e2b03a 	or	r17,r5,r3
    e86c:	0007883a 	mov	r3,zero
    e870:	003f2306 	br	e500 <__alt_data_end+0xfc00e500>
    e874:	0007883a 	mov	r3,zero
    e878:	5811883a 	mov	r8,r11
    e87c:	00bfffc4 	movi	r2,-1
    e880:	0401ffc4 	movi	r16,2047
    e884:	003e7806 	br	e268 <__alt_data_end+0xfc00e268>
    e888:	4462b03a 	or	r17,r8,r17
    e88c:	8822c03a 	cmpne	r17,r17,zero
    e890:	0009883a 	mov	r4,zero
    e894:	003fa006 	br	e718 <__alt_data_end+0xfc00e718>
    e898:	4811883a 	mov	r8,r9
    e89c:	3023883a 	mov	r17,r6
    e8a0:	0401ffc4 	movi	r16,2047
    e8a4:	003e0706 	br	e0c4 <__alt_data_end+0xfc00e0c4>
    e8a8:	4811883a 	mov	r8,r9
    e8ac:	3023883a 	mov	r17,r6
    e8b0:	003e0406 	br	e0c4 <__alt_data_end+0xfc00e0c4>
    e8b4:	21fff804 	addi	r7,r4,-32
    e8b8:	01400804 	movi	r5,32
    e8bc:	41ced83a 	srl	r7,r8,r7
    e8c0:	21400a26 	beq	r4,r5,e8ec <__adddf3+0x8b0>
    e8c4:	01401004 	movi	r5,64
    e8c8:	2909c83a 	sub	r4,r5,r4
    e8cc:	4108983a 	sll	r4,r8,r4
    e8d0:	2448b03a 	or	r4,r4,r17
    e8d4:	2008c03a 	cmpne	r4,r4,zero
    e8d8:	3922b03a 	or	r17,r7,r4
    e8dc:	0009883a 	mov	r4,zero
    e8e0:	003f8d06 	br	e718 <__alt_data_end+0xfc00e718>
    e8e4:	0007883a 	mov	r3,zero
    e8e8:	003fdd06 	br	e860 <__alt_data_end+0xfc00e860>
    e8ec:	0009883a 	mov	r4,zero
    e8f0:	003ff706 	br	e8d0 <__alt_data_end+0xfc00e8d0>

0000e8f4 <__divdf3>:
    e8f4:	f811883a 	mov	r8,ra
    e8f8:	0000ac80 	call	ac8 <_mcount>
    e8fc:	403f883a 	mov	ra,r8
    e900:	defff204 	addi	sp,sp,-56
    e904:	dfc00d15 	stw	ra,52(sp)
    e908:	df000c15 	stw	fp,48(sp)
    e90c:	ddc00b15 	stw	r23,44(sp)
    e910:	dd800a15 	stw	r22,40(sp)
    e914:	dd400915 	stw	r21,36(sp)
    e918:	dd000815 	stw	r20,32(sp)
    e91c:	dcc00715 	stw	r19,28(sp)
    e920:	dc800615 	stw	r18,24(sp)
    e924:	dc400515 	stw	r17,20(sp)
    e928:	dc000415 	stw	r16,16(sp)
    e92c:	282ad53a 	srli	r21,r5,20
    e930:	2828d7fa 	srli	r20,r5,31
    e934:	04000434 	movhi	r16,16
    e938:	843fffc4 	addi	r16,r16,-1
    e93c:	ad41ffcc 	andi	r21,r21,2047
    e940:	2c20703a 	and	r16,r5,r16
    e944:	a7003fcc 	andi	fp,r20,255
    e948:	a8006126 	beq	r21,zero,ead0 <__divdf3+0x1dc>
    e94c:	0081ffc4 	movi	r2,2047
    e950:	2025883a 	mov	r18,r4
    e954:	a8803726 	beq	r21,r2,ea34 <__divdf3+0x140>
    e958:	80800434 	orhi	r2,r16,16
    e95c:	100490fa 	slli	r2,r2,3
    e960:	2020d77a 	srli	r16,r4,29
    e964:	202490fa 	slli	r18,r4,3
    e968:	ad7f0044 	addi	r21,r21,-1023
    e96c:	80a0b03a 	or	r16,r16,r2
    e970:	0027883a 	mov	r19,zero
    e974:	0013883a 	mov	r9,zero
    e978:	3804d53a 	srli	r2,r7,20
    e97c:	382cd7fa 	srli	r22,r7,31
    e980:	04400434 	movhi	r17,16
    e984:	8c7fffc4 	addi	r17,r17,-1
    e988:	1081ffcc 	andi	r2,r2,2047
    e98c:	3011883a 	mov	r8,r6
    e990:	3c62703a 	and	r17,r7,r17
    e994:	b5c03fcc 	andi	r23,r22,255
    e998:	10006c26 	beq	r2,zero,eb4c <__divdf3+0x258>
    e99c:	00c1ffc4 	movi	r3,2047
    e9a0:	10c06426 	beq	r2,r3,eb34 <__divdf3+0x240>
    e9a4:	88c00434 	orhi	r3,r17,16
    e9a8:	180690fa 	slli	r3,r3,3
    e9ac:	3022d77a 	srli	r17,r6,29
    e9b0:	301090fa 	slli	r8,r6,3
    e9b4:	10bf0044 	addi	r2,r2,-1023
    e9b8:	88e2b03a 	or	r17,r17,r3
    e9bc:	000f883a 	mov	r7,zero
    e9c0:	a58cf03a 	xor	r6,r20,r22
    e9c4:	3cc8b03a 	or	r4,r7,r19
    e9c8:	a8abc83a 	sub	r21,r21,r2
    e9cc:	008003c4 	movi	r2,15
    e9d0:	3007883a 	mov	r3,r6
    e9d4:	34c03fcc 	andi	r19,r6,255
    e9d8:	11009036 	bltu	r2,r4,ec1c <__divdf3+0x328>
    e9dc:	200890ba 	slli	r4,r4,2
    e9e0:	00800074 	movhi	r2,1
    e9e4:	10ba7d04 	addi	r2,r2,-5644
    e9e8:	2089883a 	add	r4,r4,r2
    e9ec:	20800017 	ldw	r2,0(r4)
    e9f0:	1000683a 	jmp	r2
    e9f4:	0000ec1c 	xori	zero,zero,944
    e9f8:	0000ea6c 	andhi	zero,zero,937
    e9fc:	0000ec0c 	andi	zero,zero,944
    ea00:	0000ea60 	cmpeqi	zero,zero,937
    ea04:	0000ec0c 	andi	zero,zero,944
    ea08:	0000ebe0 	cmpeqi	zero,zero,943
    ea0c:	0000ec0c 	andi	zero,zero,944
    ea10:	0000ea60 	cmpeqi	zero,zero,937
    ea14:	0000ea6c 	andhi	zero,zero,937
    ea18:	0000ea6c 	andhi	zero,zero,937
    ea1c:	0000ebe0 	cmpeqi	zero,zero,943
    ea20:	0000ea60 	cmpeqi	zero,zero,937
    ea24:	0000ea50 	cmplti	zero,zero,937
    ea28:	0000ea50 	cmplti	zero,zero,937
    ea2c:	0000ea50 	cmplti	zero,zero,937
    ea30:	0000ef00 	call	ef0 <alt_sys_init+0x88>
    ea34:	2404b03a 	or	r2,r4,r16
    ea38:	1000661e 	bne	r2,zero,ebd4 <__divdf3+0x2e0>
    ea3c:	04c00204 	movi	r19,8
    ea40:	0021883a 	mov	r16,zero
    ea44:	0025883a 	mov	r18,zero
    ea48:	02400084 	movi	r9,2
    ea4c:	003fca06 	br	e978 <__alt_data_end+0xfc00e978>
    ea50:	8023883a 	mov	r17,r16
    ea54:	9011883a 	mov	r8,r18
    ea58:	e02f883a 	mov	r23,fp
    ea5c:	480f883a 	mov	r7,r9
    ea60:	00800084 	movi	r2,2
    ea64:	3881311e 	bne	r7,r2,ef2c <__divdf3+0x638>
    ea68:	b827883a 	mov	r19,r23
    ea6c:	98c0004c 	andi	r3,r19,1
    ea70:	0081ffc4 	movi	r2,2047
    ea74:	000b883a 	mov	r5,zero
    ea78:	0025883a 	mov	r18,zero
    ea7c:	1004953a 	slli	r2,r2,20
    ea80:	18c03fcc 	andi	r3,r3,255
    ea84:	04400434 	movhi	r17,16
    ea88:	8c7fffc4 	addi	r17,r17,-1
    ea8c:	180697fa 	slli	r3,r3,31
    ea90:	2c4a703a 	and	r5,r5,r17
    ea94:	288ab03a 	or	r5,r5,r2
    ea98:	28c6b03a 	or	r3,r5,r3
    ea9c:	9005883a 	mov	r2,r18
    eaa0:	dfc00d17 	ldw	ra,52(sp)
    eaa4:	df000c17 	ldw	fp,48(sp)
    eaa8:	ddc00b17 	ldw	r23,44(sp)
    eaac:	dd800a17 	ldw	r22,40(sp)
    eab0:	dd400917 	ldw	r21,36(sp)
    eab4:	dd000817 	ldw	r20,32(sp)
    eab8:	dcc00717 	ldw	r19,28(sp)
    eabc:	dc800617 	ldw	r18,24(sp)
    eac0:	dc400517 	ldw	r17,20(sp)
    eac4:	dc000417 	ldw	r16,16(sp)
    eac8:	dec00e04 	addi	sp,sp,56
    eacc:	f800283a 	ret
    ead0:	2404b03a 	or	r2,r4,r16
    ead4:	2027883a 	mov	r19,r4
    ead8:	10003926 	beq	r2,zero,ebc0 <__divdf3+0x2cc>
    eadc:	80012e26 	beq	r16,zero,ef98 <__divdf3+0x6a4>
    eae0:	8009883a 	mov	r4,r16
    eae4:	d9800315 	stw	r6,12(sp)
    eae8:	d9c00215 	stw	r7,8(sp)
    eaec:	00106a80 	call	106a8 <__clzsi2>
    eaf0:	d9800317 	ldw	r6,12(sp)
    eaf4:	d9c00217 	ldw	r7,8(sp)
    eaf8:	113ffd44 	addi	r4,r2,-11
    eafc:	00c00704 	movi	r3,28
    eb00:	19012116 	blt	r3,r4,ef88 <__divdf3+0x694>
    eb04:	00c00744 	movi	r3,29
    eb08:	147ffe04 	addi	r17,r2,-8
    eb0c:	1907c83a 	sub	r3,r3,r4
    eb10:	8460983a 	sll	r16,r16,r17
    eb14:	98c6d83a 	srl	r3,r19,r3
    eb18:	9c64983a 	sll	r18,r19,r17
    eb1c:	1c20b03a 	or	r16,r3,r16
    eb20:	1080fcc4 	addi	r2,r2,1011
    eb24:	00abc83a 	sub	r21,zero,r2
    eb28:	0027883a 	mov	r19,zero
    eb2c:	0013883a 	mov	r9,zero
    eb30:	003f9106 	br	e978 <__alt_data_end+0xfc00e978>
    eb34:	3446b03a 	or	r3,r6,r17
    eb38:	18001f1e 	bne	r3,zero,ebb8 <__divdf3+0x2c4>
    eb3c:	0023883a 	mov	r17,zero
    eb40:	0011883a 	mov	r8,zero
    eb44:	01c00084 	movi	r7,2
    eb48:	003f9d06 	br	e9c0 <__alt_data_end+0xfc00e9c0>
    eb4c:	3446b03a 	or	r3,r6,r17
    eb50:	18001526 	beq	r3,zero,eba8 <__divdf3+0x2b4>
    eb54:	88011b26 	beq	r17,zero,efc4 <__divdf3+0x6d0>
    eb58:	8809883a 	mov	r4,r17
    eb5c:	d9800315 	stw	r6,12(sp)
    eb60:	da400115 	stw	r9,4(sp)
    eb64:	00106a80 	call	106a8 <__clzsi2>
    eb68:	d9800317 	ldw	r6,12(sp)
    eb6c:	da400117 	ldw	r9,4(sp)
    eb70:	113ffd44 	addi	r4,r2,-11
    eb74:	00c00704 	movi	r3,28
    eb78:	19010e16 	blt	r3,r4,efb4 <__divdf3+0x6c0>
    eb7c:	00c00744 	movi	r3,29
    eb80:	123ffe04 	addi	r8,r2,-8
    eb84:	1907c83a 	sub	r3,r3,r4
    eb88:	8a22983a 	sll	r17,r17,r8
    eb8c:	30c6d83a 	srl	r3,r6,r3
    eb90:	3210983a 	sll	r8,r6,r8
    eb94:	1c62b03a 	or	r17,r3,r17
    eb98:	1080fcc4 	addi	r2,r2,1011
    eb9c:	0085c83a 	sub	r2,zero,r2
    eba0:	000f883a 	mov	r7,zero
    eba4:	003f8606 	br	e9c0 <__alt_data_end+0xfc00e9c0>
    eba8:	0023883a 	mov	r17,zero
    ebac:	0011883a 	mov	r8,zero
    ebb0:	01c00044 	movi	r7,1
    ebb4:	003f8206 	br	e9c0 <__alt_data_end+0xfc00e9c0>
    ebb8:	01c000c4 	movi	r7,3
    ebbc:	003f8006 	br	e9c0 <__alt_data_end+0xfc00e9c0>
    ebc0:	04c00104 	movi	r19,4
    ebc4:	0021883a 	mov	r16,zero
    ebc8:	0025883a 	mov	r18,zero
    ebcc:	02400044 	movi	r9,1
    ebd0:	003f6906 	br	e978 <__alt_data_end+0xfc00e978>
    ebd4:	04c00304 	movi	r19,12
    ebd8:	024000c4 	movi	r9,3
    ebdc:	003f6606 	br	e978 <__alt_data_end+0xfc00e978>
    ebe0:	01400434 	movhi	r5,16
    ebe4:	0007883a 	mov	r3,zero
    ebe8:	297fffc4 	addi	r5,r5,-1
    ebec:	04bfffc4 	movi	r18,-1
    ebf0:	0081ffc4 	movi	r2,2047
    ebf4:	003fa106 	br	ea7c <__alt_data_end+0xfc00ea7c>
    ebf8:	00c00044 	movi	r3,1
    ebfc:	1887c83a 	sub	r3,r3,r2
    ec00:	01000e04 	movi	r4,56
    ec04:	20c1210e 	bge	r4,r3,f08c <__divdf3+0x798>
    ec08:	98c0004c 	andi	r3,r19,1
    ec0c:	0005883a 	mov	r2,zero
    ec10:	000b883a 	mov	r5,zero
    ec14:	0025883a 	mov	r18,zero
    ec18:	003f9806 	br	ea7c <__alt_data_end+0xfc00ea7c>
    ec1c:	8c00fd36 	bltu	r17,r16,f014 <__divdf3+0x720>
    ec20:	8440fb26 	beq	r16,r17,f010 <__divdf3+0x71c>
    ec24:	8007883a 	mov	r3,r16
    ec28:	ad7fffc4 	addi	r21,r21,-1
    ec2c:	0021883a 	mov	r16,zero
    ec30:	4004d63a 	srli	r2,r8,24
    ec34:	8822923a 	slli	r17,r17,8
    ec38:	1809883a 	mov	r4,r3
    ec3c:	402c923a 	slli	r22,r8,8
    ec40:	88b8b03a 	or	fp,r17,r2
    ec44:	e028d43a 	srli	r20,fp,16
    ec48:	d8c00015 	stw	r3,0(sp)
    ec4c:	e5ffffcc 	andi	r23,fp,65535
    ec50:	a00b883a 	mov	r5,r20
    ec54:	000df6c0 	call	df6c <__udivsi3>
    ec58:	d8c00017 	ldw	r3,0(sp)
    ec5c:	a00b883a 	mov	r5,r20
    ec60:	d8800315 	stw	r2,12(sp)
    ec64:	1809883a 	mov	r4,r3
    ec68:	000dfdc0 	call	dfdc <__umodsi3>
    ec6c:	d9800317 	ldw	r6,12(sp)
    ec70:	1006943a 	slli	r3,r2,16
    ec74:	9004d43a 	srli	r2,r18,16
    ec78:	b9a3383a 	mul	r17,r23,r6
    ec7c:	10c4b03a 	or	r2,r2,r3
    ec80:	1440062e 	bgeu	r2,r17,ec9c <__divdf3+0x3a8>
    ec84:	1705883a 	add	r2,r2,fp
    ec88:	30ffffc4 	addi	r3,r6,-1
    ec8c:	1700ee36 	bltu	r2,fp,f048 <__divdf3+0x754>
    ec90:	1440ed2e 	bgeu	r2,r17,f048 <__divdf3+0x754>
    ec94:	31bfff84 	addi	r6,r6,-2
    ec98:	1705883a 	add	r2,r2,fp
    ec9c:	1463c83a 	sub	r17,r2,r17
    eca0:	a00b883a 	mov	r5,r20
    eca4:	8809883a 	mov	r4,r17
    eca8:	d9800315 	stw	r6,12(sp)
    ecac:	000df6c0 	call	df6c <__udivsi3>
    ecb0:	a00b883a 	mov	r5,r20
    ecb4:	8809883a 	mov	r4,r17
    ecb8:	d8800215 	stw	r2,8(sp)
    ecbc:	000dfdc0 	call	dfdc <__umodsi3>
    ecc0:	d9c00217 	ldw	r7,8(sp)
    ecc4:	1004943a 	slli	r2,r2,16
    ecc8:	94bfffcc 	andi	r18,r18,65535
    eccc:	b9d1383a 	mul	r8,r23,r7
    ecd0:	90a4b03a 	or	r18,r18,r2
    ecd4:	d9800317 	ldw	r6,12(sp)
    ecd8:	9200062e 	bgeu	r18,r8,ecf4 <__divdf3+0x400>
    ecdc:	9725883a 	add	r18,r18,fp
    ece0:	38bfffc4 	addi	r2,r7,-1
    ece4:	9700d636 	bltu	r18,fp,f040 <__divdf3+0x74c>
    ece8:	9200d52e 	bgeu	r18,r8,f040 <__divdf3+0x74c>
    ecec:	39ffff84 	addi	r7,r7,-2
    ecf0:	9725883a 	add	r18,r18,fp
    ecf4:	3004943a 	slli	r2,r6,16
    ecf8:	b012d43a 	srli	r9,r22,16
    ecfc:	b1bfffcc 	andi	r6,r22,65535
    ed00:	11e2b03a 	or	r17,r2,r7
    ed04:	8806d43a 	srli	r3,r17,16
    ed08:	893fffcc 	andi	r4,r17,65535
    ed0c:	218b383a 	mul	r5,r4,r6
    ed10:	30c5383a 	mul	r2,r6,r3
    ed14:	2249383a 	mul	r4,r4,r9
    ed18:	280ed43a 	srli	r7,r5,16
    ed1c:	9225c83a 	sub	r18,r18,r8
    ed20:	2089883a 	add	r4,r4,r2
    ed24:	3909883a 	add	r4,r7,r4
    ed28:	1a47383a 	mul	r3,r3,r9
    ed2c:	2080022e 	bgeu	r4,r2,ed38 <__divdf3+0x444>
    ed30:	00800074 	movhi	r2,1
    ed34:	1887883a 	add	r3,r3,r2
    ed38:	2004d43a 	srli	r2,r4,16
    ed3c:	2008943a 	slli	r4,r4,16
    ed40:	297fffcc 	andi	r5,r5,65535
    ed44:	10c7883a 	add	r3,r2,r3
    ed48:	2149883a 	add	r4,r4,r5
    ed4c:	90c0a536 	bltu	r18,r3,efe4 <__divdf3+0x6f0>
    ed50:	90c0bf26 	beq	r18,r3,f050 <__divdf3+0x75c>
    ed54:	90c7c83a 	sub	r3,r18,r3
    ed58:	810fc83a 	sub	r7,r16,r4
    ed5c:	81e5803a 	cmpltu	r18,r16,r7
    ed60:	1ca5c83a 	sub	r18,r3,r18
    ed64:	e480c126 	beq	fp,r18,f06c <__divdf3+0x778>
    ed68:	a00b883a 	mov	r5,r20
    ed6c:	9009883a 	mov	r4,r18
    ed70:	d9800315 	stw	r6,12(sp)
    ed74:	d9c00215 	stw	r7,8(sp)
    ed78:	da400115 	stw	r9,4(sp)
    ed7c:	000df6c0 	call	df6c <__udivsi3>
    ed80:	a00b883a 	mov	r5,r20
    ed84:	9009883a 	mov	r4,r18
    ed88:	d8800015 	stw	r2,0(sp)
    ed8c:	000dfdc0 	call	dfdc <__umodsi3>
    ed90:	d9c00217 	ldw	r7,8(sp)
    ed94:	da000017 	ldw	r8,0(sp)
    ed98:	1006943a 	slli	r3,r2,16
    ed9c:	3804d43a 	srli	r2,r7,16
    eda0:	ba21383a 	mul	r16,r23,r8
    eda4:	d9800317 	ldw	r6,12(sp)
    eda8:	10c4b03a 	or	r2,r2,r3
    edac:	da400117 	ldw	r9,4(sp)
    edb0:	1400062e 	bgeu	r2,r16,edcc <__divdf3+0x4d8>
    edb4:	1705883a 	add	r2,r2,fp
    edb8:	40ffffc4 	addi	r3,r8,-1
    edbc:	1700ad36 	bltu	r2,fp,f074 <__divdf3+0x780>
    edc0:	1400ac2e 	bgeu	r2,r16,f074 <__divdf3+0x780>
    edc4:	423fff84 	addi	r8,r8,-2
    edc8:	1705883a 	add	r2,r2,fp
    edcc:	1421c83a 	sub	r16,r2,r16
    edd0:	a00b883a 	mov	r5,r20
    edd4:	8009883a 	mov	r4,r16
    edd8:	d9800315 	stw	r6,12(sp)
    eddc:	d9c00215 	stw	r7,8(sp)
    ede0:	da000015 	stw	r8,0(sp)
    ede4:	da400115 	stw	r9,4(sp)
    ede8:	000df6c0 	call	df6c <__udivsi3>
    edec:	8009883a 	mov	r4,r16
    edf0:	a00b883a 	mov	r5,r20
    edf4:	1025883a 	mov	r18,r2
    edf8:	000dfdc0 	call	dfdc <__umodsi3>
    edfc:	d9c00217 	ldw	r7,8(sp)
    ee00:	1004943a 	slli	r2,r2,16
    ee04:	bcaf383a 	mul	r23,r23,r18
    ee08:	393fffcc 	andi	r4,r7,65535
    ee0c:	2088b03a 	or	r4,r4,r2
    ee10:	d9800317 	ldw	r6,12(sp)
    ee14:	da000017 	ldw	r8,0(sp)
    ee18:	da400117 	ldw	r9,4(sp)
    ee1c:	25c0062e 	bgeu	r4,r23,ee38 <__divdf3+0x544>
    ee20:	2709883a 	add	r4,r4,fp
    ee24:	90bfffc4 	addi	r2,r18,-1
    ee28:	27009436 	bltu	r4,fp,f07c <__divdf3+0x788>
    ee2c:	25c0932e 	bgeu	r4,r23,f07c <__divdf3+0x788>
    ee30:	94bfff84 	addi	r18,r18,-2
    ee34:	2709883a 	add	r4,r4,fp
    ee38:	4004943a 	slli	r2,r8,16
    ee3c:	25efc83a 	sub	r23,r4,r23
    ee40:	1490b03a 	or	r8,r2,r18
    ee44:	4008d43a 	srli	r4,r8,16
    ee48:	40ffffcc 	andi	r3,r8,65535
    ee4c:	30c5383a 	mul	r2,r6,r3
    ee50:	1a47383a 	mul	r3,r3,r9
    ee54:	310d383a 	mul	r6,r6,r4
    ee58:	100ad43a 	srli	r5,r2,16
    ee5c:	4913383a 	mul	r9,r9,r4
    ee60:	1987883a 	add	r3,r3,r6
    ee64:	28c7883a 	add	r3,r5,r3
    ee68:	1980022e 	bgeu	r3,r6,ee74 <__divdf3+0x580>
    ee6c:	01000074 	movhi	r4,1
    ee70:	4913883a 	add	r9,r9,r4
    ee74:	1808d43a 	srli	r4,r3,16
    ee78:	1806943a 	slli	r3,r3,16
    ee7c:	10bfffcc 	andi	r2,r2,65535
    ee80:	2253883a 	add	r9,r4,r9
    ee84:	1887883a 	add	r3,r3,r2
    ee88:	ba403836 	bltu	r23,r9,ef6c <__divdf3+0x678>
    ee8c:	ba403626 	beq	r23,r9,ef68 <__divdf3+0x674>
    ee90:	42000054 	ori	r8,r8,1
    ee94:	a880ffc4 	addi	r2,r21,1023
    ee98:	00bf570e 	bge	zero,r2,ebf8 <__alt_data_end+0xfc00ebf8>
    ee9c:	40c001cc 	andi	r3,r8,7
    eea0:	18000726 	beq	r3,zero,eec0 <__divdf3+0x5cc>
    eea4:	40c003cc 	andi	r3,r8,15
    eea8:	01000104 	movi	r4,4
    eeac:	19000426 	beq	r3,r4,eec0 <__divdf3+0x5cc>
    eeb0:	4107883a 	add	r3,r8,r4
    eeb4:	1a11803a 	cmpltu	r8,r3,r8
    eeb8:	8a23883a 	add	r17,r17,r8
    eebc:	1811883a 	mov	r8,r3
    eec0:	88c0402c 	andhi	r3,r17,256
    eec4:	18000426 	beq	r3,zero,eed8 <__divdf3+0x5e4>
    eec8:	00ffc034 	movhi	r3,65280
    eecc:	18ffffc4 	addi	r3,r3,-1
    eed0:	a8810004 	addi	r2,r21,1024
    eed4:	88e2703a 	and	r17,r17,r3
    eed8:	00c1ff84 	movi	r3,2046
    eedc:	18bee316 	blt	r3,r2,ea6c <__alt_data_end+0xfc00ea6c>
    eee0:	8824977a 	slli	r18,r17,29
    eee4:	4010d0fa 	srli	r8,r8,3
    eee8:	8822927a 	slli	r17,r17,9
    eeec:	1081ffcc 	andi	r2,r2,2047
    eef0:	9224b03a 	or	r18,r18,r8
    eef4:	880ad33a 	srli	r5,r17,12
    eef8:	98c0004c 	andi	r3,r19,1
    eefc:	003edf06 	br	ea7c <__alt_data_end+0xfc00ea7c>
    ef00:	8080022c 	andhi	r2,r16,8
    ef04:	10001226 	beq	r2,zero,ef50 <__divdf3+0x65c>
    ef08:	8880022c 	andhi	r2,r17,8
    ef0c:	1000101e 	bne	r2,zero,ef50 <__divdf3+0x65c>
    ef10:	00800434 	movhi	r2,16
    ef14:	89400234 	orhi	r5,r17,8
    ef18:	10bfffc4 	addi	r2,r2,-1
    ef1c:	b007883a 	mov	r3,r22
    ef20:	288a703a 	and	r5,r5,r2
    ef24:	4025883a 	mov	r18,r8
    ef28:	003f3106 	br	ebf0 <__alt_data_end+0xfc00ebf0>
    ef2c:	008000c4 	movi	r2,3
    ef30:	3880a626 	beq	r7,r2,f1cc <__divdf3+0x8d8>
    ef34:	00800044 	movi	r2,1
    ef38:	3880521e 	bne	r7,r2,f084 <__divdf3+0x790>
    ef3c:	b807883a 	mov	r3,r23
    ef40:	0005883a 	mov	r2,zero
    ef44:	000b883a 	mov	r5,zero
    ef48:	0025883a 	mov	r18,zero
    ef4c:	003ecb06 	br	ea7c <__alt_data_end+0xfc00ea7c>
    ef50:	00800434 	movhi	r2,16
    ef54:	81400234 	orhi	r5,r16,8
    ef58:	10bfffc4 	addi	r2,r2,-1
    ef5c:	a007883a 	mov	r3,r20
    ef60:	288a703a 	and	r5,r5,r2
    ef64:	003f2206 	br	ebf0 <__alt_data_end+0xfc00ebf0>
    ef68:	183fca26 	beq	r3,zero,ee94 <__alt_data_end+0xfc00ee94>
    ef6c:	e5ef883a 	add	r23,fp,r23
    ef70:	40bfffc4 	addi	r2,r8,-1
    ef74:	bf00392e 	bgeu	r23,fp,f05c <__divdf3+0x768>
    ef78:	1011883a 	mov	r8,r2
    ef7c:	ba7fc41e 	bne	r23,r9,ee90 <__alt_data_end+0xfc00ee90>
    ef80:	b0ffc31e 	bne	r22,r3,ee90 <__alt_data_end+0xfc00ee90>
    ef84:	003fc306 	br	ee94 <__alt_data_end+0xfc00ee94>
    ef88:	143ff604 	addi	r16,r2,-40
    ef8c:	9c20983a 	sll	r16,r19,r16
    ef90:	0025883a 	mov	r18,zero
    ef94:	003ee206 	br	eb20 <__alt_data_end+0xfc00eb20>
    ef98:	d9800315 	stw	r6,12(sp)
    ef9c:	d9c00215 	stw	r7,8(sp)
    efa0:	00106a80 	call	106a8 <__clzsi2>
    efa4:	10800804 	addi	r2,r2,32
    efa8:	d9c00217 	ldw	r7,8(sp)
    efac:	d9800317 	ldw	r6,12(sp)
    efb0:	003ed106 	br	eaf8 <__alt_data_end+0xfc00eaf8>
    efb4:	147ff604 	addi	r17,r2,-40
    efb8:	3462983a 	sll	r17,r6,r17
    efbc:	0011883a 	mov	r8,zero
    efc0:	003ef506 	br	eb98 <__alt_data_end+0xfc00eb98>
    efc4:	3009883a 	mov	r4,r6
    efc8:	d9800315 	stw	r6,12(sp)
    efcc:	da400115 	stw	r9,4(sp)
    efd0:	00106a80 	call	106a8 <__clzsi2>
    efd4:	10800804 	addi	r2,r2,32
    efd8:	da400117 	ldw	r9,4(sp)
    efdc:	d9800317 	ldw	r6,12(sp)
    efe0:	003ee306 	br	eb70 <__alt_data_end+0xfc00eb70>
    efe4:	85a1883a 	add	r16,r16,r22
    efe8:	8585803a 	cmpltu	r2,r16,r22
    efec:	1705883a 	add	r2,r2,fp
    eff0:	14a5883a 	add	r18,r2,r18
    eff4:	88bfffc4 	addi	r2,r17,-1
    eff8:	e4800c2e 	bgeu	fp,r18,f02c <__divdf3+0x738>
    effc:	90c03e36 	bltu	r18,r3,f0f8 <__divdf3+0x804>
    f000:	1c806926 	beq	r3,r18,f1a8 <__divdf3+0x8b4>
    f004:	90c7c83a 	sub	r3,r18,r3
    f008:	1023883a 	mov	r17,r2
    f00c:	003f5206 	br	ed58 <__alt_data_end+0xfc00ed58>
    f010:	923f0436 	bltu	r18,r8,ec24 <__alt_data_end+0xfc00ec24>
    f014:	800897fa 	slli	r4,r16,31
    f018:	9004d07a 	srli	r2,r18,1
    f01c:	8006d07a 	srli	r3,r16,1
    f020:	902097fa 	slli	r16,r18,31
    f024:	20a4b03a 	or	r18,r4,r2
    f028:	003f0106 	br	ec30 <__alt_data_end+0xfc00ec30>
    f02c:	e4bff51e 	bne	fp,r18,f004 <__alt_data_end+0xfc00f004>
    f030:	85bff22e 	bgeu	r16,r22,effc <__alt_data_end+0xfc00effc>
    f034:	e0c7c83a 	sub	r3,fp,r3
    f038:	1023883a 	mov	r17,r2
    f03c:	003f4606 	br	ed58 <__alt_data_end+0xfc00ed58>
    f040:	100f883a 	mov	r7,r2
    f044:	003f2b06 	br	ecf4 <__alt_data_end+0xfc00ecf4>
    f048:	180d883a 	mov	r6,r3
    f04c:	003f1306 	br	ec9c <__alt_data_end+0xfc00ec9c>
    f050:	813fe436 	bltu	r16,r4,efe4 <__alt_data_end+0xfc00efe4>
    f054:	0007883a 	mov	r3,zero
    f058:	003f3f06 	br	ed58 <__alt_data_end+0xfc00ed58>
    f05c:	ba402c36 	bltu	r23,r9,f110 <__divdf3+0x81c>
    f060:	4dc05426 	beq	r9,r23,f1b4 <__divdf3+0x8c0>
    f064:	1011883a 	mov	r8,r2
    f068:	003f8906 	br	ee90 <__alt_data_end+0xfc00ee90>
    f06c:	023fffc4 	movi	r8,-1
    f070:	003f8806 	br	ee94 <__alt_data_end+0xfc00ee94>
    f074:	1811883a 	mov	r8,r3
    f078:	003f5406 	br	edcc <__alt_data_end+0xfc00edcc>
    f07c:	1025883a 	mov	r18,r2
    f080:	003f6d06 	br	ee38 <__alt_data_end+0xfc00ee38>
    f084:	b827883a 	mov	r19,r23
    f088:	003f8206 	br	ee94 <__alt_data_end+0xfc00ee94>
    f08c:	010007c4 	movi	r4,31
    f090:	20c02616 	blt	r4,r3,f12c <__divdf3+0x838>
    f094:	00800804 	movi	r2,32
    f098:	10c5c83a 	sub	r2,r2,r3
    f09c:	888a983a 	sll	r5,r17,r2
    f0a0:	40c8d83a 	srl	r4,r8,r3
    f0a4:	4084983a 	sll	r2,r8,r2
    f0a8:	88e2d83a 	srl	r17,r17,r3
    f0ac:	2906b03a 	or	r3,r5,r4
    f0b0:	1004c03a 	cmpne	r2,r2,zero
    f0b4:	1886b03a 	or	r3,r3,r2
    f0b8:	188001cc 	andi	r2,r3,7
    f0bc:	10000726 	beq	r2,zero,f0dc <__divdf3+0x7e8>
    f0c0:	188003cc 	andi	r2,r3,15
    f0c4:	01000104 	movi	r4,4
    f0c8:	11000426 	beq	r2,r4,f0dc <__divdf3+0x7e8>
    f0cc:	1805883a 	mov	r2,r3
    f0d0:	10c00104 	addi	r3,r2,4
    f0d4:	1885803a 	cmpltu	r2,r3,r2
    f0d8:	88a3883a 	add	r17,r17,r2
    f0dc:	8880202c 	andhi	r2,r17,128
    f0e0:	10002726 	beq	r2,zero,f180 <__divdf3+0x88c>
    f0e4:	98c0004c 	andi	r3,r19,1
    f0e8:	00800044 	movi	r2,1
    f0ec:	000b883a 	mov	r5,zero
    f0f0:	0025883a 	mov	r18,zero
    f0f4:	003e6106 	br	ea7c <__alt_data_end+0xfc00ea7c>
    f0f8:	85a1883a 	add	r16,r16,r22
    f0fc:	8585803a 	cmpltu	r2,r16,r22
    f100:	1705883a 	add	r2,r2,fp
    f104:	14a5883a 	add	r18,r2,r18
    f108:	8c7fff84 	addi	r17,r17,-2
    f10c:	003f1106 	br	ed54 <__alt_data_end+0xfc00ed54>
    f110:	b589883a 	add	r4,r22,r22
    f114:	25ad803a 	cmpltu	r22,r4,r22
    f118:	b739883a 	add	fp,r22,fp
    f11c:	40bfff84 	addi	r2,r8,-2
    f120:	bf2f883a 	add	r23,r23,fp
    f124:	202d883a 	mov	r22,r4
    f128:	003f9306 	br	ef78 <__alt_data_end+0xfc00ef78>
    f12c:	013ff844 	movi	r4,-31
    f130:	2085c83a 	sub	r2,r4,r2
    f134:	8888d83a 	srl	r4,r17,r2
    f138:	00800804 	movi	r2,32
    f13c:	18802126 	beq	r3,r2,f1c4 <__divdf3+0x8d0>
    f140:	00801004 	movi	r2,64
    f144:	10c5c83a 	sub	r2,r2,r3
    f148:	8884983a 	sll	r2,r17,r2
    f14c:	1204b03a 	or	r2,r2,r8
    f150:	1004c03a 	cmpne	r2,r2,zero
    f154:	2084b03a 	or	r2,r4,r2
    f158:	144001cc 	andi	r17,r2,7
    f15c:	88000d1e 	bne	r17,zero,f194 <__divdf3+0x8a0>
    f160:	000b883a 	mov	r5,zero
    f164:	1024d0fa 	srli	r18,r2,3
    f168:	98c0004c 	andi	r3,r19,1
    f16c:	0005883a 	mov	r2,zero
    f170:	9464b03a 	or	r18,r18,r17
    f174:	003e4106 	br	ea7c <__alt_data_end+0xfc00ea7c>
    f178:	1007883a 	mov	r3,r2
    f17c:	0023883a 	mov	r17,zero
    f180:	880a927a 	slli	r5,r17,9
    f184:	1805883a 	mov	r2,r3
    f188:	8822977a 	slli	r17,r17,29
    f18c:	280ad33a 	srli	r5,r5,12
    f190:	003ff406 	br	f164 <__alt_data_end+0xfc00f164>
    f194:	10c003cc 	andi	r3,r2,15
    f198:	01000104 	movi	r4,4
    f19c:	193ff626 	beq	r3,r4,f178 <__alt_data_end+0xfc00f178>
    f1a0:	0023883a 	mov	r17,zero
    f1a4:	003fca06 	br	f0d0 <__alt_data_end+0xfc00f0d0>
    f1a8:	813fd336 	bltu	r16,r4,f0f8 <__alt_data_end+0xfc00f0f8>
    f1ac:	1023883a 	mov	r17,r2
    f1b0:	003fa806 	br	f054 <__alt_data_end+0xfc00f054>
    f1b4:	b0ffd636 	bltu	r22,r3,f110 <__alt_data_end+0xfc00f110>
    f1b8:	1011883a 	mov	r8,r2
    f1bc:	b0ff341e 	bne	r22,r3,ee90 <__alt_data_end+0xfc00ee90>
    f1c0:	003f3406 	br	ee94 <__alt_data_end+0xfc00ee94>
    f1c4:	0005883a 	mov	r2,zero
    f1c8:	003fe006 	br	f14c <__alt_data_end+0xfc00f14c>
    f1cc:	00800434 	movhi	r2,16
    f1d0:	89400234 	orhi	r5,r17,8
    f1d4:	10bfffc4 	addi	r2,r2,-1
    f1d8:	b807883a 	mov	r3,r23
    f1dc:	288a703a 	and	r5,r5,r2
    f1e0:	4025883a 	mov	r18,r8
    f1e4:	003e8206 	br	ebf0 <__alt_data_end+0xfc00ebf0>

0000f1e8 <__eqdf2>:
    f1e8:	f811883a 	mov	r8,ra
    f1ec:	0000ac80 	call	ac8 <_mcount>
    f1f0:	403f883a 	mov	ra,r8
    f1f4:	2804d53a 	srli	r2,r5,20
    f1f8:	3806d53a 	srli	r3,r7,20
    f1fc:	02000434 	movhi	r8,16
    f200:	423fffc4 	addi	r8,r8,-1
    f204:	1081ffcc 	andi	r2,r2,2047
    f208:	0281ffc4 	movi	r10,2047
    f20c:	2a12703a 	and	r9,r5,r8
    f210:	18c1ffcc 	andi	r3,r3,2047
    f214:	3a10703a 	and	r8,r7,r8
    f218:	280ad7fa 	srli	r5,r5,31
    f21c:	380ed7fa 	srli	r7,r7,31
    f220:	12801026 	beq	r2,r10,f264 <__eqdf2+0x7c>
    f224:	0281ffc4 	movi	r10,2047
    f228:	1a800a26 	beq	r3,r10,f254 <__eqdf2+0x6c>
    f22c:	10c00226 	beq	r2,r3,f238 <__eqdf2+0x50>
    f230:	00800044 	movi	r2,1
    f234:	f800283a 	ret
    f238:	4a3ffd1e 	bne	r9,r8,f230 <__alt_data_end+0xfc00f230>
    f23c:	21bffc1e 	bne	r4,r6,f230 <__alt_data_end+0xfc00f230>
    f240:	29c00b26 	beq	r5,r7,f270 <__eqdf2+0x88>
    f244:	103ffa1e 	bne	r2,zero,f230 <__alt_data_end+0xfc00f230>
    f248:	2244b03a 	or	r2,r4,r9
    f24c:	1004c03a 	cmpne	r2,r2,zero
    f250:	003ff806 	br	f234 <__alt_data_end+0xfc00f234>
    f254:	3214b03a 	or	r10,r6,r8
    f258:	503ff51e 	bne	r10,zero,f230 <__alt_data_end+0xfc00f230>
    f25c:	10fff41e 	bne	r2,r3,f230 <__alt_data_end+0xfc00f230>
    f260:	003ff506 	br	f238 <__alt_data_end+0xfc00f238>
    f264:	2254b03a 	or	r10,r4,r9
    f268:	503ff11e 	bne	r10,zero,f230 <__alt_data_end+0xfc00f230>
    f26c:	003fed06 	br	f224 <__alt_data_end+0xfc00f224>
    f270:	0005883a 	mov	r2,zero
    f274:	003fef06 	br	f234 <__alt_data_end+0xfc00f234>

0000f278 <__gedf2>:
    f278:	f811883a 	mov	r8,ra
    f27c:	0000ac80 	call	ac8 <_mcount>
    f280:	403f883a 	mov	ra,r8
    f284:	2804d53a 	srli	r2,r5,20
    f288:	3806d53a 	srli	r3,r7,20
    f28c:	02000434 	movhi	r8,16
    f290:	423fffc4 	addi	r8,r8,-1
    f294:	1081ffcc 	andi	r2,r2,2047
    f298:	0241ffc4 	movi	r9,2047
    f29c:	2a14703a 	and	r10,r5,r8
    f2a0:	18c1ffcc 	andi	r3,r3,2047
    f2a4:	3a10703a 	and	r8,r7,r8
    f2a8:	280ad7fa 	srli	r5,r5,31
    f2ac:	380ed7fa 	srli	r7,r7,31
    f2b0:	12402326 	beq	r2,r9,f340 <__gedf2+0xc8>
    f2b4:	0241ffc4 	movi	r9,2047
    f2b8:	1a401426 	beq	r3,r9,f30c <__gedf2+0x94>
    f2bc:	10000a1e 	bne	r2,zero,f2e8 <__gedf2+0x70>
    f2c0:	2296b03a 	or	r11,r4,r10
    f2c4:	5813003a 	cmpeq	r9,r11,zero
    f2c8:	18000b1e 	bne	r3,zero,f2f8 <__gedf2+0x80>
    f2cc:	3218b03a 	or	r12,r6,r8
    f2d0:	6000091e 	bne	r12,zero,f2f8 <__gedf2+0x80>
    f2d4:	0005883a 	mov	r2,zero
    f2d8:	58000b26 	beq	r11,zero,f308 <__gedf2+0x90>
    f2dc:	28000926 	beq	r5,zero,f304 <__gedf2+0x8c>
    f2e0:	00bfffc4 	movi	r2,-1
    f2e4:	00000806 	br	f308 <__gedf2+0x90>
    f2e8:	18000c1e 	bne	r3,zero,f31c <__gedf2+0xa4>
    f2ec:	3212b03a 	or	r9,r6,r8
    f2f0:	483ffa26 	beq	r9,zero,f2dc <__alt_data_end+0xfc00f2dc>
    f2f4:	0013883a 	mov	r9,zero
    f2f8:	39c03fcc 	andi	r7,r7,255
    f2fc:	48000826 	beq	r9,zero,f320 <__gedf2+0xa8>
    f300:	383ff726 	beq	r7,zero,f2e0 <__alt_data_end+0xfc00f2e0>
    f304:	00800044 	movi	r2,1
    f308:	f800283a 	ret
    f30c:	3212b03a 	or	r9,r6,r8
    f310:	483fea26 	beq	r9,zero,f2bc <__alt_data_end+0xfc00f2bc>
    f314:	00bfff84 	movi	r2,-2
    f318:	003ffb06 	br	f308 <__alt_data_end+0xfc00f308>
    f31c:	39c03fcc 	andi	r7,r7,255
    f320:	29ffee1e 	bne	r5,r7,f2dc <__alt_data_end+0xfc00f2dc>
    f324:	18bfed16 	blt	r3,r2,f2dc <__alt_data_end+0xfc00f2dc>
    f328:	10c00316 	blt	r2,r3,f338 <__gedf2+0xc0>
    f32c:	42bfeb36 	bltu	r8,r10,f2dc <__alt_data_end+0xfc00f2dc>
    f330:	52000626 	beq	r10,r8,f34c <__gedf2+0xd4>
    f334:	5200072e 	bgeu	r10,r8,f354 <__gedf2+0xdc>
    f338:	283ff21e 	bne	r5,zero,f304 <__alt_data_end+0xfc00f304>
    f33c:	003fe806 	br	f2e0 <__alt_data_end+0xfc00f2e0>
    f340:	2292b03a 	or	r9,r4,r10
    f344:	483fdb26 	beq	r9,zero,f2b4 <__alt_data_end+0xfc00f2b4>
    f348:	003ff206 	br	f314 <__alt_data_end+0xfc00f314>
    f34c:	313fe336 	bltu	r6,r4,f2dc <__alt_data_end+0xfc00f2dc>
    f350:	21bff936 	bltu	r4,r6,f338 <__alt_data_end+0xfc00f338>
    f354:	0005883a 	mov	r2,zero
    f358:	003feb06 	br	f308 <__alt_data_end+0xfc00f308>

0000f35c <__ledf2>:
    f35c:	f811883a 	mov	r8,ra
    f360:	0000ac80 	call	ac8 <_mcount>
    f364:	403f883a 	mov	ra,r8
    f368:	2804d53a 	srli	r2,r5,20
    f36c:	3810d53a 	srli	r8,r7,20
    f370:	00c00434 	movhi	r3,16
    f374:	18ffffc4 	addi	r3,r3,-1
    f378:	1081ffcc 	andi	r2,r2,2047
    f37c:	0241ffc4 	movi	r9,2047
    f380:	28d4703a 	and	r10,r5,r3
    f384:	4201ffcc 	andi	r8,r8,2047
    f388:	38c6703a 	and	r3,r7,r3
    f38c:	280ad7fa 	srli	r5,r5,31
    f390:	380ed7fa 	srli	r7,r7,31
    f394:	12402126 	beq	r2,r9,f41c <__ledf2+0xc0>
    f398:	0241ffc4 	movi	r9,2047
    f39c:	42401526 	beq	r8,r9,f3f4 <__ledf2+0x98>
    f3a0:	10000a1e 	bne	r2,zero,f3cc <__ledf2+0x70>
    f3a4:	2296b03a 	or	r11,r4,r10
    f3a8:	5813003a 	cmpeq	r9,r11,zero
    f3ac:	29403fcc 	andi	r5,r5,255
    f3b0:	40000b1e 	bne	r8,zero,f3e0 <__ledf2+0x84>
    f3b4:	30d8b03a 	or	r12,r6,r3
    f3b8:	6000091e 	bne	r12,zero,f3e0 <__ledf2+0x84>
    f3bc:	0005883a 	mov	r2,zero
    f3c0:	58000b26 	beq	r11,zero,f3f0 <__ledf2+0x94>
    f3c4:	28000926 	beq	r5,zero,f3ec <__ledf2+0x90>
    f3c8:	00001206 	br	f414 <__ledf2+0xb8>
    f3cc:	29403fcc 	andi	r5,r5,255
    f3d0:	40000c1e 	bne	r8,zero,f404 <__ledf2+0xa8>
    f3d4:	30d2b03a 	or	r9,r6,r3
    f3d8:	483ffa26 	beq	r9,zero,f3c4 <__alt_data_end+0xfc00f3c4>
    f3dc:	0013883a 	mov	r9,zero
    f3e0:	39c03fcc 	andi	r7,r7,255
    f3e4:	48000826 	beq	r9,zero,f408 <__ledf2+0xac>
    f3e8:	38000a26 	beq	r7,zero,f414 <__ledf2+0xb8>
    f3ec:	00800044 	movi	r2,1
    f3f0:	f800283a 	ret
    f3f4:	30d2b03a 	or	r9,r6,r3
    f3f8:	483fe926 	beq	r9,zero,f3a0 <__alt_data_end+0xfc00f3a0>
    f3fc:	00800084 	movi	r2,2
    f400:	f800283a 	ret
    f404:	39c03fcc 	andi	r7,r7,255
    f408:	397fee1e 	bne	r7,r5,f3c4 <__alt_data_end+0xfc00f3c4>
    f40c:	4080070e 	bge	r8,r2,f42c <__ledf2+0xd0>
    f410:	383ff626 	beq	r7,zero,f3ec <__alt_data_end+0xfc00f3ec>
    f414:	00bfffc4 	movi	r2,-1
    f418:	003ff506 	br	f3f0 <__alt_data_end+0xfc00f3f0>
    f41c:	2292b03a 	or	r9,r4,r10
    f420:	483fdd26 	beq	r9,zero,f398 <__alt_data_end+0xfc00f398>
    f424:	00800084 	movi	r2,2
    f428:	003ff506 	br	f400 <__alt_data_end+0xfc00f400>
    f42c:	123fee16 	blt	r2,r8,f3e8 <__alt_data_end+0xfc00f3e8>
    f430:	1abfe436 	bltu	r3,r10,f3c4 <__alt_data_end+0xfc00f3c4>
    f434:	50c00326 	beq	r10,r3,f444 <__ledf2+0xe8>
    f438:	50c0042e 	bgeu	r10,r3,f44c <__ledf2+0xf0>
    f43c:	283feb1e 	bne	r5,zero,f3ec <__alt_data_end+0xfc00f3ec>
    f440:	003ff406 	br	f414 <__alt_data_end+0xfc00f414>
    f444:	313fdf36 	bltu	r6,r4,f3c4 <__alt_data_end+0xfc00f3c4>
    f448:	21bffc36 	bltu	r4,r6,f43c <__alt_data_end+0xfc00f43c>
    f44c:	0005883a 	mov	r2,zero
    f450:	003fe706 	br	f3f0 <__alt_data_end+0xfc00f3f0>

0000f454 <__muldf3>:
    f454:	f811883a 	mov	r8,ra
    f458:	0000ac80 	call	ac8 <_mcount>
    f45c:	403f883a 	mov	ra,r8
    f460:	defff304 	addi	sp,sp,-52
    f464:	dfc00c15 	stw	ra,48(sp)
    f468:	df000b15 	stw	fp,44(sp)
    f46c:	ddc00a15 	stw	r23,40(sp)
    f470:	dd800915 	stw	r22,36(sp)
    f474:	dd400815 	stw	r21,32(sp)
    f478:	dd000715 	stw	r20,28(sp)
    f47c:	dcc00615 	stw	r19,24(sp)
    f480:	dc800515 	stw	r18,20(sp)
    f484:	dc400415 	stw	r17,16(sp)
    f488:	dc000315 	stw	r16,12(sp)
    f48c:	2804d53a 	srli	r2,r5,20
    f490:	282cd7fa 	srli	r22,r5,31
    f494:	04000434 	movhi	r16,16
    f498:	843fffc4 	addi	r16,r16,-1
    f49c:	1481ffcc 	andi	r18,r2,2047
    f4a0:	2c20703a 	and	r16,r5,r16
    f4a4:	b02b883a 	mov	r21,r22
    f4a8:	b2403fcc 	andi	r9,r22,255
    f4ac:	90006026 	beq	r18,zero,f630 <__muldf3+0x1dc>
    f4b0:	0081ffc4 	movi	r2,2047
    f4b4:	2029883a 	mov	r20,r4
    f4b8:	90803626 	beq	r18,r2,f594 <__muldf3+0x140>
    f4bc:	80800434 	orhi	r2,r16,16
    f4c0:	100490fa 	slli	r2,r2,3
    f4c4:	2020d77a 	srli	r16,r4,29
    f4c8:	202890fa 	slli	r20,r4,3
    f4cc:	94bf0044 	addi	r18,r18,-1023
    f4d0:	80a0b03a 	or	r16,r16,r2
    f4d4:	0027883a 	mov	r19,zero
    f4d8:	0039883a 	mov	fp,zero
    f4dc:	3804d53a 	srli	r2,r7,20
    f4e0:	382ed7fa 	srli	r23,r7,31
    f4e4:	04400434 	movhi	r17,16
    f4e8:	8c7fffc4 	addi	r17,r17,-1
    f4ec:	1081ffcc 	andi	r2,r2,2047
    f4f0:	3011883a 	mov	r8,r6
    f4f4:	3c62703a 	and	r17,r7,r17
    f4f8:	ba803fcc 	andi	r10,r23,255
    f4fc:	10006d26 	beq	r2,zero,f6b4 <__muldf3+0x260>
    f500:	00c1ffc4 	movi	r3,2047
    f504:	10c06526 	beq	r2,r3,f69c <__muldf3+0x248>
    f508:	88c00434 	orhi	r3,r17,16
    f50c:	180690fa 	slli	r3,r3,3
    f510:	3022d77a 	srli	r17,r6,29
    f514:	301090fa 	slli	r8,r6,3
    f518:	10bf0044 	addi	r2,r2,-1023
    f51c:	88e2b03a 	or	r17,r17,r3
    f520:	000b883a 	mov	r5,zero
    f524:	9085883a 	add	r2,r18,r2
    f528:	2cc8b03a 	or	r4,r5,r19
    f52c:	00c003c4 	movi	r3,15
    f530:	bdacf03a 	xor	r22,r23,r22
    f534:	12c00044 	addi	r11,r2,1
    f538:	19009936 	bltu	r3,r4,f7a0 <__muldf3+0x34c>
    f53c:	200890ba 	slli	r4,r4,2
    f540:	00c00074 	movhi	r3,1
    f544:	18fd5504 	addi	r3,r3,-2732
    f548:	20c9883a 	add	r4,r4,r3
    f54c:	20c00017 	ldw	r3,0(r4)
    f550:	1800683a 	jmp	r3
    f554:	0000f7a0 	cmpeqi	zero,zero,990
    f558:	0000f5b4 	movhi	zero,982
    f55c:	0000f5b4 	movhi	zero,982
    f560:	0000f5b0 	cmpltui	zero,zero,982
    f564:	0000f77c 	xorhi	zero,zero,989
    f568:	0000f77c 	xorhi	zero,zero,989
    f56c:	0000f764 	muli	zero,zero,989
    f570:	0000f5b0 	cmpltui	zero,zero,982
    f574:	0000f77c 	xorhi	zero,zero,989
    f578:	0000f764 	muli	zero,zero,989
    f57c:	0000f77c 	xorhi	zero,zero,989
    f580:	0000f5b0 	cmpltui	zero,zero,982
    f584:	0000f78c 	andi	zero,zero,990
    f588:	0000f78c 	andi	zero,zero,990
    f58c:	0000f78c 	andi	zero,zero,990
    f590:	0000f9a8 	cmpgeui	zero,zero,998
    f594:	2404b03a 	or	r2,r4,r16
    f598:	10006f1e 	bne	r2,zero,f758 <__muldf3+0x304>
    f59c:	04c00204 	movi	r19,8
    f5a0:	0021883a 	mov	r16,zero
    f5a4:	0029883a 	mov	r20,zero
    f5a8:	07000084 	movi	fp,2
    f5ac:	003fcb06 	br	f4dc <__alt_data_end+0xfc00f4dc>
    f5b0:	502d883a 	mov	r22,r10
    f5b4:	00800084 	movi	r2,2
    f5b8:	28805726 	beq	r5,r2,f718 <__muldf3+0x2c4>
    f5bc:	008000c4 	movi	r2,3
    f5c0:	28816626 	beq	r5,r2,fb5c <__muldf3+0x708>
    f5c4:	00800044 	movi	r2,1
    f5c8:	2881411e 	bne	r5,r2,fad0 <__muldf3+0x67c>
    f5cc:	b02b883a 	mov	r21,r22
    f5d0:	0005883a 	mov	r2,zero
    f5d4:	000b883a 	mov	r5,zero
    f5d8:	0029883a 	mov	r20,zero
    f5dc:	1004953a 	slli	r2,r2,20
    f5e0:	a8c03fcc 	andi	r3,r21,255
    f5e4:	04400434 	movhi	r17,16
    f5e8:	8c7fffc4 	addi	r17,r17,-1
    f5ec:	180697fa 	slli	r3,r3,31
    f5f0:	2c4a703a 	and	r5,r5,r17
    f5f4:	288ab03a 	or	r5,r5,r2
    f5f8:	28c6b03a 	or	r3,r5,r3
    f5fc:	a005883a 	mov	r2,r20
    f600:	dfc00c17 	ldw	ra,48(sp)
    f604:	df000b17 	ldw	fp,44(sp)
    f608:	ddc00a17 	ldw	r23,40(sp)
    f60c:	dd800917 	ldw	r22,36(sp)
    f610:	dd400817 	ldw	r21,32(sp)
    f614:	dd000717 	ldw	r20,28(sp)
    f618:	dcc00617 	ldw	r19,24(sp)
    f61c:	dc800517 	ldw	r18,20(sp)
    f620:	dc400417 	ldw	r17,16(sp)
    f624:	dc000317 	ldw	r16,12(sp)
    f628:	dec00d04 	addi	sp,sp,52
    f62c:	f800283a 	ret
    f630:	2404b03a 	or	r2,r4,r16
    f634:	2027883a 	mov	r19,r4
    f638:	10004226 	beq	r2,zero,f744 <__muldf3+0x2f0>
    f63c:	8000fc26 	beq	r16,zero,fa30 <__muldf3+0x5dc>
    f640:	8009883a 	mov	r4,r16
    f644:	d9800215 	stw	r6,8(sp)
    f648:	d9c00015 	stw	r7,0(sp)
    f64c:	da400115 	stw	r9,4(sp)
    f650:	00106a80 	call	106a8 <__clzsi2>
    f654:	d9800217 	ldw	r6,8(sp)
    f658:	d9c00017 	ldw	r7,0(sp)
    f65c:	da400117 	ldw	r9,4(sp)
    f660:	113ffd44 	addi	r4,r2,-11
    f664:	00c00704 	movi	r3,28
    f668:	1900ed16 	blt	r3,r4,fa20 <__muldf3+0x5cc>
    f66c:	00c00744 	movi	r3,29
    f670:	147ffe04 	addi	r17,r2,-8
    f674:	1907c83a 	sub	r3,r3,r4
    f678:	8460983a 	sll	r16,r16,r17
    f67c:	98c6d83a 	srl	r3,r19,r3
    f680:	9c68983a 	sll	r20,r19,r17
    f684:	1c20b03a 	or	r16,r3,r16
    f688:	1080fcc4 	addi	r2,r2,1011
    f68c:	00a5c83a 	sub	r18,zero,r2
    f690:	0027883a 	mov	r19,zero
    f694:	0039883a 	mov	fp,zero
    f698:	003f9006 	br	f4dc <__alt_data_end+0xfc00f4dc>
    f69c:	3446b03a 	or	r3,r6,r17
    f6a0:	1800261e 	bne	r3,zero,f73c <__muldf3+0x2e8>
    f6a4:	0023883a 	mov	r17,zero
    f6a8:	0011883a 	mov	r8,zero
    f6ac:	01400084 	movi	r5,2
    f6b0:	003f9c06 	br	f524 <__alt_data_end+0xfc00f524>
    f6b4:	3446b03a 	or	r3,r6,r17
    f6b8:	18001c26 	beq	r3,zero,f72c <__muldf3+0x2d8>
    f6bc:	8800ce26 	beq	r17,zero,f9f8 <__muldf3+0x5a4>
    f6c0:	8809883a 	mov	r4,r17
    f6c4:	d9800215 	stw	r6,8(sp)
    f6c8:	da400115 	stw	r9,4(sp)
    f6cc:	da800015 	stw	r10,0(sp)
    f6d0:	00106a80 	call	106a8 <__clzsi2>
    f6d4:	d9800217 	ldw	r6,8(sp)
    f6d8:	da400117 	ldw	r9,4(sp)
    f6dc:	da800017 	ldw	r10,0(sp)
    f6e0:	113ffd44 	addi	r4,r2,-11
    f6e4:	00c00704 	movi	r3,28
    f6e8:	1900bf16 	blt	r3,r4,f9e8 <__muldf3+0x594>
    f6ec:	00c00744 	movi	r3,29
    f6f0:	123ffe04 	addi	r8,r2,-8
    f6f4:	1907c83a 	sub	r3,r3,r4
    f6f8:	8a22983a 	sll	r17,r17,r8
    f6fc:	30c6d83a 	srl	r3,r6,r3
    f700:	3210983a 	sll	r8,r6,r8
    f704:	1c62b03a 	or	r17,r3,r17
    f708:	1080fcc4 	addi	r2,r2,1011
    f70c:	0085c83a 	sub	r2,zero,r2
    f710:	000b883a 	mov	r5,zero
    f714:	003f8306 	br	f524 <__alt_data_end+0xfc00f524>
    f718:	b02b883a 	mov	r21,r22
    f71c:	0081ffc4 	movi	r2,2047
    f720:	000b883a 	mov	r5,zero
    f724:	0029883a 	mov	r20,zero
    f728:	003fac06 	br	f5dc <__alt_data_end+0xfc00f5dc>
    f72c:	0023883a 	mov	r17,zero
    f730:	0011883a 	mov	r8,zero
    f734:	01400044 	movi	r5,1
    f738:	003f7a06 	br	f524 <__alt_data_end+0xfc00f524>
    f73c:	014000c4 	movi	r5,3
    f740:	003f7806 	br	f524 <__alt_data_end+0xfc00f524>
    f744:	04c00104 	movi	r19,4
    f748:	0021883a 	mov	r16,zero
    f74c:	0029883a 	mov	r20,zero
    f750:	07000044 	movi	fp,1
    f754:	003f6106 	br	f4dc <__alt_data_end+0xfc00f4dc>
    f758:	04c00304 	movi	r19,12
    f75c:	070000c4 	movi	fp,3
    f760:	003f5e06 	br	f4dc <__alt_data_end+0xfc00f4dc>
    f764:	01400434 	movhi	r5,16
    f768:	002b883a 	mov	r21,zero
    f76c:	297fffc4 	addi	r5,r5,-1
    f770:	053fffc4 	movi	r20,-1
    f774:	0081ffc4 	movi	r2,2047
    f778:	003f9806 	br	f5dc <__alt_data_end+0xfc00f5dc>
    f77c:	8023883a 	mov	r17,r16
    f780:	a011883a 	mov	r8,r20
    f784:	e00b883a 	mov	r5,fp
    f788:	003f8a06 	br	f5b4 <__alt_data_end+0xfc00f5b4>
    f78c:	8023883a 	mov	r17,r16
    f790:	a011883a 	mov	r8,r20
    f794:	482d883a 	mov	r22,r9
    f798:	e00b883a 	mov	r5,fp
    f79c:	003f8506 	br	f5b4 <__alt_data_end+0xfc00f5b4>
    f7a0:	a00ad43a 	srli	r5,r20,16
    f7a4:	401ad43a 	srli	r13,r8,16
    f7a8:	a53fffcc 	andi	r20,r20,65535
    f7ac:	423fffcc 	andi	r8,r8,65535
    f7b0:	4519383a 	mul	r12,r8,r20
    f7b4:	4147383a 	mul	r3,r8,r5
    f7b8:	6d09383a 	mul	r4,r13,r20
    f7bc:	600cd43a 	srli	r6,r12,16
    f7c0:	2b5d383a 	mul	r14,r5,r13
    f7c4:	20c9883a 	add	r4,r4,r3
    f7c8:	310d883a 	add	r6,r6,r4
    f7cc:	30c0022e 	bgeu	r6,r3,f7d8 <__muldf3+0x384>
    f7d0:	00c00074 	movhi	r3,1
    f7d4:	70dd883a 	add	r14,r14,r3
    f7d8:	8826d43a 	srli	r19,r17,16
    f7dc:	8bffffcc 	andi	r15,r17,65535
    f7e0:	7d23383a 	mul	r17,r15,r20
    f7e4:	7949383a 	mul	r4,r15,r5
    f7e8:	9d29383a 	mul	r20,r19,r20
    f7ec:	8814d43a 	srli	r10,r17,16
    f7f0:	3012943a 	slli	r9,r6,16
    f7f4:	a129883a 	add	r20,r20,r4
    f7f8:	633fffcc 	andi	r12,r12,65535
    f7fc:	5515883a 	add	r10,r10,r20
    f800:	3006d43a 	srli	r3,r6,16
    f804:	4b13883a 	add	r9,r9,r12
    f808:	2ccb383a 	mul	r5,r5,r19
    f80c:	5100022e 	bgeu	r10,r4,f818 <__muldf3+0x3c4>
    f810:	01000074 	movhi	r4,1
    f814:	290b883a 	add	r5,r5,r4
    f818:	802ad43a 	srli	r21,r16,16
    f81c:	843fffcc 	andi	r16,r16,65535
    f820:	440d383a 	mul	r6,r8,r16
    f824:	4565383a 	mul	r18,r8,r21
    f828:	8349383a 	mul	r4,r16,r13
    f82c:	500e943a 	slli	r7,r10,16
    f830:	3010d43a 	srli	r8,r6,16
    f834:	5028d43a 	srli	r20,r10,16
    f838:	2489883a 	add	r4,r4,r18
    f83c:	8abfffcc 	andi	r10,r17,65535
    f840:	3a95883a 	add	r10,r7,r10
    f844:	4119883a 	add	r12,r8,r4
    f848:	a169883a 	add	r20,r20,r5
    f84c:	1a87883a 	add	r3,r3,r10
    f850:	6d5b383a 	mul	r13,r13,r21
    f854:	6480022e 	bgeu	r12,r18,f860 <__muldf3+0x40c>
    f858:	01000074 	movhi	r4,1
    f85c:	691b883a 	add	r13,r13,r4
    f860:	7c25383a 	mul	r18,r15,r16
    f864:	7d4b383a 	mul	r5,r15,r21
    f868:	84cf383a 	mul	r7,r16,r19
    f86c:	901ed43a 	srli	r15,r18,16
    f870:	6008d43a 	srli	r4,r12,16
    f874:	6010943a 	slli	r8,r12,16
    f878:	394f883a 	add	r7,r7,r5
    f87c:	333fffcc 	andi	r12,r6,65535
    f880:	79df883a 	add	r15,r15,r7
    f884:	235b883a 	add	r13,r4,r13
    f888:	9d63383a 	mul	r17,r19,r21
    f88c:	4309883a 	add	r4,r8,r12
    f890:	7940022e 	bgeu	r15,r5,f89c <__muldf3+0x448>
    f894:	01400074 	movhi	r5,1
    f898:	8963883a 	add	r17,r17,r5
    f89c:	780a943a 	slli	r5,r15,16
    f8a0:	91bfffcc 	andi	r6,r18,65535
    f8a4:	70c7883a 	add	r3,r14,r3
    f8a8:	298d883a 	add	r6,r5,r6
    f8ac:	1a8f803a 	cmpltu	r7,r3,r10
    f8b0:	350b883a 	add	r5,r6,r20
    f8b4:	20c7883a 	add	r3,r4,r3
    f8b8:	3955883a 	add	r10,r7,r5
    f8bc:	1909803a 	cmpltu	r4,r3,r4
    f8c0:	6a91883a 	add	r8,r13,r10
    f8c4:	780cd43a 	srli	r6,r15,16
    f8c8:	2219883a 	add	r12,r4,r8
    f8cc:	2d0b803a 	cmpltu	r5,r5,r20
    f8d0:	51cf803a 	cmpltu	r7,r10,r7
    f8d4:	29ceb03a 	or	r7,r5,r7
    f8d8:	4351803a 	cmpltu	r8,r8,r13
    f8dc:	610b803a 	cmpltu	r5,r12,r4
    f8e0:	4148b03a 	or	r4,r8,r5
    f8e4:	398f883a 	add	r7,r7,r6
    f8e8:	3909883a 	add	r4,r7,r4
    f8ec:	1810927a 	slli	r8,r3,9
    f8f0:	2449883a 	add	r4,r4,r17
    f8f4:	2008927a 	slli	r4,r4,9
    f8f8:	6022d5fa 	srli	r17,r12,23
    f8fc:	1806d5fa 	srli	r3,r3,23
    f900:	4252b03a 	or	r9,r8,r9
    f904:	600a927a 	slli	r5,r12,9
    f908:	4810c03a 	cmpne	r8,r9,zero
    f90c:	2462b03a 	or	r17,r4,r17
    f910:	40c6b03a 	or	r3,r8,r3
    f914:	8900402c 	andhi	r4,r17,256
    f918:	1950b03a 	or	r8,r3,r5
    f91c:	20000726 	beq	r4,zero,f93c <__muldf3+0x4e8>
    f920:	4006d07a 	srli	r3,r8,1
    f924:	880497fa 	slli	r2,r17,31
    f928:	4200004c 	andi	r8,r8,1
    f92c:	8822d07a 	srli	r17,r17,1
    f930:	1a10b03a 	or	r8,r3,r8
    f934:	1210b03a 	or	r8,r2,r8
    f938:	5805883a 	mov	r2,r11
    f93c:	1140ffc4 	addi	r5,r2,1023
    f940:	0140440e 	bge	zero,r5,fa54 <__muldf3+0x600>
    f944:	40c001cc 	andi	r3,r8,7
    f948:	18000726 	beq	r3,zero,f968 <__muldf3+0x514>
    f94c:	40c003cc 	andi	r3,r8,15
    f950:	01000104 	movi	r4,4
    f954:	19000426 	beq	r3,r4,f968 <__muldf3+0x514>
    f958:	4107883a 	add	r3,r8,r4
    f95c:	1a11803a 	cmpltu	r8,r3,r8
    f960:	8a23883a 	add	r17,r17,r8
    f964:	1811883a 	mov	r8,r3
    f968:	88c0402c 	andhi	r3,r17,256
    f96c:	18000426 	beq	r3,zero,f980 <__muldf3+0x52c>
    f970:	11410004 	addi	r5,r2,1024
    f974:	00bfc034 	movhi	r2,65280
    f978:	10bfffc4 	addi	r2,r2,-1
    f97c:	88a2703a 	and	r17,r17,r2
    f980:	0081ff84 	movi	r2,2046
    f984:	117f6416 	blt	r2,r5,f718 <__alt_data_end+0xfc00f718>
    f988:	8828977a 	slli	r20,r17,29
    f98c:	4010d0fa 	srli	r8,r8,3
    f990:	8822927a 	slli	r17,r17,9
    f994:	2881ffcc 	andi	r2,r5,2047
    f998:	a228b03a 	or	r20,r20,r8
    f99c:	880ad33a 	srli	r5,r17,12
    f9a0:	b02b883a 	mov	r21,r22
    f9a4:	003f0d06 	br	f5dc <__alt_data_end+0xfc00f5dc>
    f9a8:	8080022c 	andhi	r2,r16,8
    f9ac:	10000926 	beq	r2,zero,f9d4 <__muldf3+0x580>
    f9b0:	8880022c 	andhi	r2,r17,8
    f9b4:	1000071e 	bne	r2,zero,f9d4 <__muldf3+0x580>
    f9b8:	00800434 	movhi	r2,16
    f9bc:	89400234 	orhi	r5,r17,8
    f9c0:	10bfffc4 	addi	r2,r2,-1
    f9c4:	b82b883a 	mov	r21,r23
    f9c8:	288a703a 	and	r5,r5,r2
    f9cc:	4029883a 	mov	r20,r8
    f9d0:	003f6806 	br	f774 <__alt_data_end+0xfc00f774>
    f9d4:	00800434 	movhi	r2,16
    f9d8:	81400234 	orhi	r5,r16,8
    f9dc:	10bfffc4 	addi	r2,r2,-1
    f9e0:	288a703a 	and	r5,r5,r2
    f9e4:	003f6306 	br	f774 <__alt_data_end+0xfc00f774>
    f9e8:	147ff604 	addi	r17,r2,-40
    f9ec:	3462983a 	sll	r17,r6,r17
    f9f0:	0011883a 	mov	r8,zero
    f9f4:	003f4406 	br	f708 <__alt_data_end+0xfc00f708>
    f9f8:	3009883a 	mov	r4,r6
    f9fc:	d9800215 	stw	r6,8(sp)
    fa00:	da400115 	stw	r9,4(sp)
    fa04:	da800015 	stw	r10,0(sp)
    fa08:	00106a80 	call	106a8 <__clzsi2>
    fa0c:	10800804 	addi	r2,r2,32
    fa10:	da800017 	ldw	r10,0(sp)
    fa14:	da400117 	ldw	r9,4(sp)
    fa18:	d9800217 	ldw	r6,8(sp)
    fa1c:	003f3006 	br	f6e0 <__alt_data_end+0xfc00f6e0>
    fa20:	143ff604 	addi	r16,r2,-40
    fa24:	9c20983a 	sll	r16,r19,r16
    fa28:	0029883a 	mov	r20,zero
    fa2c:	003f1606 	br	f688 <__alt_data_end+0xfc00f688>
    fa30:	d9800215 	stw	r6,8(sp)
    fa34:	d9c00015 	stw	r7,0(sp)
    fa38:	da400115 	stw	r9,4(sp)
    fa3c:	00106a80 	call	106a8 <__clzsi2>
    fa40:	10800804 	addi	r2,r2,32
    fa44:	da400117 	ldw	r9,4(sp)
    fa48:	d9c00017 	ldw	r7,0(sp)
    fa4c:	d9800217 	ldw	r6,8(sp)
    fa50:	003f0306 	br	f660 <__alt_data_end+0xfc00f660>
    fa54:	00c00044 	movi	r3,1
    fa58:	1947c83a 	sub	r3,r3,r5
    fa5c:	00800e04 	movi	r2,56
    fa60:	10feda16 	blt	r2,r3,f5cc <__alt_data_end+0xfc00f5cc>
    fa64:	008007c4 	movi	r2,31
    fa68:	10c01b16 	blt	r2,r3,fad8 <__muldf3+0x684>
    fa6c:	00800804 	movi	r2,32
    fa70:	10c5c83a 	sub	r2,r2,r3
    fa74:	888a983a 	sll	r5,r17,r2
    fa78:	40c8d83a 	srl	r4,r8,r3
    fa7c:	4084983a 	sll	r2,r8,r2
    fa80:	88e2d83a 	srl	r17,r17,r3
    fa84:	2906b03a 	or	r3,r5,r4
    fa88:	1004c03a 	cmpne	r2,r2,zero
    fa8c:	1886b03a 	or	r3,r3,r2
    fa90:	188001cc 	andi	r2,r3,7
    fa94:	10000726 	beq	r2,zero,fab4 <__muldf3+0x660>
    fa98:	188003cc 	andi	r2,r3,15
    fa9c:	01000104 	movi	r4,4
    faa0:	11000426 	beq	r2,r4,fab4 <__muldf3+0x660>
    faa4:	1805883a 	mov	r2,r3
    faa8:	10c00104 	addi	r3,r2,4
    faac:	1885803a 	cmpltu	r2,r3,r2
    fab0:	88a3883a 	add	r17,r17,r2
    fab4:	8880202c 	andhi	r2,r17,128
    fab8:	10001c26 	beq	r2,zero,fb2c <__muldf3+0x6d8>
    fabc:	b02b883a 	mov	r21,r22
    fac0:	00800044 	movi	r2,1
    fac4:	000b883a 	mov	r5,zero
    fac8:	0029883a 	mov	r20,zero
    facc:	003ec306 	br	f5dc <__alt_data_end+0xfc00f5dc>
    fad0:	5805883a 	mov	r2,r11
    fad4:	003f9906 	br	f93c <__alt_data_end+0xfc00f93c>
    fad8:	00bff844 	movi	r2,-31
    fadc:	1145c83a 	sub	r2,r2,r5
    fae0:	8888d83a 	srl	r4,r17,r2
    fae4:	00800804 	movi	r2,32
    fae8:	18801a26 	beq	r3,r2,fb54 <__muldf3+0x700>
    faec:	00801004 	movi	r2,64
    faf0:	10c5c83a 	sub	r2,r2,r3
    faf4:	8884983a 	sll	r2,r17,r2
    faf8:	1204b03a 	or	r2,r2,r8
    fafc:	1004c03a 	cmpne	r2,r2,zero
    fb00:	2084b03a 	or	r2,r4,r2
    fb04:	144001cc 	andi	r17,r2,7
    fb08:	88000d1e 	bne	r17,zero,fb40 <__muldf3+0x6ec>
    fb0c:	000b883a 	mov	r5,zero
    fb10:	1028d0fa 	srli	r20,r2,3
    fb14:	b02b883a 	mov	r21,r22
    fb18:	0005883a 	mov	r2,zero
    fb1c:	a468b03a 	or	r20,r20,r17
    fb20:	003eae06 	br	f5dc <__alt_data_end+0xfc00f5dc>
    fb24:	1007883a 	mov	r3,r2
    fb28:	0023883a 	mov	r17,zero
    fb2c:	880a927a 	slli	r5,r17,9
    fb30:	1805883a 	mov	r2,r3
    fb34:	8822977a 	slli	r17,r17,29
    fb38:	280ad33a 	srli	r5,r5,12
    fb3c:	003ff406 	br	fb10 <__alt_data_end+0xfc00fb10>
    fb40:	10c003cc 	andi	r3,r2,15
    fb44:	01000104 	movi	r4,4
    fb48:	193ff626 	beq	r3,r4,fb24 <__alt_data_end+0xfc00fb24>
    fb4c:	0023883a 	mov	r17,zero
    fb50:	003fd506 	br	faa8 <__alt_data_end+0xfc00faa8>
    fb54:	0005883a 	mov	r2,zero
    fb58:	003fe706 	br	faf8 <__alt_data_end+0xfc00faf8>
    fb5c:	00800434 	movhi	r2,16
    fb60:	89400234 	orhi	r5,r17,8
    fb64:	10bfffc4 	addi	r2,r2,-1
    fb68:	b02b883a 	mov	r21,r22
    fb6c:	288a703a 	and	r5,r5,r2
    fb70:	4029883a 	mov	r20,r8
    fb74:	003eff06 	br	f774 <__alt_data_end+0xfc00f774>

0000fb78 <__subdf3>:
    fb78:	f811883a 	mov	r8,ra
    fb7c:	0000ac80 	call	ac8 <_mcount>
    fb80:	403f883a 	mov	ra,r8
    fb84:	defffb04 	addi	sp,sp,-20
    fb88:	dfc00415 	stw	ra,16(sp)
    fb8c:	dcc00315 	stw	r19,12(sp)
    fb90:	dc800215 	stw	r18,8(sp)
    fb94:	dc400115 	stw	r17,4(sp)
    fb98:	dc000015 	stw	r16,0(sp)
    fb9c:	02000434 	movhi	r8,16
    fba0:	423fffc4 	addi	r8,r8,-1
    fba4:	2a14703a 	and	r10,r5,r8
    fba8:	3812d53a 	srli	r9,r7,20
    fbac:	3a10703a 	and	r8,r7,r8
    fbb0:	2820d53a 	srli	r16,r5,20
    fbb4:	2006d77a 	srli	r3,r4,29
    fbb8:	3004d77a 	srli	r2,r6,29
    fbbc:	501490fa 	slli	r10,r10,3
    fbc0:	401090fa 	slli	r8,r8,3
    fbc4:	202290fa 	slli	r17,r4,3
    fbc8:	4a41ffcc 	andi	r9,r9,2047
    fbcc:	0101ffc4 	movi	r4,2047
    fbd0:	2824d7fa 	srli	r18,r5,31
    fbd4:	8401ffcc 	andi	r16,r16,2047
    fbd8:	50c6b03a 	or	r3,r10,r3
    fbdc:	380ed7fa 	srli	r7,r7,31
    fbe0:	408ab03a 	or	r5,r8,r2
    fbe4:	300c90fa 	slli	r6,r6,3
    fbe8:	49009626 	beq	r9,r4,fe44 <__subdf3+0x2cc>
    fbec:	39c0005c 	xori	r7,r7,1
    fbf0:	8245c83a 	sub	r2,r16,r9
    fbf4:	3c807426 	beq	r7,r18,fdc8 <__subdf3+0x250>
    fbf8:	0080af0e 	bge	zero,r2,feb8 <__subdf3+0x340>
    fbfc:	48002a1e 	bne	r9,zero,fca8 <__subdf3+0x130>
    fc00:	2988b03a 	or	r4,r5,r6
    fc04:	20009a1e 	bne	r4,zero,fe70 <__subdf3+0x2f8>
    fc08:	888001cc 	andi	r2,r17,7
    fc0c:	10000726 	beq	r2,zero,fc2c <__subdf3+0xb4>
    fc10:	888003cc 	andi	r2,r17,15
    fc14:	01000104 	movi	r4,4
    fc18:	11000426 	beq	r2,r4,fc2c <__subdf3+0xb4>
    fc1c:	890b883a 	add	r5,r17,r4
    fc20:	2c63803a 	cmpltu	r17,r5,r17
    fc24:	1c47883a 	add	r3,r3,r17
    fc28:	2823883a 	mov	r17,r5
    fc2c:	1880202c 	andhi	r2,r3,128
    fc30:	10005926 	beq	r2,zero,fd98 <__subdf3+0x220>
    fc34:	84000044 	addi	r16,r16,1
    fc38:	0081ffc4 	movi	r2,2047
    fc3c:	8080be26 	beq	r16,r2,ff38 <__subdf3+0x3c0>
    fc40:	017fe034 	movhi	r5,65408
    fc44:	297fffc4 	addi	r5,r5,-1
    fc48:	1946703a 	and	r3,r3,r5
    fc4c:	1804977a 	slli	r2,r3,29
    fc50:	1806927a 	slli	r3,r3,9
    fc54:	8822d0fa 	srli	r17,r17,3
    fc58:	8401ffcc 	andi	r16,r16,2047
    fc5c:	180ad33a 	srli	r5,r3,12
    fc60:	9100004c 	andi	r4,r18,1
    fc64:	1444b03a 	or	r2,r2,r17
    fc68:	80c1ffcc 	andi	r3,r16,2047
    fc6c:	1820953a 	slli	r16,r3,20
    fc70:	20c03fcc 	andi	r3,r4,255
    fc74:	180897fa 	slli	r4,r3,31
    fc78:	00c00434 	movhi	r3,16
    fc7c:	18ffffc4 	addi	r3,r3,-1
    fc80:	28c6703a 	and	r3,r5,r3
    fc84:	1c06b03a 	or	r3,r3,r16
    fc88:	1906b03a 	or	r3,r3,r4
    fc8c:	dfc00417 	ldw	ra,16(sp)
    fc90:	dcc00317 	ldw	r19,12(sp)
    fc94:	dc800217 	ldw	r18,8(sp)
    fc98:	dc400117 	ldw	r17,4(sp)
    fc9c:	dc000017 	ldw	r16,0(sp)
    fca0:	dec00504 	addi	sp,sp,20
    fca4:	f800283a 	ret
    fca8:	0101ffc4 	movi	r4,2047
    fcac:	813fd626 	beq	r16,r4,fc08 <__alt_data_end+0xfc00fc08>
    fcb0:	29402034 	orhi	r5,r5,128
    fcb4:	01000e04 	movi	r4,56
    fcb8:	2080a316 	blt	r4,r2,ff48 <__subdf3+0x3d0>
    fcbc:	010007c4 	movi	r4,31
    fcc0:	2080c616 	blt	r4,r2,ffdc <__subdf3+0x464>
    fcc4:	01000804 	movi	r4,32
    fcc8:	2089c83a 	sub	r4,r4,r2
    fccc:	2910983a 	sll	r8,r5,r4
    fcd0:	308ed83a 	srl	r7,r6,r2
    fcd4:	3108983a 	sll	r4,r6,r4
    fcd8:	2884d83a 	srl	r2,r5,r2
    fcdc:	41ccb03a 	or	r6,r8,r7
    fce0:	2008c03a 	cmpne	r4,r4,zero
    fce4:	310cb03a 	or	r6,r6,r4
    fce8:	898dc83a 	sub	r6,r17,r6
    fcec:	89a3803a 	cmpltu	r17,r17,r6
    fcf0:	1887c83a 	sub	r3,r3,r2
    fcf4:	1c47c83a 	sub	r3,r3,r17
    fcf8:	3023883a 	mov	r17,r6
    fcfc:	1880202c 	andhi	r2,r3,128
    fd00:	10002326 	beq	r2,zero,fd90 <__subdf3+0x218>
    fd04:	04c02034 	movhi	r19,128
    fd08:	9cffffc4 	addi	r19,r19,-1
    fd0c:	1ce6703a 	and	r19,r3,r19
    fd10:	98007a26 	beq	r19,zero,fefc <__subdf3+0x384>
    fd14:	9809883a 	mov	r4,r19
    fd18:	00106a80 	call	106a8 <__clzsi2>
    fd1c:	113ffe04 	addi	r4,r2,-8
    fd20:	00c007c4 	movi	r3,31
    fd24:	19007b16 	blt	r3,r4,ff14 <__subdf3+0x39c>
    fd28:	00800804 	movi	r2,32
    fd2c:	1105c83a 	sub	r2,r2,r4
    fd30:	8884d83a 	srl	r2,r17,r2
    fd34:	9906983a 	sll	r3,r19,r4
    fd38:	8922983a 	sll	r17,r17,r4
    fd3c:	10c4b03a 	or	r2,r2,r3
    fd40:	24007816 	blt	r4,r16,ff24 <__subdf3+0x3ac>
    fd44:	2421c83a 	sub	r16,r4,r16
    fd48:	80c00044 	addi	r3,r16,1
    fd4c:	010007c4 	movi	r4,31
    fd50:	20c09516 	blt	r4,r3,ffa8 <__subdf3+0x430>
    fd54:	01400804 	movi	r5,32
    fd58:	28cbc83a 	sub	r5,r5,r3
    fd5c:	88c8d83a 	srl	r4,r17,r3
    fd60:	8962983a 	sll	r17,r17,r5
    fd64:	114a983a 	sll	r5,r2,r5
    fd68:	10c6d83a 	srl	r3,r2,r3
    fd6c:	8804c03a 	cmpne	r2,r17,zero
    fd70:	290ab03a 	or	r5,r5,r4
    fd74:	28a2b03a 	or	r17,r5,r2
    fd78:	0021883a 	mov	r16,zero
    fd7c:	003fa206 	br	fc08 <__alt_data_end+0xfc00fc08>
    fd80:	2090b03a 	or	r8,r4,r2
    fd84:	40018e26 	beq	r8,zero,103c0 <__subdf3+0x848>
    fd88:	1007883a 	mov	r3,r2
    fd8c:	2023883a 	mov	r17,r4
    fd90:	888001cc 	andi	r2,r17,7
    fd94:	103f9e1e 	bne	r2,zero,fc10 <__alt_data_end+0xfc00fc10>
    fd98:	1804977a 	slli	r2,r3,29
    fd9c:	8822d0fa 	srli	r17,r17,3
    fda0:	1810d0fa 	srli	r8,r3,3
    fda4:	9100004c 	andi	r4,r18,1
    fda8:	1444b03a 	or	r2,r2,r17
    fdac:	00c1ffc4 	movi	r3,2047
    fdb0:	80c02826 	beq	r16,r3,fe54 <__subdf3+0x2dc>
    fdb4:	01400434 	movhi	r5,16
    fdb8:	297fffc4 	addi	r5,r5,-1
    fdbc:	80e0703a 	and	r16,r16,r3
    fdc0:	414a703a 	and	r5,r8,r5
    fdc4:	003fa806 	br	fc68 <__alt_data_end+0xfc00fc68>
    fdc8:	0080630e 	bge	zero,r2,ff58 <__subdf3+0x3e0>
    fdcc:	48003026 	beq	r9,zero,fe90 <__subdf3+0x318>
    fdd0:	0101ffc4 	movi	r4,2047
    fdd4:	813f8c26 	beq	r16,r4,fc08 <__alt_data_end+0xfc00fc08>
    fdd8:	29402034 	orhi	r5,r5,128
    fddc:	01000e04 	movi	r4,56
    fde0:	2080a90e 	bge	r4,r2,10088 <__subdf3+0x510>
    fde4:	298cb03a 	or	r6,r5,r6
    fde8:	3012c03a 	cmpne	r9,r6,zero
    fdec:	0005883a 	mov	r2,zero
    fdf0:	4c53883a 	add	r9,r9,r17
    fdf4:	4c63803a 	cmpltu	r17,r9,r17
    fdf8:	10c7883a 	add	r3,r2,r3
    fdfc:	88c7883a 	add	r3,r17,r3
    fe00:	4823883a 	mov	r17,r9
    fe04:	1880202c 	andhi	r2,r3,128
    fe08:	1000d026 	beq	r2,zero,1014c <__subdf3+0x5d4>
    fe0c:	84000044 	addi	r16,r16,1
    fe10:	0081ffc4 	movi	r2,2047
    fe14:	8080fe26 	beq	r16,r2,10210 <__subdf3+0x698>
    fe18:	00bfe034 	movhi	r2,65408
    fe1c:	10bfffc4 	addi	r2,r2,-1
    fe20:	1886703a 	and	r3,r3,r2
    fe24:	880ad07a 	srli	r5,r17,1
    fe28:	180497fa 	slli	r2,r3,31
    fe2c:	8900004c 	andi	r4,r17,1
    fe30:	2922b03a 	or	r17,r5,r4
    fe34:	1806d07a 	srli	r3,r3,1
    fe38:	1462b03a 	or	r17,r2,r17
    fe3c:	3825883a 	mov	r18,r7
    fe40:	003f7106 	br	fc08 <__alt_data_end+0xfc00fc08>
    fe44:	2984b03a 	or	r2,r5,r6
    fe48:	103f6826 	beq	r2,zero,fbec <__alt_data_end+0xfc00fbec>
    fe4c:	39c03fcc 	andi	r7,r7,255
    fe50:	003f6706 	br	fbf0 <__alt_data_end+0xfc00fbf0>
    fe54:	4086b03a 	or	r3,r8,r2
    fe58:	18015226 	beq	r3,zero,103a4 <__subdf3+0x82c>
    fe5c:	00c00434 	movhi	r3,16
    fe60:	41400234 	orhi	r5,r8,8
    fe64:	18ffffc4 	addi	r3,r3,-1
    fe68:	28ca703a 	and	r5,r5,r3
    fe6c:	003f7e06 	br	fc68 <__alt_data_end+0xfc00fc68>
    fe70:	10bfffc4 	addi	r2,r2,-1
    fe74:	1000491e 	bne	r2,zero,ff9c <__subdf3+0x424>
    fe78:	898fc83a 	sub	r7,r17,r6
    fe7c:	89e3803a 	cmpltu	r17,r17,r7
    fe80:	1947c83a 	sub	r3,r3,r5
    fe84:	1c47c83a 	sub	r3,r3,r17
    fe88:	3823883a 	mov	r17,r7
    fe8c:	003f9b06 	br	fcfc <__alt_data_end+0xfc00fcfc>
    fe90:	2988b03a 	or	r4,r5,r6
    fe94:	203f5c26 	beq	r4,zero,fc08 <__alt_data_end+0xfc00fc08>
    fe98:	10bfffc4 	addi	r2,r2,-1
    fe9c:	1000931e 	bne	r2,zero,100ec <__subdf3+0x574>
    fea0:	898d883a 	add	r6,r17,r6
    fea4:	3463803a 	cmpltu	r17,r6,r17
    fea8:	1947883a 	add	r3,r3,r5
    feac:	88c7883a 	add	r3,r17,r3
    feb0:	3023883a 	mov	r17,r6
    feb4:	003fd306 	br	fe04 <__alt_data_end+0xfc00fe04>
    feb8:	1000541e 	bne	r2,zero,1000c <__subdf3+0x494>
    febc:	80800044 	addi	r2,r16,1
    fec0:	1081ffcc 	andi	r2,r2,2047
    fec4:	01000044 	movi	r4,1
    fec8:	2080a20e 	bge	r4,r2,10154 <__subdf3+0x5dc>
    fecc:	8989c83a 	sub	r4,r17,r6
    fed0:	8905803a 	cmpltu	r2,r17,r4
    fed4:	1967c83a 	sub	r19,r3,r5
    fed8:	98a7c83a 	sub	r19,r19,r2
    fedc:	9880202c 	andhi	r2,r19,128
    fee0:	10006326 	beq	r2,zero,10070 <__subdf3+0x4f8>
    fee4:	3463c83a 	sub	r17,r6,r17
    fee8:	28c7c83a 	sub	r3,r5,r3
    feec:	344d803a 	cmpltu	r6,r6,r17
    fef0:	19a7c83a 	sub	r19,r3,r6
    fef4:	3825883a 	mov	r18,r7
    fef8:	983f861e 	bne	r19,zero,fd14 <__alt_data_end+0xfc00fd14>
    fefc:	8809883a 	mov	r4,r17
    ff00:	00106a80 	call	106a8 <__clzsi2>
    ff04:	10800804 	addi	r2,r2,32
    ff08:	113ffe04 	addi	r4,r2,-8
    ff0c:	00c007c4 	movi	r3,31
    ff10:	193f850e 	bge	r3,r4,fd28 <__alt_data_end+0xfc00fd28>
    ff14:	10bff604 	addi	r2,r2,-40
    ff18:	8884983a 	sll	r2,r17,r2
    ff1c:	0023883a 	mov	r17,zero
    ff20:	243f880e 	bge	r4,r16,fd44 <__alt_data_end+0xfc00fd44>
    ff24:	00ffe034 	movhi	r3,65408
    ff28:	18ffffc4 	addi	r3,r3,-1
    ff2c:	8121c83a 	sub	r16,r16,r4
    ff30:	10c6703a 	and	r3,r2,r3
    ff34:	003f3406 	br	fc08 <__alt_data_end+0xfc00fc08>
    ff38:	9100004c 	andi	r4,r18,1
    ff3c:	000b883a 	mov	r5,zero
    ff40:	0005883a 	mov	r2,zero
    ff44:	003f4806 	br	fc68 <__alt_data_end+0xfc00fc68>
    ff48:	298cb03a 	or	r6,r5,r6
    ff4c:	300cc03a 	cmpne	r6,r6,zero
    ff50:	0005883a 	mov	r2,zero
    ff54:	003f6406 	br	fce8 <__alt_data_end+0xfc00fce8>
    ff58:	10009a1e 	bne	r2,zero,101c4 <__subdf3+0x64c>
    ff5c:	82400044 	addi	r9,r16,1
    ff60:	4881ffcc 	andi	r2,r9,2047
    ff64:	02800044 	movi	r10,1
    ff68:	5080670e 	bge	r10,r2,10108 <__subdf3+0x590>
    ff6c:	0081ffc4 	movi	r2,2047
    ff70:	4880af26 	beq	r9,r2,10230 <__subdf3+0x6b8>
    ff74:	898d883a 	add	r6,r17,r6
    ff78:	1945883a 	add	r2,r3,r5
    ff7c:	3447803a 	cmpltu	r3,r6,r17
    ff80:	1887883a 	add	r3,r3,r2
    ff84:	182297fa 	slli	r17,r3,31
    ff88:	300cd07a 	srli	r6,r6,1
    ff8c:	1806d07a 	srli	r3,r3,1
    ff90:	4821883a 	mov	r16,r9
    ff94:	89a2b03a 	or	r17,r17,r6
    ff98:	003f1b06 	br	fc08 <__alt_data_end+0xfc00fc08>
    ff9c:	0101ffc4 	movi	r4,2047
    ffa0:	813f441e 	bne	r16,r4,fcb4 <__alt_data_end+0xfc00fcb4>
    ffa4:	003f1806 	br	fc08 <__alt_data_end+0xfc00fc08>
    ffa8:	843ff844 	addi	r16,r16,-31
    ffac:	01400804 	movi	r5,32
    ffb0:	1408d83a 	srl	r4,r2,r16
    ffb4:	19405026 	beq	r3,r5,100f8 <__subdf3+0x580>
    ffb8:	01401004 	movi	r5,64
    ffbc:	28c7c83a 	sub	r3,r5,r3
    ffc0:	10c4983a 	sll	r2,r2,r3
    ffc4:	88a2b03a 	or	r17,r17,r2
    ffc8:	8822c03a 	cmpne	r17,r17,zero
    ffcc:	2462b03a 	or	r17,r4,r17
    ffd0:	0007883a 	mov	r3,zero
    ffd4:	0021883a 	mov	r16,zero
    ffd8:	003f6d06 	br	fd90 <__alt_data_end+0xfc00fd90>
    ffdc:	11fff804 	addi	r7,r2,-32
    ffe0:	01000804 	movi	r4,32
    ffe4:	29ced83a 	srl	r7,r5,r7
    ffe8:	11004526 	beq	r2,r4,10100 <__subdf3+0x588>
    ffec:	01001004 	movi	r4,64
    fff0:	2089c83a 	sub	r4,r4,r2
    fff4:	2904983a 	sll	r2,r5,r4
    fff8:	118cb03a 	or	r6,r2,r6
    fffc:	300cc03a 	cmpne	r6,r6,zero
   10000:	398cb03a 	or	r6,r7,r6
   10004:	0005883a 	mov	r2,zero
   10008:	003f3706 	br	fce8 <__alt_data_end+0xfc00fce8>
   1000c:	80002a26 	beq	r16,zero,100b8 <__subdf3+0x540>
   10010:	0101ffc4 	movi	r4,2047
   10014:	49006626 	beq	r9,r4,101b0 <__subdf3+0x638>
   10018:	0085c83a 	sub	r2,zero,r2
   1001c:	18c02034 	orhi	r3,r3,128
   10020:	01000e04 	movi	r4,56
   10024:	20807e16 	blt	r4,r2,10220 <__subdf3+0x6a8>
   10028:	010007c4 	movi	r4,31
   1002c:	2080e716 	blt	r4,r2,103cc <__subdf3+0x854>
   10030:	01000804 	movi	r4,32
   10034:	2089c83a 	sub	r4,r4,r2
   10038:	1914983a 	sll	r10,r3,r4
   1003c:	8890d83a 	srl	r8,r17,r2
   10040:	8908983a 	sll	r4,r17,r4
   10044:	1884d83a 	srl	r2,r3,r2
   10048:	5222b03a 	or	r17,r10,r8
   1004c:	2006c03a 	cmpne	r3,r4,zero
   10050:	88e2b03a 	or	r17,r17,r3
   10054:	3463c83a 	sub	r17,r6,r17
   10058:	2885c83a 	sub	r2,r5,r2
   1005c:	344d803a 	cmpltu	r6,r6,r17
   10060:	1187c83a 	sub	r3,r2,r6
   10064:	4821883a 	mov	r16,r9
   10068:	3825883a 	mov	r18,r7
   1006c:	003f2306 	br	fcfc <__alt_data_end+0xfc00fcfc>
   10070:	24d0b03a 	or	r8,r4,r19
   10074:	40001b1e 	bne	r8,zero,100e4 <__subdf3+0x56c>
   10078:	0005883a 	mov	r2,zero
   1007c:	0009883a 	mov	r4,zero
   10080:	0021883a 	mov	r16,zero
   10084:	003f4906 	br	fdac <__alt_data_end+0xfc00fdac>
   10088:	010007c4 	movi	r4,31
   1008c:	20803a16 	blt	r4,r2,10178 <__subdf3+0x600>
   10090:	01000804 	movi	r4,32
   10094:	2089c83a 	sub	r4,r4,r2
   10098:	2912983a 	sll	r9,r5,r4
   1009c:	3090d83a 	srl	r8,r6,r2
   100a0:	3108983a 	sll	r4,r6,r4
   100a4:	2884d83a 	srl	r2,r5,r2
   100a8:	4a12b03a 	or	r9,r9,r8
   100ac:	2008c03a 	cmpne	r4,r4,zero
   100b0:	4912b03a 	or	r9,r9,r4
   100b4:	003f4e06 	br	fdf0 <__alt_data_end+0xfc00fdf0>
   100b8:	1c48b03a 	or	r4,r3,r17
   100bc:	20003c26 	beq	r4,zero,101b0 <__subdf3+0x638>
   100c0:	0084303a 	nor	r2,zero,r2
   100c4:	1000381e 	bne	r2,zero,101a8 <__subdf3+0x630>
   100c8:	3463c83a 	sub	r17,r6,r17
   100cc:	28c5c83a 	sub	r2,r5,r3
   100d0:	344d803a 	cmpltu	r6,r6,r17
   100d4:	1187c83a 	sub	r3,r2,r6
   100d8:	4821883a 	mov	r16,r9
   100dc:	3825883a 	mov	r18,r7
   100e0:	003f0606 	br	fcfc <__alt_data_end+0xfc00fcfc>
   100e4:	2023883a 	mov	r17,r4
   100e8:	003f0906 	br	fd10 <__alt_data_end+0xfc00fd10>
   100ec:	0101ffc4 	movi	r4,2047
   100f0:	813f3a1e 	bne	r16,r4,fddc <__alt_data_end+0xfc00fddc>
   100f4:	003ec406 	br	fc08 <__alt_data_end+0xfc00fc08>
   100f8:	0005883a 	mov	r2,zero
   100fc:	003fb106 	br	ffc4 <__alt_data_end+0xfc00ffc4>
   10100:	0005883a 	mov	r2,zero
   10104:	003fbc06 	br	fff8 <__alt_data_end+0xfc00fff8>
   10108:	1c44b03a 	or	r2,r3,r17
   1010c:	80008e1e 	bne	r16,zero,10348 <__subdf3+0x7d0>
   10110:	1000c826 	beq	r2,zero,10434 <__subdf3+0x8bc>
   10114:	2984b03a 	or	r2,r5,r6
   10118:	103ebb26 	beq	r2,zero,fc08 <__alt_data_end+0xfc00fc08>
   1011c:	8989883a 	add	r4,r17,r6
   10120:	1945883a 	add	r2,r3,r5
   10124:	2447803a 	cmpltu	r3,r4,r17
   10128:	1887883a 	add	r3,r3,r2
   1012c:	1880202c 	andhi	r2,r3,128
   10130:	2023883a 	mov	r17,r4
   10134:	103f1626 	beq	r2,zero,fd90 <__alt_data_end+0xfc00fd90>
   10138:	00bfe034 	movhi	r2,65408
   1013c:	10bfffc4 	addi	r2,r2,-1
   10140:	5021883a 	mov	r16,r10
   10144:	1886703a 	and	r3,r3,r2
   10148:	003eaf06 	br	fc08 <__alt_data_end+0xfc00fc08>
   1014c:	3825883a 	mov	r18,r7
   10150:	003f0f06 	br	fd90 <__alt_data_end+0xfc00fd90>
   10154:	1c44b03a 	or	r2,r3,r17
   10158:	8000251e 	bne	r16,zero,101f0 <__subdf3+0x678>
   1015c:	1000661e 	bne	r2,zero,102f8 <__subdf3+0x780>
   10160:	2990b03a 	or	r8,r5,r6
   10164:	40009626 	beq	r8,zero,103c0 <__subdf3+0x848>
   10168:	2807883a 	mov	r3,r5
   1016c:	3023883a 	mov	r17,r6
   10170:	3825883a 	mov	r18,r7
   10174:	003ea406 	br	fc08 <__alt_data_end+0xfc00fc08>
   10178:	127ff804 	addi	r9,r2,-32
   1017c:	01000804 	movi	r4,32
   10180:	2a52d83a 	srl	r9,r5,r9
   10184:	11008c26 	beq	r2,r4,103b8 <__subdf3+0x840>
   10188:	01001004 	movi	r4,64
   1018c:	2085c83a 	sub	r2,r4,r2
   10190:	2884983a 	sll	r2,r5,r2
   10194:	118cb03a 	or	r6,r2,r6
   10198:	300cc03a 	cmpne	r6,r6,zero
   1019c:	4992b03a 	or	r9,r9,r6
   101a0:	0005883a 	mov	r2,zero
   101a4:	003f1206 	br	fdf0 <__alt_data_end+0xfc00fdf0>
   101a8:	0101ffc4 	movi	r4,2047
   101ac:	493f9c1e 	bne	r9,r4,10020 <__alt_data_end+0xfc010020>
   101b0:	2807883a 	mov	r3,r5
   101b4:	3023883a 	mov	r17,r6
   101b8:	4821883a 	mov	r16,r9
   101bc:	3825883a 	mov	r18,r7
   101c0:	003e9106 	br	fc08 <__alt_data_end+0xfc00fc08>
   101c4:	80001f1e 	bne	r16,zero,10244 <__subdf3+0x6cc>
   101c8:	1c48b03a 	or	r4,r3,r17
   101cc:	20005a26 	beq	r4,zero,10338 <__subdf3+0x7c0>
   101d0:	0084303a 	nor	r2,zero,r2
   101d4:	1000561e 	bne	r2,zero,10330 <__subdf3+0x7b8>
   101d8:	89a3883a 	add	r17,r17,r6
   101dc:	1945883a 	add	r2,r3,r5
   101e0:	898d803a 	cmpltu	r6,r17,r6
   101e4:	3087883a 	add	r3,r6,r2
   101e8:	4821883a 	mov	r16,r9
   101ec:	003f0506 	br	fe04 <__alt_data_end+0xfc00fe04>
   101f0:	10002b1e 	bne	r2,zero,102a0 <__subdf3+0x728>
   101f4:	2984b03a 	or	r2,r5,r6
   101f8:	10008026 	beq	r2,zero,103fc <__subdf3+0x884>
   101fc:	2807883a 	mov	r3,r5
   10200:	3023883a 	mov	r17,r6
   10204:	3825883a 	mov	r18,r7
   10208:	0401ffc4 	movi	r16,2047
   1020c:	003e7e06 	br	fc08 <__alt_data_end+0xfc00fc08>
   10210:	3809883a 	mov	r4,r7
   10214:	0011883a 	mov	r8,zero
   10218:	0005883a 	mov	r2,zero
   1021c:	003ee306 	br	fdac <__alt_data_end+0xfc00fdac>
   10220:	1c62b03a 	or	r17,r3,r17
   10224:	8822c03a 	cmpne	r17,r17,zero
   10228:	0005883a 	mov	r2,zero
   1022c:	003f8906 	br	10054 <__alt_data_end+0xfc010054>
   10230:	3809883a 	mov	r4,r7
   10234:	4821883a 	mov	r16,r9
   10238:	0011883a 	mov	r8,zero
   1023c:	0005883a 	mov	r2,zero
   10240:	003eda06 	br	fdac <__alt_data_end+0xfc00fdac>
   10244:	0101ffc4 	movi	r4,2047
   10248:	49003b26 	beq	r9,r4,10338 <__subdf3+0x7c0>
   1024c:	0085c83a 	sub	r2,zero,r2
   10250:	18c02034 	orhi	r3,r3,128
   10254:	01000e04 	movi	r4,56
   10258:	20806e16 	blt	r4,r2,10414 <__subdf3+0x89c>
   1025c:	010007c4 	movi	r4,31
   10260:	20807716 	blt	r4,r2,10440 <__subdf3+0x8c8>
   10264:	01000804 	movi	r4,32
   10268:	2089c83a 	sub	r4,r4,r2
   1026c:	1914983a 	sll	r10,r3,r4
   10270:	8890d83a 	srl	r8,r17,r2
   10274:	8908983a 	sll	r4,r17,r4
   10278:	1884d83a 	srl	r2,r3,r2
   1027c:	5222b03a 	or	r17,r10,r8
   10280:	2006c03a 	cmpne	r3,r4,zero
   10284:	88e2b03a 	or	r17,r17,r3
   10288:	89a3883a 	add	r17,r17,r6
   1028c:	1145883a 	add	r2,r2,r5
   10290:	898d803a 	cmpltu	r6,r17,r6
   10294:	3087883a 	add	r3,r6,r2
   10298:	4821883a 	mov	r16,r9
   1029c:	003ed906 	br	fe04 <__alt_data_end+0xfc00fe04>
   102a0:	2984b03a 	or	r2,r5,r6
   102a4:	10004226 	beq	r2,zero,103b0 <__subdf3+0x838>
   102a8:	1808d0fa 	srli	r4,r3,3
   102ac:	8822d0fa 	srli	r17,r17,3
   102b0:	1806977a 	slli	r3,r3,29
   102b4:	2080022c 	andhi	r2,r4,8
   102b8:	1c62b03a 	or	r17,r3,r17
   102bc:	10000826 	beq	r2,zero,102e0 <__subdf3+0x768>
   102c0:	2812d0fa 	srli	r9,r5,3
   102c4:	4880022c 	andhi	r2,r9,8
   102c8:	1000051e 	bne	r2,zero,102e0 <__subdf3+0x768>
   102cc:	300cd0fa 	srli	r6,r6,3
   102d0:	2804977a 	slli	r2,r5,29
   102d4:	4809883a 	mov	r4,r9
   102d8:	3825883a 	mov	r18,r7
   102dc:	11a2b03a 	or	r17,r2,r6
   102e0:	8806d77a 	srli	r3,r17,29
   102e4:	200890fa 	slli	r4,r4,3
   102e8:	882290fa 	slli	r17,r17,3
   102ec:	0401ffc4 	movi	r16,2047
   102f0:	1906b03a 	or	r3,r3,r4
   102f4:	003e4406 	br	fc08 <__alt_data_end+0xfc00fc08>
   102f8:	2984b03a 	or	r2,r5,r6
   102fc:	103e4226 	beq	r2,zero,fc08 <__alt_data_end+0xfc00fc08>
   10300:	8989c83a 	sub	r4,r17,r6
   10304:	8911803a 	cmpltu	r8,r17,r4
   10308:	1945c83a 	sub	r2,r3,r5
   1030c:	1205c83a 	sub	r2,r2,r8
   10310:	1200202c 	andhi	r8,r2,128
   10314:	403e9a26 	beq	r8,zero,fd80 <__alt_data_end+0xfc00fd80>
   10318:	3463c83a 	sub	r17,r6,r17
   1031c:	28c5c83a 	sub	r2,r5,r3
   10320:	344d803a 	cmpltu	r6,r6,r17
   10324:	1187c83a 	sub	r3,r2,r6
   10328:	3825883a 	mov	r18,r7
   1032c:	003e3606 	br	fc08 <__alt_data_end+0xfc00fc08>
   10330:	0101ffc4 	movi	r4,2047
   10334:	493fc71e 	bne	r9,r4,10254 <__alt_data_end+0xfc010254>
   10338:	2807883a 	mov	r3,r5
   1033c:	3023883a 	mov	r17,r6
   10340:	4821883a 	mov	r16,r9
   10344:	003e3006 	br	fc08 <__alt_data_end+0xfc00fc08>
   10348:	10003626 	beq	r2,zero,10424 <__subdf3+0x8ac>
   1034c:	2984b03a 	or	r2,r5,r6
   10350:	10001726 	beq	r2,zero,103b0 <__subdf3+0x838>
   10354:	1808d0fa 	srli	r4,r3,3
   10358:	8822d0fa 	srli	r17,r17,3
   1035c:	1806977a 	slli	r3,r3,29
   10360:	2080022c 	andhi	r2,r4,8
   10364:	1c62b03a 	or	r17,r3,r17
   10368:	10000726 	beq	r2,zero,10388 <__subdf3+0x810>
   1036c:	2812d0fa 	srli	r9,r5,3
   10370:	4880022c 	andhi	r2,r9,8
   10374:	1000041e 	bne	r2,zero,10388 <__subdf3+0x810>
   10378:	300cd0fa 	srli	r6,r6,3
   1037c:	2804977a 	slli	r2,r5,29
   10380:	4809883a 	mov	r4,r9
   10384:	11a2b03a 	or	r17,r2,r6
   10388:	8806d77a 	srli	r3,r17,29
   1038c:	200890fa 	slli	r4,r4,3
   10390:	882290fa 	slli	r17,r17,3
   10394:	3825883a 	mov	r18,r7
   10398:	1906b03a 	or	r3,r3,r4
   1039c:	0401ffc4 	movi	r16,2047
   103a0:	003e1906 	br	fc08 <__alt_data_end+0xfc00fc08>
   103a4:	000b883a 	mov	r5,zero
   103a8:	0005883a 	mov	r2,zero
   103ac:	003e2e06 	br	fc68 <__alt_data_end+0xfc00fc68>
   103b0:	0401ffc4 	movi	r16,2047
   103b4:	003e1406 	br	fc08 <__alt_data_end+0xfc00fc08>
   103b8:	0005883a 	mov	r2,zero
   103bc:	003f7506 	br	10194 <__alt_data_end+0xfc010194>
   103c0:	0005883a 	mov	r2,zero
   103c4:	0009883a 	mov	r4,zero
   103c8:	003e7806 	br	fdac <__alt_data_end+0xfc00fdac>
   103cc:	123ff804 	addi	r8,r2,-32
   103d0:	01000804 	movi	r4,32
   103d4:	1a10d83a 	srl	r8,r3,r8
   103d8:	11002526 	beq	r2,r4,10470 <__subdf3+0x8f8>
   103dc:	01001004 	movi	r4,64
   103e0:	2085c83a 	sub	r2,r4,r2
   103e4:	1884983a 	sll	r2,r3,r2
   103e8:	1444b03a 	or	r2,r2,r17
   103ec:	1004c03a 	cmpne	r2,r2,zero
   103f0:	40a2b03a 	or	r17,r8,r2
   103f4:	0005883a 	mov	r2,zero
   103f8:	003f1606 	br	10054 <__alt_data_end+0xfc010054>
   103fc:	02000434 	movhi	r8,16
   10400:	0009883a 	mov	r4,zero
   10404:	423fffc4 	addi	r8,r8,-1
   10408:	00bfffc4 	movi	r2,-1
   1040c:	0401ffc4 	movi	r16,2047
   10410:	003e6606 	br	fdac <__alt_data_end+0xfc00fdac>
   10414:	1c62b03a 	or	r17,r3,r17
   10418:	8822c03a 	cmpne	r17,r17,zero
   1041c:	0005883a 	mov	r2,zero
   10420:	003f9906 	br	10288 <__alt_data_end+0xfc010288>
   10424:	2807883a 	mov	r3,r5
   10428:	3023883a 	mov	r17,r6
   1042c:	0401ffc4 	movi	r16,2047
   10430:	003df506 	br	fc08 <__alt_data_end+0xfc00fc08>
   10434:	2807883a 	mov	r3,r5
   10438:	3023883a 	mov	r17,r6
   1043c:	003df206 	br	fc08 <__alt_data_end+0xfc00fc08>
   10440:	123ff804 	addi	r8,r2,-32
   10444:	01000804 	movi	r4,32
   10448:	1a10d83a 	srl	r8,r3,r8
   1044c:	11000a26 	beq	r2,r4,10478 <__subdf3+0x900>
   10450:	01001004 	movi	r4,64
   10454:	2085c83a 	sub	r2,r4,r2
   10458:	1884983a 	sll	r2,r3,r2
   1045c:	1444b03a 	or	r2,r2,r17
   10460:	1004c03a 	cmpne	r2,r2,zero
   10464:	40a2b03a 	or	r17,r8,r2
   10468:	0005883a 	mov	r2,zero
   1046c:	003f8606 	br	10288 <__alt_data_end+0xfc010288>
   10470:	0005883a 	mov	r2,zero
   10474:	003fdc06 	br	103e8 <__alt_data_end+0xfc0103e8>
   10478:	0005883a 	mov	r2,zero
   1047c:	003ff706 	br	1045c <__alt_data_end+0xfc01045c>

00010480 <__fixdfsi>:
   10480:	f811883a 	mov	r8,ra
   10484:	0000ac80 	call	ac8 <_mcount>
   10488:	403f883a 	mov	ra,r8
   1048c:	280cd53a 	srli	r6,r5,20
   10490:	00c00434 	movhi	r3,16
   10494:	18ffffc4 	addi	r3,r3,-1
   10498:	3181ffcc 	andi	r6,r6,2047
   1049c:	01c0ff84 	movi	r7,1022
   104a0:	28c6703a 	and	r3,r5,r3
   104a4:	3980130e 	bge	r7,r6,104f4 <__fixdfsi+0x74>
   104a8:	00810744 	movi	r2,1053
   104ac:	280ad7fa 	srli	r5,r5,31
   104b0:	11800c16 	blt	r2,r6,104e4 <__fixdfsi+0x64>
   104b4:	00810cc4 	movi	r2,1075
   104b8:	1185c83a 	sub	r2,r2,r6
   104bc:	01c007c4 	movi	r7,31
   104c0:	18c00434 	orhi	r3,r3,16
   104c4:	38800d16 	blt	r7,r2,104fc <__fixdfsi+0x7c>
   104c8:	31befb44 	addi	r6,r6,-1043
   104cc:	2084d83a 	srl	r2,r4,r2
   104d0:	1986983a 	sll	r3,r3,r6
   104d4:	1884b03a 	or	r2,r3,r2
   104d8:	28000526 	beq	r5,zero,104f0 <__fixdfsi+0x70>
   104dc:	0085c83a 	sub	r2,zero,r2
   104e0:	f800283a 	ret
   104e4:	00a00034 	movhi	r2,32768
   104e8:	10bfffc4 	addi	r2,r2,-1
   104ec:	2885883a 	add	r2,r5,r2
   104f0:	f800283a 	ret
   104f4:	0005883a 	mov	r2,zero
   104f8:	f800283a 	ret
   104fc:	008104c4 	movi	r2,1043
   10500:	1185c83a 	sub	r2,r2,r6
   10504:	1884d83a 	srl	r2,r3,r2
   10508:	003ff306 	br	104d8 <__alt_data_end+0xfc0104d8>

0001050c <__floatsidf>:
   1050c:	f811883a 	mov	r8,ra
   10510:	0000ac80 	call	ac8 <_mcount>
   10514:	403f883a 	mov	ra,r8
   10518:	defffd04 	addi	sp,sp,-12
   1051c:	dfc00215 	stw	ra,8(sp)
   10520:	dc400115 	stw	r17,4(sp)
   10524:	dc000015 	stw	r16,0(sp)
   10528:	20002b26 	beq	r4,zero,105d8 <__floatsidf+0xcc>
   1052c:	2023883a 	mov	r17,r4
   10530:	2020d7fa 	srli	r16,r4,31
   10534:	20002d16 	blt	r4,zero,105ec <__floatsidf+0xe0>
   10538:	8809883a 	mov	r4,r17
   1053c:	00106a80 	call	106a8 <__clzsi2>
   10540:	01410784 	movi	r5,1054
   10544:	288bc83a 	sub	r5,r5,r2
   10548:	01010cc4 	movi	r4,1075
   1054c:	2149c83a 	sub	r4,r4,r5
   10550:	00c007c4 	movi	r3,31
   10554:	1900160e 	bge	r3,r4,105b0 <__floatsidf+0xa4>
   10558:	00c104c4 	movi	r3,1043
   1055c:	1947c83a 	sub	r3,r3,r5
   10560:	88c6983a 	sll	r3,r17,r3
   10564:	00800434 	movhi	r2,16
   10568:	10bfffc4 	addi	r2,r2,-1
   1056c:	1886703a 	and	r3,r3,r2
   10570:	2941ffcc 	andi	r5,r5,2047
   10574:	800d883a 	mov	r6,r16
   10578:	0005883a 	mov	r2,zero
   1057c:	280a953a 	slli	r5,r5,20
   10580:	31803fcc 	andi	r6,r6,255
   10584:	01000434 	movhi	r4,16
   10588:	300c97fa 	slli	r6,r6,31
   1058c:	213fffc4 	addi	r4,r4,-1
   10590:	1906703a 	and	r3,r3,r4
   10594:	1946b03a 	or	r3,r3,r5
   10598:	1986b03a 	or	r3,r3,r6
   1059c:	dfc00217 	ldw	ra,8(sp)
   105a0:	dc400117 	ldw	r17,4(sp)
   105a4:	dc000017 	ldw	r16,0(sp)
   105a8:	dec00304 	addi	sp,sp,12
   105ac:	f800283a 	ret
   105b0:	00c002c4 	movi	r3,11
   105b4:	1887c83a 	sub	r3,r3,r2
   105b8:	88c6d83a 	srl	r3,r17,r3
   105bc:	8904983a 	sll	r2,r17,r4
   105c0:	01000434 	movhi	r4,16
   105c4:	213fffc4 	addi	r4,r4,-1
   105c8:	2941ffcc 	andi	r5,r5,2047
   105cc:	1906703a 	and	r3,r3,r4
   105d0:	800d883a 	mov	r6,r16
   105d4:	003fe906 	br	1057c <__alt_data_end+0xfc01057c>
   105d8:	000d883a 	mov	r6,zero
   105dc:	000b883a 	mov	r5,zero
   105e0:	0007883a 	mov	r3,zero
   105e4:	0005883a 	mov	r2,zero
   105e8:	003fe406 	br	1057c <__alt_data_end+0xfc01057c>
   105ec:	0123c83a 	sub	r17,zero,r4
   105f0:	003fd106 	br	10538 <__alt_data_end+0xfc010538>

000105f4 <__floatunsidf>:
   105f4:	f811883a 	mov	r8,ra
   105f8:	0000ac80 	call	ac8 <_mcount>
   105fc:	403f883a 	mov	ra,r8
   10600:	defffe04 	addi	sp,sp,-8
   10604:	dfc00115 	stw	ra,4(sp)
   10608:	dc000015 	stw	r16,0(sp)
   1060c:	2021883a 	mov	r16,r4
   10610:	20002226 	beq	r4,zero,1069c <__floatunsidf+0xa8>
   10614:	00106a80 	call	106a8 <__clzsi2>
   10618:	01010784 	movi	r4,1054
   1061c:	2089c83a 	sub	r4,r4,r2
   10620:	01810cc4 	movi	r6,1075
   10624:	310dc83a 	sub	r6,r6,r4
   10628:	00c007c4 	movi	r3,31
   1062c:	1980120e 	bge	r3,r6,10678 <__floatunsidf+0x84>
   10630:	00c104c4 	movi	r3,1043
   10634:	1907c83a 	sub	r3,r3,r4
   10638:	80ca983a 	sll	r5,r16,r3
   1063c:	00800434 	movhi	r2,16
   10640:	10bfffc4 	addi	r2,r2,-1
   10644:	2101ffcc 	andi	r4,r4,2047
   10648:	0021883a 	mov	r16,zero
   1064c:	288a703a 	and	r5,r5,r2
   10650:	2008953a 	slli	r4,r4,20
   10654:	00c00434 	movhi	r3,16
   10658:	18ffffc4 	addi	r3,r3,-1
   1065c:	28c6703a 	and	r3,r5,r3
   10660:	8005883a 	mov	r2,r16
   10664:	1906b03a 	or	r3,r3,r4
   10668:	dfc00117 	ldw	ra,4(sp)
   1066c:	dc000017 	ldw	r16,0(sp)
   10670:	dec00204 	addi	sp,sp,8
   10674:	f800283a 	ret
   10678:	00c002c4 	movi	r3,11
   1067c:	188bc83a 	sub	r5,r3,r2
   10680:	814ad83a 	srl	r5,r16,r5
   10684:	00c00434 	movhi	r3,16
   10688:	18ffffc4 	addi	r3,r3,-1
   1068c:	81a0983a 	sll	r16,r16,r6
   10690:	2101ffcc 	andi	r4,r4,2047
   10694:	28ca703a 	and	r5,r5,r3
   10698:	003fed06 	br	10650 <__alt_data_end+0xfc010650>
   1069c:	0009883a 	mov	r4,zero
   106a0:	000b883a 	mov	r5,zero
   106a4:	003fea06 	br	10650 <__alt_data_end+0xfc010650>

000106a8 <__clzsi2>:
   106a8:	f811883a 	mov	r8,ra
   106ac:	0000ac80 	call	ac8 <_mcount>
   106b0:	403f883a 	mov	ra,r8
   106b4:	00bfffd4 	movui	r2,65535
   106b8:	11000536 	bltu	r2,r4,106d0 <__clzsi2+0x28>
   106bc:	00803fc4 	movi	r2,255
   106c0:	11000f36 	bltu	r2,r4,10700 <__clzsi2+0x58>
   106c4:	00800804 	movi	r2,32
   106c8:	0007883a 	mov	r3,zero
   106cc:	00000506 	br	106e4 <__clzsi2+0x3c>
   106d0:	00804034 	movhi	r2,256
   106d4:	10bfffc4 	addi	r2,r2,-1
   106d8:	11000c2e 	bgeu	r2,r4,1070c <__clzsi2+0x64>
   106dc:	00800204 	movi	r2,8
   106e0:	00c00604 	movi	r3,24
   106e4:	20c8d83a 	srl	r4,r4,r3
   106e8:	00c00074 	movhi	r3,1
   106ec:	18c45804 	addi	r3,r3,4448
   106f0:	1909883a 	add	r4,r3,r4
   106f4:	20c00003 	ldbu	r3,0(r4)
   106f8:	10c5c83a 	sub	r2,r2,r3
   106fc:	f800283a 	ret
   10700:	00800604 	movi	r2,24
   10704:	00c00204 	movi	r3,8
   10708:	003ff606 	br	106e4 <__alt_data_end+0xfc0106e4>
   1070c:	00800404 	movi	r2,16
   10710:	1007883a 	mov	r3,r2
   10714:	003ff306 	br	106e4 <__alt_data_end+0xfc0106e4>

00010718 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   10718:	f811883a 	mov	r8,ra
   1071c:	0000ac80 	call	ac8 <_mcount>
   10720:	403f883a 	mov	ra,r8
   10724:	defffd04 	addi	sp,sp,-12
   10728:	df000215 	stw	fp,8(sp)
   1072c:	df000204 	addi	fp,sp,8
   10730:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   10734:	0001883a 	nop
   10738:	e0bfff17 	ldw	r2,-4(fp)
   1073c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   10740:	e0bffe17 	ldw	r2,-8(fp)

#if defined(NIOS2_HAS_DEBUG_STUB) && (defined(ALT_BREAK_ON_EXIT) || defined(ALT_PROVIDE_GMON))

  register int r3 asm ("r3") = (1 << 2);
   10744:	00c00104 	movi	r3,4

#ifdef ALT_PROVIDE_GMON
  extern unsigned int alt_gmon_data[];
  register int r4 asm ("r4") = (int)alt_gmon_data;
   10748:	01000074 	movhi	r4,1
   1074c:	210a1a04 	addi	r4,r4,10344
  r3 |= (1 << 4);
   10750:	18c00414 	ori	r3,r3,16
#define ALT_GMON_DATA ,"r"(r4)
#else
#define ALT_GMON_DATA
#endif /* ALT_PROVIDE_GMON */

  if (r2) {
   10754:	100b883a 	mov	r5,r2
   10758:	28000226 	beq	r5,zero,10764 <_exit+0x4c>
    ALT_SIM_FAIL();
   1075c:	002af070 	cmpltui	zero,zero,43969
   10760:	00000106 	br	10768 <_exit+0x50>
  } else {
    ALT_SIM_PASS();
   10764:	002af0b0 	cmpltui	zero,zero,43970
  }

  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */
   10768:	01400234 	movhi	r5,8
   1076c:	29684804 	addi	r5,r5,-24288
   10770:	297fffc4 	addi	r5,r5,-1
   10774:	017ffe16 	blt	zero,r5,10770 <__alt_data_end+0xfc010770>

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );
   10778:	003da0ba 	break	2
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1077c:	003fff06 	br	1077c <__alt_data_end+0xfc01077c>

00010780 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10780:	f811883a 	mov	r8,ra
   10784:	0000ac80 	call	ac8 <_mcount>
   10788:	403f883a 	mov	ra,r8
   1078c:	defffe04 	addi	sp,sp,-8
   10790:	dfc00115 	stw	ra,4(sp)
   10794:	df000015 	stw	fp,0(sp)
   10798:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1079c:	d0a00717 	ldw	r2,-32740(gp)
   107a0:	10000326 	beq	r2,zero,107b0 <alt_get_errno+0x30>
   107a4:	d0a00717 	ldw	r2,-32740(gp)
   107a8:	103ee83a 	callr	r2
   107ac:	00000106 	br	107b4 <alt_get_errno+0x34>
   107b0:	d0a7ea04 	addi	r2,gp,-24664
}
   107b4:	e037883a 	mov	sp,fp
   107b8:	dfc00117 	ldw	ra,4(sp)
   107bc:	df000017 	ldw	fp,0(sp)
   107c0:	dec00204 	addi	sp,sp,8
   107c4:	f800283a 	ret

000107c8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   107c8:	f811883a 	mov	r8,ra
   107cc:	0000ac80 	call	ac8 <_mcount>
   107d0:	403f883a 	mov	ra,r8
   107d4:	defffb04 	addi	sp,sp,-20
   107d8:	dfc00415 	stw	ra,16(sp)
   107dc:	df000315 	stw	fp,12(sp)
   107e0:	df000304 	addi	fp,sp,12
   107e4:	e13ffe15 	stw	r4,-8(fp)
   107e8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   107ec:	e0bffe17 	ldw	r2,-8(fp)
   107f0:	10000616 	blt	r2,zero,1080c <fstat+0x44>
   107f4:	e0bffe17 	ldw	r2,-8(fp)
   107f8:	10c00324 	muli	r3,r2,12
   107fc:	00800074 	movhi	r2,1
   10800:	1089ba04 	addi	r2,r2,9960
   10804:	1885883a 	add	r2,r3,r2
   10808:	00000106 	br	10810 <fstat+0x48>
   1080c:	0005883a 	mov	r2,zero
   10810:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   10814:	e0bffd17 	ldw	r2,-12(fp)
   10818:	10001026 	beq	r2,zero,1085c <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   1081c:	e0bffd17 	ldw	r2,-12(fp)
   10820:	10800017 	ldw	r2,0(r2)
   10824:	10800817 	ldw	r2,32(r2)
   10828:	10000726 	beq	r2,zero,10848 <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
   1082c:	e0bffd17 	ldw	r2,-12(fp)
   10830:	10800017 	ldw	r2,0(r2)
   10834:	10800817 	ldw	r2,32(r2)
   10838:	e17fff17 	ldw	r5,-4(fp)
   1083c:	e13ffd17 	ldw	r4,-12(fp)
   10840:	103ee83a 	callr	r2
   10844:	00000a06 	br	10870 <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   10848:	e0bfff17 	ldw	r2,-4(fp)
   1084c:	00c80004 	movi	r3,8192
   10850:	10c00115 	stw	r3,4(r2)
      return 0;
   10854:	0005883a 	mov	r2,zero
   10858:	00000506 	br	10870 <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1085c:	00107800 	call	10780 <alt_get_errno>
   10860:	1007883a 	mov	r3,r2
   10864:	00801444 	movi	r2,81
   10868:	18800015 	stw	r2,0(r3)
    return -1;
   1086c:	00bfffc4 	movi	r2,-1
  }
}
   10870:	e037883a 	mov	sp,fp
   10874:	dfc00117 	ldw	ra,4(sp)
   10878:	df000017 	ldw	fp,0(sp)
   1087c:	dec00204 	addi	sp,sp,8
   10880:	f800283a 	ret

00010884 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10884:	f811883a 	mov	r8,ra
   10888:	0000ac80 	call	ac8 <_mcount>
   1088c:	403f883a 	mov	ra,r8
   10890:	defffe04 	addi	sp,sp,-8
   10894:	dfc00115 	stw	ra,4(sp)
   10898:	df000015 	stw	fp,0(sp)
   1089c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   108a0:	d0a00717 	ldw	r2,-32740(gp)
   108a4:	10000326 	beq	r2,zero,108b4 <alt_get_errno+0x30>
   108a8:	d0a00717 	ldw	r2,-32740(gp)
   108ac:	103ee83a 	callr	r2
   108b0:	00000106 	br	108b8 <alt_get_errno+0x34>
   108b4:	d0a7ea04 	addi	r2,gp,-24664
}
   108b8:	e037883a 	mov	sp,fp
   108bc:	dfc00117 	ldw	ra,4(sp)
   108c0:	df000017 	ldw	fp,0(sp)
   108c4:	dec00204 	addi	sp,sp,8
   108c8:	f800283a 	ret

000108cc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   108cc:	f811883a 	mov	r8,ra
   108d0:	0000ac80 	call	ac8 <_mcount>
   108d4:	403f883a 	mov	ra,r8
   108d8:	deffed04 	addi	sp,sp,-76
   108dc:	dfc01215 	stw	ra,72(sp)
   108e0:	df001115 	stw	fp,68(sp)
   108e4:	df001104 	addi	fp,sp,68
   108e8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   108ec:	e0bfff17 	ldw	r2,-4(fp)
   108f0:	10000616 	blt	r2,zero,1090c <isatty+0x40>
   108f4:	e0bfff17 	ldw	r2,-4(fp)
   108f8:	10c00324 	muli	r3,r2,12
   108fc:	00800074 	movhi	r2,1
   10900:	1089ba04 	addi	r2,r2,9960
   10904:	1885883a 	add	r2,r3,r2
   10908:	00000106 	br	10910 <isatty+0x44>
   1090c:	0005883a 	mov	r2,zero
   10910:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   10914:	e0bfef17 	ldw	r2,-68(fp)
   10918:	10000e26 	beq	r2,zero,10954 <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   1091c:	e0bfef17 	ldw	r2,-68(fp)
   10920:	10800017 	ldw	r2,0(r2)
   10924:	10800817 	ldw	r2,32(r2)
   10928:	1000021e 	bne	r2,zero,10934 <isatty+0x68>
    {
      return 1;
   1092c:	00800044 	movi	r2,1
   10930:	00000d06 	br	10968 <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   10934:	e0bff004 	addi	r2,fp,-64
   10938:	100b883a 	mov	r5,r2
   1093c:	e13fff17 	ldw	r4,-4(fp)
   10940:	00107c80 	call	107c8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   10944:	e0bff117 	ldw	r2,-60(fp)
   10948:	10880020 	cmpeqi	r2,r2,8192
   1094c:	10803fcc 	andi	r2,r2,255
   10950:	00000506 	br	10968 <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   10954:	00108840 	call	10884 <alt_get_errno>
   10958:	1007883a 	mov	r3,r2
   1095c:	00801444 	movi	r2,81
   10960:	18800015 	stw	r2,0(r3)
    return 0;
   10964:	0005883a 	mov	r2,zero
  }
}
   10968:	e037883a 	mov	sp,fp
   1096c:	dfc00117 	ldw	ra,4(sp)
   10970:	df000017 	ldw	fp,0(sp)
   10974:	dec00204 	addi	sp,sp,8
   10978:	f800283a 	ret

0001097c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1097c:	f811883a 	mov	r8,ra
   10980:	0000ac80 	call	ac8 <_mcount>
   10984:	403f883a 	mov	ra,r8
   10988:	defffe04 	addi	sp,sp,-8
   1098c:	dfc00115 	stw	ra,4(sp)
   10990:	df000015 	stw	fp,0(sp)
   10994:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10998:	d0a00717 	ldw	r2,-32740(gp)
   1099c:	10000326 	beq	r2,zero,109ac <alt_get_errno+0x30>
   109a0:	d0a00717 	ldw	r2,-32740(gp)
   109a4:	103ee83a 	callr	r2
   109a8:	00000106 	br	109b0 <alt_get_errno+0x34>
   109ac:	d0a7ea04 	addi	r2,gp,-24664
}
   109b0:	e037883a 	mov	sp,fp
   109b4:	dfc00117 	ldw	ra,4(sp)
   109b8:	df000017 	ldw	fp,0(sp)
   109bc:	dec00204 	addi	sp,sp,8
   109c0:	f800283a 	ret

000109c4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   109c4:	f811883a 	mov	r8,ra
   109c8:	0000ac80 	call	ac8 <_mcount>
   109cc:	403f883a 	mov	ra,r8
   109d0:	defff904 	addi	sp,sp,-28
   109d4:	dfc00615 	stw	ra,24(sp)
   109d8:	df000515 	stw	fp,20(sp)
   109dc:	df000504 	addi	fp,sp,20
   109e0:	e13ffd15 	stw	r4,-12(fp)
   109e4:	e17ffe15 	stw	r5,-8(fp)
   109e8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   109ec:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   109f0:	e0bffd17 	ldw	r2,-12(fp)
   109f4:	10000616 	blt	r2,zero,10a10 <lseek+0x4c>
   109f8:	e0bffd17 	ldw	r2,-12(fp)
   109fc:	10c00324 	muli	r3,r2,12
   10a00:	00800074 	movhi	r2,1
   10a04:	1089ba04 	addi	r2,r2,9960
   10a08:	1885883a 	add	r2,r3,r2
   10a0c:	00000106 	br	10a14 <lseek+0x50>
   10a10:	0005883a 	mov	r2,zero
   10a14:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   10a18:	e0bffc17 	ldw	r2,-16(fp)
   10a1c:	10001026 	beq	r2,zero,10a60 <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   10a20:	e0bffc17 	ldw	r2,-16(fp)
   10a24:	10800017 	ldw	r2,0(r2)
   10a28:	10800717 	ldw	r2,28(r2)
   10a2c:	10000926 	beq	r2,zero,10a54 <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   10a30:	e0bffc17 	ldw	r2,-16(fp)
   10a34:	10800017 	ldw	r2,0(r2)
   10a38:	10800717 	ldw	r2,28(r2)
   10a3c:	e1bfff17 	ldw	r6,-4(fp)
   10a40:	e17ffe17 	ldw	r5,-8(fp)
   10a44:	e13ffc17 	ldw	r4,-16(fp)
   10a48:	103ee83a 	callr	r2
   10a4c:	e0bffb15 	stw	r2,-20(fp)
   10a50:	00000506 	br	10a68 <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   10a54:	00bfde84 	movi	r2,-134
   10a58:	e0bffb15 	stw	r2,-20(fp)
   10a5c:	00000206 	br	10a68 <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
   10a60:	00bfebc4 	movi	r2,-81
   10a64:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   10a68:	e0bffb17 	ldw	r2,-20(fp)
   10a6c:	1000070e 	bge	r2,zero,10a8c <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
   10a70:	001097c0 	call	1097c <alt_get_errno>
   10a74:	1007883a 	mov	r3,r2
   10a78:	e0bffb17 	ldw	r2,-20(fp)
   10a7c:	0085c83a 	sub	r2,zero,r2
   10a80:	18800015 	stw	r2,0(r3)
    rc = -1;
   10a84:	00bfffc4 	movi	r2,-1
   10a88:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   10a8c:	e0bffb17 	ldw	r2,-20(fp)
}
   10a90:	e037883a 	mov	sp,fp
   10a94:	dfc00117 	ldw	ra,4(sp)
   10a98:	df000017 	ldw	fp,0(sp)
   10a9c:	dec00204 	addi	sp,sp,8
   10aa0:	f800283a 	ret

00010aa4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   10aa4:	f811883a 	mov	r8,ra
   10aa8:	0000ac80 	call	ac8 <_mcount>
   10aac:	403f883a 	mov	ra,r8
   10ab0:	defffe04 	addi	sp,sp,-8
   10ab4:	df000115 	stw	fp,4(sp)
   10ab8:	df000104 	addi	fp,sp,4
   10abc:	e13fff15 	stw	r4,-4(fp)
}
   10ac0:	0001883a 	nop
   10ac4:	e037883a 	mov	sp,fp
   10ac8:	df000017 	ldw	fp,0(sp)
   10acc:	dec00104 	addi	sp,sp,4
   10ad0:	f800283a 	ret

00010ad4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   10ad4:	f811883a 	mov	r8,ra
   10ad8:	0000ac80 	call	ac8 <_mcount>
   10adc:	403f883a 	mov	ra,r8
   10ae0:	defffe04 	addi	sp,sp,-8
   10ae4:	df000115 	stw	fp,4(sp)
   10ae8:	df000104 	addi	fp,sp,4
   10aec:	e13fff15 	stw	r4,-4(fp)
}
   10af0:	0001883a 	nop
   10af4:	e037883a 	mov	sp,fp
   10af8:	df000017 	ldw	fp,0(sp)
   10afc:	dec00104 	addi	sp,sp,4
   10b00:	f800283a 	ret

00010b04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10b04:	f811883a 	mov	r8,ra
   10b08:	0000ac80 	call	ac8 <_mcount>
   10b0c:	403f883a 	mov	ra,r8
   10b10:	defffe04 	addi	sp,sp,-8
   10b14:	dfc00115 	stw	ra,4(sp)
   10b18:	df000015 	stw	fp,0(sp)
   10b1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10b20:	d0a00717 	ldw	r2,-32740(gp)
   10b24:	10000326 	beq	r2,zero,10b34 <alt_get_errno+0x30>
   10b28:	d0a00717 	ldw	r2,-32740(gp)
   10b2c:	103ee83a 	callr	r2
   10b30:	00000106 	br	10b38 <alt_get_errno+0x34>
   10b34:	d0a7ea04 	addi	r2,gp,-24664
}
   10b38:	e037883a 	mov	sp,fp
   10b3c:	dfc00117 	ldw	ra,4(sp)
   10b40:	df000017 	ldw	fp,0(sp)
   10b44:	dec00204 	addi	sp,sp,8
   10b48:	f800283a 	ret

00010b4c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   10b4c:	f811883a 	mov	r8,ra
   10b50:	0000ac80 	call	ac8 <_mcount>
   10b54:	403f883a 	mov	ra,r8
   10b58:	defff904 	addi	sp,sp,-28
   10b5c:	dfc00615 	stw	ra,24(sp)
   10b60:	df000515 	stw	fp,20(sp)
   10b64:	df000504 	addi	fp,sp,20
   10b68:	e13ffd15 	stw	r4,-12(fp)
   10b6c:	e17ffe15 	stw	r5,-8(fp)
   10b70:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10b74:	e0bffd17 	ldw	r2,-12(fp)
   10b78:	10000616 	blt	r2,zero,10b94 <read+0x48>
   10b7c:	e0bffd17 	ldw	r2,-12(fp)
   10b80:	10c00324 	muli	r3,r2,12
   10b84:	00800074 	movhi	r2,1
   10b88:	1089ba04 	addi	r2,r2,9960
   10b8c:	1885883a 	add	r2,r3,r2
   10b90:	00000106 	br	10b98 <read+0x4c>
   10b94:	0005883a 	mov	r2,zero
   10b98:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   10b9c:	e0bffb17 	ldw	r2,-20(fp)
   10ba0:	10002226 	beq	r2,zero,10c2c <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   10ba4:	e0bffb17 	ldw	r2,-20(fp)
   10ba8:	10800217 	ldw	r2,8(r2)
   10bac:	108000cc 	andi	r2,r2,3
   10bb0:	10800060 	cmpeqi	r2,r2,1
   10bb4:	1000181e 	bne	r2,zero,10c18 <read+0xcc>
        (fd->dev->read))
   10bb8:	e0bffb17 	ldw	r2,-20(fp)
   10bbc:	10800017 	ldw	r2,0(r2)
   10bc0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   10bc4:	10001426 	beq	r2,zero,10c18 <read+0xcc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   10bc8:	e0bffb17 	ldw	r2,-20(fp)
   10bcc:	10800017 	ldw	r2,0(r2)
   10bd0:	10800517 	ldw	r2,20(r2)
   10bd4:	e0ffff17 	ldw	r3,-4(fp)
   10bd8:	180d883a 	mov	r6,r3
   10bdc:	e17ffe17 	ldw	r5,-8(fp)
   10be0:	e13ffb17 	ldw	r4,-20(fp)
   10be4:	103ee83a 	callr	r2
   10be8:	e0bffc15 	stw	r2,-16(fp)
   10bec:	e0bffc17 	ldw	r2,-16(fp)
   10bf0:	1000070e 	bge	r2,zero,10c10 <read+0xc4>
        {
          ALT_ERRNO = -rval;
   10bf4:	0010b040 	call	10b04 <alt_get_errno>
   10bf8:	1007883a 	mov	r3,r2
   10bfc:	e0bffc17 	ldw	r2,-16(fp)
   10c00:	0085c83a 	sub	r2,zero,r2
   10c04:	18800015 	stw	r2,0(r3)
          return -1;
   10c08:	00bfffc4 	movi	r2,-1
   10c0c:	00000c06 	br	10c40 <read+0xf4>
        }
        return rval;
   10c10:	e0bffc17 	ldw	r2,-16(fp)
   10c14:	00000a06 	br	10c40 <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
   10c18:	0010b040 	call	10b04 <alt_get_errno>
   10c1c:	1007883a 	mov	r3,r2
   10c20:	00800344 	movi	r2,13
   10c24:	18800015 	stw	r2,0(r3)
   10c28:	00000406 	br	10c3c <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   10c2c:	0010b040 	call	10b04 <alt_get_errno>
   10c30:	1007883a 	mov	r3,r2
   10c34:	00801444 	movi	r2,81
   10c38:	18800015 	stw	r2,0(r3)
  }
  return -1;
   10c3c:	00bfffc4 	movi	r2,-1
}
   10c40:	e037883a 	mov	sp,fp
   10c44:	dfc00117 	ldw	ra,4(sp)
   10c48:	df000017 	ldw	fp,0(sp)
   10c4c:	dec00204 	addi	sp,sp,8
   10c50:	f800283a 	ret

00010c54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10c54:	f811883a 	mov	r8,ra
   10c58:	0000ac80 	call	ac8 <_mcount>
   10c5c:	403f883a 	mov	ra,r8
   10c60:	defffe04 	addi	sp,sp,-8
   10c64:	dfc00115 	stw	ra,4(sp)
   10c68:	df000015 	stw	fp,0(sp)
   10c6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10c70:	d0a00717 	ldw	r2,-32740(gp)
   10c74:	10000326 	beq	r2,zero,10c84 <alt_get_errno+0x30>
   10c78:	d0a00717 	ldw	r2,-32740(gp)
   10c7c:	103ee83a 	callr	r2
   10c80:	00000106 	br	10c88 <alt_get_errno+0x34>
   10c84:	d0a7ea04 	addi	r2,gp,-24664
}
   10c88:	e037883a 	mov	sp,fp
   10c8c:	dfc00117 	ldw	ra,4(sp)
   10c90:	df000017 	ldw	fp,0(sp)
   10c94:	dec00204 	addi	sp,sp,8
   10c98:	f800283a 	ret

00010c9c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   10c9c:	f811883a 	mov	r8,ra
   10ca0:	0000ac80 	call	ac8 <_mcount>
   10ca4:	403f883a 	mov	ra,r8
   10ca8:	defff904 	addi	sp,sp,-28
   10cac:	dfc00615 	stw	ra,24(sp)
   10cb0:	df000515 	stw	fp,20(sp)
   10cb4:	df000504 	addi	fp,sp,20
   10cb8:	e13ffd15 	stw	r4,-12(fp)
   10cbc:	e17ffe15 	stw	r5,-8(fp)
   10cc0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10cc4:	e0bffd17 	ldw	r2,-12(fp)
   10cc8:	10000616 	blt	r2,zero,10ce4 <write+0x48>
   10ccc:	e0bffd17 	ldw	r2,-12(fp)
   10cd0:	10c00324 	muli	r3,r2,12
   10cd4:	00800074 	movhi	r2,1
   10cd8:	1089ba04 	addi	r2,r2,9960
   10cdc:	1885883a 	add	r2,r3,r2
   10ce0:	00000106 	br	10ce8 <write+0x4c>
   10ce4:	0005883a 	mov	r2,zero
   10ce8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   10cec:	e0bffb17 	ldw	r2,-20(fp)
   10cf0:	10002126 	beq	r2,zero,10d78 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   10cf4:	e0bffb17 	ldw	r2,-20(fp)
   10cf8:	10800217 	ldw	r2,8(r2)
   10cfc:	108000cc 	andi	r2,r2,3
   10d00:	10001826 	beq	r2,zero,10d64 <write+0xc8>
   10d04:	e0bffb17 	ldw	r2,-20(fp)
   10d08:	10800017 	ldw	r2,0(r2)
   10d0c:	10800617 	ldw	r2,24(r2)
   10d10:	10001426 	beq	r2,zero,10d64 <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   10d14:	e0bffb17 	ldw	r2,-20(fp)
   10d18:	10800017 	ldw	r2,0(r2)
   10d1c:	10800617 	ldw	r2,24(r2)
   10d20:	e0ffff17 	ldw	r3,-4(fp)
   10d24:	180d883a 	mov	r6,r3
   10d28:	e17ffe17 	ldw	r5,-8(fp)
   10d2c:	e13ffb17 	ldw	r4,-20(fp)
   10d30:	103ee83a 	callr	r2
   10d34:	e0bffc15 	stw	r2,-16(fp)
   10d38:	e0bffc17 	ldw	r2,-16(fp)
   10d3c:	1000070e 	bge	r2,zero,10d5c <write+0xc0>
      {
        ALT_ERRNO = -rval;
   10d40:	0010c540 	call	10c54 <alt_get_errno>
   10d44:	1007883a 	mov	r3,r2
   10d48:	e0bffc17 	ldw	r2,-16(fp)
   10d4c:	0085c83a 	sub	r2,zero,r2
   10d50:	18800015 	stw	r2,0(r3)
        return -1;
   10d54:	00bfffc4 	movi	r2,-1
   10d58:	00000c06 	br	10d8c <write+0xf0>
      }
      return rval;
   10d5c:	e0bffc17 	ldw	r2,-16(fp)
   10d60:	00000a06 	br	10d8c <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
   10d64:	0010c540 	call	10c54 <alt_get_errno>
   10d68:	1007883a 	mov	r3,r2
   10d6c:	00800344 	movi	r2,13
   10d70:	18800015 	stw	r2,0(r3)
   10d74:	00000406 	br	10d88 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   10d78:	0010c540 	call	10c54 <alt_get_errno>
   10d7c:	1007883a 	mov	r3,r2
   10d80:	00801444 	movi	r2,81
   10d84:	18800015 	stw	r2,0(r3)
  }
  return -1;
   10d88:	00bfffc4 	movi	r2,-1
}
   10d8c:	e037883a 	mov	sp,fp
   10d90:	dfc00117 	ldw	ra,4(sp)
   10d94:	df000017 	ldw	fp,0(sp)
   10d98:	dec00204 	addi	sp,sp,8
   10d9c:	f800283a 	ret
